[
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248880516",
            "author": "AmanuelAbel",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 26200,
            "submissionTime": 1709189940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248879690",
            "author": "AmanuelAbel",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1709189580
        },
        "acceptedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    buckets = list(map(int, input().split()))\r\n    \r\n    total_squares = sum(buckets)\r\n    side_length = int(total_squares ** 0.5) \r\n    \r\n    if side_length ** 2 == total_squares: \r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "\r\nt = int(input())\r\nfor _ in range(t):\r\n    num = int(input())\r\n    arr = list(map(int,input().split()))\r\n    x = sum(arr)\r\n    if x == 1:\r\n        print(\"YES\")\r\n        exit()\r\n    flag = True\r\n    for i in range(1,x//2):\r\n        if i*i == x:\r\n            flag = False\r\n            break\r\n    if flag:\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")    \r\n        \r\n        \r\n\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [16th token]\r\n"
        },
        "errorLine": 2,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248852320",
            "author": "vjudge.9",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1709175480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248839178",
            "author": "vjudge.9",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709167860
        },
        "acceptedCode": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n\n    if a == c:\n        print(b)\n    elif a == b:\n        print(c)\n    else:\n        print(a)\n \t\t   \t\t\t   \t\t\t   \t  \t\t\t\t \t \t\t",
        "rejectedCode": "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    if int(a) - int(b) == 0:\n        print(int(c))\n    elif int(a) - int(c) == 0:\n        print(int(b))\n    else:\n        print(int(a))\n    \ntest()\n\t \t    \t  \t    \t\t\t\t \t  \t  \t\t  \t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248844539",
            "author": "vjudge5",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709171220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248838629",
            "author": "vjudge5",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1709167440
        },
        "acceptedCode": "t = int(input())\n\n\nfor _ in range(t):\n    a,b,c = map(int,input().split())\n\n    if a == b:\n        print(c)\n    elif a == c:\n        print(b)\n    else:\n        print(a)\n\t\t\t\t \t \t \t\t \t \t   \t\t \t\t  \t\t\t\t\t\t",
        "rejectedCode": "numlst = input().split()\nif numlst[0] == numlst[1]:\n    print(numlst[2])\nelif numlst[0] == numlst[2]:\n    print(numlst[1])\nelse:\n    print(numlst[0])\n \t \t     \t\t   \t\t  \t\t \t \t \t\t  \t\t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248839498",
            "author": "bkifhr7",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709168040
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248839379",
            "author": "bkifhr7",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709167980
        },
        "acceptedCode": "for i in range(int(input())):\n    a, b, c = map(int, input().split())\n    if a == b:\n        print(c)\n    elif a == c:\n        print(b)\n    else:\n        print(a)\n \t\t\t \t \t\t \t \t \t \t\t\t\t\t  \t \t\t\t\t",
        "rejectedCode": "test_cases = 271\nwhile test_cases < 1 or test_cases > 270:\n    test_cases = int(input('Test cases: '))\n\nnums = []\n\nfor _ in range(test_cases):\n    row = '112'\n    while True:\n        row = input('Please enter 3 digits: ')\n        if row.isnumeric() and len(row) == 3:\n            if row[0] == row[1] and row[0] != row[2]:\n                nums.append(row[2])\n                break\n\n            elif row[0] == row[2] and row[0] != row[1]:\n                nums.append(row[1])\n                break\n\n            elif row[1] == row[2] and row[1] != row[0]:\n                nums.append(row[0])\n                break\n            else:\n                print('Please enter only 1 unique integer')\n        else:\n            print('Please enter only 3 digits between 0-9')\n\n        nums.append(row)\n \t  \t\t\t\t\t\t      \t \t \t\t\t\t   \t \t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "Test cases: Please enter 3 digits: Please enter only 3 digits between 0-9\r\nPlease enter 3 digits: Please enter only 3 digits between 0-9\r\nPlease enter 3 digits: Please enter only 3 digits between 0-9\r\nPlease enter 3 digits: Please enter only 3 digits between 0-9\r\nPlease enter 3 digits: Please enter only 3 digits between 0-9\r\nPlease enter 3 digits: Please enter only 3 digits between 0-9\r\nPlease enter 3 digits: Please enter only 3 digits between 0-9\r\nPlease enter 3 digits: Please enter only 3 digits between ...",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248841629",
            "author": "vjudge.8",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1709169480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248841011",
            "author": "vjudge.8",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1709169060
        },
        "acceptedCode": "n=int(input())\nfor i in range(n):\n  line=input()\n  lst=[]\n  lst=line.split()\n  a=int(lst[0])\n  b=int(lst[1])\n  c=int(lst[2])\n  if a==b:\n    print(c)\n  elif a==c:\n    print(b)\n  else:\n    print(a)\n\t\t    \t  \t \t\t\t   \t     \t\t\t  \t \t",
        "rejectedCode": "n=int(input())\nfor i in range(n):\n  line=input()\n  lst=[]\n  lst=line.split()\n  a=int(lst([0]))\n  b=int(lst([1]))\n  c=int(lst([2]))\n  if a==b:\n    print(c)\n  elif a==c:\n    print(b)\n  else:\n    print(a)\n\t \t\t\t  \t\t\t \t\t\t   \t\t   \t \t\t  \t\t\t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 6,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840749",
            "author": "bkifhr9",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709168940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840517",
            "author": "bkifhr9",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709168760
        },
        "acceptedCode": "t = int(input())\n\nfor r in range(t):\n    a,b,c = map(int, input().split())\n\n    if a == b:\n        print(c)\n    elif a == c:\n        print(b)\n    else:\n        print(a)\n\t\t \t \t   \t \t\t\t\t  \t   \t \t\t \t",
        "rejectedCode": "n = int(input())\n\nfor _ in range(n):\n    listofNum: list = input().split()\n    a, b, c = map(int, listofNum)\n    print(abs(a - b - c))\n\n  \t\t \t\t \t \t\t \t  \t  \t\t \t \t \t  \t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "3\r\n3\r\n6\r\n9\r\n0\r\n6\r\n8\r\n9\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '3'\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248841654",
            "author": "vjudge.10",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709169480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840686",
            "author": "vjudge.10",
            "lang": "PyPy 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1709168880
        },
        "acceptedCode": "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n\n\n    if a == b:\n        print(c)\n    elif a == c:\n        print(b)\n    else:\n        print(a) \n  \t\t\t   \t \t \t\t \t   \t \t \t\t \t\t\t \t",
        "rejectedCode": "\n\ndef check_different_int(list_of_numbers):\n    first_num = list_of_numbers[0]\n    second_num = list_of_numbers[1]\n    third_num = list_of_numbers[2]\n    if first_num == second_num:\n        return third_num\n    elif first_num == third_num:\n        return second_num\n    else:\n        return first_num\ninput_lines = int(input())\nfor i in range(input_lines):\n    input_line = input()\n    list_of_numbers = input_line.split()\n    print(check_different_int(list_of_numbers))\n        \n\n\t\t \t\t\t   \t  \t \t\t\t\t \t  \t \t \t\t \t\t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248841533",
            "author": "vjudge.2",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709169420
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840679",
            "author": "vjudge.2",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1709168880
        },
        "acceptedCode": "test_cases = int(input())\n\nfor _ in range(test_cases):\n    a, b, c = map(int, input().split())\n    if a == b:\n        print(c)\n\n    elif b == c:\n        print(a)\n\n    else:\n        print(b)\n  \t  \t\t \t  \t  \t\t \t \t\t \t \t\t \t\t \t",
        "rejectedCode": "n=int(input())\nfor i in range(n):\n  lst=[]\n  lst=input().split()\n  a=int(lst([0]))\n  b=int(lst([1]))\n  c=int(lst([2]))\n  if a==b:\n    print(c)\n  elif a==c:\n    print(b)\n  else:\n    print(a)\n \t \t\t\t\t\t\t \t    \t  \t\t  \t \t\t\t  \t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248841118",
            "author": "bkifhr6",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709169180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840437",
            "author": "bkifhr6",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709168700
        },
        "acceptedCode": "\nif __name__ == '__main__':\n    n = int(input())\n    for i in range(n):\n        a, b, c = map(int, input().split())\n        if a == b:\n            print(c)\n        else:\n            print([a, b][a == c])\n    \n \t \t \t \t\t \t \t\t   \t\t \t\t \t \t \t\t \t",
        "rejectedCode": "n=int(input())\nfor i in range(n):\n  lst=[]\n  lst=line.split()\n  a=int(lst([0]))\n  b=int(lst([1]))\n  c=int(lst([2]))\n  if a==b:\n    print(c)\n  elif a==c:\n    print(b)\n  else:\n    print(a)\n\t  \t\t \t\t\t\t \t\t \t\t  \t\t \t\t    \t\t \t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840653",
            "author": "vjudge1",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1709168880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840534",
            "author": "vjudge1",
            "lang": "Python 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1709168760
        },
        "acceptedCode": "n = int(input())\n\nfor _ in range(n):\n    a, b, c = map(int, input().split())\n\n    if a == b:\n        print(c)\n    elif a == c:\n        print(b)\n    else:\n        print(a)\n\t\t\t  \t\t\t \t\t\t \t  \t \t\t \t\t  \t\t\t\t\t",
        "rejectedCode": "def check_different_int(list_of_numbers):\n    first_num = list_of_numbers[0]\n    second_num = list_of_numbers[1]\n    third_num = list_of_numbers[2]\n    if first_num == second_num:\n        return third_num\n    elif first_num == third_num:\n        return second_num\n    else:\n        return first_num\ninput_lines = int(input())\nfor i in range(input_lines):\n    input_line = input()\n    list_of_numbers = input_line.split()\n    print(check_different_int(list_of_numbers))\n   \t       \t     \t \t\t\t  \t   \t\t\t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840202",
            "author": "vjudge.4",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1709168580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840071",
            "author": "vjudge.4",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709168460
        },
        "acceptedCode": "def find_unique_value(a, b, c):\n    if a == b:\n        return c\n    elif a == c:\n        return b\n    else:\n        return a\n\n# Input number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Input three digits\n    a, b, c = map(int, input().split())\n    \n    # Find and output the value that occurs exactly once\n    print(find_unique_value(a, b, c))\n\t \t    \t\t    \t   \t \t\t \t\t \t \t\t\t\t",
        "rejectedCode": "a, b, c = map(int, input().split())\n\nif a != b and a != c:\n    print(a)\nelif b != a and b != c:\n    print(b)\nelif c != a and c != b:\n    print(c)\n\t\t  \t \t   \t \t\t\t   \t   \t \t  \t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248839356",
            "author": "Anis.Abdusamad",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1709167980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "248839268",
            "author": "Anis.Abdusamad",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709167920
        },
        "acceptedCode": "from math import*\r\nfor _ in range(int(input())):\r\n    a=int(input())\r\n    n=list(map(int,input().split()))\r\n    s=sum(n)\r\n    w=sqrt(s)\r\n    p=(int(w))\r\n    if p**2==s:\r\n        print('YES')\r\n    else:\r\n        print('NO')\r\n",
        "rejectedCode": "from math import*\r\nfor _ in range(int(input())):\r\n    a=int(input())\r\n    n=list(map(int,input().split()))\r\n    s=sum(n)\r\n    w=sqrt(s)\r\n    p=(int(w))\r\n    if p**2==s:\r\n        print('YES')\r\n    else:\r\n        print('NO')\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "248820539",
            "author": "Hill_06",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1709146860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "248819945",
            "author": "Hill_06",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1709145900
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a = {'A': 0, 'B': 0, 'C': 0}\r\n    b = ''\r\n\r\n    for _ in range(3):\r\n        c = input().strip()\r\n        for i in c:\r\n            if i != '?':\r\n                a[i] += 1\r\n\r\n    for i, count in a.items():\r\n        if count == 2:\r\n            b = i\r\n            break\r\n    \r\n    print(b)",
        "rejectedCode": "for _ in range(int(input())):\r\n    b=['A','B','C']\r\n    for j in range(3):\r\n        a = list(map(str,input()))\r\n        if '?' in a:\r\n            for k in range(3):\r\n                if b[k] not in a:\r\n                    print(b[k])\r\n                    break\r\n            break",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 2,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248804768",
            "author": "daveshub",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 1700,
            "submissionTime": 1709132160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248804581",
            "author": "daveshub",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709132040
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    V, C = 'ae', 'bcd'\r\n    result = s[:2]\r\n    for i in range(2, n-1):\r\n        c1, c2 = s[i], s[i+1]\r\n        if c1 in C:\r\n            if c2 in V:\r\n                result += '.'\r\n        result += c1\r\n    print((result, result+s[-1])[n > 2])",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    V, C = 'ae', 'bcd'\r\n    result = s[:2]\r\n    for i in range(2, n-1):\r\n        c1, c2 = s[i], s[i+1]\r\n        if c1 in C:\r\n            if c2 in V:\r\n                result += '.'\r\n        result += c1\r\n    print(result+s[-1])",
        "failedTestCase": {
            "input": "100\r\n2\r\nba\r\n2\r\nca\r\n2\r\nda\r\n2\r\nbe\r\n2\r\nce\r\n2\r\nde\r\n3\r\nbab\r\n3\r\nbac\r\n3\r\nbad\r\n3\r\nbeb\r\n3\r\nbec\r\n3\r\nbed\r\n3\r\ncab\r\n3\r\ncac\r\n3\r\ncad\r\n3\r\nceb\r\n3\r\ncec\r\n3\r\nced\r\n3\r\ndab\r\n3\r\ndac\r\n3\r\ndad\r\n3\r\ndeb\r\n3\r\ndec\r\n3\r\nded\r\n4\r\nbaba\r\n4\r\nbaca\r\n4\r\nbada\r\n4\r\nbabe\r\n4\r\nbace\r\n4\r\nbade\r\n4\r\ncaba\r\n4\r\ncaca\r\n4\r\ncada\r\n4\r\ncabe\r\n4\r\ncace\r\n4\r\ncade\r\n4\r\ndaba\r\n4\r\ndaca\r\n4\r\ndada\r\n4\r\ndabe\r\n4\r\ndace\r\n4\r\ndade\r\n4\r\nbeba\r\n5\r\nbabba\r\n5\r\nbabca\r\n5\r\nbabda\r\n5\r\nbabbe\r\n5\r\nbabce\r\n5\r\nbabde\r\n5\r\nbacba\r\n5\r\nbacca\r\n5\r\nbacda\r\n5\r\nbacbe\r\n5\r\nbacce\r\n5\r\nbacde\r\n5\r\nbadba\r\n5\r\nbadca\r\n5\r\nbadda\r...",
            "output": "baa\r\ncaa\r\ndaa\r\nbee\r\ncee\r\ndee\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba...",
            "expectedOutput": "ba\r\nca\r\nda\r\nbe\r\nce\r\nde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba.dac\r\n...",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba', found: 'baa'\r\n"
        },
        "errorLine": 12,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "248801198",
            "author": "dsanurag520",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 33700,
            "submissionTime": 1709129820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "248799134",
            "author": "dsanurag520",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 600,
            "submissionTime": 1709128680
        },
        "acceptedCode": "from collections import defaultdict\r\nimport sys\r\nfrom random import getrandbits\r\n\r\nRANDOM = getrandbits(32)\r\ninput=sys.stdin.readline\r\n\r\nfor i in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    visited = set()\r\n    visited.add(0+RANDOM)\r\n    res = [0,0]\r\n    flag = False\r\n    for id,e in enumerate(a):\r\n        if id%2:\r\n            res[0]+=e\r\n        else:\r\n            res[1]+=e\r\n        if res[1]-res[0]+RANDOM in visited:\r\n            flag = True\r\n            break\r\n        visited.add(res[1]-res[0]+RANDOM)\r\n    if flag:\r\n        print('yes')\r\n    else:\r\n        print('no')",
        "rejectedCode": "from collections import defaultdict\r\nimport sys\r\nimport random\r\ninput=sys.stdin.readline\r\n\r\nfor i in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    random.shuffle(a)\r\n    visited = set()\r\n    visited.add(0)\r\n    res = [0,0]\r\n    flag = False\r\n    for id,e in enumerate(a):\r\n        if id%2:\r\n            res[0]+=e\r\n        else:\r\n            res[1]+=e\r\n        if res[1]-res[0] in visited:\r\n            flag = True\r\n            break\r\n        visited.add(res[1]-res[0])\r\n    if flag:\r\n        print('yes')\r\n    else:\r\n        print('no')",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "no\r\nyes\r\nyes\r\nyes\r\nyes\r\nyes\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 3,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "248797751",
            "author": "voidrunner7",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1709127840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "248797620",
            "author": "voidrunner7",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1709127780
        },
        "acceptedCode": "for i in range(int(input())):\r\n    x=input()\r\n    y=input()\r\n    z=input()\r\n    l=x+y+z\r\n    for k in l:\r\n        if l.count(k)==2:\r\n            print(k)\r\n            break",
        "rejectedCode": "for i in range(int(input())):\r\n    x=input()\r\n    y=input()\r\n    z=input()\r\n    l=x+y+z\r\n    print(l)\r\n    for k in l:\r\n        if l.count(k)==2:\r\n            print(k)\r\n            break",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "ABCC?BBCA\r\nA\r\nBCACA?ABC\r\nB\r\n?ABBCAABC\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'ABCC?BBCA'\r\n"
        },
        "errorLine": 6,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248772176",
            "author": "saadsbr",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 9600,
            "submissionTime": 1709116140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247642722",
            "author": "saadsbr",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708515780
        },
        "acceptedCode": "# D. Unnatural Language Processing\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    V = [\"a\", \"e\"]\r\n    syllables = []\r\n    i = n-1\r\n    while i > 0:\r\n        if s[i] in V:\r\n            syllables.append(s[i-1:i+1])\r\n            i -= 2\r\n        else:\r\n            syllables.append(s[i-2:i+1])\r\n            i -= 3\r\n    print(\".\".join(syllables[::-1]))\r\n",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    row1 = input()\r\n    row2 = input()\r\n    row3 = input()\r\n    if \"A\" not in row1 or \"A\" not in row2 or \"A\" not in row2:\r\n        print(\"A\")\r\n    elif \"B\" not in row1 or \"B\" not in row2 or \"B\" not in row2:\r\n        print(\"B\")\r\n    else:\r\n        print(\"C\")",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nC\r\nC\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nC\r\nC\r\nC\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nC\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nC\r\nC\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nC\r\nC\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nC\r\nC\r\nC\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nC\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nC\r\nC\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nC\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nC\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nC\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nC\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 8th words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248767825",
            "author": "sravan_03",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26200,
            "submissionTime": 1709114100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248767232",
            "author": "sravan_03",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1200,
            "submissionTime": 1709113800
        },
        "acceptedCode": "from math import isqrt\r\nt=int(input())\r\nfor tc in  range(t):\r\n\tn=int(input())\r\n\tsam=list(map(int,input().split()))\r\n\tans=sum(sam)\r\n\tif isqrt(ans)**2==ans:\r\n\t\tprint(\"YES\")\r\n\telse:\r\n\t\tprint('NO')\r\n\r\n\t\t",
        "rejectedCode": "t=int(input())\r\nfor tc in  range(t):\r\n\tn=int(input())\r\n\tsam=list(map(int,input().split()))\r\n\tans=sum(sam)\r\n\tc=0\r\n\tfor j in range(1,int(ans**0.5)+1):\r\n\t\tif j*j==ans:\r\n\t\t\tc+=1\r\n\t\t\tbreak\r\n\tif c==1:\r\n\t\tprint(\"YES\")\r\n\telse:\r\n\t\tprint(\"NO\")\r\n\t\t",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248732783",
            "author": "rahulraman_28",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709100720
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248732677",
            "author": "rahulraman_28",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1709100660
        },
        "acceptedCode": "for _ in range(int(input())) :\r\n    a,b,c=map(int,input().split())\r\n    print(a^b^c)",
        "rejectedCode": "for _ in range(int(input()) :\r\n    a,b,c=map(int,input().split())\r\n    print(a^b^c)",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "248714271",
            "author": "Dima__Sam",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1709092200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "248713490",
            "author": "Dima__Sam",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 92,
            "memory": 2100,
            "submissionTime": 1709091900
        },
        "acceptedCode": "e = int(input())\r\nfor i in range(e):\r\n    s1 = 0\r\n    s2 = 0\r\n    s3 = 0\r\n    a = input()\r\n    b = input()\r\n    c = input()\r\n    d = a + b + c\r\n    for g in range(len(d)):\r\n        if d[g] == \"A\":\r\n            s1 += 1\r\n    for k in range(len(d)):\r\n        if d[k] == \"B\":\r\n            s2 += 1\r\n    for l in range(len(d)):\r\n        if d[l] == \"C\":\r\n            s3 += 1\r\n    q = min(s1, s2, s3)\r\n    if q == s1:\r\n        print(\"A\")\r\n    elif q == s2:\r\n        print(\"B\")\r\n    else:\r\n        print(\"C\")",
        "rejectedCode": "e = int(input())\r\nfor i in range(e * 3):\r\n    s1 = 0\r\n    s2 = 0\r\n    s3 = 0\r\n    a = input()\r\n    b = input()\r\n    c = input()\r\n    d = a + b + c\r\n    for g in range(len(d)):\r\n        if d[g] == \"A\":\r\n            s1 += 1\r\n    for k in range(len(d)):\r\n        if d[g] == \"B\":\r\n            s2 += 1\r\n    for l in range(len(d)):\r\n        if d[g] == \"C\":\r\n            s3 += 1\r\n    q = min(s1, s2, s3)\r\n    if q == s1:\r\n        print(\"A\")\r\n    elif q == s2:\r\n        print(\"B\")\r\n    else:\r\n        print(\"C\")",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "B\r\nB\r\nB\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248712613",
            "author": "niemand3755",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1709091360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248709403",
            "author": "niemand3755",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709089620
        },
        "acceptedCode": "t = int(input())\nfor i in range(t):\n    a, b, c = map(int,input().split())\n    if a == b:\n        print(c)\n    elif a == c:\n        print(b)\n    else:\n        print(a)",
        "rejectedCode": "t = int(input())\nfor i in range(t):\n    a, b, c = map(int,input().split())\n    if a < b and a < c:\n        print(a)\n    elif b < a and b < c:\n        print(b)\n    else:\n        print(c)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n7\r\n0\r\n3\r\n2\r\n5\r\n5\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 6th numbers differ - expected: '6', found: '3'\r\n"
        },
        "errorLine": 4,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248713477",
            "author": "PyIVA",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 20200,
            "submissionTime": 1709091840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248712847",
            "author": "PyIVA",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1800,
            "submissionTime": 1709091480
        },
        "acceptedCode": "t = int(input())\r\n\r\nanswers = []\r\n\r\nfor i1 in range(t):\r\n    n = int(input())\r\n\r\n    s = input().split()\r\n\r\n    ss = 0\r\n\r\n    for e in s:\r\n        ss += int(e)\r\n\r\n    if int(ss ** 0.5) ** 2 == ss:\r\n        answers.append(\"Yes\")\r\n    else:\r\n        answers.append(\"No\")\r\n\r\nfor ans in answers:\r\n    print(ans)\r\n",
        "rejectedCode": "t = int(input())\r\n\r\npar = [0] * t\r\n\r\nfor i in range(t):\r\n    n = int(input())\r\n\r\n    r = 0\r\n\r\n    for e in input().split():\r\n        r += int(e)\r\n\r\n    par[i] = r\r\n\r\nfor i in par:\r\n    a = 0\r\n\r\n    while a * a < i:\r\n        a += 1\r\n\r\n    if a * a == i:\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248680486",
            "author": "aljipa",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 20200,
            "submissionTime": 1709067780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248680441",
            "author": "aljipa",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 264,
            "memory": 100,
            "submissionTime": 1709067720
        },
        "acceptedCode": "from math import sqrt, floor\n\n\nt = int(input())\nfor _ in range(t):\n    n, a = int(input()), (int(i) for i in input().split())\n    s = sum(a)\n    sq = floor(sqrt(s))\n    res = \"YES\" if sq * sq == s else \"NO\"\n    print(res)\n",
        "rejectedCode": "from math import sqrt\n\n\nt = int(input())\nfor _ in range(t):\n    n, a = int(input()), (int(i) for i in input().split())\n    s = sum(a)\n    sq = sqrt(s)\n    res = \"YES\" if sq * sq == s else \"NO\"\n    print(res)\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248492595",
            "author": "nissarshaik",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1709026020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248492307",
            "author": "nissarshaik",
            "lang": "PyPy 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709025900
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    (a,b,c)=map(int,input().split())\r\n    if a==b:\r\n        print(c)\r\n    elif b==c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    (a,b,c)=map(int,input().split())\r\n    if a==b:\r\n        print(c)\r\n    elif b==c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248491528",
            "author": "sadhvika_badri30",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1709025540
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248491468",
            "author": "sadhvika_badri30",
            "lang": "Python 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709025480
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    a,b,c=map(int,input().split())\r\n    if(a==b):\r\n        print(c)\r\n    elif(b==c):\r\n        print(a)\r\n    else:\r\n        print(b)",
        "rejectedCode": "t=int(input())\r\nfor i in range(1,t+1):\r\n    a,b,c=map(int,input().split())\r\n    if(a==b):\r\n        print(c)\r\n    elif(b==c):\r\n        print(a)\r\n    else:\r\n        print(b)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248480073",
            "author": "atharvakalele",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 265,
            "memory": 26200,
            "submissionTime": 1709020860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248479920",
            "author": "atharvakalele",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1709020800
        },
        "acceptedCode": "for t in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    total_sum = sum(a)  # Calculate the total sum of elements in the list\r\n\r\n    start = 1\r\n    end = int(1e9)\r\n    f = False\r\n\r\n    while start <= end:\r\n        mid = (start + end) // 2\r\n        if mid * mid > total_sum:\r\n            end = mid - 1\r\n        elif mid * mid < total_sum:\r\n            start = mid + 1\r\n        else:\r\n            f = True\r\n            break\r\n\r\n    if f:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "for t in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    sum=0\r\n    for i in range(n):\r\n        sum+=a[i]\r\n    start=1\r\n    end=(1e+9)\r\n    f = 0\r\n    while(start<=end):\r\n        mid = (start+(end-start)/2)\r\n        if(mid*mid>sum):end=mid-1\r\n        elif(mid*mid<sum):start=mid+1\r\n        else:\r\n            f=1\r\n            break\r\n    if(f):print(\"YES\")\r\n    else : print(\"NO\")\r\n    ",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 3,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "248461569",
            "author": "Muslim2003",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 26900,
            "submissionTime": 1709011500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "248461269",
            "author": "Muslim2003",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 34400,
            "submissionTime": 1709011320
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.buffer.readline\r\nfor i in range(int(input())):\r\n    n = int(input())\r\n    k = 0\r\n    m = sorted([0]+[k:=k+(j if i&1 else -j) for i, j in enumerate(map(int, input().split()))])\r\n    print('YES' if any(i==j for i, j in zip(m[1:], m)) else 'NO')",
        "rejectedCode": "import sys, os, io\r\nfrom collections import Counter as c\r\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\r\nfor i in range(int(input())):\r\n    n = int(input())\r\n    k = 0\r\n    m = [0]+[k:=k+(j if i&1 else -j) for i, j in enumerate(map(int, input().split()))]\r\n    print('YES' if max(c(m).values())>1 else 'NO')",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "248434879",
            "author": "laala",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 28800,
            "submissionTime": 1708996140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "248434608",
            "author": "laala",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33300,
            "submissionTime": 1708995960
        },
        "acceptedCode": "tc = int(input())\r\nfor _ in range(tc):\r\n  n = int(input())\r\n  ls = list(map(int,input().split()))\r\n  curr = 0\r\n  flag = 0\r\n  mp = set()\r\n  mp.add(0)\r\n  for i in range(n):\r\n    if(i%2 == 1):\r\n      curr -= ls[i]\r\n    else:\r\n      curr+=ls[i]\r\n    if(curr in mp):\r\n      flag = 1\r\n      break\r\n    else:\r\n      mp.add(curr)\r\n  if(flag == 0):\r\n    print(\"NO\")\r\n  else:\r\n    print(\"YES\")\r\n\r\n",
        "rejectedCode": "tc = int(input())\r\nfor _ in range(tc):\r\n  n = int(input())\r\n  ls = list(map(int,input().split()))\r\n  for i in range(n):\r\n      if(i%2 == 1):\r\n        ls[i] = -1*ls[i]\r\n  curr = 0\r\n  flag = 0\r\n  mp = set()\r\n  mp.add(0)\r\n  for i in range(n):\r\n    curr += ls[i]\r\n    if(curr in mp):\r\n      flag = 1\r\n      break\r\n    else:\r\n      mp.add(curr)\r\n  if(flag == 0):\r\n    print(\"NO\")\r\n  else:\r\n    print(\"YES\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 5,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248425948",
            "author": "srinii",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708989240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248425873",
            "author": "srinii",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708989180
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    a,b,c = map(int,input().split())\r\n    if(a==b and a!=c):\r\n        print(c)\r\n    elif(a==c and a!=b):\r\n        print(b)\r\n    else:\r\n        print(a)",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    a = int(input())\r\n    b = int(input())\r\n    c = int(input())\r\n    if(a==b and a!=c):\r\n        print(c)\r\n    elif(a==c and a!=b):\r\n        print(b)\r\n    else:\r\n        print(a)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248379614",
            "author": "mohd_fariq",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 300,
            "submissionTime": 1708947360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248379520",
            "author": "mohd_fariq",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1708947300
        },
        "acceptedCode": "from collections import Counter\r\nfor _ in range(int(input())):\r\n    l=list(map(int,input().split()))\r\n    h_map=Counter(l)\r\n    for i in h_map:\r\n        if h_map[i]==1:\r\n            print(i)\r\n            break\r\n    ",
        "rejectedCode": "from collections import Counter\r\nfor _ in range(int(input()):\r\n    l=list(map(int,input().split()))\r\n    h_map=Counter(l)\r\n    for i in h_map:\r\n        if h_map[i]==1:\r\n            print(i)\r\n            break\r\n    ",
        "failedTestCase": null,
        "errorLine": 2,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248364673",
            "author": "Jopson",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 23800,
            "submissionTime": 1708940760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248363971",
            "author": "Jopson",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12200,
            "submissionTime": 1708940400
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    word = input()\r\n    i = n - 1\r\n    res = []\r\n    while i > 0:\r\n        if word[i] in 'bcd':\r\n            res.append(word[i - 2: i + 1])\r\n            res.append('.')\r\n            i -= 3\r\n        else:\r\n            res.append(word[i - 1: i + 1])\r\n            res.append('.')\r\n            i -= 2\r\n    print(*res[::-1][1:], sep=\"\")",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    word = input()\r\n    i = n - 1\r\n    res = \"\"\r\n    while i > 0:\r\n        if word[i] in 'bcd':\r\n            res = '.' + word[i - 2: i + 1] + res\r\n            i -= 3\r\n        else:\r\n            res = '.' + word[i - 1: i + 1] + res\r\n            i -= 2\r\n    print(res[1:])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 5,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "248300177",
            "author": "1000chw",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 654,
            "memory": 44800,
            "submissionTime": 1708903260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "248299804",
            "author": "1000chw",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 4000,
            "memory": 128900,
            "submissionTime": 1708902900
        },
        "acceptedCode": "import sys\r\nfrom collections import defaultdict\r\nfrom heapq import heappop, heappush\r\ninput = sys.stdin.readline\r\nINF = float('inf')\r\n\r\nfor _ in range(int(input())):\r\n    n, m = map(int, input().split())\r\n    roads = defaultdict(list)\r\n    for _ in range(m):\r\n        u, v, w = map(int, input().split())\r\n        roads[u].append((v, w))\r\n        roads[v].append((u, w))\r\n    bikes = [0] + list(map(int, input().split()))\r\n    dp = [[INF]*1002 for _ in range(1001)]\r\n    dp[1][1001] = 0\r\n    pq = [(0, 1001, 1)]\r\n    ans = 0\r\n    while pq:\r\n        t, s, ind = heappop(pq)\r\n        if dp[ind][s] != t:\r\n            continue\r\n        if ind == n:\r\n            ans = t\r\n            break\r\n        if s > bikes[ind]:\r\n            s = bikes[ind]\r\n        for nc, w in roads[ind]:\r\n            if dp[nc][s] > t + s*w:\r\n                dp[nc][s] = t + s * w\r\n                heappush(pq, (t + s*w, s, nc))\r\n    print(ans)\r\n",
        "rejectedCode": "import sys\r\nfrom collections import defaultdict\r\nfrom heapq import heappop, heappush\r\ninput = sys.stdin.readline\r\nINF = float('inf')\r\n\r\nfor _ in range(int(input())):\r\n    n, m = map(int, input().split())\r\n    roads = defaultdict(list)\r\n    for _ in range(m):\r\n        u, v, w = map(int, input().split())\r\n        roads[u].append((v, w))\r\n        roads[v].append((u, w))\r\n    bikes = [0] + list(map(int, input().split()))\r\n\r\n    pq = [(0, 1, 1001)]\r\n    ans = 0\r\n    while pq:\r\n        t, ind, s = heappop(pq)\r\n        if ind == n:\r\n            ans = t\r\n            break\r\n        if s > bikes[ind]:\r\n            s = bikes[ind]\r\n        for nc, w in roads[ind]:\r\n            heappush(pq, (t + s*w, nc, s))\r\n    print(ans)\r\n",
        "failedTestCase": {
            "input": "100\r\n32 32\r\n27 19 57692\r\n3 30 29668\r\n8 27 23566\r\n12 9 73575\r\n16 21 87459\r\n11 18 81865\r\n10 3 49315\r\n7 23 52484\r\n17 25 28452\r\n1 20 14330\r\n26 10 62826\r\n26 19 40406\r\n6 29 76017\r\n13 18 26193\r\n21 2 53802\r\n20 25 16119\r\n9 2 9987\r\n1 5 23049\r\n15 7 77194\r\n31 6 72869\r\n22 31 20083\r\n15 5 23523\r\n12 32 76184\r\n4 14 88353\r\n8 11 86753\r\n14 29 24642\r\n22 28 53222\r\n24 4 99187\r\n17 16 94833\r\n23 24 22799\r\n28 30 39432\r\n4 9 75381\r\n711 634 597 278 665 815 211 92 854 819 631 865 621 798 632 416 189 159 193 321 572 239 905 521 388 374 3...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 15,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248287410",
            "author": "haleemborham3",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 78,
            "memory": 8800,
            "submissionTime": 1708881960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248174091",
            "author": "haleemborham3",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708798620
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=list(input())\r\n    for i in range(2,n):\r\n        if s[i] in \"ae\":\r\n            s[i-1]='.'+s[i-1]\r\n    print(\"\".join(s))       ",
        "rejectedCode": "def split_into_syllables(word):\r\n    syllables = []\r\n    i = 0\r\n    while i < len(word):\r\n        if i < len(word) - 2 and word[i] not in 'ae' and word[i+1] in 'ae' and word[i+2] not in 'ae':\r\n            syllables.append(word[i:i+2])\r\n            i += 2\r\n        else:\r\n            syllables.append(word[i])\r\n            i += 1\r\n    return '.'.join(syllables)\r\n\r\nt = int(input())\r\nwhile t:\r\n    t-=1\r\n    number = int(input())\r\n    x = input()\r\n    print(split_into_syllables(x))",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ce.d.ba.b\r\nba.b.a\r\nda.d.de.ca.be.d.da.d\r\nda.c\r\nda.c.da.c\r\nda.ba.b.ba.ba.ba.b.ba.b.ba.ba.b.b.a\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ba.ce.d.ba.b'\r\n"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248273334",
            "author": "mariamalkaseh",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 78,
            "memory": 11700,
            "submissionTime": 1708869900
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248270479",
            "author": "mariamalkaseh",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708868100
        },
        "acceptedCode": "test_cases = int(input())\r\ncon = {'d', 'b', 'c'}\r\nfor v in range (test_cases):\r\n    word_length = int(input())\r\n    word = list(input())\r\n    syllables = []\r\n    i = len(word) - 1\r\n    while i > 0:\r\n        letter = word[i]\r\n        if letter in con:\r\n            syllables.append(word[i-2] + word[i-1] + word[i])\r\n            i -= 3\r\n        else:\r\n            syllables.append(word[i-1] + word[i])\r\n            i -= 2\r\n    syllables = reversed(syllables)\r\n    print(\".\".join(syllables))",
        "rejectedCode": "test_cases = int(input())\r\ncon = {'d', 'b', 'c'}\r\nfor v in range (test_cases):\r\n    word_length = int(input())\r\n    word = list(input())\r\n    syllables = []\r\n    i = len(word) - 1\r\n    while i > 0:\r\n        letter = word[i]\r\n        if letter in con:\r\n            syllables.append(word[i-2] + word[i-1] + word[i])\r\n            i -= 3\r\n        else:\r\n            syllables.append(word[i-1] + word[i])\r\n            i -= 2\r\n    print(\".\".join(syllables))\r\n   ",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "bab.ced.ba\r\nba.ba\r\ndad.bed.ca.de.dad\r\ndac\r\ndac.dac\r\nba.bab.ba.bab.bab.ba.ba.bab.da\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'bab.ced.ba'\r\n"
        },
        "errorLine": 16,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248268858",
            "author": "el3zaby2002",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 8800,
            "submissionTime": 1708867200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248268801",
            "author": "el3zaby2002",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1708867140
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=list(input())\r\n    for i in range(2,n):\r\n        if s[i] in \"ae\":\r\n            s[i-1]='.'+s[i-1]\r\n    print(\"\".join(s))\r\n",
        "rejectedCode": "or _ in range(int(input())):\r\n    n=int(input())\r\n    s=list(input())\r\n    for i in range(2,n):\r\n        if s[i] in \"ae\":\r\n            s[i-1]='.'+s[i-1]\r\n    print(\"\".join(s))",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248263952",
            "author": "bhanupriya_6251",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1708864500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248263613",
            "author": "bhanupriya_6251",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708864320
        },
        "acceptedCode": "import math\r\nt = int(input())\r\nwhile t>0:\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    k = sum(a)\r\n    if k**.5%1==0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    t-=1\r\n    ",
        "rejectedCode": "import math\r\nt = int(input())\r\nwhile t>0:\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    k = sum(a)\r\n    if k.isqrt()==True:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    t-=1\r\n    ",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 7,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248247079",
            "author": "AbhinavSE",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 140,
            "memory": 1700,
            "submissionTime": 1708855080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248247021",
            "author": "AbhinavSE",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 10900,
            "submissionTime": 1708855020
        },
        "acceptedCode": "for t in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    syll = ''\r\n    form = ''\r\n    for i in range(n-1, -1, -1):\r\n        syll += s[i]\r\n        if s[i] in ['b', 'c', 'd']:\r\n            form = 'C' + form\r\n        else:\r\n            form = 'V' + form\r\n        if form in ['CVC', 'CV']:\r\n            form = ''\r\n            syll += '.'\r\n    print(syll[::-1][1:])",
        "rejectedCode": "for t in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    syll = ''\r\n    form = ''\r\n    for i in range(n-1, -1, -1):\r\n        syll += s[i]\r\n        if s[i] in ['b', 'c', 'd']:\r\n            form = 'C' + form\r\n        else:\r\n            form = 'V' + form\r\n        if form in ['CVC', 'CV']:\r\n            form = ''\r\n            syll += '.'\r\n    print(syll[::-1][1:])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248247274",
            "author": "i0stream",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 78,
            "memory": 11200,
            "submissionTime": 1708855140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248247135",
            "author": "i0stream",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708855080
        },
        "acceptedCode": "vow = {'a', 'e'}\ncon = {'b', 'c', 'd'}\n\n\ndef split_words(words):\n    res = []\n    i = len(words) - 1\n\n    while i > 0:\n        l = words[i]\n        if l in con:\n            res.append(words[i-2] + words[i-1] + words[i])\n            i -= 3\n        else:\n            res.append(words[i-1] + words[i])\n            i -= 2\n    return list(reversed(res))\n\n\n    \n\n\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    words = input()\n    print(\".\".join(split_words(list(words))))\n",
        "rejectedCode": "vow = {'a', 'e'}\ncon = {'b', 'c', 'd'}\n\ndef is_cv(letters: list[str]):\n    if len(letters) != 2:\n        return False\n    if letters[0] in con and letters[1] in vow:\n        return True\n    return False\n\ndef is_cvc(letters: list[str]):\n    if len(letters) != 3:\n        return False\n    if letters[0] in con and letters[1] in vow and letters[2] in con:\n        return True\n    return False\n\n\ndef split_words(words: list[str]) -> list[str]:\n    res: list[str] = []\n    i = len(words) - 1\n\n    while i > 0:\n        print(i)\n        l = words[i]\n        if l in con:\n            res.append(words[i-2] + words[i-1] + words[i])\n            i -= 3\n        else:\n            res.append(words[i-1] + words[i])\n            i -= 2\n    return list(reversed(res))\n\n\n    \n\n\n\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    words = input()\n    print(\".\".join(split_words(list(words))))\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248239670",
            "author": "youssefalaraby",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 2200,
            "submissionTime": 1708851060
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248236911",
            "author": "youssefalaraby",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708849680
        },
        "acceptedCode": "t=int(input())\r\nsol=[]\r\nx=0\r\nv=['a','e']\r\nwhile t:\r\n    lnth=int(input())\r\n    word=list(input())\r\n    tmp=''\r\n    while len(word)!=0:\r\n        if word[-1] in v:\r\n            x=2\r\n        else:\r\n            x=3\r\n        while x:\r\n            tmp+=word.pop()\r\n            x-=1\r\n        tmp+='.'\r\n    tmp=tmp[::-1][1:]             \r\n    sol.append(tmp)\r\n    t-=1\r\n\r\nfor solution in sol:\r\n    print(solution)",
        "rejectedCode": "t=int(input())\r\nsol=[]\r\nx=0\r\nv=['a','e']\r\nwhile t:\r\n    lnth=int(input())\r\n    word=list(input())\r\n    tmp=''\r\n    if lnth == 2 or lnth == 3:\r\n        sol.append(word)\r\n    else:\r\n        while len(word)!=0:\r\n            if word[-1] in v:\r\n                x=2\r\n            else:\r\n                x=3\r\n            while x:\r\n                tmp+=word.pop()\r\n                x-=1\r\n            tmp+='.'\r\n    tmp=tmp[::-1][1:]              \r\n    sol.append(tmp)\r\n    t-=1\r\n\r\nfor solution in sol:\r\n    print(solution)",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\n['d', 'a', 'c']\r\n\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 4th words differ - expected: 'dac', found: '['d','\r\n"
        },
        "errorLine": 9,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248238866",
            "author": "manojvn2612",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1708850640
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248238679",
            "author": "manojvn2612",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 100,
            "submissionTime": 1708850580
        },
        "acceptedCode": "import math\r\n\r\ndef can_build_square(n, squares):\r\n    total_squares = sum(squares)\r\n    side_length = int(math.sqrt(total_squares))\r\n    return side_length * side_length == total_squares\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    squares = list(map(int, input().split()))\r\n    if can_build_square(n, squares):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "import math\r\ndef can_make_square(square):\r\n    sum_sq = sum(square)\r\n    root = math.sqrt(sum_sq)\r\n    return True if root * root == sum_sq else False\r\n        \r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    sq = list(map(int,input().split(\" \")))\r\n    if can_make_square(sq):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "Yes\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 2,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248029661",
            "author": "quangthenpc",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 343,
            "memory": 25000,
            "submissionTime": 1708717320
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247957897",
            "author": "quangthenpc",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1708686000
        },
        "acceptedCode": "t = int(input())\r\nlst = [[[int(i) for i in input()], [int(j) for j in input().split()]] for _ in range(t)]\r\n\r\nimport math\r\n\r\nfor i in range(t):\r\n    a = sum(lst[i][1])\r\n    \r\n    if math.sqrt(a) % int(math.sqrt(a)) == 0.0:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "t = int(input())\r\nlst1 = [[[_ for _ in input()] for i in range(3)] for j in range(t)]\r\nlst2 = ['A', 'B', 'C']\r\n\r\n\r\nfor j in range(t):\r\n    a = 0\r\n    \r\n    for i in range(2):\r\n        if '?' in lst1[j][i]:\r\n            a = 1\r\n            \r\n            for _ in range(2):\r\n                if lst2[_] not in lst1[j][i]:\r\n                    print(lst2[_])\r\n                    break",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nB\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 2,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248217164",
            "author": "cat.lover",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 78,
            "memory": 8800,
            "submissionTime": 1708838760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248216516",
            "author": "cat.lover",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 7100,
            "submissionTime": 1708838400
        },
        "acceptedCode": "#https://codeforces.com/contest/1915/submission/247916890\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l1 = list(input())\n    for i in range(2,n):\n        if l1[i] in  \"ae\":\n            l1[i-1] = \".\" + l1[i-1]\n    print(\"\".join(l1))",
        "rejectedCode": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l1 = str(input())\n    l1 = [str(i) for i in l1]\n\n    dots = []\n    i = 0\n    while i < n-3:\n        #can be -4 too\n        if l1[i] in [\"a\", \"e\"] and l1[i+2] in [\"a\",\"e\"]:\n            dots.append(i)\n\n        if l1[i] in [\"a\", \"e\"] and l1[i+3] in [\"a\", \"e\"]:\n            dots.append(i+1)\n\n        i += 1\n    \n    while i < n - 2:\n        if l1[i] in [\"a\", \"e\"] and l1[i+2] in [\"a\",\"e\"]:\n            dots.append(i)\n        i += 1\n\n    # print(dots)\n    for i in range(len(dots)):\n        l1.insert(dots[i] + i+1, \".\")\n    print(\"\".join(l1))",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248170101",
            "author": "YetI705",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 21800,
            "submissionTime": 1708793160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248169515",
            "author": "YetI705",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 249,
            "memory": 8100,
            "submissionTime": 1708792500
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    x = list(input())\r\n    ans = []\r\n    while x:\r\n        y = x.pop()\r\n        ans.append(y)\r\n        if y in ['a', 'e']:\r\n            ans.append(x.pop())\r\n            ans.append('.')\r\n        else:\r\n            ans.append(x.pop())\r\n            ans.append(x.pop())\r\n            ans.append('.')\r\n    ans.pop()\r\n    print(''.join(ans[::-1]))\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    x = sum(list(map(int, input().split())))\r\n    if x ** 0.5 == int(x ** 0.5):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [8th token]\r\n"
        },
        "errorLine": 2,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248129226",
            "author": "_BREEZE_",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 1700,
            "submissionTime": 1708775460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248128177",
            "author": "_BREEZE_",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12900,
            "submissionTime": 1708775040
        },
        "acceptedCode": "def solve():\r\n    n = int(input())\r\n    a = input()\r\n    ans = ''\r\n    cur = ''\r\n    for i in range(n - 1):\r\n        cur += a[i]\r\n        if len(cur) == 3:\r\n            if a[i + 1] in 'bcd':\r\n                ans += cur\r\n                cur = ''\r\n            else:\r\n                ans += cur[:-1]\r\n                cur = cur[-1]\r\n            ans += '.'\r\n    print(ans + cur + a[-1])\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    solve()",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    a = input()\r\n    ans = ''\r\n    cur = ''\r\n    for i in range(n - 1):\r\n        cur += a[i]\r\n        if len(cur) == 3:\r\n            if a[i + 1] in 'bcd':\r\n                ans += cur\r\n                cur = ''\r\n            else:\r\n                ans += cur[:-1]\r\n                cur = cur[-1]\r\n            ans += '.'\r\n    print(ans + cur + a[-1])\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    solve()",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248128048",
            "author": "2022014789",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 17100,
            "submissionTime": 1708774980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248126798",
            "author": "2022014789",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 13200,
            "submissionTime": 1708774260
        },
        "acceptedCode": "def solve():\r\n    n = int(input())\r\n    a = list(input())\r\n    for i in range(2,n):\r\n        if a[i] in 'ae':\r\n            a[i - 1] = '.' + a[i - 1]\r\n    print(''.join(a))\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    solve()",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    a = input()\r\n    ans = ''\r\n    cur = ''\r\n    for i in range(n - 1):\r\n        cur += a[i]\r\n        if len(cur) == 3:\r\n            if a[i + 1] in 'bcd':\r\n                ans += cur\r\n                cur = ''\r\n            else:\r\n                ans += cur[:-1]\r\n                cur = cur[-1]\r\n            ans += '.'\r\n    print(ans + cur + a[-1])\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    solve()",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248127913",
            "author": "Yusif_Okasha",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 8800,
            "submissionTime": 1708774860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248121256",
            "author": "Yusif_Okasha",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 7200,
            "submissionTime": 1708771740
        },
        "acceptedCode": "TestCases = int(input())\r\nCons = {'b','c','d'} \r\nfor _ in range (TestCases) :\r\n    length = int(input())\r\n    word = input()\r\n    syllables = []\r\n    i = 0\r\n    while length > i+3 :\r\n       if word[i+2] in Cons and word[i+3] in Cons :\r\n          i+=3\r\n          syllable = word[i-3:i]\r\n       else :\r\n          i+=2\r\n          syllable = word[i-2:i] \r\n       syllables.append(syllable)\r\n     \r\n    syllables.append(word[i:])\r\n   \r\n    print(\".\".join(syllables))",
        "rejectedCode": "TestCases = int(input())\r\nCons = {'b','c','d'} \r\nVows = {'a','e'}\r\nfor _ in range (1,TestCases+1) :\r\n    lengh = input()\r\n    word = input()\r\n    syllables = []\r\n    while len(word) > 3 :\r\n       if word[2] in Cons and word[3] in Cons :\r\n          syllable = word[:3]\r\n          word = word[3:] \r\n       else :\r\n          syllable = word[:2] \r\n          word = word[2:] \r\n       syllables.append(syllable)\r\n     \r\n    syllables.append(word)\r\n   \r\n    print(\".\".join(syllables))",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "be.de.ba.ca.cad.ca.bab.cab.de.dac.ced.da.da.ceb.ba.ca.ca.ced.ba.ca.ce.ce.ce.da.ca.be.da.bad.ba.da.be.ceb.da.bab.ba.ba.ca.ca.ceb.ba.ba.bec.be.ba.bed.cac.be.ca.de.ded.de.beb.ba.dec.be.ba.dab.da.de.dad.ce.be.be.dab.cad.ce.ca.be.ba.ba.ba.de.da.ba.be.cab.de.de.de.ca.ca.ca.ca.bab.da.ce.ca.be.ca.dac.da.dad.cec.ce.ca.ca.ba.ca.dad.de.de.ce.ba.dec.ced.ba.bac.ce.ded.ce.de.deb.ba.cad.ce.ca.ca.de.be.da.ca.bed.deb.ba.ca.be.ce.be.de.be.ba.ba.ce.dad.bed.bac.ca.ba.be.dac.ca.ca.ca.bed.be.be.ce.da.dad.deb.bac.dac.da.ba.ce.de...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248118244",
            "author": "V1rence",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 1100,
            "submissionTime": 1708770480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "248117063",
            "author": "V1rence",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708769940
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    word = input()\r\n    word_syllables = ''\r\n    i = 0\r\n    while i < n:\r\n        if n - i == 2:\r\n            word_syllables += word[i] + word[i + 1]\r\n            break\r\n        if n - i == 3:\r\n            word_syllables += word[i] + word[i + 1] + word[i + 2]\r\n            break\r\n        if word[i + 3] == 'a' or word[i + 3] == 'e':\r\n            word_syllables += word[i] + word[i + 1] + '.'\r\n            i += 2\r\n        else:\r\n            word_syllables += word[i] + word[i + 1] + word[i + 2] + '.'\r\n            i += 3\r\n    print(word_syllables)",
        "rejectedCode": "import io,os\r\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    word = input()\r\n    word_syllables = ''\r\n    i = 0\r\n    while i < n:\r\n        if n - i == 2:\r\n            word_syllables += word[i] + word[i + 1]\r\n            break\r\n        if n - i == 3:\r\n            word_syllables += word[i] + word[i + 1] + word[i + 2]\r\n            break\r\n        if word[i + 3] == 'a' or word[i + 3] == 'e':\r\n            word_syllables += word[i] + word[i + 1] + '.'\r\n            i += 2\r\n        else:\r\n            word_syllables += word[i] + word[i + 1] + word[i + 2] + '.'\r\n            i += 3\r\n    print(word_syllables)",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248099084",
            "author": "depressed-_-",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1708762020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248098783",
            "author": "depressed-_-",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1708761900
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a, b, c = map(int, input().split())\r\n    if a != b and a != c:\r\n        print(a)\r\n    elif b != a and b != c:\r\n        print(b)\r\n    else:\r\n        print(c)",
        "rejectedCode": "for _ in range(int(input())):\r\n    a, b, c = map(int, input().split())\r\n    if a != b and a != c:\r\n        print(a)\r\n    if b != a and b != c:\r\n        print(b)\r\n    else:\r\n        print(c)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n2\r\n3\r\n6\r\n7\r\n8\r\n0\r\n6\r\n8\r\n5\r\n7\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '2'\r\n"
        },
        "errorLine": 5,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248054251",
            "author": "ImanAbbasi",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 26200,
            "submissionTime": 1708738500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248053860",
            "author": "ImanAbbasi",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 600,
            "submissionTime": 1708738320
        },
        "acceptedCode": "import math\n\ndef is_sqr(n):\n    root = math.isqrt(n)\n    return root * root == n\n\nn = int(input())\n\nfor _ in range(n):\n    a = int(input())\n    s = list(map(int, input().split()))\n    total_sum = sum(s)\n    \n    if is_sqr(total_sum):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "rejectedCode": "n=int(input())\n\ndef is_sqr(n):\n    for i in range(1,n+1):\n        if n/i==i:\n            return True\n    else:\n        return False\n\nfor i in range(n):\n    a=int(input())\n    s=input().split(\" \")\n    sum=0\n    for j in range(a):\n        sum+=int(s[j])\n    \n    if is_sqr(sum):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n\n",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "YES\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248053519",
            "author": "vamsireddykeesara123",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708738200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248053240",
            "author": "vamsireddykeesara123",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1708738080
        },
        "acceptedCode": "T=int(input())\r\nfor i in range(T):\r\n    a,b,c=map(int,input().split())\r\n    if(a!=b and b==c and c!=a):\r\n        print(a)\r\n    elif(b!=c and a==c and a!=b):\r\n        print(b)\r\n    else:\r\n        print(c)",
        "rejectedCode": "T=int(input())\r\nfor i in range(T):\r\n    a,b,c=map(int,input().split())\r\n    if a!=b and b==c and c!=a:\r\n        print(a)\r\n    elif b!=c and a==c b!=a:\r\n        print(b)\r\n    else:\r\n        print(c)",
        "failedTestCase": null,
        "errorLine": 4,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247994328",
            "author": "bhavanaanukanti",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1708692960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247992502",
            "author": "bhavanaanukanti",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708692240
        },
        "acceptedCode": "import math\r\nt =int(input())\r\nfor _ in range(t):\r\n    a = int(input())\r\n    s = list(map(int,input().split()))\r\n    #print(math.sqrt(sum(s)))\r\n    #print((sum(s)**1/4))\r\n    #print(sum(s))\r\n    #print(16**1/4)\r\n    if math.sqrt(sum(s)) == int(math.sqrt(sum(s))):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "import math\r\nt =int(input())\r\nfor _ in range(t):\r\n    a = int(input())\r\n    s = list(map(int,input().split()))\r\n    #print(math.sqrt(sum(s)))\r\n    #print((sum(s)**1/4))\r\n    #print(sum(s))\r\n    #print(16**1/4)\r\n    if math.sqrt(sum(s)) == int(sum(s)**1/4):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\nYES\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 10,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247957518",
            "author": "Ravi_Teja_N",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 26200,
            "submissionTime": 1708685940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247942377",
            "author": "Ravi_Teja_N",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 2,
            "runTime": 1000,
            "memory": 1300,
            "submissionTime": 1708684560
        },
        "acceptedCode": "import math\r\n\r\nt = int(input())\r\nwhile t > 0:\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    k = sum(a)\r\n    if math.sqrt(k) == round(math.sqrt(k)):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    t -= 1\r\n",
        "rejectedCode": "import math\r\n\r\nt = int(input())\r\nwhile t > 0:\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    c = []\r\n    k = sum(a)\r\n    for j in range(0, int(math.sqrt(10**9))):\r\n        c.append((j + 1) * (j + 1))\r\n\r\n    is_present = k in c\r\n    if is_present == True:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    t = t - 1\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247889225",
            "author": "bananaaa.phucc",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 400,
            "submissionTime": 1708679280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247710543",
            "author": "bananaaa.phucc",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708571040
        },
        "acceptedCode": "t = int(input())\r\nlst = [[int(i) for i in input().split()] for j in range(t)]\r\n\r\nfrom collections import Counter\r\nfor i in range(t):\r\n    a = Counter(lst[i])\r\n    print(min(a, key=a.get))",
        "rejectedCode": "t = int(input())\r\na = [sorted(int(i) for i in input().split()) for j in range(t)]\r\n    \r\n    \r\nfor j in range(t):\r\n    for i in range(2):\r\n        if i == 0:\r\n            if (a[j][i] != a[j][i+1]) and (a[j][i] != a[j][i+2]):\r\n                print(a[j][i])\r\n                break\r\n        elif i == 1:\r\n            if (a[j][i] != a[j][i-1]) and (a[j][i] != a[j][i+1]):\r\n                print(a[j][i])\r\n                break\r\n        elif i == 2:\r\n            if (a[j][i] != a[j][i-2]) and (a[j][i] != a[j][i-1]):\r\n                print(a[j][i])\r\n                break",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n7\r\n0\r\n5\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 3rd numbers differ - expected: '6', found: '7'\r\n"
        },
        "errorLine": 2,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248841497",
            "author": "bkifhr10",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709169360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247154516",
            "author": "bkifhr10",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708299120
        },
        "acceptedCode": "n = int(input())\n\nfor _ in range(n):\n    listofNum = input().split()\n    a, b, c = map(int, listofNum)\n    if a==b:\n        print(c)\n    elif b==c:\n        print(a)\n    else:\n        print(b)\n\n  \t\t   \t \t\t\t\t\t   \t\t\t\t\t\t \t\t   \t",
        "rejectedCode": "rows = 3\na = int(input())\nfor i in range(a):\n    array_2d = []\n    for j in range(3):\n        array_2d.append(list(map(str, input(\"\".format(i + 1)).split())))\n    count_A = sum(element == 'A' for row in array_2d for element in row)\n    count_B = sum(element == 'B' for row in array_2d for element in row)\n    if count_A == 2:\n        print(\"A\")\n    elif count_B == 2:\n        print(\"B\")\n    else:\n        print(\"C\")\n        \n   \t \t \t \t\t\t\t  \t\t\t\t  \t \t\t \t\t\t",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "C\r\nC\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248838720",
            "author": "vjudge2",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1709167500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245904611",
            "author": "vjudge2",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707658140
        },
        "acceptedCode": "n=int(input())\n\n\nfor i in range(n):\n    test=input().split( )\n    if test[0] ==test[1]:\n        print(test[2])\n    elif test[1]==test[2]:\n        print(test[0])\n    else:\n        print(test[1])\n \t \t \t  \t\t  \t\t\t\t\t\t \t \t \t \t   \t\t",
        "rejectedCode": "nm_cases = input() # number of test cases\nw_c = 0\ndef letter_anali(x):\n    if x == \"?\" and x != \"A\" and x != \"B\":\n        print(\"C\")\n    elif x == \"?\" and x != \"C\" and x != \"B\":\n        print(\"A\")\n    elif x == \"A\" or x == \"B\" or x == \"C\":\n        pass\n    else:\n        print(\"B\")\nwhile w_c < int(nm_cases):\n    a = input()\n    a = [i for i in a.split()] # we make the different lists with data\n    b = input()\n    b = [i for i in b.split()]\n    c = input()\n    c = [i for i in c.split()]\n    for x in a:\n        letter_anali(x)\n    for x in b:\n        letter_anali(x)\n    for x in c:\n        letter_anali(x)\n    w_c = w_c +1\n  \t\t\t \t\t  \t   \t \t  \t\t\t    \t\t",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "B\r\nB\r\nB\r\nB\r\nB\r\nB\r\nB\r\nB\r\nB\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'B'\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840480",
            "author": "vjudge4",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1709168760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246420062",
            "author": "vjudge4",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1707938880
        },
        "acceptedCode": "t = int(input())\n\nfor _ in range(t):\n    n1,n2,n3 = map(int, input().split())\n\n    if n1 == n2:\n        print(n3)\n    elif n2 == n3:\n        print(n1)\n    else:\n        print(n2)\n\n\t \t \t\t\t  \t\t \t   \t  \t\t   \t\t \t\t\t\t",
        "rejectedCode": "numProblems = int(input())\n\nletterSum = ord('A') + ord('B') + ord('C')\nfor i in range(numProblems):\n    ans = -1\n    for j in range(3):\n        row = input().split()\n        containsMissing = False\n        rowSum = 0\n        for c in row:\n            if c == '?':\n                containsMissing = True\n            else:\n                rowSum += ord(c)\n        if containsMissing:\n            ans = letterSum - rowSum\n\n    print(chr(ans))\n \t\t\t \t \t\t \t\t \t\t \t\t \t   \t \t\t  \t\t",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248840658",
            "author": "vjudge3",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1709168880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246419624",
            "author": "vjudge3",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707938220
        },
        "acceptedCode": "for _ in range(int(input())):\n    a, b, c = map(int, input().split())\n    if a == b:\n        print(c)\n    if a == c:\n        print(b)\n    if b == c:\n        print(a)\n\t   \t \t \t  \t  \t\t    \t   \t \t\t\t \t",
        "rejectedCode": "n = int(input())\n\nfor _ in range(n):\n    test_case = [int(x) for x in input().split()]\n        \n    if test_case[0] == test_case[1] or test_case[0] == test_case[2]:\n        \n        print(test_case[2])\n    \n    elif test_case[0] == test_case[2]:\n        \n        print(test_case[1])\n        \n    else:\n        \n        print(test_case[0])\n        \n        \n   \t\t         \t\t \t  \t \t\t  \t\t  \t",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n4\r\n6\r\n7\r\n9\r\n3\r\n2\r\n5\r\n5\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '4'\r\n"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248838295",
            "author": "bkifhr8",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1709167200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245924268",
            "author": "bkifhr8",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707674220
        },
        "acceptedCode": "t = int(input())\n\nfor i in range(t):\n  a,b,c=(int(x) for x in input().split())\n  if a==b:\n    print(c)\n  elif a==c:\n    print(b)\n  else:\n    print(a)\n \t\t\t\t\t \t \t \t\t \t\t \t\t\t\t\t\t\t\t\t\t\t \t\t",
        "rejectedCode": "nm_cases = input() # number of test cases\nw_c = 0\nconst_ls = [\"A\",\"B\",\"C\"] # constant lsit for comparing between input and letters\n# it'll help to know wich letter is missing in the array\nf_c = 0\n\nwhile w_c < int(nm_cases):\n    a = input() \n    b = input()\n    c = input()\n    d = set(b) & set(const_ls) # we make a set of both of the lists that will contain matches only\n    for i in range(0,3):\n        print(f_c)\n        if f_c == 0:\n            e = [i for i in a] # we make the different lists with data\n            print(e, \" this is first condition\")\n        elif f_c == 1:\n            e = [i for i in b]\n            print(e, \" this is second condition\")\n        else:\n            e = [i for i in c]\n            print(e, \" this is third condition\")\n        f_c = f_c + 1\n        d = set(e) & set(const_ls) # for making intersections of lists to know what value is not in both\n        # we can do a substraction between both of the sets.\n        print(d, \" this is the set\")\n        if \"A\" in d and \"B\" in d and \"C\" in d: # all the letters match\n            pass\n        elif \"A\" in d and \"B\" in d and \"C\" not in d:\n            print(\"C\")\n            d.clear()\n            break\n        elif \"A\" in d and \"C\" in d and \"B\" not in d:\n            print(\"B\")\n            d.clear()\n            break\n        else:\n            print(\"A\")\n            d.clear()\n            break\n    f_c = 0\n    w_c = w_c +1\n\t  \t\t\t   \t\t  \t\t \t\t\t      \t  \t",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "0\r\n['A', 'B', 'C']  this is first condition\r\n{'B', 'C', 'A'}  this is the set\r\n1\r\n['C', '?', 'B']  this is second condition\r\n{'B', 'C'}  this is the set\r\nA\r\n0\r\n['B', 'C', 'A']  this is first condition\r\n{'B', 'C', 'A'}  this is the set\r\n1\r\n['C', 'A', '?']  this is second condition\r\n{'C', 'A'}  this is the set\r\nB\r\n0\r\n['?', 'A', 'B']  this is first condition\r\n{'B', 'A'}  this is the set\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: '0'\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248781940",
            "author": "ZahraAhad_SundarSTEM",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1709120460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246655951",
            "author": "ZahraAhad_SundarSTEM",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708066800
        },
        "acceptedCode": "for _ in range(int(input())):\r\n\tlist_ = list(map(int, input().split()))\r\n\tfor i in list_:\r\n\t\tif list_.count(i)==1:\r\n\t\t\t\tprint(i)\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = input()\r\n    if n ==2 or n ==3:\r\n        print(a)\r\n    else:\r\n        v = ['a', 'e']\r\n        c = ['b', 'c', 'd']\r\n        syll =[]\r\n        i =0\r\n        while i<n:\r\n            if a[i] in c:\r\n                if i+1< n and a[i+1] in v:\r\n                    syll.append(a[i:i+2])\r\n                    i+=2\r\n                else:\r\n                    syll.append(a[i:i+3])\r\n                    i+=3\r\n        print(\".\".join(syll))\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ce.dba.b\r\nba.ba\r\nda.dde.ca.be.dda.d\r\ndac\r\nda.cda.c\r\nda.ba.bba.ba.ba.bba.bba.ba.bba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ba.ce.dba.b'\r\n"
        },
        "errorLine": 2,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248723960",
            "author": "Glooorp",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1709096760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240194239",
            "author": "Glooorp",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 93,
            "memory": 0,
            "submissionTime": 1704333540
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    a, b, c = map(int, input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "rejectedCode": "from math import sqrt\r\nt = int(input())\r\nfor i in range(t):\r\n    n, s = input().split(), 0\r\n    for i in n:\r\n        s += int(i)\r\n    if sqrt(s) == int(sqrt(s)):\r\n        print('yEs')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nyEs\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nyEs\r\nNO\r\nyEs\r\nyEs\r\nNO\r\nNO\r\nNO\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nNO\r\nyEs\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nNO\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nNO\r\nyEs\r\nNO\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nNO\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nNO\r\nyEs\r\nNO\r\nyEs\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nyEs\r\nNO\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [8th token]\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "248473370",
            "author": "adithya1207",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 265,
            "memory": 28600,
            "submissionTime": 1709017620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239603710",
            "author": "adithya1207",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 34400,
            "submissionTime": 1703918280
        },
        "acceptedCode": "from bisect import *\r\nimport sys\r\nfrom collections import *\r\nfrom functools import *\r\nfrom heapq import *\r\nfrom itertools import *\r\nfrom math import *\r\nfrom operator import *\r\nfrom types import *\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nprint = lambda *a, sep=\" \", end=\"\\n\": sys.stdout.write(sep.join(map(str, a)) + end)\r\ndebug = lambda *a: sys.stderr.write(\" \".join(map(str, a)) + \"\\n\")\r\n\r\nMOD = (10**9)+7\r\n\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        else:\r\n            to = f(*args, **kwargs)\r\n            while True:\r\n                if type(to) is GeneratorType:\r\n                    stack.append(to)\r\n                    to = next(to)\r\n                else:\r\n                    stack.pop()\r\n                    if not stack:\r\n                        break\r\n                    to = stack[-1].send(to)\r\n            return to\r\n \r\n    return wrappedfunc\r\n\r\ndef prefixSum(arr):\r\n    n=len(arr)\r\n    if(n==0):\r\n        return []\r\n    ps = [0] * n\r\n    ps[0] =arr[0]\r\n    for i in range(1,n):\r\n        ps[i]=arr[i]+ps[i-1]\r\n    return ps\r\ndef suffixSum(arr):\r\n    n = len(arr)\r\n    if(n==0):\r\n        return []\r\n    ss = [0]*n\r\n    ss[-1] = arr[-1]\r\n    for i in range(n-2,-1,-1):\r\n        ss[i]=arr[i]+ss[i+1]\r\n    return ss\r\ndef factors(n):\r\n    return set(x for tup in ([i, n//i] for i in range(1, int(n**0.5)+1) if n % i == 0) for x in tup)\r\ndef sumDigits(no):\r\n    return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10)) \r\ndef inde(arr):\r\n    ind = {}\r\n    for i in range(len(arr)):\r\n        ind[arr[i]]=i\r\n    return ind\r\ndef freq(arr):\r\n    d = {}\r\n    for i in arr:\r\n        if(i in d):\r\n            d[i]+=1\r\n        else:\r\n            d[i]=1\r\n    return d\r\ndef isPrime(num):\r\n    if(num > 1):\r\n        for i in range(2,int(sqrt(num))+1):\r\n            if (num % i == 0):\r\n                return False\r\n        return True\r\n    else:\r\n        return False\r\ndef cbrt(num):\r\n    return pow(num,1/3)\r\ndef isSorted(arr):\r\n    is_sorted = all(a <= b for a, b in zip(arr, arr[1:]))\r\n    return is_sorted\r\n    \r\ndef gcdArray(nums):\r\n    \r\n    if(len(nums)==1):\r\n        return nums[0]\r\n        \r\n    div = gcd(nums[0],nums[1])\r\n    if(len(nums)==2):\r\n        return div\r\n    for i in range(1,len(nums)-1):\r\n        div = gcd(div,nums[i+1])\r\n        if(div == 1):\r\n            return div\r\n    return div\r\n    \r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    \r\n    for i in range(0, n, 2):\r\n        a[i] = -a[i]\r\n    \r\n    s = set()\r\n    s.add(a[0])\r\n    ans = 'NO'\r\n    for i in range(1,n):\r\n        a[i]+=a[i-1]\r\n        if(a[i]==0):\r\n            ans = 'YES'\r\n            break\r\n        elif(a[i] in s):\r\n            ans = 'YES'\r\n            break\r\n        else:\r\n            s.add(a[i])\r\n    print(ans)\r\n            \r\n            \r\n        \r\n    ",
        "rejectedCode": "import sys\r\n\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nprint = lambda *a, sep=\" \", end=\"\\n\": sys.stdout.write(sep.join(map(str, a)) + end)\r\ndebug = lambda *a: sys.stderr.write(\" \".join(map(str, a)) + \"\\n\")\r\nflush = sys.stdout.flush\r\n \r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    \r\n    for i in range(0, n, 2):\r\n        a[i] = -a[i]\r\n    \r\n    pref = [0]\r\n    for num in a:\r\n        pref.append(pref[-1] + num)\r\n    \r\n    s = set(pref)\r\n    \r\n    if len(s) != len(pref):\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "248445909",
            "author": "D_coder22",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 904,
            "memory": 20500,
            "submissionTime": 1709002920
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239816958",
            "author": "D_coder22",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 35400,
            "submissionTime": 1704024360
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\nI=lambda:[*map(int,input().split())]\r\nrr=range\r\nt=int(input())\r\nfrom heapq import heapify,heappop,heappush\r\nfor te in rr(t):\r\n    def solve():\r\n        n,m=I()\r\n        g=[[] for _ in rr(n+1)]\r\n        for _ in rr(m):\r\n            u,v,w=I()\r\n            g[u].append((v,w))\r\n            g[v].append((u,w))\r\n        s=[0]+I()\r\n        d=[[10**12]*(max(s)+1) for _ in rr(n+1)]\r\n        q=[(0,1,s[1])]\r\n        heapify(q)\r\n        while q:\r\n            dis,v,ss=heappop(q)\r\n            # print(dis,v,ss)\r\n            if d[v][ss]<dis:continue\r\n            for ch,ww in g[v]:\r\n                if d[ch][ss]>dis+ww*ss:\r\n                    d[ch][ss]=dis+ww*ss\r\n                    heappush(q,(dis+ww*ss,ch,min(ss,s[ch])))\r\n        print(min(d[n]))\r\n    solve()",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int,input().split()))\r\n    p = [0]\r\n    for i in range(n):\r\n        p += [p[-1]+(-1)**i*l[i]]\r\n    ans = 'YES'\r\n    if len({*p})>n:\r\n        ans = 'NO'\r\n    print(ans)\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248375501",
            "author": "sarang.n.m",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 436,
            "memory": 26200,
            "submissionTime": 1708945440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240859911",
            "author": "sarang.n.m",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704723480
        },
        "acceptedCode": "for _ in range(int(input())):\r\n  n = int(input())\r\n  l =list(map(int,input().split()))\r\n  if round(sum(l)**0.5)==sum(l)**0.5:\r\n    print(\"YES\")\r\n  else:\r\n    print(\"NO\")",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    A=input(\"Enter: \")\r\n    a=A[0]\r\n    b=A[2]\r\n    c=A[4]\r\n\r\n    if a==b:\r\n        print(c)\r\n    elif b==c:\r\n        print(a)\r\n    elif c==a:\r\n        print(b)\r\n    \r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "Enter: 1\r\nEnter: 3\r\nEnter: 6\r\nEnter: 7\r\nEnter: 0\r\nEnter: 6\r\nEnter: 8\r\nEnter: 5\r\nEnter: 5\r\nEnter: 7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong output format Expected integer, but \"Enter:\" found\r\n"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248366778",
            "author": "aryan28g",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26200,
            "submissionTime": 1708941600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245817274",
            "author": "aryan28g",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707628020
        },
        "acceptedCode": "import math\r\n\r\ndef can_build_square(n, squares):\r\n    total_squares = sum(squares)\r\n    side_length = int(math.sqrt(total_squares))\r\n    return side_length * side_length == total_squares\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    squares = list(map(int, input().split()))\r\n    \r\n    if can_build_square(n, squares):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    word = input()\r\n    \r\n    syllables = []\r\n    i = 0\r\n    \r\n    while i < n:\r\n        if i < n - 2 and word[i] in 'bcd' and word[i+1] in 'ae' and word[i+2] in 'bcd':\r\n            syllables.append(word[i:i+3])\r\n            i += 3\r\n        else:\r\n            syllables.append(word[i])\r\n            i += 1\r\n    \r\n    print('.'.join(syllables))\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "bac.e.d.bab\r\nbab.a\r\ndad.dec.a.bed.dad\r\ndac\r\ndac.dac\r\ndab.a.b.bab.a.bab.bab.bab.a.b.b.a\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'bac.e.d.bab'\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248364905",
            "author": "YamOCHca",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 592,
            "memory": 32000,
            "submissionTime": 1708940820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240869765",
            "author": "YamOCHca",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33400,
            "submissionTime": 1704734220
        },
        "acceptedCode": "import sys\r\n# from collections import defaultdict\r\n\r\nimport math\r\n# import queue\r\n# import time\r\n# import random\r\n# from collections import deque\r\n# from functools import lru_cache\r\n# # sys.setrecursionlimit(200000)\r\n\r\n\r\n# sys.stdin = open('cubes.in')\r\n# sys.stdout = open('cubes.out', 'w')\r\n# input = sys.stdin.readline\r\n\r\n\r\n# print = sys.stdout.write\r\n\r\n\r\ndef solve():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = sum(a)\r\n    x = int(math.sqrt(s))\r\n    if x * x == s:\r\n        print('Yes')\r\n    else:\r\n        print('No')\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()\r\n'''\r\n2\r\n0 -179\r\n0 179\r\n'''\r\n",
        "rejectedCode": "import sys\r\nimport math\r\nimport queue\r\nimport time\r\nimport random\r\nfrom functools import lru_cache\r\nsys.setrecursionlimit(2000)\r\n\r\n\r\n# sys.stdin = open('hui.txt')\r\n# sys.stdout = open('cordon.out', 'w')\r\ninput = sys.stdin.readline\r\n\r\n\r\ndef solve():\r\n    ss = {0}\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = 0\r\n    for i in range(n):\r\n        if i & 1:\r\n            s -= a[i]\r\n        else:\r\n            s += a[i]\r\n        if s in ss:\r\n            print('YES')\r\n            return\r\n        ss.add(s)\r\n    s = 0\r\n    ss = {0}\r\n    for i in range(1, n):\r\n        if i & 1:\r\n            s += a[i]\r\n        else:\r\n            s -= a[i]\r\n        if s in ss:\r\n            pritn('YES')\r\n            return\r\n        ss.add(s)\r\n    print('NO')\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "248107360",
            "author": "CLARIDAZZ",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1708765860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243818643",
            "author": "CLARIDAZZ",
            "lang": "Python 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1706449260
        },
        "acceptedCode": "import math\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    b = sum(a)\r\n    if b > 0 and int(math.sqrt(b)) ** 2 == b:\r\n        print(\"yes\")\r\n    else:\r\n        print(\"no\")\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    for j in range(3):\r\n        a=input()\r\n        if \"A\" not in a:\r\n            print(\"A\")\r\n        if \"B\" not in a:\r\n            print(\"B\")\r\n        if \"C\" not in a:\r\n            print(\"C\")\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "248021937",
            "author": "CarlosAlcaraz",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1708707960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245537692",
            "author": "CarlosAlcaraz",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 3,
            "runTime": 124,
            "memory": 8400,
            "submissionTime": 1707422040
        },
        "acceptedCode": "t = int(input())\n\n\ndef solve(a, b, c):\n    if a == b:\n        return c\n    elif a == c:\n        return b\n    elif b == c:\n        return a\n\n\nfor _ in range(t):\n    arr = [int(i) for i in input().split()]\n    res = solve(*arr)\n    print(res)",
        "rejectedCode": "t = int(input())\n\n\ndef is_vowel(char):\n    return char in \"ae\"\n\n\ndef helper(i, s, word_so_far):\n    if i == len(s):\n        print(\".\".join(word_so_far))\n        return\n    \n    if is_vowel(s[i]):\n        return\n    \n    if i <= len(s) - 3:\n        if not is_vowel(s[i]) and is_vowel(s[i+1]):\n            word_so_far.append(s[i] + s[i+1])\n            helper(i + 2, s, word_so_far)\n            word_so_far.pop()\n        if not is_vowel(s[i]) and is_vowel(s[i+1]) and not is_vowel(s[i+2]):\n            word_so_far.append(s[i] + s[i+1] + s[i+2])\n            helper(i + 3, s, word_so_far)\n            word_so_far.pop()\n    elif i <= len(s) - 2:\n        if not is_vowel(s[i]) and is_vowel(s[i+1]):\n            word_so_far.append(s[i] + s[i+1])\n            helper(i + 2, s, word_so_far)\n            word_so_far.pop()\n\n\ndef solve(s):\n    helper(0, s, [])\n\n\nfor _ in range(t):\n    n = int(input())\n    s = input()\n\n    solve(s)\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247837118",
            "author": "LamHao164",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708653120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243880188",
            "author": "LamHao164",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1706499660
        },
        "acceptedCode": "def solve():\r\n    a, b, c = map(int, input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        solve()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "def solve():\r\n    a = []\r\n    for i in range(3):\r\n        x = int(input())\r\n        a.append(x)\r\n    if(a[0]==a[1]): print(a[2])\r\n    elif (a[0]==a[2]): print(a[1])\r\n    else: print(a[0])\r\n\r\ntest_case = int(input())\r\nfor i in range(test_case):\r\n    solve()",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247999139",
            "author": "yohannesmengistie634",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 92,
            "memory": 9500,
            "submissionTime": 1708694940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244842716",
            "author": "yohannesmengistie634",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707042660
        },
        "acceptedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    vow = \"ae\"\r\n    s = input()\r\n    \r\n    ans = []\r\n    i = n-1\r\n    while i > -1:\r\n        if s[i] in vow:\r\n            ans.append(s[i-1:i+1])\r\n            i -=2\r\n        else:\r\n            ans.append(s[i-2:i+1] )\r\n            i -=3\r\n        \r\n    ans = ans[::-1]\r\n    ans = \".\".join(ans)\r\n    print(ans)\r\n            ",
        "rejectedCode": "for _ in range(int(input())):\r\n    dic = {\"A\":1,\"B\":1,\"C\":1}\r\n    flag = False\r\n    for i in range(3):\r\n        a = input()\r\n        if \"?\" in a:\r\n            for j in a:\r\n                if j in dic:\r\n                   del dic[j]\r\n            for key in dic:\r\n                print(key)\r\n                flag  = True\r\n                break\r\n        if flag:\r\n            break\r\n            ",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247793307",
            "author": "SapperBeret",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 17600,
            "submissionTime": 1708612920
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247793100",
            "author": "SapperBeret",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1708612800
        },
        "acceptedCode": "import re\r\nfor s in[*open(0)][2::2]:print(re.sub('(?!^)(.(a|e))',r'.\\1',s))",
        "rejectedCode": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nt= int(input())\r\nfor _ in range(t):\r\n    x=int(input())\r\n    # listy=list(map(int,input().split()))\r\n    stringy=input()\r\n    ans=stringy[0]\r\n    C=0\r\n    # V=0\r\n    if(len(stringy)<4):\r\n        print(stringy)\r\n\r\n    else:\r\n        for i in range(1,len(stringy)-2):\r\n\r\n            if(stringy[i]==\"c\" or stringy[i]==\"b\" or stringy[i]==\"d\"):\r\n                # ans+=stringy[i]\r\n                pass\r\n                # # C+=1\r\n                # if(stringy[i+1]==\"c\" or stringy[i+1]==\"b\" or stringy[i+1]==\"d\"):\r\n                #     ans+=stringy[i]\r\n                #     ans+=\".\"\r\n                # else:\r\n                #     ans+=stringy[i]\r\n                    \r\n            # elif(stringy[i]==\"a\" or stringy[i]==\"e\"):\r\n            else:\r\n                # V+=1\r\n                if(stringy[i+2]==\"c\" or stringy[i+2]==\"b\" or stringy[i+2]==\"d\"):\r\n                    ans+=stringy[i]\r\n                    ans+=stringy[i+1]\r\n                    ans+=\".\"\r\n                    ans+=stringy[i+2]\r\n                    i+=1\r\n                    C=1\r\n                    \r\n                else:    \r\n                    ans+=stringy[i]\r\n                    ans+=\".\"\r\n                    ans+=stringy[i+1]\r\n                    \r\n                    i+=1\r\n                    C=0\r\n                \r\n        if(C):\r\n            if(stringy[-1]==\"c\" or stringy[-1]==\"b\" or stringy[-1]==\"d\"):\r\n                print(ans+stringy[-2]+stringy[-1])\r\n            else:\r\n                print(ans+stringy[-1])\r\n        else:\r\n            print(ans+stringy[-1])",
        "failedTestCase": {
            "input": "100\r\n2\r\nba\r\n2\r\nca\r\n2\r\nda\r\n2\r\nbe\r\n2\r\nce\r\n2\r\nde\r\n3\r\nbab\r\n3\r\nbac\r\n3\r\nbad\r\n3\r\nbeb\r\n3\r\nbec\r\n3\r\nbed\r\n3\r\ncab\r\n3\r\ncac\r\n3\r\ncad\r\n3\r\nceb\r\n3\r\ncec\r\n3\r\nced\r\n3\r\ndab\r\n3\r\ndac\r\n3\r\ndad\r\n3\r\ndeb\r\n3\r\ndec\r\n3\r\nded\r\n4\r\nbaba\r\n4\r\nbaca\r\n4\r\nbada\r\n4\r\nbabe\r\n4\r\nbace\r\n4\r\nbade\r\n4\r\ncaba\r\n4\r\ncaca\r\n4\r\ncada\r\n4\r\ncabe\r\n4\r\ncace\r\n4\r\ncade\r\n4\r\ndaba\r\n4\r\ndaca\r\n4\r\ndada\r\n4\r\ndabe\r\n4\r\ndace\r\n4\r\ndade\r\n4\r\nbeba\r\n5\r\nbabba\r\n5\r\nbabca\r\n5\r\nbabda\r\n5\r\nbabbe\r\n5\r\nbabce\r\n5\r\nbabde\r\n5\r\nbacba\r\n5\r\nbacca\r\n5\r\nbacda\r\n5\r\nbacbe\r\n5\r\nbacce\r\n5\r\nbacde\r\n5\r\nbadba\r\n5\r\nbadca\r\n5\r\nbadda\r...",
            "output": "ba\r\nca\r\nda\r\nbe\r\nce\r\nde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bb\r\nba.bc\r\nba.bd\r\nba.bb\r\nba.bc\r\nba.bd\r\nba.cb\r\nba.cc\r\nba.cd\r\nba.cb\r\nba.cc\r\nba.cd\r\nba.db\r\nba.dc\r\nba.dd\r\nba.db\r\n...",
            "expectedOutput": "ba\r\nca\r\nda\r\nbe\r\nce\r\nde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba.dac\r\n...",
            "CheckerComment": "wrong answer 63rd words differ - expected: 'ba.bab', found: 'ba.bb'\r\n"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247778053",
            "author": "sandroberidze65",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708604340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247776539",
            "author": "sandroberidze65",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708603620
        },
        "acceptedCode": "t= int(input())\r\n\r\nfor l in range(0,t):\r\n        a,b,c=map(int,input().split())\r\n        if a==b:\r\n            print(c)\r\n        elif a==c:\r\n            print(b)\r\n        else:\r\n            print(a)\r\n",
        "rejectedCode": "t= int(input())\r\n\r\nfor l in range(0,t):\r\n        a=int(input())\r\n        b=int(input())\r\n        c=int(input())\r\n        if a==b:\r\n            print(c)\r\n        elif a==c:\r\n            print(b)\r\n        else:\r\n            print(a)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247770180",
            "author": "ErmiCodeforce",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1708600560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247769250",
            "author": "ErmiCodeforce",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1708600140
        },
        "acceptedCode": "t = int(input())\r\nABCs = [\"A\",\"B\",\"C\"]\r\nfor i in range(t):\r\n    row1 = [x for x in input()]\r\n    row2 = [x for x in input()]\r\n    row3 = [x for x in input()]\r\n    res = \"\"\r\n    if \"?\" in row1:\r\n        for letter in ABCs:\r\n            if letter not in row1:\r\n                res = letter\r\n                break\r\n    elif \"?\" in row2:\r\n        for letter in ABCs:\r\n            if letter not in row2:\r\n                res = letter\r\n                break\r\n    else:\r\n        for letter in ABCs:\r\n            if letter not in row3:\r\n                res = letter\r\n                break\r\n    print(res)",
        "rejectedCode": "t = int(input())\r\nABCs = [\"A\",\"B\",\"C\"]\r\nfor i in range(t):\r\n    row1 = input().split()\r\n    row2 = input().split()\r\n    row3 = input().split()\r\n    res = \"\"\r\n    if \"?\" in row1:\r\n        for letter in ABCs:\r\n            if letter not in row1:\r\n                res = letter\r\n                break\r\n    elif \"?\" in row2:\r\n        for letter in ABCs:\r\n            if letter not in row2:\r\n                res = letter\r\n                break\r\n    else:\r\n        for letter in ABCs:\r\n            if letter not in row3:\r\n                res = letter\r\n                break\r\n    print(res)",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 4,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247375016",
            "author": "oneman38669",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 92,
            "memory": 10400,
            "submissionTime": 1708346040
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247374794",
            "author": "oneman38669",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708345980
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    word = input()\r\n    i = n - 1\r\n    res = []\r\n    C = set(('b', 'c', 'd'))\r\n    V = set(('a', 'e'))\r\n    while i > 0:\r\n        if word[i] in C:\r\n            res.append(word[i-2:i+1])\r\n            i -= 3\r\n        else:\r\n            res.append(word[i-1:i+1])\r\n            i -= 2\r\n    print('.'.join(res[::-1]))",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    word = input()\r\n    i = n - 1\r\n    res = []\r\n    C = set(('b', 'c', 'd'))\r\n    V = set(('a', 'e'))\r\n    while i > 0:\r\n        if word[i] in C:\r\n            res.append(word[i-2:i+1])\r\n            i -= 3\r\n        else:\r\n            res.append(word[i-1:i+1])\r\n            i -= 2\r\nprint('.'.join(res[::-1]))",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "da.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'da.bab.ba.ba.bab.bab.ba.bab.ba'\r\n"
        },
        "errorLine": 15,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247738584",
            "author": "Nurasss",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1708586460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247738348",
            "author": "Nurasss",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 100,
            "submissionTime": 1708586400
        },
        "acceptedCode": "import math\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    d = str(math.sqrt(sum(a)))\r\n    if d[-1]== '0' and d[-2]=='.':\r\n        print('Yes')\r\n    else:\r\n        print('No')",
        "rejectedCode": "import math\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    d = math.sqrt(sum(a))\r\n    f = str(d * d)\r\n    if f[-1]== '0':\r\n        print('Yes')\r\n    else:\r\n        print('No')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "Yes\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 6,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247727703",
            "author": "dimulik",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1708580760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247145789",
            "author": "dimulik",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 9700,
            "submissionTime": 1708273620
        },
        "acceptedCode": "t = int(input())\r\nwhile t > 0:\r\n    t -= 1\r\n    a, b, c = map(int, input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "rejectedCode": "n = int(input())\r\na = 0\r\nfor i in range(1, n+1):\r\n    a = 0\r\n    kj = int(input())\r\n    aj = list(map(int, input().split()))\r\n    for m in range(1, sum(aj)+1):\r\n        if sum(aj)/m==m:\r\n            a += 1\r\n    if a == 1:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247659108",
            "author": "Espur1525",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 1400,
            "submissionTime": 1708524480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247658888",
            "author": "Espur1525",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708524360
        },
        "acceptedCode": "def syllables(n, s):\r\n    current = s[:2]\r\n    for i in range(2, n-1):\r\n        if s[i+1] == 'a' or s[i+1] == 'e':\r\n            current += \".\"\r\n        current += s[i]\r\n    if n>2:\r\n        current += s[n-1]\r\n    return current\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    s = input().strip()\r\n    print(syllables(n, s))\r\n        ",
        "rejectedCode": "def syllables(n, s):\r\n    current = s[:2]\r\n    for i in range(2, n-1):\r\n        if s[i+1] == 'a' or s[i+1] == 'e':\r\n            current += \".\"\r\n        current += s[i]\r\n    current += s[n-1]\r\n    return current\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    s = input().strip()\r\n    print(syllables(n, s))\r\n        ",
        "failedTestCase": {
            "input": "100\r\n2\r\nba\r\n2\r\nca\r\n2\r\nda\r\n2\r\nbe\r\n2\r\nce\r\n2\r\nde\r\n3\r\nbab\r\n3\r\nbac\r\n3\r\nbad\r\n3\r\nbeb\r\n3\r\nbec\r\n3\r\nbed\r\n3\r\ncab\r\n3\r\ncac\r\n3\r\ncad\r\n3\r\nceb\r\n3\r\ncec\r\n3\r\nced\r\n3\r\ndab\r\n3\r\ndac\r\n3\r\ndad\r\n3\r\ndeb\r\n3\r\ndec\r\n3\r\nded\r\n4\r\nbaba\r\n4\r\nbaca\r\n4\r\nbada\r\n4\r\nbabe\r\n4\r\nbace\r\n4\r\nbade\r\n4\r\ncaba\r\n4\r\ncaca\r\n4\r\ncada\r\n4\r\ncabe\r\n4\r\ncace\r\n4\r\ncade\r\n4\r\ndaba\r\n4\r\ndaca\r\n4\r\ndada\r\n4\r\ndabe\r\n4\r\ndace\r\n4\r\ndade\r\n4\r\nbeba\r\n5\r\nbabba\r\n5\r\nbabca\r\n5\r\nbabda\r\n5\r\nbabbe\r\n5\r\nbabce\r\n5\r\nbabde\r\n5\r\nbacba\r\n5\r\nbacca\r\n5\r\nbacda\r\n5\r\nbacbe\r\n5\r\nbacce\r\n5\r\nbacde\r\n5\r\nbadba\r\n5\r\nbadca\r\n5\r\nbadda\r...",
            "output": "baa\r\ncaa\r\ndaa\r\nbee\r\ncee\r\ndee\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba...",
            "expectedOutput": "ba\r\nca\r\nda\r\nbe\r\nce\r\nde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba.dac\r\n...",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba', found: 'baa'\r\n"
        },
        "errorLine": 7,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239795722",
            "author": "swastiswi13",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1704010080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239795104",
            "author": "swastiswi13",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 2,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1704009600
        },
        "acceptedCode": "n = int(input())\nfor _ in range(n):\n    a_count, b_count, c_count = 0, 0, 0\n    for _ in range(3):\n        matrix = input()\n        a_count += matrix.count(\"A\")\n        b_count += matrix.count(\"B\")\n        c_count += matrix.count(\"C\")\n    if a_count == 2:\n        print(\"A\")\n    if b_count == 2:\n        print(\"B\")\n    if c_count == 2:\n        print(\"C\")\n",
        "rejectedCode": "n = int(input())\nfor _ in range(n):\n    a_count, b_count, c_count = 0, 0, 0\n    for _ in range(n):\n        matrix = input()\n        a_count += matrix.count(\"A\")\n        b_count += matrix.count(\"B\")\n        c_count += matrix.count(\"C\")\n    if a_count == 2:\n        print(\"A\")\n    if b_count == 2:\n        print(\"B\")\n    if c_count == 2:\n        print(\"C\")\n",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247722591",
            "author": "1zez",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 2500,
            "submissionTime": 1708577700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247722184",
            "author": "1zez",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708577460
        },
        "acceptedCode": "def ifV(myChar):\r\n    if myChar == \"a\" or myChar == \"e\":\r\n        return True\r\n    else:\r\n        return False\r\n\r\ntrials = int(input())\r\nfor counter in range(trials):\r\n    lth = int(input())\r\n    myString = list(input())\r\n    newString = \"\"\r\n    newString += myString[0]\r\n    for i in range(lth-2):\r\n        if i != 0:\r\n            if ifV(myString[i]):\r\n                newString += myString[i]\r\n                if ifV(myString[i+2]):\r\n                       newString += \".\"\r\n            else:\r\n                newString += myString[i]\r\n                if not(ifV(myString[i+1])):\r\n                       newString += \".\"\r\n    newString += myString[lth-2]\r\n    newString += myString[lth-1]\r\n    if lth == 2:\r\n        newString = newString[1:]\r\n    print(newString)\r\n\r\n\r\n",
        "rejectedCode": "def ifV(myChar):\r\n    if myChar == \"a\" or myChar == \"e\":\r\n        return True\r\n    else:\r\n        return False\r\n\r\ntrials = int(input())\r\nfor counter in range(trials):\r\n    lth = int(input())\r\n    myString = list(input())\r\n    newString = \"\"\r\n    newString += myString[0]\r\n    for i in range(lth-2):\r\n        if i != 0:\r\n            if ifV(myString[i]):\r\n                newString += myString[i]\r\n                if ifV(myString[i+2]):\r\n                       newString += \".\"\r\n            else:\r\n                newString += myString[i]\r\n                if not(ifV(myString[i+1])):\r\n                       newString += \".\"\r\n    newString += myString[lth-2]\r\n    newString += myString[lth-1]\r\n    print(newString)\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "100\r\n2\r\nba\r\n2\r\nca\r\n2\r\nda\r\n2\r\nbe\r\n2\r\nce\r\n2\r\nde\r\n3\r\nbab\r\n3\r\nbac\r\n3\r\nbad\r\n3\r\nbeb\r\n3\r\nbec\r\n3\r\nbed\r\n3\r\ncab\r\n3\r\ncac\r\n3\r\ncad\r\n3\r\nceb\r\n3\r\ncec\r\n3\r\nced\r\n3\r\ndab\r\n3\r\ndac\r\n3\r\ndad\r\n3\r\ndeb\r\n3\r\ndec\r\n3\r\nded\r\n4\r\nbaba\r\n4\r\nbaca\r\n4\r\nbada\r\n4\r\nbabe\r\n4\r\nbace\r\n4\r\nbade\r\n4\r\ncaba\r\n4\r\ncaca\r\n4\r\ncada\r\n4\r\ncabe\r\n4\r\ncace\r\n4\r\ncade\r\n4\r\ndaba\r\n4\r\ndaca\r\n4\r\ndada\r\n4\r\ndabe\r\n4\r\ndace\r\n4\r\ndade\r\n4\r\nbeba\r\n5\r\nbabba\r\n5\r\nbabca\r\n5\r\nbabda\r\n5\r\nbabbe\r\n5\r\nbabce\r\n5\r\nbabde\r\n5\r\nbacba\r\n5\r\nbacca\r\n5\r\nbacda\r\n5\r\nbacbe\r\n5\r\nbacce\r\n5\r\nbacde\r\n5\r\nbadba\r\n5\r\nbadca\r\n5\r\nbadda\r...",
            "output": "bba\r\ncca\r\ndda\r\nbbe\r\ncce\r\ndde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba...",
            "expectedOutput": "ba\r\nca\r\nda\r\nbe\r\nce\r\nde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba.dac\r\n...",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba', found: 'bba'\r\n"
        },
        "errorLine": 25,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244533207",
            "author": "8899759",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706854800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244533095",
            "author": "8899759",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706854740
        },
        "acceptedCode": "n=int(input())\r\nfor i in range(n):\r\n    a,b,c = map(int, input().split())\r\n    if a==b:\r\n        print(c)\r\n    elif a==c:\r\n        print(b)\r\n    else:\r\n        print(a)",
        "rejectedCode": "n=int(input())\r\nfor i in range(n):\r\n    a,b,c = map(int, input().split())\r\n    if a==b:\r\n        print(c)\r\n    elif a==c:\r\n        print(b)\r\n    else:\r\n        print(c)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "2\r\n3\r\n6\r\n8\r\n0\r\n6\r\n8\r\n7\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '2'\r\n"
        },
        "errorLine": 9,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247674690",
            "author": "Bart_Monkey",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1708537080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244309007",
            "author": "Bart_Monkey",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 10800,
            "submissionTime": 1706708160
        },
        "acceptedCode": "t = int(input())\nfor _ in range(t):\n    a, b, c = map(int, input().split(\" \"))\n    d = [a-b, c-b]\n    if d[0] == 0:\n        print(c)\n    elif d[1] == 0:\n        print(a)\n    else:\n        print(b)",
        "rejectedCode": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n\n    # we simply want to place a `dot` two spaces before vowels\n        # at index of vowel -2\n        # starting a the end of the string when you reach a vowel place a dot at the next-next place\n\n    o = \"\"\n    # reverse the string\n    s = s[::-1]\n    #\n    c = 0\n    for i in s:\n        if c == 2:\n            o += \".\"\n            c = 0\n\n        if c == 1:\n            c += 1\n        if i == \"a\" or i == \"e\":\n            c += 1\n\n\n        \n        o += i\n\n    print(o[::-1])\n        # remove first dot",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247643474",
            "author": "VarenS",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 577,
            "memory": 18300,
            "submissionTime": 1708516200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247642998",
            "author": "VarenS",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 280,
            "memory": 5500,
            "submissionTime": 1708515960
        },
        "acceptedCode": "from math import sqrt\r\nfor _ in range (int(input())):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    x = sum(a)\r\n    if int(sqrt(x))**2 == x:\r\n        print ('YES')\r\n    else:\r\n        print ('NO')",
        "rejectedCode": "from math import sqrt\r\nfor _ in range (int(input())):\r\n    a = list(map(int,input().split()))\r\n    x = sum(a)\r\n    if int(sqrt(x))**2 == x:\r\n        print ('YES')\r\n    else:\r\n        print ('NO')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [8th token]\r\n"
        },
        "errorLine": 3,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247662278",
            "author": "ljynalyasrh",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708526520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244725613",
            "author": "ljynalyasrh",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706961120
        },
        "acceptedCode": "x=int(input())\r\nfor i in range(x) : \r\n    s=input().split()\r\n    for i in s : \r\n        a=s.count(i) \r\n        if a==1 : \r\n            print(i)",
        "rejectedCode": "m=int(input())\r\nfor i in range(1,m+1):\r\n    x=input().split()\r\n    for j in x :\r\n       l=x.count(\"j\")\r\n       if l==1:\r\n           print(j)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10], but output contains 0 elements\r\n"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247625745",
            "author": "Nneax_",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1708507620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247625642",
            "author": "Nneax_",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 2900,
            "submissionTime": 1708507560
        },
        "acceptedCode": "for _ in range (int(input())):\r\n  n = [a for a in map(int, input().split())]\r\n  for x in n:\r\n    if n.count(x) == 1: \r\n      print(x)",
        "rejectedCode": "for _ in range (int(input())):\r\n  n = map(int, input().split())\r\n  for x in n:\r\n    if n.count(x) == 1: \r\n      print(x)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247617865",
            "author": "NomanNian",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1708504440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247598811",
            "author": "NomanNian",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708494120
        },
        "acceptedCode": "def solute():\r\n    a, b, c = map(int, input().split(' '))\r\n\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)\r\n\r\nt = int(input())\r\n\r\nfor i in range(t):\r\n    solute()",
        "rejectedCode": "def is_perfect_square(num):\r\n    if num < 0:\r\n        return False\r\n    i = 0\r\n    while i * i <= num:\r\n        if i * i == num:\r\n            return True\r\n        i += 1\r\n    return False\r\n\r\ndef can_build_square(n, buckets):\r\n    total_squares = sum(buckets)\r\n    max_side_length = max(buckets)\r\n    if is_perfect_square(total_squares) and max_side_length <= int(total_squares ** 0.5):\r\n        return \"YES\"\r\n    else:\r\n        return \"NO\"\r\n\r\n# Input processing\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    buckets = list(map(int, input().split()))\r\n    print(can_build_square(n, buckets))",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "247585932",
            "author": "Risshun",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1887,
            "memory": 61100,
            "submissionTime": 1708486680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "247579114",
            "author": "Risshun",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 5000,
            "memory": 33700,
            "submissionTime": 1708482720
        },
        "acceptedCode": "import sys;\r\n\r\ninput = sys.stdin.readline\r\n\r\n\r\ndef Q(i):\r\n    r = 0\r\n    j = i\r\n    while i > 0:\r\n        r += t[i]\r\n        i -= (i & -i)\r\n    while j <= n:\r\n        t[j] += 1\r\n        j += (j & -j)\r\n    return r\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    q = [[*map(int, input().split())] for _ in range(n)]\r\n    q.sort()\r\n    t = {}\r\n    d = []\r\n    for a, b in sorted(q, key=lambda a: a[1]):\r\n        t[b] = len(t) + 1\r\n    for a, b in q:\r\n        d.append(t[b])\r\n    d += [0]\r\n    d.reverse()\r\n    t = [0] * (n + 1)\r\n    s = 0\r\n    for i in range(1, n + 1):\r\n        s += Q(d[i])\r\n    print(s)\r\n",
        "rejectedCode": "import bisect\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    arr = []\r\n    for i in range(n):\r\n        bisect.insort(arr, tuple(map(int, input().split())))\r\n    ans = 0\r\n    st = []\r\n    for p in arr:\r\n        ans += len(st) - bisect.bisect_left(st, p[1])\r\n        bisect.insort_left(st, p[1])\r\n    print(ans)",
        "failedTestCase": {
            "input": "1\r\n200000\r\n647453678 930853853\r\n-586814073 570193412\r\n-490363662 281213000\r\n-703158044 591740767\r\n137659014 352608457\r\n-774601557 -390838254\r\n-867423209 -524087527\r\n-28391755 692355005\r\n-729209925 704738138\r\n-217098545 856705188\r\n-716155101 191142422\r\n-901655099 656094991\r\n384746555 694653351\r\n-605420601 -561339913\r\n811192007 826647575\r\n-377150013 354556959\r\n684345222 874905831\r\n-46479142 170684323\r\n-793019907 5395128\r\n-788095085 -445094138\r\n-380816261 893458206\r\n-31460295 62063481\r\n-501097580 -409603254\r\n...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247552093",
            "author": "DeusAce",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 13400,
            "submissionTime": 1708460520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247551927",
            "author": "DeusAce",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2700,
            "submissionTime": 1708460280
        },
        "acceptedCode": "# https://codeforces.com/contest/1915/problem/D\n\nfor i in range(int(input())):\n\n    leng = int(input())\n    word = list(input())\n    newWord = []\n\n    # looping through entire word, incrementing by 2 or 3\n    j = 0\n    while j+3 < leng:\n\n        # checking if the 3rd letter after current letter is a \"consonant\"\n        if word[j+3] == 'b' or word[j+3] == 'c' or word[j+3] == 'd':\n            # add 3 letters then a period if true, then increment by 3\n            newWord.append(word[j])\n            newWord.append(word[j+1])\n            newWord.append(word[j+2])\n            newWord.append('.')\n            j += 3\n\n        else:\n            # add 2 letters then a period if false, then increment by 2\n            newWord.append(word[j])\n            newWord.append(word[j+1])\n            newWord.append('.')\n            j += 2\n\n    # adding last piece of the word at the end (after the last period)\n    \n    while j < leng:\n        newWord.append(word[j])\n        j += 1\n\n    print(''.join(newWord))\n",
        "rejectedCode": "# https://codeforces.com/contest/1915/problem/D\n\n'''\nNeed to translate into C++ to be within the time limit (1000ms)\nHave tried to use the appending to list approach, still exceeds the time limit on test 3\n'''\n\nfor i in range(int(input())):\n\n    leng = int(input())\n    word = list(input())\n    newWord = []\n\n    # looping through entire word, incrementing by 2 or 3\n    j = 0\n    while j+3 < leng:\n\n        # checking if the 3rd letter after current letter is a \"consonant\"\n        if word[j+3] == 'b' or word[j+3] == 'c' or word[j+3] == 'd':\n            # add 3 letters then a period if true, then increment by 3\n            newWord.append((word[j]))\n            newWord.append(word[j+1])\n            newWord.append(word[j+2])\n            newWord.append('.')\n            j += 3\n\n        else:\n            # add 2 letters then a period if false, then increment by 2\n            newWord.append((word[j]))\n            newWord.append(word[j+1])\n            newWord.append('.')\n            j += 2\n\n    # adding last piece of the word at the end (after the last period)\n    newWord.append(word[j:])\n\n    print(''.join(newWord))\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247549111",
            "author": "Al-Taj",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 1700,
            "submissionTime": 1708456500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247491445",
            "author": "Al-Taj",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 3900,
            "submissionTime": 1708421280
        },
        "acceptedCode": "for _ in range (int(input())):\r\n    n=int(input())\r\n    s=input()\r\n    ans=\"\" ; a=False\r\n    for i in range(n-1):\r\n        if s[i] in [\"a\",\"e\"]:\r\n            ans+=s[i] ; a=True\r\n            continue\r\n        if a :\r\n            if s[i+1] not in [\"a\",\"e\"]:\r\n                ans+=s[i]+\".\"\r\n            else:\r\n                ans+=\".\"+s[i]\r\n            a=False\r\n            continue\r\n        ans+=s[i]\r\n    print(ans+s[-1])",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    string=list(input())\r\n    v=list(\"ae\") ; i=0\r\n    while i<n:\r\n        if n-3 >= i:\r\n            if string[i] in v and string[i+2] not in v:\r\n                string.insert(i+2,\".\")\r\n                i+=2\r\n                n+=1\r\n            elif string[i] in v and string[i+2] in v:\r\n                string.insert(i+1,\".\")\r\n                i+=2\r\n                n+=1\r\n            else:\r\n                i+=1\r\n        else:\r\n            break\r\n    print(\"\".join(string))",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "247536792",
            "author": "voicon",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 530,
            "memory": 10700,
            "submissionTime": 1708442820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "247522861",
            "author": "voicon",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 155,
            "memory": 9100,
            "submissionTime": 1708434660
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\n\r\n\r\nfrom heapq import heappop, heappush\r\nfor _ in range(int(input())):\r\n    n, m = map(int, input().split())\r\n    g = [[] for _ in range(n+1)]\r\n    for i in range(m):\r\n        a, b, c = map(int, input().split())\r\n        g[a].append((b, c))\r\n        g[b].append((a, c))\r\n    w = [0] + list(map(int, input().split()))\r\n    M = 1001\r\n    x = [M]*(n+1)\r\n    q = [(0, 1, w[1])]\r\n    while q:\r\n        a, b, c = heappop(q)\r\n        if b == n:\r\n            print(a)\r\n            break\r\n        c = min(w[b], c)\r\n        if c < x[b]:\r\n            x[b] = c\r\n            for i, j in g[b]:\r\n                heappush(q, (a + c*j, i, c))\r\n",
        "rejectedCode": "import sys\r\ninput = sys.stdin.readline\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    w = list(map(int, input().split()))\r\n    c = w[0]\r\n    d = [0, c]\r\n    a = 1\r\n    for i in w[1:]:\r\n        if a:\r\n            c -= i\r\n        else:\r\n            c += i\r\n        a = 1-a\r\n        d.append(c)\r\n    d.sort()\r\n    for i in range(n-1):\r\n        if d[i] == d[i+1]:\r\n            print('YES')\r\n            break\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [39th token]\r\n"
        },
        "errorLine": 5,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247526242",
            "author": "Venkat423",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 5700,
            "submissionTime": 1708436220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241567938",
            "author": "Venkat423",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 0,
            "submissionTime": 1705214820
        },
        "acceptedCode": "t=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    s=input()\r\n    vow_list=[]\r\n    for i in range(n):\r\n        if s[i]=='a' or s[i]=='e':\r\n            vow_list.append(i)\r\n    ind=0\r\n    for i in range(1, len(vow_list)):\r\n        num=vow_list[i]-vow_list[i-1]\r\n        temp=s[ind:ind+num]\r\n        print(temp, end=\".\")\r\n        ind=ind+num\r\n    print(s[ind:])",
        "rejectedCode": "t=int(input())\r\nlis=[0]*40\r\n\r\nfor _ in range(t):\r\n    \r\n    n=int(input())\r\n    x=list(map(int, input().split()))\r\n\r\n    temp_list=[]\r\n    temp_list.append(0)\r\n    s=0\r\n\r\n    for j in range(n):\r\n        if j%2==0:\r\n            s+=x[j]\r\n        else:\r\n            s-=x[j]\r\n        temp_list.append(s)\r\n\r\n    temp_list.sort()\r\n    flag=0\r\n\r\n    for j in range(1, n):\r\n        if temp_list[j-1]==temp_list[j]:\r\n            flag=1\r\n            break\r\n\r\n    if flag==0:\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")\r\n    \r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [39th token]\r\n"
        },
        "errorLine": 2,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247507032",
            "author": "Omar-Senpai",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 92,
            "memory": 8800,
            "submissionTime": 1708427880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247506565",
            "author": "Omar-Senpai",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 600,
            "submissionTime": 1708427700
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=list(input())\r\n    for i in range(2,n):\r\n        if s[i] in \"ae\":\r\n            s[i-1]='.'+s[i-1]\r\n    print(\"\".join(s))",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    res = \"\"\r\n    while s:\r\n        if s[-1] in ['a', 'e']:\r\n            x = 2\r\n        else:\r\n            x = 3\r\n        while x > 0:\r\n            res += s[-1]\r\n            x -= 1\r\n            s = s[:-1]\r\n        res += '.'\r\n    res = res[:-1]\r\n    res = res[::-1]\r\n    print(res)\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "247481924",
            "author": "Namika",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 31100,
            "submissionTime": 1708417560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "247474532",
            "author": "Namika",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 35700,
            "submissionTime": 1708414320
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\ndef print(*args, end='\\n', sep=' ') -> None:\r\n    sys.stdout.write(sep.join(map(str, args)) + end)\r\ntest_cases = int(input())\r\ntest=0\r\nwhile test < test_cases:\r\n    n=int(input())\r\n    nums=list(map(int,input().split()))\r\n    arr=[0]\r\n    i=0\r\n    while i<len(nums):\r\n        if i%2==0:\r\n            _ = arr[-1]+nums[i]\r\n            arr.append(_)\r\n        else:\r\n            _ = arr[-1]+(nums[i]*-1)\r\n            arr.append(_)\r\n        i+=1\r\n    arr.sort()\r\n    for i in range(n):\r\n        if arr[i] == arr[i+1]:\r\n            print(\"YES\")\r\n            break\r\n    else:\r\n        print(\"NO\")\r\n    test+=1\r\n\r\n    \r\n",
        "rejectedCode": "import math\r\nimport sys\r\ninput = sys.stdin.readline\r\ndef print(*args, end='\\n', sep=' ') -> None:\r\n    sys.stdout.write(sep.join(map(str, args)) + end)\r\nfor test in range(int(input())):\r\n    n=int(input())\r\n    nums=list(map(int,input().split()))\r\n    arr=[0]\r\n    d={0:1}\r\n    for i in range(len(nums)):\r\n        if i%2==0:\r\n            _ = arr[-1]+nums[i]\r\n            if d.get(_) == 1:\r\n                print(\"YES\")\r\n                break\r\n            arr.append(_)\r\n            d[_] = 1\r\n        else:\r\n            _ = arr[-1]+(nums[i]*-1)\r\n            if d.get(_) == 1:\r\n                print(\"YES\")\r\n                break\r\n            arr.append(_)\r\n            d[_] = 1\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "247481790",
            "author": "0n2f_",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 31100,
            "submissionTime": 1708417500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "247481258",
            "author": "0n2f_",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 2,
            "runTime": 1000,
            "memory": 31600,
            "submissionTime": 1708417320
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\ndef print(*args, end='\\n', sep=' ') -> None:\r\n    sys.stdout.write(sep.join(map(str, args)) + end)\r\ntest_cases = int(input())\r\ntest=0\r\nwhile test < test_cases:\r\n    n=int(input())\r\n    nums=list(map(int,input().split()))\r\n    arr=[0]\r\n    i=0\r\n    while i<len(nums):\r\n        if i%2==0:\r\n            _ = arr[-1]+nums[i]\r\n            arr.append(_)\r\n        else:\r\n            _ = arr[-1]+(nums[i]*-1)\r\n            arr.append(_)\r\n        i+=1\r\n    arr.sort()\r\n    for i in range(n):\r\n        if arr[i] == arr[i+1]:\r\n            print(\"YES\")\r\n            break\r\n    else:\r\n        print(\"NO\")\r\n    test+=1\r\n\r\n    \r\n",
        "rejectedCode": "import sys\r\ninput = sys.stdin.readline\r\nlegacy=[0]*1000000\r\ndef print(*args, end='\\n', sep=' ') -> None:\r\n    sys.stdout.write(sep.join(map(str, args)) + end)\r\ndef binary_search(arr,target):\r\n    l,r = 0,len(arr)-1\r\n    while l<=r:\r\n        mid=(l+r)//2\r\n        if arr[mid] == target:\r\n            return True\r\n        elif arr[mid] > target:\r\n            r=mid-1\r\n        elif arr[mid] < target:\r\n            l=mid+1\r\n    return False\r\ntest_cases = int(input())\r\ntest=0\r\n\r\nwhile test < test_cases:\r\n    ans=legacy.copy()\r\n    n=int(input())\r\n    nums=list(map(int,input().split()))\r\n    arr=[0]\r\n    \r\n    ans[0] = 1\r\n    i=0\r\n    while i<len(nums):\r\n        if i%2==0:\r\n            _ = arr[-1]+nums[i]\r\n            if ans[_]:\r\n                print(\"YES\")\r\n                break\r\n            arr.append(_)\r\n            ans[_] = 1\r\n        else:\r\n            _ = arr[-1]+(nums[i]*-1)\r\n            if ans[_]:\r\n                print(\"YES\")\r\n                break\r\n            arr.append(_)\r\n            ans[_] = 1\r\n        i+=1\r\n    else:\r\n        print(\"NO\")\r\n    test+=1\r\n\r\n    \r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247455990",
            "author": "vinuthnabojja0101",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1708403700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247455587",
            "author": "vinuthnabojja0101",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1708403400
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    a,b,c=map(int,input().split())\r\n    if a==b:\r\n        print(c)\r\n    elif a==c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n",
        "rejectedCode": "t=int(input())\r\na,b,c=map(int,input().split())\r\nif a==b:\r\n    print(c)\r\nelif a==c:\r\n    print(b)\r\nelse:\r\n    print(a)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10], but output contains 1 elements\r\n"
        },
        "errorLine": 2,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247453145",
            "author": "vinay_176",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708402800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247452903",
            "author": "vinay_176",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1708402680
        },
        "acceptedCode": "for s in[*open(0)][1:]:a,b,c=map(int,s.split());print(a^b^c)",
        "rejectedCode": "for _ in range(int(input())):\r\n    a = int(input())\r\n    b = int(input())\r\n    c = int(input())\r\n\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247446359",
            "author": "selfharm111",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708398720
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246485666",
            "author": "selfharm111",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707987840
        },
        "acceptedCode": "t = int(input())\n\nfor _ in range(t):\n    a, b, c = map(int, input().split())\n\n    if a == b:\n        print(c)\n    elif a == c:\n        print(b)\n    else:\n        print(a)\n",
        "rejectedCode": "t = int(input())\n\nfor _ in range(t):\n    a = int(input())\n    b = int(input())\n    c = int(input())\n\n    if a == b:\n        print(c)\n    elif a == c:\n        print(b)\n    else:\n        print(a)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247384105",
            "author": "samarth07",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 12600,
            "submissionTime": 1708350060
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247383536",
            "author": "samarth07",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12600,
            "submissionTime": 1708349760
        },
        "acceptedCode": "t = int(input())\r\nfor test_case in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    ans_parts = []  # Use a list to collect parts of the answer\r\n    i = n - 1\r\n    while i >= 0:\r\n        if s[i] == 'a' or s[i] == 'e':  # If it's a vowel\r\n            # Check if we're at the start of the string or if the previous character is a consonant\r\n            if i - 1 >= 0 and (s[i - 1] not in 'ae'):\r\n                # CV pattern\r\n                ans_parts.append(s[i - 1] + s[i])\r\n                i -= 2\r\n            else:\r\n                # Single vowel (edge case, should not happen in valid input)\r\n                ans_parts.append(s[i])\r\n                i -= 1\r\n        else:\r\n            # It's a consonant, check for CVC or just add the consonant (edge case handling)\r\n            if i - 2 >= 0 and (s[i - 1] in 'ae') and (s[i - 2] not in 'ae'):\r\n                # CVC pattern\r\n                ans_parts.append(s[i - 2] + s[i - 1] + s[i])\r\n                i -= 3\r\n            else:\r\n                # Just a consonant or CV pattern\r\n                ans_parts.append(s[i])\r\n                i -= 1\r\n        # Only add a dot if we're not at the end\r\n        if i >= 0:\r\n            ans_parts.append('.')\r\n    ans = ''.join(reversed(ans_parts))  # Reverse and join the parts to form the answer\r\n    print(ans)\r\n",
        "rejectedCode": "t = int(input())\r\nfor test_case in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    #C = [\"b\", \"c\", \"d\"]\r\n    #V = [\"a\", \"e\"]\r\n    ans = \"\"\r\n    i = n - 1\r\n    while i > 0:\r\n        if s[i] == 'a' or s[i] == 'e':\r\n            ans += s[i] \r\n            ans += s[i - 1] \r\n            ans += \".\"\r\n            i -= 2\r\n        else:\r\n            ans += s[i] \r\n            ans += s[i-1] \r\n            ans += s[i-2] \r\n            ans += \".\"\r\n            i -= 3\r\n    ans = ans[0:-1]\r\n    ans = ans[::-1]\r\n    print(ans)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 5,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247396909",
            "author": "ANTH4RAX",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 1400,
            "submissionTime": 1708357860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246350032",
            "author": "ANTH4RAX",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1707895260
        },
        "acceptedCode": "\r\ndef solve():\r\n    n = int(input())\r\n    s = input()\r\n    r = \"\"\r\n    for i in range(n):\r\n        r+=s[i]\r\n        try :\r\n            if (s[i] in \"ea\" and s[i+1] in \"bcd\" and s[i+2] in \"ea\") or (s[i] in \"bcd\" and s[i-1] in \"ea\" and s[i+1] in \"bcd\") : r += \".\" \r\n        except : pass\r\n    print(r)\r\n\r\nfor _ in range(int(input())):\r\n    solve()",
        "rejectedCode": "for _ in range(int(input())):\r\n     a,b,c = map(int,input().split())\r\n     if a==b : print(c)\r\n     elif a==c : print(b)\r\n     else print(a)",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247359508",
            "author": "pankajkush",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 9000,
            "submissionTime": 1708342860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247330937",
            "author": "pankajkush",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1708340340
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = input()\r\n    \r\n    v, c = ['a','e'], ['b','c','e']\r\n    syllables = []\r\n    \r\n    i=n-1\r\n    while i>=0:\r\n      if a[i] in v:\r\n        syllables.append(a[i-1:i+1])\r\n        i-=2\r\n      else:\r\n        syllables.append(a[i-2:i+1])\r\n        i-=3\r\n    syllables.reverse()\r\n    print(\".\".join(syllables))",
        "rejectedCode": "for _ in range(int(input())):\r\n    l1 = input()\r\n    l2 = input()\r\n    l3 = input()\r\n    l = [l1.count('A')+l2.count('A')+l3.count('A'), l1.count('B')+l2.count('B')+l3.count('B'), l1.count('C')+l2.count('C')+l3.count('C'),]\r\n    if l[0]!=3:\r\n      print('A')\r\n    elif l[1]!=3:\r\n      print('B')\r\n    else:\r\n      print('c')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nB\r\nc\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 3rd words differ - expected: 'C', found: 'c'\r\n"
        },
        "errorLine": 2,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247352773",
            "author": "sbpalash",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1708342200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247345687",
            "author": "sbpalash",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1708341540
        },
        "acceptedCode": "n = int(input())\r\nans = []\r\nfor i in range(n):\r\n    a,b,c =map(int, input().split(\" \"))\r\n\r\n    if(a==b):\r\n        ans.append(c)\r\n    elif(b==c):\r\n        ans.append(a)\r\n    else:\r\n        ans.append(b)\r\nprint(*ans,sep = \"\\n\")\r\n",
        "rejectedCode": "n = int(input())\r\nans = []\r\nfor i in range(n):\r\n    a = int(input())\r\n    b = int(input())\r\n    c = int(input())\r\n\r\n    if(a==b):\r\n        ans.append(c)\r\n    elif(b==c):\r\n        ans.append(a)\r\n    else:\r\n        ans.append(b)\r\nprint(*ans, sep = \"\\n\")\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "247218534",
            "author": "gdstw",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 33500,
            "submissionTime": 1708334460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "247217924",
            "author": "gdstw",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 13300,
            "submissionTime": 1708334160
        },
        "acceptedCode": "import sys\r\n\r\ninput = sys.stdin.readline\r\nprint = sys.stdout.write\r\n\r\nT = int(input())\r\n\r\n\"\"\"\r\n    \u4ee4\u5947\u6578\u70ba\u6b63\u6578\uff0c\u5076\u6578\u70ba\u8ca0\u6578\r\n    \u6240\u6c42\u70ba\u524d\u7db4\u548c\u70ba0\r\n    \u907f\u514d\u88ab\u5361hash\uff0c\u76f4\u63a5\u7528str(s)\u4f86\u5b58\r\n    https://codeforces.com/blog/entry/121908\r\n\"\"\"\r\nans = []\r\nfor tc in range(1, T+1):\r\n    N = int(input())\r\n    A = list(map(int, input().split()))\r\n\r\n    flag = False\r\n    s = 0\r\n    seen = set([str(s)]) # \u76f4\u63a5\u7528int\u6703\u88ab\u5361hash\r\n    for i, x in enumerate(A):\r\n        s += x if not (i & 1) else -x\r\n        if str(s) in seen:\r\n            flag = True\r\n            break\r\n        seen.add(str(s))\r\n    ans.append(\"YES\" if flag else \"NO\")\r\n    # print(\"YES\" if flag else \"NO\")\r\nprint(\"\\n\".join(ans))\r\n",
        "rejectedCode": "import sys\r\n\r\ninput = sys.stdin.readline\r\nprint = sys.stdout.write\r\n\r\nT = int(input())\r\n\r\n\"\"\"\r\n    \u4ee4\u5947\u6578\u70ba\u6b63\u6578\uff0c\u5076\u6578\u70ba\u8ca0\u6578\r\n    \u6240\u6c42\u70ba\u524d\u7db4\u548c\u70ba0\r\n\"\"\"\r\nans = []\r\nfor tc in range(1, T+1):\r\n    N = int(input())\r\n    A = list(map(int, input().split()))\r\n\r\n    flag = False\r\n    s = 0\r\n    seen = [str(s)]\r\n    for i, x in enumerate(A):\r\n        s += x if not (i & 1) else -x\r\n        if str(s) in seen:\r\n            flag = True\r\n            break\r\n        seen.append(str(s))\r\n    ans.append(\"YES\" if flag else \"NO\")\r\n    # print(\"YES\" if flag else \"NO\")\r\nprint(\"\\n\".join(ans))\r\n",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 11,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247212679",
            "author": "enigmeow",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 8100,
            "submissionTime": 1708331880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247212252",
            "author": "enigmeow",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 7900,
            "submissionTime": 1708331700
        },
        "acceptedCode": "import math\r\nfrom collections import Counter,defaultdict\r\nfrom itertools import accumulate,permutations,combinations\r\nfrom functools import lru_cache\r\nfrom bisect import bisect_left\r\nimport heapq\r\n\r\nt = int(input())\r\n\r\ndef dval():\r\n    return 0\r\n\r\ndef lin():\r\n    return [int(i) for i in input().split()]\r\n\r\n@lru_cache(maxsize=None) \r\ndef BinarySearch(a, x):\r\n    i = bisect_left(a, x)\r\n    if i != len(a) and a[i] == x:\r\n        return i\r\n    else:\r\n        return -1\r\n\r\nfor _ in range(0,t):\r\n    n = int(input())\r\n    s = input()\r\n    c = 0\r\n    v = 0\r\n    a = {\r\n        'a':0,\r\n        'e':0,\r\n        'b':1,\r\n        'c':1,\r\n        'd':1\r\n    }\r\n    s = list(s)\r\n    s.reverse()\r\n    ans = []\r\n    for i in s:\r\n        ans.append(i)\r\n        if(v==1 and a[i] == 1):\r\n            v=0\r\n            ans.append('.')\r\n        if(a[i] == 0):\r\n            v = 1\r\n    ans.reverse()\r\n    print(''.join(ans[1:]))",
        "rejectedCode": "import math\r\nfrom collections import Counter,defaultdict\r\nfrom itertools import accumulate,permutations,combinations\r\nfrom functools import lru_cache\r\nfrom bisect import bisect_left\r\nimport heapq\r\n\r\nt = int(input())\r\n\r\ndef dval():\r\n    return 0\r\n\r\ndef lin():\r\n    return [int(i) for i in input().split()]\r\n\r\n@lru_cache(maxsize=None) \r\ndef BinarySearch(a, x):\r\n    i = bisect_left(a, x)\r\n    if i != len(a) and a[i] == x:\r\n        return i\r\n    else:\r\n        return -1\r\n\r\nfor _ in range(0,t):\r\n    n = int(input())\r\n    s = input()\r\n    c = 0\r\n    v = 0\r\n    a = {\r\n        'a':0,\r\n        'e':0,\r\n        'b':1,\r\n        'c':1,\r\n        'd':1\r\n    }\r\n    s = list(s)\r\n    s.reverse()\r\n    ans = []\r\n    tmp = []\r\n    for i in s:\r\n        tmp.insert(0,i)\r\n        if(v==1 and a[i] == 1):\r\n            v=0\r\n            ans.insert(0,''.join(tmp))\r\n            tmp = []\r\n        if(a[i] == 0):\r\n            v = 1\r\n    print('.'.join(ans))",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 39,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247207235",
            "author": "maheshkumar_177",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708329660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247207153",
            "author": "maheshkumar_177",
            "lang": "Python 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1708329600
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    for i in range(3):\r\n        a = input()\r\n        if 'A' not in a:\r\n            print(\"A\")\r\n        if 'B' not in a:\r\n            print(\"B\")\r\n        if 'C' not in a:\r\n            print(\"C\")\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    for i in range(3):\r\n        a = input()\r\n        if 'A' not in a:\r\n            print(\"A\")\r\n        if 'B' not in a:\r\n            print(\"B\")\r\n        if 'C' not in a:\r\n            print(\"C\")\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247201316",
            "author": "anurag.in",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 405,
            "memory": 29700,
            "submissionTime": 1708326900
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247200134",
            "author": "anurag.in",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708326300
        },
        "acceptedCode": "n = int(input())\r\nwhile n > 0:\r\n  a = int(input())\r\n  list1 = list(map(int,input().split()))\r\n  l = sum(list1)\r\n  if l**0.5 == int(l**0.5):\r\n    print(\"YES\")\r\n  else:\r\n    print(\"NO\")\r\n  n-=1",
        "rejectedCode": "n = int(input())\r\nwhile n > 0:\r\n  for i in range(3):\r\n    list1 = list(map(str,input().split()))\r\n    if list1.count('A') == 0:\r\n      print(\"A\")\r\n    elif list1.count('B') == 0:\r\n      print(\"B\")\r\n    elif list1.count('C') == 0:\r\n      print(\"C\")\r\n    else:\r\n      continue\r\n  n-=1",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nA\r\nA\r\nA\r\nA\r\nA\r\nA\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 3,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247199529",
            "author": "aniketkumar8",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708325940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247198969",
            "author": "aniketkumar8",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708325700
        },
        "acceptedCode": "t = int(input())\r\nfor t in range(t):\r\n    a, b ,c = map(int, input().split())\r\n    print(a^b^c)\r\n        ",
        "rejectedCode": "t = input()\r\nwhile(t):\r\n    i = 0\r\n    while(i<3):\r\n        a, b ,c = input().split(\" \")\r\n        print(int(a)^int(b)^int(c))\r\n        ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247194013",
            "author": "Shahbaz_Mehmood",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 23600,
            "submissionTime": 1708323120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247193862",
            "author": "Shahbaz_Mehmood",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 3,
            "runTime": 389,
            "memory": 9400,
            "submissionTime": 1708323060
        },
        "acceptedCode": "for i in range(int(input())):\r\n  l=int(input())\r\n  sm=sum(map(int,input().split()))\r\n  if sm**0.5 == int(sm**0.5):\r\n      print('YES')\r\n  else:\r\n      print('NO')\r\n",
        "rejectedCode": "sq=[]\r\nfor i in range(10000):\r\n    sq.append(i**2)\r\n#print(sq)\r\n\r\nimport math\r\nfor i in range(int(input())):\r\n  l=int(input())\r\n  sm=sum(map(int,input().split()))\r\n  if sm in sq:\r\n      print('YES')\r\n  else:\r\n      print('NO')\r\n",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246638118",
            "author": "seretwer",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 343,
            "memory": 29800,
            "submissionTime": 1708055400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246637162",
            "author": "seretwer",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 265,
            "memory": 9200,
            "submissionTime": 1708054740
        },
        "acceptedCode": "import math\r\nm = int(input())\r\nfor i in range(m):\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    s = 0\r\n    for i in l:\r\n        s += i\r\n    if int(math.sqrt(s)) * int(math.sqrt(s)) == s:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "import math\r\nm = int(input())\r\nfor i in range(m):\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    s = 0\r\n    for i in l:\r\n        s += i\r\n    if math.sqrt(s)*math.sqrt(s) == s:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 9,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247157562",
            "author": "Muhammad_Faiq_Quraishi",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 1600,
            "submissionTime": 1708301160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247157427",
            "author": "Muhammad_Faiq_Quraishi",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12300,
            "submissionTime": 1708301040
        },
        "acceptedCode": "\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    ans = ''\r\n    for index in range(n):\r\n        if index == 0:\r\n            ans += s[index]\r\n        elif index == 1:\r\n            ans += s[index]\r\n        elif index < n-1: \r\n            if s[index] not in ['a','e','i','o','u'] and s[index + 1] not in ['a','e','i','o','u']:\r\n                ans += s[index]\r\n            elif s[index] in ['a','e','i','o','u'] and s[index - 1] not in ['a','e','i','o','u']:\r\n                ans += s[index]\r\n            else:\r\n                ans += '.'\r\n                ans += s[index]\r\n        elif index >= n-1:\r\n            ans += s[index]\r\n    print(ans)",
        "rejectedCode": "\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    ans = ''\r\n    for index in range(n):\r\n        if index == 0:\r\n            ans += s[index]\r\n        elif index == 1:\r\n            ans += s[index]\r\n        elif index < n-1: \r\n            if s[index] not in ['a','e','i','o','u'] and s[index + 1] not in ['a','e','i','o','u']:\r\n                ans += s[index]\r\n            elif s[index] in ['a','e','i','o','u'] and s[index - 1] not in ['a','e','i','o','u']:\r\n                ans += s[index]\r\n            else:\r\n                ans += '.'\r\n                ans += s[index]\r\n        elif index >= n-1:\r\n            ans += s[index]\r\n    print(ans)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "247155586",
            "author": "amongsus",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 21600,
            "submissionTime": 1708299960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239757478",
            "author": "amongsus",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12500,
            "submissionTime": 1703983620
        },
        "acceptedCode": "#joe mama :) :) :)\r\nimport heapq\r\nimport math\r\nimport random\r\nimport os, sys\r\nfrom io import BytesIO,IOBase\r\nimport time, io\r\nfrom collections import Counter\r\nfrom functools import cache\r\nBUFSIZ=8192\r\nclass FastIO(IOBase):\r\n    newlines=0\r\n    def __init__(self,file):\r\n        self._fd=file.fileno()\r\n        self.buffer=BytesIO()\r\n        self.writable=\"n\"in file.mode or \"r\" not in file.mode\r\n        self.write=self.buffer.write if self.writable else None\r\n    def read(self):\r\n        while True:\r\n            b=os.read(self._fd,max(os.fstat(self._fd).st_size,BUFSIZ))\r\n            if not b:\r\n                break\r\n            ptr=self.buffer.tell()\r\n            self.buffer.seek(0,2),self.buffer.write(b),self.buffer.seek(ptr)\r\n        self.newlines=0\r\n        return self.buffer.read()\r\n    def readline(self):\r\n        while self.newlines==0:\r\n            b=os.read(self._fd,max(os.fstat(self._fd).st_size, BUFSIZ))\r\n            self.newlines=b.count(b\"\\n\")+(not b)\r\n            ptr=self.buffer.tell()\r\n            self.buffer.seek(0, 2),self.buffer.write(b),self.buffer.seek(ptr)\r\n        self.newlines-=1\r\n        return self.buffer.readline()\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd,self.buffer.getvalue())\r\n            self.buffer.truncate(0),self.buffer.seek(0)\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer=FastIO(file)\r\n        self.flush=self.buffer.flush\r\n        self.writable=self.buffer.writable\r\n        self.write=lambda s:self.buffer.write(s.encode(\"ascii\"))\r\n        self.read=lambda:self.buffer.read().decode(\"ascii\")\r\n        self.readline=lambda:self.buffer.readline().decode(\"ascii\")\r\nif sys.version_info[0] < 3:\r\n    sys.stdin,sys.stdout=FastIO(sys.stdin),FastIO(sys.stdout)\r\nelse:\r\n    sys.stdin,sys.stdout=IOWrapper(sys.stdin),IOWrapper(sys.stdout)\r\ninput = lambda:sys.stdin.readline().rstrip(\"\\r\\n\")\r\nMOD = 10**9 + 7\r\nPI = \"31415926535897932384626433832795\"\r\ndef inp():\r\n    return (int(input()))\r\ndef inlt():\r\n    return (list(map(int,input().split())))\r\ndef insr():\r\n    s = input()\r\n    return (list(s[:len(s)]))\r\ndef invr():\r\n    return (map(int,input().split()))\r\ndef invr2():\r\n    return [*map(int, input().split())]\r\ndef invr3():\r\n    return [*map(str, input().split())]\r\ndef stri():\r\n    return str(input())\r\ndef invrs():\r\n    return (map(str, input().split()))\r\ndef yes(condition):\r\n    print(\"Yes\" if condition else \"No\")\r\ndef distinctSubstring(str):\r\n    # Put all distinct substring in a HashSet\r\n    result = set()\r\n    # List All Substrings\r\n    for i in range(len(str)+1):\r\n        for j in range(i + 1, len(str) + 1):\r\n            # Add each substring in Set\r\n            result.add(str[i:j])\r\n        # Return size of the HashSet\r\n    return result\r\nfor _ in range(int(input())):\r\n    a = inp()\r\n    b = stri()\r\n    e = []\r\n    i = len(b) - 1\r\n    while i > -1:\r\n        if b[i] != \"a\" and b[i] != \"e\":\r\n            e.append(\".\")\r\n            e.append(b[i])\r\n            e.append(b[i - 1])\r\n            e.append(b[i - 2])\r\n            i -= 3\r\n        else:\r\n            e.append(\".\")\r\n            e.append(b[i])\r\n            e.append(b[i - 1])\r\n            i -= 2\r\n    e[0] = \"\"\r\n    e = \"\".join(e)\r\n    print(e[::-1])\r\n\r\n\r\n\r\n\r\n        \r\n\r\n    \r\n\r\n    \r\n    \r\n\r\n\r\n        \r\n        \r\n\r\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n    ",
        "rejectedCode": "#joe mama :) :) :)\r\nimport heapq\r\nimport math\r\nimport random\r\nimport os,sys\r\nfrom io import BytesIO,IOBase\r\nimport time, io\r\nBUFSIZ=8192\r\nclass FastIO(IOBase):\r\n    newlines=0\r\n    def __init__(self,file):\r\n        self._fd=file.fileno()\r\n        self.buffer=BytesIO()\r\n        self.writable=\"n\"in file.mode or \"r\" not in file.mode\r\n        self.write=self.buffer.write if self.writable else None\r\n    def read(self):\r\n        while True:\r\n            b=os.read(self._fd,max(os.fstat(self._fd).st_size,BUFSIZ))\r\n            if not b:\r\n                break\r\n            ptr=self.buffer.tell()\r\n            self.buffer.seek(0,2),self.buffer.write(b),self.buffer.seek(ptr)\r\n        self.newlines=0\r\n        return self.buffer.read()\r\n    def readline(self):\r\n        while self.newlines==0:\r\n            b=os.read(self._fd,max(os.fstat(self._fd).st_size, BUFSIZ))\r\n            self.newlines=b.count(b\"\\n\")+(not b)\r\n            ptr=self.buffer.tell()\r\n            self.buffer.seek(0, 2),self.buffer.write(b),self.buffer.seek(ptr)\r\n        self.newlines-=1\r\n        return self.buffer.readline()\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd,self.buffer.getvalue())\r\n            self.buffer.truncate(0),self.buffer.seek(0)\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer=FastIO(file)\r\n        self.flush=self.buffer.flush\r\n        self.writable=self.buffer.writable\r\n        self.write=lambda s:self.buffer.write(s.encode(\"ascii\"))\r\n        self.read=lambda:self.buffer.read().decode(\"ascii\")\r\n        self.readline=lambda:self.buffer.readline().decode(\"ascii\")\r\nif sys.version_info[0]<3:\r\n    sys.stdin,sys.stdout=FastIO(sys.stdin),FastIO(sys.stdout)\r\nelse:\r\n    sys.stdin,sys.stdout=IOWrapper(sys.stdin),IOWrapper(sys.stdout)\r\n    \r\ninput = lambda:sys.stdin.readline().rstrip(\"\\r\\n\")\r\nMOD = 10**9 + 7\r\nPI = \"31415926535897932384626433832795\"\r\ndef inp():\r\n    return (int(input()))\r\ndef inlt():\r\n    return (list(map(int,input().split())))\r\ndef insr():\r\n    s = input()\r\n    return (list(s[:len(s)]))\r\ndef invr():\r\n    return (map(int,input().split()))\r\ndef invr2():\r\n    return [*map(int, input().split())]\r\ndef invr3():\r\n    return [*map(str, input().split())]\r\ndef stri():\r\n    return str(input())\r\ndef invrs():\r\n    return (map(str, input().split()))\r\ndef yes(condition):\r\n    print(\"Yes\" if condition else \"No\")\r\ndef listToString(s):\r\n    str1 = \"\"\r\n    for ele in s:\r\n        str1 += ele\r\n    return str1\r\ndef lcm(a, b):\r\n    return abs(a*b) // math.gcd(a, b)\r\ndef p(e):\r\n    print(e)\r\ndef even(num):\r\n    return num % 2 == 0\r\ndef back(word):\r\n    return word[::-1]\r\ndef distinctSubstring(str):\r\n    # Put all distinct substring in a HashSet\r\n    result = set()\r\n    # List All Substrings\r\n    for i in range(len(str)+1):\r\n        for j in range(i + 1, len(str) + 1):\r\n            # Add each substring in Set\r\n            result.add(str[i:j])\r\n        # Return size of the HashSet\r\n    return result\r\nmost = 10000000000 #min function purposes\r\nleast = -1 #max function purposes\r\nfor tt in range(int(input())):\r\n    a = inp()\r\n    b = stri()\r\n    e = \"\"\r\n    i = len(b) - 1\r\n    while i > -1:\r\n        if b[i] != \"a\" and b[i] != \"e\":\r\n            e += \".\" + b[i] + b[i - 1] + b[i - 2] \r\n            i -= 3\r\n        else:\r\n            e += \".\" + b[i] + b[i - 1]\r\n            i -= 2\r\n    e = e.replace(e[0], \"\", 1)\r\n    e = e[::-1]\r\n    print(e)\r\n    \r\n    \r\n    \r\n\r\n\r\n    \r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 5,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247148175",
            "author": "konsentik",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 26200,
            "submissionTime": 1708276320
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "247147506",
            "author": "konsentik",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 93,
            "memory": 0,
            "submissionTime": 1708275480
        },
        "acceptedCode": "def sq(a, t=1e-10):\r\n    x = a\r\n    while True:\r\n        n = 0.5*(x + a / x)\r\n        if abs(x - n) < t:\r\n            break\r\n        x = n\r\n    return x\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = sum(list(map(int, input().split())))\r\n    f = int(sq(a))\r\n    if f*f == a:\r\n        print(\"YES\")\r\n    else:\r\n        print('NO')",
        "rejectedCode": "from math import sqrt\r\n\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = sum(list(map(int, input().split())))\r\n    if sqrt(a)*sqrt(a)==a:\r\n        print(\"YES\")\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247140215",
            "author": "kalebwondimu33",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708268880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "247136145",
            "author": "kalebwondimu33",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708266060
        },
        "acceptedCode": "t=int(input())\r\nfor _ in range(t):\r\n  for i in range(3):\r\n    num=input()\r\n    if \"A\" not in num:\r\n      print(\"A\")\r\n      continue\r\n    elif \"B\" not in num:\r\n      print(\"B\")\r\n      continue\r\n    elif \"C\" not in num:\r\n      print(\"C\")\r\n      continue",
        "rejectedCode": "t=int(input())\r\nfor _ in range(t):\r\n  for i in range(3):\r\n    num=input()\r\n    if \"A\" not in num:\r\n      print(\"A\")\r\n      break\r\n    elif \"B\" not in num:\r\n      print(\"B\")\r\n      break\r\n    elif \"C\" not in num:\r\n      print(\"C\")\r\n      break",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 7,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "247112006",
            "author": "LKnupp",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708253460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246937249",
            "author": "LKnupp",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708211580
        },
        "acceptedCode": "def solve():\r\n    n = list(map(int, input().split()))\r\n    ans = 0\r\n\r\n    for i in n:\r\n        ans ^= i\r\n\r\n    print(ans)\r\n\r\n\r\ndef main():\r\n    t = int(input())\r\n\r\n    for i in range(t):\r\n        solve()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "def solve():\r\n    n = list(map(int, input().split()))\r\n    ans = 0\r\n\r\n    for i in n:\r\n        ans ^= i\r\n\r\n\r\ndef main():\r\n    t = int(input())\r\n\r\n    for i in range(t):\r\n        solve()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10], but output contains 0 elements\r\n"
        },
        "errorLine": 8,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246983542",
            "author": "FatePSE",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 10700,
            "submissionTime": 1708236720
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246979445",
            "author": "FatePSE",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 4500,
            "submissionTime": 1708234260
        },
        "acceptedCode": "n = int(input())\r\nfor z in range(n):\r\n    k = int(input())\r\n    s = input()\r\n    gs = ''\r\n    l = []\r\n    for j in s:\r\n        if j in 'ae':\r\n            gs += 'v'\r\n        else:\r\n            gs += 'c'\r\n    p = m = 0\r\n    while m != -1:\r\n        m = gs.find('cc',p)\r\n        if m != -1:\r\n            l.append(s[p:m+1])\r\n            p = m+1\r\n    l.append(s[p:])\r\n\r\n    num = []\r\n    for i in l:\r\n        if len(i)%2 == 0:\r\n            for j in range(0, len(i),2):\r\n                num.append(i[j:j+2])\r\n        elif len(i)>3:\r\n            for j in range(0, len(i)-3,2):\r\n                num.append(i[j:j+2])\r\n            num.append(i[-3:])\r\n        else:\r\n            num.append(i)\r\n    print(*num, sep = '.')\r\n",
        "rejectedCode": "n = int(input())\r\ng = 'ae'\r\nc = 'bcd'\r\ns = ''\r\nk = ''\r\nnum = []\r\nl = []\r\nfor z in range(n):\r\n    s = ''\r\n    k = ''\r\n    num = []\r\n    l = []\r\n    k = int(input())\r\n    s = input()\r\n    for i in range(-len(s), -1):\r\n        if s[i] not in g and s[i+1] not in g:\r\n            num.append(i+1)\r\n#    print(num)\r\n    l = list(s)\r\n    v = 0\r\n    for i in num:\r\n        l.insert(k+i+v, '.')\r\n        v += 1\r\n#    print(l)\r\n    s = ''.join(l)\r\n#    print(s)\r\n    l = list(s.split('.'))\r\n#    print(l)\r\n    num = []\r\n    for i in l:\r\n        if len(i)%2 == 0:\r\n            for j in range(0, len(i),2):\r\n                num.append(i[j:j+2])\r\n        elif len(i)>3:\r\n            for j in range(0, len(i)-3,2):\r\n                num.append(i[j:j+2])\r\n            num.append(i[-3:])\r\n        else:\r\n            num.append(i)\r\n    print(*num, sep = '.')\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246958737",
            "author": "s_i_b_b_",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708226340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246273340",
            "author": "s_i_b_b_",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707831120
        },
        "acceptedCode": "n = int(input())\r\nfor i in range(n):\r\n    a,b,c = map(int,input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    elif a == c:\r\n        print(b)\r\n",
        "rejectedCode": "n = int(input())\r\nfor i in range(n):\r\n    a,b,c = map(int,input())\r\n    if a == b:\r\n        print(c)\r\n    if b == c:\r\n        print(a)\r\n    if a == c:\r\n        print(b)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246958501",
            "author": "2110080046",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708226220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246958166",
            "author": "2110080046",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708226040
        },
        "acceptedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    latin_square = [input().strip() for _ in range(3)]\r\n\r\n   \r\n    for row in latin_square:\r\n        count = {'A': 0, 'B': 0, 'C': 0}\r\n        for char in row:\r\n            if char != '?':\r\n                count[char] += 1\r\n        for letter in 'ABC':\r\n            if count[letter] == 0:\r\n                print(letter)\r\n                break\r\n",
        "rejectedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    latin_square = [input().strip() for _ in range(3)]\r\n\r\n    # Check rows\r\n    for row in latin_square:\r\n        count = {'A': 0, 'B': 0, 'C': 0}\r\n        for char in row:\r\n            if char != '?':\r\n                count[char] += 1\r\n        for letter in 'ABC':\r\n            if count[letter] == 0:\r\n                print(letter)\r\n                break\r\n\r\n    # Check columns\r\n    for col in range(3):\r\n        count = {'A': 0, 'B': 0, 'C': 0}\r\n        for row in range(3):\r\n            char = latin_square[row][col]\r\n            if char != '?':\r\n                count[char] += 1\r\n        for letter in 'ABC':\r\n            if count[letter] == 0:\r\n                print(letter)\r\n                break\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nA\r\nB\r\nB\r\nC\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 6,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246944165",
            "author": "SirajShabbir123",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 20300,
            "submissionTime": 1708217760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246944090",
            "author": "SirajShabbir123",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708217700
        },
        "acceptedCode": "from math import sqrt\r\n \r\nt = int(input())\r\n \r\nfor i in range(t):\r\n    n = int(input())\r\n    total_squares = sum(map(int, input().split(\" \")))\r\n    sqaure_root = int(sqrt(total_squares))\r\n    \r\n    if(sqaure_root*sqaure_root == total_squares):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "from math import sqrt\r\n \r\nt = int(input())\r\n \r\nfor i in range(t):\r\n    n = int(input())\r\n    total_squares = sum(map(int, input().split(\" \")))\r\n    sqaure_root = sqrt(total_squares)\r\n    print(sqaure_root)\r\n    if(sqaure_root*sqaure_root == total_squares):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "3.0\r\nYES\r\n4.0\r\nYES\r\n5.291502622129181\r\nNO\r\n6.0\r\nYES\r\n2.8284271247461903\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong output format YES or NO expected, but 3.0 found [1st token]\r\n"
        },
        "errorLine": 8,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246891480",
            "author": "Salma-Hattab",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 26200,
            "submissionTime": 1708171860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246886766",
            "author": "Salma-Hattab",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1708170660
        },
        "acceptedCode": "import math\r\n\r\ndef is_perfect (m) :\r\n    sqrt_m = math.sqrt(m)\r\n    return sqrt_m.is_integer()\r\n    \r\n\r\ns = int(input())\r\nfor i in range(s) :\r\n    l = int(input())\r\n    a = list(map(int,input().split()))\r\n    m = sum(a)\r\n    if is_perfect (m) :\r\n        print(\"YES\")\r\n    else :\r\n        print(\"NO\")",
        "rejectedCode": "s = int(input())\r\nfor i in range(s):\r\n    a = input()\r\n    l = input()\r\n    m = input()\r\n    k = [\"A\",\"B\",\"C\"]\r\n    if a[0] != \"A\" and  a[0] != \"B\":\r\n        for i in k :\r\n            if i not in a :\r\n                print(i)\r\n    if l[0] != \"A\" and  l[0] != \"B\" :\r\n        for i in k :\r\n            if i not in l :\r\n                print(i)\r\n    if m[0] != \"A\" and  m[0] != \"B\" :\r\n        for i in k :\r\n            if i not in m :\r\n                print(i)",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nA\r\nB\r\nA\r\nC\r\nA\r\nB\r\nB\r\nA\r\nB\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nA\r\nB\r\nB\r\nA\r\nC\r\nB\r\nA\r\nB\r\nC\r\nB\r\nA\r\nA\r\nB\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nB\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nA\r\nB\r\nB\r\nA\r\nC\r\nB\r\nA\r\nA\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 4th words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 1,
        "bugType": "single_hunk"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246805902",
            "author": "Miron_Samarin",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 156,
            "memory": 32300,
            "submissionTime": 1708155300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246803532",
            "author": "Miron_Samarin",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1708153980
        },
        "acceptedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    x = list(input())\r\n    ans = []\r\n    marker = 0\r\n    while True:\r\n        if marker + 2 == n:\r\n            ans.append(x[marker] + x[marker + 1])\r\n            ans.append(\".\")\r\n            break\r\n        if marker >= n:\r\n            break\r\n        ls = x[marker] + x[marker + 1] + x[marker + 2]\r\n        marker += 3\r\n        if marker < n:\r\n            if x[marker] == \"a\" or x[marker] == \"e\":\r\n                marker -= 1\r\n                ls = x[marker - 2] + x[marker - 1]\r\n        ans += [ls]\r\n        ans += [\".\"]\r\n    ans.pop(-1)\r\n    print(*ans, sep=\"\")",
        "rejectedCode": "for __ in range(int(input()):\r\n    n = int(input())\r\n    x = list(map(int, input().split()))\r\n    if int(sum(x) ** 0.5) ** 2 == (sum(x) ** 0.5) ** 2:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": "multi_hunks"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246797358",
            "author": "bilalboualam63",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1708152240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246797074",
            "author": "bilalboualam63",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708152060
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    a,b,c = input().split()\r\n    s = b+c\r\n    print(int(a)) if a not in s  else print(int(b)) if b != a else print(int(c))\r\n\r\n\r\n\r\n\r\n",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    a,b,c = input().split()\r\n    s = b+c\r\n    print(int(a)) if a not in s  else print(int(b))\r\n\r\n\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n5\r\n7\r\n0\r\n6\r\n8\r\n5\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 3rd numbers differ - expected: '6', found: '5'\r\n"
        },
        "errorLine": 5,
        "bugType": "single_line"
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246795309",
            "author": "coder.sy",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 140,
            "memory": 1700,
            "submissionTime": 1708151160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240400169",
            "author": "coder.sy",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33200,
            "submissionTime": 1704462540
        },
        "acceptedCode": "for _ in range(int(input())):\r\n  n=int(input())\r\n  s=input()\r\n  ans,i,x=\"\",n-1,0\r\n  while i>0:\r\n    if s[i]=='a' or s[i]=='e':x=2\r\n    else:x=3\r\n    for j in range(x):ans+=s[i-j]\r\n    ans+='.'\r\n    i-=x\r\n  ans=ans[:-1]\r\n  print(ans[::-1])",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    A=list(map(int,input().split()))\r\n\r\n    D={0:0}\r\n    s,ans=0,False\r\n    for i in range(n):\r\n        if i%2:s-=A[i]\r\n        else:s+=A[i]\r\n        if s not in D:D[s]=1\r\n        else:ans=True\r\n        if ans:break\r\n    print(\"YES\" if ans else \"NO\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246765454",
            "author": "Sultan_ali_shah",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 405,
            "memory": 29700,
            "submissionTime": 1708135920
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239905669",
            "author": "Sultan_ali_shah",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704107280
        },
        "acceptedCode": "for x in range(int(input())):\r\n    a=int(input())\r\n    b=list(map(int,input().split()))\r\n    c=sum(b)\r\n    d=(c**0.5)//1\r\n    if d*d==c:print(\"YES\")\r\n    else:print(\"NO\")\r\n    ",
        "rejectedCode": "\r\na=[list(map(str, input().split())) for _ in range(3)]\r\nfor x in a:\r\n    for i in x:\r\n        if \"A\" not in i:\r\n            print(\"A\")\r\n            break\r\n        elif \"B\" not in i:\r\n            print(\"B\")\r\n            break\r\n        elif \"C\" not in i:\r\n            print(\"C\")\r\n            break",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "246761797",
            "author": "CODER_TAHMID",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 342,
            "memory": 500,
            "submissionTime": 1708134000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "246761667",
            "author": "CODER_TAHMID",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1708133940
        },
        "acceptedCode": "from heapq import heappush, heappop\r\n \r\ndef solve():\r\n    n,m=map(int,input().split())\r\n    dct=[[]for i in range(n)]\r\n    for i in range(m):\r\n        a,b,w=map(int,input().split())\r\n        dct[a-1].append([b-1,w])\r\n        dct[b - 1].append([a - 1, w])\r\n    A=list(map(int,input().split()))\r\n    h=[[0,0,A[0]]]\r\n    mp={}\r\n    while h:\r\n        t,p,c=heappop(h)\r\n        if p==n-1:\r\n            print(t)\r\n            return\r\n        if c>A[p]:\r\n            c=A[p]\r\n        if p in mp and mp[p]<=c:\r\n            continue\r\n        else:\r\n            mp[p]=c\r\n        for y,w in dct[p]:\r\n            heappush(h,[t+w*c,y,c])\r\n \r\n \r\n \r\n \r\n \r\nfor _ in range(int(input())):\r\n    solve()",
        "rejectedCode": "import sys;input=sys.stdin.readline\r\ndef Q(i):\r\n  r=0;j=i\r\n  while i>0:r+=t[i];i-=(i&-i)\r\n  while j<=n:t[j]+=1;j+=(j&-j)\r\n  return r\r\nfor _ in range(int(input())):\r\n  n=int(input())\r\n  q=[[*map(int,input().split())]for _ in range(n)]\r\n  q.sort()\r\n  t={};d=[]\r\n  for a,b in sorted(q,key=lambda a:a[1]):t[b]=len(t)+1\r\n  for a,b in q:d.append(t[b])\r\n  d+=[0]\r\n  d.reverse()\r\n  t=[0]*(n+1)\r\n  s=0\r\n  for i in range(1,n+1):s+=Q(d[i])\r\n  print(s)",
        "failedTestCase": {
            "input": "3\r\n5 5\r\n1 2 2\r\n3 2 1\r\n2 4 5\r\n2 5 7\r\n4 5 1\r\n5 2 1 3 3\r\n5 10\r\n1 2 5\r\n1 3 5\r\n1 4 4\r\n1 5 8\r\n2 3 6\r\n2 4 3\r\n2 5 2\r\n3 4 1\r\n3 5 8\r\n4 5 2\r\n7 2 8 4 1\r\n7 10\r\n3 2 8\r\n2 1 4\r\n2 5 7\r\n2 6 4\r\n7 1 2\r\n4 3 5\r\n6 4 2\r\n6 7 1\r\n6 7 4\r\n4 5 9\r\n7 6 5 4 3 2 1\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246760519",
            "author": "anurberdi",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 139,
            "memory": 2200,
            "submissionTime": 1708133340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246752972",
            "author": "anurberdi",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708128180
        },
        "acceptedCode": "n = int(input())\r\n \r\nfor _ in range(n):\r\n    l = int(input())\r\n    arr = list(input())\r\n    ans = \"\"\r\n    vowels = [\"a\", \"e\"]\r\n    while len(arr) > 0:\r\n        if arr[-1] in vowels:\r\n            for _ in range(2):\r\n                ans += arr.pop(-1)\r\n            ans += \".\"\r\n        else:\r\n            for _ in range(3):\r\n                ans += arr.pop(-1)\r\n            ans += \".\"\r\n    ans = ans[:-1]\r\n    print(ans[::-1])",
        "rejectedCode": "a=int(input())\r\nfor i in range(1,a+1):\r\n    a,b,c=input(),input(),input()\r\n    if a==b:\r\n            print(int(c))\r\n    elif b==c:\r\n              print(int(a))\r\n    elif a==c:\r\n              print(int(b)) \r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "246740728",
            "author": "prattaydey",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 2370,
            "memory": 67100,
            "submissionTime": 1708115280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245936973",
            "author": "prattaydey",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 300,
            "submissionTime": 1707693780
        },
        "acceptedCode": "import sys\r\nimport math\r\nimport bisect\r\nfrom sys import stdin,stdout\r\nfrom math import gcd,floor,sqrt,log\r\nfrom collections import defaultdict, Counter\r\nfrom bisect import bisect_left as bl,bisect_right as br\r\n\r\nsys.setrecursionlimit(100000000)\r\n\r\ninp    =lambda: int(input())\r\nstrng  =lambda: input().strip()\r\njn     =lambda x,l: x.join(map(str,l))\r\nstrl   =lambda: list(input().strip())\r\nmul    =lambda: map(int,input().strip().split())\r\nmulf   =lambda: map(float,input().strip().split())\r\nseq    =lambda: list(map(int,input().strip().split()))\r\n\r\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\r\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\r\n\r\nflush  =lambda: stdout.flush()\r\nstdstr =lambda: stdin.readline()\r\nstdint =lambda: int(stdin.readline())\r\nstdpr  =lambda x: stdout.write(str(x))\r\n\r\nmod=1000000007\r\n\r\nclass BIT:\r\n\tdef __init__(self, n):\r\n\t\tself.tree = [0] * n\r\n\t\r\n\t# \r\n\tdef add(self, i, v):\r\n\t\twhile i < len(self.tree):\r\n\t\t\tself.tree[i] += v\r\n\t\t\ti += i & -i  # flips the last set bit\r\n\t\r\n\t\r\n\t# returns range sum up to index x\r\n\tdef query(self, i):\r\n\t\tres = 0\r\n\t\twhile i:\r\n\t\t\tres += self.tree[i]\r\n\t\t\ti -= i & -i # adds last set bit\r\n\t\treturn res\r\n        \r\ndef main():\r\n\tn = int(input())\r\n\tl = []\r\n\tfor j in range(n):\r\n\t\tl.append(list(map(int,input().split())))\r\n\tl.sort()\r\n\tb = []\r\n\tfor j in range(n):\r\n\t\tb.append([l[j][1],j+1])\r\n\tb.sort()\r\n\ta = list(map(lambda x:x[1],b))\r\n\tt = BIT(n+1)\r\n\tans = 0\r\n\tfor j in range(n-1,-1,-1):\r\n\t\tans += t.query(a[j])\r\n\t\tt.add(a[j],1)\r\n\tprint(ans)\r\n\t\t\r\nif __name__ == \"__main__\":\r\n\tt = int(input())\r\n\twhile t > 0:\r\n\t\tmain()\r\n\t\tt -= 1",
        "rejectedCode": "import sys\r\nimport math\r\nimport bisect\r\nfrom sys import stdin,stdout\r\nfrom math import gcd,floor,sqrt,log\r\nfrom collections import defaultdict as dd, Counter\r\nfrom bisect import bisect_left as bl,bisect_right as br\r\n\r\nsys.setrecursionlimit(100000000)\r\n\r\ninp    =lambda: int(input())\r\nstrng  =lambda: input().strip()\r\njn     =lambda x,l: x.join(map(str,l))\r\nstrl   =lambda: list(input().strip())\r\nmul    =lambda: map(int,input().strip().split())\r\nmulf   =lambda: map(float,input().strip().split())\r\nseq    =lambda: list(map(int,input().strip().split()))\r\n\r\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\r\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\r\n\r\nflush  =lambda: stdout.flush()\r\nstdstr =lambda: stdin.readline()\r\nstdint =lambda: int(stdin.readline())\r\nstdpr  =lambda x: stdout.write(str(x))\r\n\r\nmod=1000000007\r\n\r\n\r\n#main code\r\ndef main():\r\n\tn = int(input())\r\n\tv = ['a','e']\r\n\ts = list(input().split())\r\n\tfor i in range(2, n):\r\n\t\tif s[i] in v:\r\n\t\t\ts[i - 1] = '.' + s[i - 1]\r\n\tprint(*s, sep='')\r\n\t\t\r\n\t\t\r\nif __name__ == \"__main__\":\r\n\tt = 1\r\n\tt = int(input())\r\n\twhile t > 0:\r\n\t\tmain()\r\n\t\tt -= 1",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246705761",
            "author": "medfadiabaidi1",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 420,
            "memory": 29700,
            "submissionTime": 1708087020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246677832",
            "author": "medfadiabaidi1",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 3400,
            "submissionTime": 1708076640
        },
        "acceptedCode": "import math\r\nfor i in range(int(input())):\r\n n=int(input())\r\n l=list(map(int,input().split()))\r\n s=sum(l)\r\n if math.sqrt(s)==int(math.sqrt(s)):\r\n  print(\"yes\")\r\n else :\r\n  print(\"no\")",
        "rejectedCode": "for i in range(int(input())):\r\n n=int(input())\r\n l=list(map(int,input().split()))\r\n s=sum(l)\r\n if sqrt(s)==int(sqrt(s)):\r\n  print(\"yes\")\r\n else :\r\n  print(\"no\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246691785",
            "author": "Rohidul",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1708081860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246691020",
            "author": "Rohidul",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 93,
            "memory": 100,
            "submissionTime": 1708081620
        },
        "acceptedCode": "import math \r\nt=int(input())\r\nfor i in range(t):\r\n    sum=0\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    for i in range(n):\r\n        sum+=l[i]    \r\n    num=int(math.sqrt(sum))\r\n    if num*num==sum:\r\n        print(\"YES\")\r\n    else:print('NO')",
        "rejectedCode": "import math \r\nt=int(input())\r\nfor i in range(t):\r\n    sum=0\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    for i in range(n):\r\n        sum+=l[i]\r\n    #print(sum)    \r\n    num=math.sqrt(sum)\r\n    if num*num==sum:\r\n        print(\"YES\")\r\n    else:print('NO')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246683690",
            "author": "Lugixe",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 10000,
            "submissionTime": 1708079220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246683237",
            "author": "Lugixe",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 10400,
            "submissionTime": 1708078980
        },
        "acceptedCode": "n=int(input())\r\nv=set('ae')\r\nc=set('bcd')\r\nfor _ in range(n):\r\n    l=int(input())\r\n    s=input()\r\n    ans=[]\r\n    i=0\r\n    while i<l:\r\n        if s[i] in c:\r\n            if not ans or ans[-1][-1] in c or len(ans[-1][-1])==3:\r\n                ans.append(s[i])\r\n            else:\r\n                ans[-1]+=s[i]\r\n        else:\r\n            if len(ans[-1])==3:\r\n                last=ans[-1][-1]\r\n                ans[-1]=ans[-1][:-1]\r\n                ans.append(last+s[i])\r\n            else:\r\n                ans[-1]+=s[i]\r\n        i+=1\r\n    print('.'.join(ans))",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    s = s[::-1]\r\n    ss = ''\r\n    x = 0\r\n    while s:\r\n        if s[0] in ['b', 'c', 'd']:\r\n            x = 3\r\n        else: x = 2\r\n        ss = ss + s[:x]\r\n        ss = ss + '.'\r\n        s = s[x:]\r\n    ss = ss[::-1]\r\n    print(ss[1::])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246687712",
            "author": "m.ahmadrazamalik786",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1708080600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246687277",
            "author": "m.ahmadrazamalik786",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1708080480
        },
        "acceptedCode": "a=int(input())\r\nfor i in range(a):\r\n    b,c,d=map(int,input().split())\r\n    if b!=c and b!=d:\r\n        print(b)\r\n    elif c!=b and c!=d:\r\n        print(c)\r\n    else:\r\n        print(d)",
        "rejectedCode": "a=int(input())\r\nfor i in range(a):\r\n    b,c,d=map(int,input().split())\r\n    if b!=c and b!=d:\r\n        print(b)\r\n    elif c!=a and c!=d:\r\n        print(c)\r\n    else:\r\n        print(d)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n5\r\n7\r\n0\r\n6\r\n8\r\n5\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 3rd numbers differ - expected: '6', found: '5'\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246602849",
            "author": "phungthienphuoc",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 29500,
            "submissionTime": 1708024380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239756453",
            "author": "phungthienphuoc",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 40100,
            "submissionTime": 1703982780
        },
        "acceptedCode": "t=int(input().strip())\r\nfrom math import sqrt\r\nfor q in range(t):\r\n    n=int(input().strip())\r\n    a=list(map(int,input().strip().split()))\r\n    s=sum(a)\r\n    f=(int(sqrt(s)))**2==s\r\n    print(' '+('YES' if f else 'NO'))",
        "rejectedCode": "from collections import defaultdict\r\nfrom random import getrandbits\r\n\r\nRANDOM = getrandbits(32)\r\n\r\nclass Wrapper(int):\r\n    def __init__(self, x):\r\n        int.__init__(x)\r\n    def __hash__(self):\r\n        return super(Wrapper, self).__hash__() ^ RANDOM\r\n        \r\ndef sol(n,a):\r\n    if n==1:\r\n        return 'NO'\r\n    elif n==2:\r\n        return 'YES' if a[0]==a[1] else 'NO'\r\n    a=[0]+a+[0]\r\n    po,pe=a[:],a[:]\r\n    for i in range(1,n+1):\r\n        if a[i]==a[i-1]:\r\n            return 'YES'\r\n        if i%2==0:\r\n            pe[i]+=pe[i-2]\r\n        else:\r\n            po[i]+=po[i-2]\r\n    counte,counto=defaultdict(int),defaultdict(int)\r\n    for i in range(1,n+1):\r\n        if i%2==0:\r\n            counte[pe[i]-po[i-1]]+=1\r\n        else:\r\n            counto[po[i]-pe[i-1]]+=1\r\n    for i in range(n+1):\r\n        if i%2>0:\r\n            diff=po[i]-pe[i-1]\r\n            counte[pe[i+1]-po[i]]-=1\r\n            if counto[diff]>0 or counte[-diff]>0:\r\n                return 'YES'\r\n        else:\r\n            diff=pe[i]-po[i-1]\r\n            counto[po[i+1]-pe[i]]-=1\r\n            if counto[-diff]>0 or counte[diff]>0:\r\n                return 'YES'\r\n    return 'NO'\r\n        \r\nt=int(input().strip())\r\nfor q in range(t):\r\n    n=int(input().strip())\r\n    a=list(map(int,input().strip().split()))\r\n    print(sol(n,a))",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246598208",
            "author": "minalfatimah",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 8800,
            "submissionTime": 1708017300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246466040",
            "author": "minalfatimah",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707976920
        },
        "acceptedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    word = list(input())\r\n    for j in range(2, n):\r\n        if word[j] in \"ae\":\r\n            word[j-1] = '.' + word[j-1]\r\n    print(''.join(word))\r\n",
        "rejectedCode": "import math\r\nfor i in range(int(input())):\r\n    n = int(input())\r\n    squares_in_bucket = list(map(int, input().split()))\r\n    for i in range(n):\r\n        result = sum(squares_in_bucket)\r\n        square_root_num = math.sqrt(result)\r\n        if square_root_num > 0 and square_root_num == int(square_root_num):\r\n            print(\"YES\")\r\n            break\r\n        else:\r\n            print(\"NO\")\r\n\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "YES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [4th token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246588365",
            "author": "omarnezar2005.",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1708009080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246588007",
            "author": "omarnezar2005.",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 100,
            "submissionTime": 1708008900
        },
        "acceptedCode": "T=int(input())\r\nfor t in range(0,T):\r\n    x=0\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    for i in range(0,n):\r\n        x+=a[i]\r\n    y=int(x**0.5)\r\n    if x/y==y:\r\n        print(\"yes\")\r\n    else:\r\n        print(\"no\")",
        "rejectedCode": "T=int(input())\r\nfor t in range(0,T):\r\n    x=0\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    for i in range(0,n):\r\n        x+=a[i]\r\n    y=x**0.5\r\n    if x/y==y:\r\n        print(\"yes\")\r\n    else:\r\n        print(\"no\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "yes\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nyes\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nyes\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "246478078",
            "author": "pulkit_garg14",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 280,
            "memory": 28900,
            "submissionTime": 1707983940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "246477934",
            "author": "pulkit_garg14",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 32400,
            "submissionTime": 1707983820
        },
        "acceptedCode": "for t in range(0,int(input())):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    a=set()\r\n    a.add(0)\r\n    s=0\r\n    for i in range(1,n+1):\r\n        if i%2==1:\r\n            s=s+l[i-1]\r\n        if i%2==0:\r\n            s=s-l[i-1]\r\n        a.add(s)\r\n    if len(a)==n+1:\r\n        print('no')\r\n    else:\r\n        print('yes')\r\n",
        "rejectedCode": "for t in range(0,int(input())):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    a=set()\r\n    a.add(0)\r\n    s=0\r\n    for i in range(1,n+1):\r\n        if i%2==1:\r\n            s=s+l[i-1]\r\n        if i%2==0:\r\n            s=s-l[i-1]\r\n        a.add(s)\r\n    if len(a)==n+1:\r\n        print('no')\r\n    else:\r\n        print('yes')\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246468869",
            "author": "senguptasushruta",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 1400,
            "submissionTime": 1707978660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246468358",
            "author": "senguptasushruta",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707978360
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    s=str(input())\r\n    st=''\r\n    v=[\"a\",\"e\"]\r\n    ans=[]\r\n    i=0\r\n    while i<n-2:\r\n        if s[i] not in v:\r\n            st+=(s[i])\r\n            i+=1\r\n        else:\r\n            if s[i+2]:\r\n                if s[i+2] not in v:\r\n                    st+=(s[i])\r\n                    st+=(s[i+1])\r\n                    st+=(\".\")\r\n                    i+=2\r\n            \r\n\r\n                else:\r\n                    st+=(s[i])\r\n                    st+=(\".\")\r\n                    i+=1\r\n            else:\r\n                break\r\n    st+=(s[n-2])\r\n    st+=(s[n-1])\r\n    print(st)\r\n                \r\n                ",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    s=str(input())\r\n    st=''\r\n    v=[\"a\",\"e\"]\r\n    ans=[]\r\n    i=0\r\n    while i<n-2:\r\n        if s[i] not in v:\r\n            ans.append(s[i])\r\n            i+=1\r\n        else:\r\n            if s[i+2]:\r\n                if s[i+2] not in v:\r\n                    ans.append(s[i])\r\n                    ans.append(s[i+1])\r\n                    ans.append(\".\")\r\n                    i+=2\r\n            \r\n\r\n                else:\r\n                    ans.append(s[i])\r\n                    ans.append(\".\")\r\n                    i+=1\r\n            else:\r\n                break\r\n    ans.append(s[n-2])\r\n    ans.append(s[n-1])\r\n    print(*ans)\r\n                \r\n                ",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "b a . c e d . b a b\r\nb a . b a\r\nd a d . d e . c a . b e d . d a d\r\nd a c\r\nd a c . d a c\r\nd a . b a b . b a . b a . b a b . b a b . b a . b a b . b a\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'b'\r\n"
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246011574",
            "author": "Coder-DL",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 25700,
            "submissionTime": 1707737940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246010387",
            "author": "Coder-DL",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707737400
        },
        "acceptedCode": "\nt = int(input())\n\nfor _ in range(t):\n    buckets = int(input())\n    if sum([int(x) for x in input().split()])**0.5 % 1 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
        "rejectedCode": "\nmatrix = [['A', 'B', 'C'],\n          ['C', 'A', 'B'],\n          ['B', 'C', 'A']]\n\nt = int(input())\n\nfor _ in range(t):\n    line1 = input()\n    line2 = input()\n    line3 = input()\n    if '?' in line1: print(matrix[0][line1.index('?')])\n    if '?' in line2: print(matrix[1][line2.index('?')])\n    if '?' in line3: print(matrix[2][line3.index('?')])\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nB\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 3rd words differ - expected: 'C', found: 'A'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246465367",
            "author": "Tokrut",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 29700,
            "submissionTime": 1707976500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246464224",
            "author": "Tokrut",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707975840
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    a=sum(a)\r\n    if a**0.5%1==0:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "kv=['ABC','CAB','BCA']\r\nfor _ in range(int(input())):\r\n    a=[]\r\n    for i in range(3):\r\n        a.append(input())\r\n    for i in range(3):\r\n        if a[i][0]=='?':\r\n            for j in range(3):\r\n                if a[i][1]==kv[j][1]:\r\n                    print(kv[j][0])\r\n                    break\r\n        elif a[i][1]=='?':\r\n            for j in range(3):\r\n                if a[i][0]==kv[j][0]:\r\n                    print(kv[j][1])\r\n                    break\r\n        elif a[i][2]=='?':\r\n            for j in range(3):\r\n                if a[i][0]==kv[j][0]:\r\n                    print(kv[j][2])\r\n                    break",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nB\r\nB\r\nC\r\nC\r\nC\r\nA\r\nA\r\nA\r\nB\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nA\r\nA\r\nB\r\nB\r\nB\r\nC\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nA\r\nA\r\nB\r\nB\r\nB\r\nC\r\nC\r\nC\r\nA\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 19th words differ - expected: 'A', found: 'B'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246466591",
            "author": "asmita27",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707977220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246463764",
            "author": "asmita27",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707975540
        },
        "acceptedCode": "t=int(input())\r\nfor i in range (0,t):\r\n  a,b,c =map(int,input().split())\r\n \r\n  if (a==b and a!=c):\r\n    print(c)\r\n  elif (b==c and b!=a):\r\n    print(a)\r\n  else:\r\n    print(b)",
        "rejectedCode": "\r\na =int(input())\r\nb = int(input())\r\nc = int(input())\r\n\r\nif a == b:\r\n    print(\"The digit that occurs exactly once is:\", c)\r\nelif a == c:\r\n    print(\"The digit that occurs exactly once is:\", b)\r\nelse:\r\n    print(\"The digit that occurs exactly once is:\", a)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "246456598",
            "author": "abhay_30281125",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 404,
            "memory": 31600,
            "submissionTime": 1707970860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "246456003",
            "author": "abhay_30281125",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 31500,
            "submissionTime": 1707970500
        },
        "acceptedCode": "from math import sqrt\r\nfrom collections import defaultdict\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = [int(x) for x in input().split()]\r\n    d = []\r\n    s = 0\r\n    fl = 0\r\n    d.append(0)\r\n    for i in range(n):\r\n        le = d[-1]\r\n        val = ((-1)**i)*a[i] + le\r\n        d.append(val)\r\n    d.sort()\r\n    for i in range(len(d)-1):\r\n        if d[i] == d[i+1]:\r\n            fl = 1 \r\n            break\r\n    if fl == 1:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    ",
        "rejectedCode": "from math import sqrt\r\nfrom collections import defaultdict\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = [int(x) for x in input().split()]\r\n    d = defaultdict(int)\r\n    s = 0\r\n    fl = 0\r\n    d[0] = 1\r\n    for i, val in enumerate(a):\r\n        if i%2 == 0:\r\n            s+=val\r\n        else:\r\n            s-=val\r\n        if s in d and d[s] == 1:\r\n            fl = 1\r\n            break\r\n        d[s] = 1\r\n    if fl == 0:\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")\r\n    ",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246449275",
            "author": "lellyse",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 1400,
            "submissionTime": 1707966600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246449195",
            "author": "lellyse",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12100,
            "submissionTime": 1707966540
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = input()\r\n    v = \"ae\"\r\n    c = \"bcd\"\r\n    s = \"\"\r\n    i = 0\r\n    while i < n:\r\n        if i + 3 < n:\r\n            if a[i+3] in v:\r\n                s+=a[i:i+2]+\".\"\r\n                i+=2\r\n            else:\r\n                s+=a[i:i+3]+\".\"\r\n                i+=3\r\n        else:\r\n            s += a[i:n]\r\n            i += n - i\r\n    print(s)\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = input()\r\n    v = \"ae\"\r\n    c = \"bcd\"\r\n    s = \"\"\r\n    i = 0\r\n    while i < n:\r\n        if i + 3 < n:\r\n            if a[i+3] in v:\r\n                s+=a[i:i+2]+\".\"\r\n                i+=2\r\n            else:\r\n                s+=a[i:i+3]+\".\"\r\n                i+=3\r\n        else:\r\n            s+=a[i:n]\r\n            i+=n - i\r\n    print(s)\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 18,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246444645",
            "author": "EntropyH",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1707963420
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246444263",
            "author": "EntropyH",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 2,
            "runTime": 1000,
            "memory": 10500,
            "submissionTime": 1707963120
        },
        "acceptedCode": "t = int(input())\r\nfor q in range(t):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    su = sum(a)\r\n    if (su**0.5)%1 == 0:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "t = int(input())\r\nkv = [i**2 for i in range((2*10**5)+100)]\r\nfor q in range(t):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    su = sum(a)\r\n    if su in kv:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "246442998",
            "author": "S0wn9",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 32300,
            "submissionTime": 1707962280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "246442504",
            "author": "S0wn9",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707961980
        },
        "acceptedCode": "def solve():\r\n    n = int(input())\r\n    glasses = list(map(int, input().split()))\r\n    prefix_sum = [glasses[0]]\r\n    cnt = {0, glasses[0]}\r\n    for i in range(1, len(glasses)):\r\n        if i % 2 != 0:\r\n            glasses[i] *= -1\r\n        s = glasses[i] + prefix_sum[i - 1]\r\n        if s in cnt:\r\n            print(\"Yes\")\r\n            return\r\n        cnt.add(s)\r\n        prefix_sum.append(s)\r\n    print(\"No\")\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    solve()",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    glasses = list(map(int, input().split()))\r\n    prefix_sum = [glasses[0]]\r\n    cnt = {0}\r\n    for i in range(1, len(glasses)):\r\n        if i % 2 != 0:\r\n            glasses[i] *= -1\r\n        s = glasses[i] + prefix_sum[i - 1]\r\n        if s in cnt:\r\n            print(\"Yes\")\r\n            return\r\n        cnt.add(s)\r\n        prefix_sum.append(s)\r\n    print(\"No\")\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    solve()",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "Yes\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [4th token]\r\n"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "246439507",
            "author": "ow3nL",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 545,
            "memory": 23900,
            "submissionTime": 1707959940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "246439275",
            "author": "ow3nL",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 29000,
            "submissionTime": 1707959820
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    A = [int(i) for i in input().split()]\r\n \r\n    prefix = [0]\r\n    for i, a in enumerate(A):\r\n        if i % 2 == 0:\r\n            prefix.append(prefix[-1] + a)\r\n        else:\r\n            prefix.append(prefix[-1] - a)\r\n \r\n    prefix.sort()\r\n    for i in range(len(prefix) - 1):\r\n        if prefix[i] == prefix[i + 1]:\r\n            print(\"YES\")\r\n            break\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    A = [int(i) for i in input().split()]\r\n \r\n    prefix = [0]\r\n    seen = set([0])\r\n    for i, a in enumerate(A):\r\n        if i % 2 == 0:\r\n            prefix.append(prefix[-1] + a)\r\n        else:\r\n            prefix.append(prefix[-1] - a)\r\n        if prefix[-1] in seen:\r\n            print(\"YES\")\r\n            break\r\n        seen.add(prefix[-1])\r\n \r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246430016",
            "author": "2110030204",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707951600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246429523",
            "author": "2110030204",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1707951060
        },
        "acceptedCode": "for s in[*open(0)][1:]:a,b,c=map(int,s.split());print(a^b^c)",
        "rejectedCode": "use integer;<>;while(<>){$_=<>;s/ /+/g;$_=eval;$x=sqrt;print$_^$x*$x?NO:YES,$/;}",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246414234",
            "author": "medrifai",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707930360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246413987",
            "author": "medrifai",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707930120
        },
        "acceptedCode": "t = int(input())\r\nM = []\r\nfor _ in range(t):\r\n    L = []\r\n    a,b,c = map(int,input().split())\r\n    L.append(a)\r\n    L.append(b)\r\n    L.append(c)\r\n\r\n    if(L[0] == L[1]):\r\n        M.append(L[2])\r\n    elif(L[0] == L[2]):\r\n        M.append(L[1])\r\n    elif(L[1] == L[2]):\r\n        M.append(L[0])\r\n\r\nfor result in M:\r\n    print(result)\r\n",
        "rejectedCode": "t = int(input())\r\nL = []\r\nM = []\r\nfor _ in range(t):\r\n    a,b,c = map(int,input().split())\r\n    L.append(a)\r\n    L.append(b)\r\n    L.append(c)\r\n\r\n    if(L[0] == L[1]):\r\n        M.append(L[2])\r\n    elif(L[0] == L[2]):\r\n        M.append(L[1])\r\n    elif(L[1] == L[2]):\r\n        M.append(L[0])\r\n\r\nfor result in M:\r\n    print(result)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '1'\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246387826",
            "author": "Arman_200909",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26200,
            "submissionTime": 1707913560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246384369",
            "author": "Arman_200909",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707911760
        },
        "acceptedCode": "import math as m\r\nnum1=int(input())\r\nn1=0\r\nwhile n1<num1:\r\n    a=int(input())\r\n    b=list(map(int,input().split()))\r\n    summ=sum(b)\r\n    side=int(m.sqrt(summ))\r\n    if side**2 !=summ:\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")\r\n    n1+=1",
        "rejectedCode": "a,b,c=map(int,input().split())\r\nif a!=b and a!=c:\r\n    print(a)\r\nelif b!=a and b!=c:\r\n    print(b)\r\nelse:\r\n    print(c)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246378635",
            "author": "ahs3103",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 1700,
            "submissionTime": 1707909000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246378502",
            "author": "ahs3103",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707908940
        },
        "acceptedCode": "t = int(input())\r\nns = []\r\nps = []\r\n\r\nfor i in range(t):\r\n    ns.append(int(input()))\r\n    ps.append(input())\r\n\r\nC = 'bcd'\r\nV = 'ea'\r\n\r\nfor n, p in zip(ns, ps):\r\n    ans = ''\r\n    for i in range(n-1):\r\n        if p[i] in C:\r\n            if p[i+1] in V:\r\n                ans += '.'\r\n        ans += p[i]\r\n    ans += p[-1]\r\n    print(ans[1:])\r\n",
        "rejectedCode": "t = int(input())\r\nns = []\r\nps = []\r\n\r\nfor i in range(t):\r\n    ns.append(int(input()))\r\n    ps.append(input())\r\n\r\nC = 'bcd'\r\nV = 'ea'\r\n\r\nfor n, p in zip(ns, ps):\r\n    ans = ''\r\n    for i in range(n-1):\r\n        if p[i] in C:\r\n            if p[i+1] in V:\r\n                ans += '.'\r\n        ans += p[i]\r\n    print(ans[1:])\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.ba\r\nba.b\r\ndad.de.ca.bed.da\r\nda\r\ndac.da\r\nda.bab.ba.ba.bab.bab.ba.bab.b\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ba.ced.ba'\r\n"
        },
        "errorLine": 19,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246371920",
            "author": "iamhetshah",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 343,
            "memory": 25700,
            "submissionTime": 1707905520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246371789",
            "author": "iamhetshah",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 0,
            "submissionTime": 1707905460
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = sum([int(i) for i in input().split()])\r\n    \r\n    l = 1\r\n    h = a\r\n    found = False\r\n    while l <= h:\r\n        mid = l + (h - l) // 2\r\n        \r\n        if mid ** 2 > a:\r\n            h = mid - 1\r\n        elif mid ** 2 < a:\r\n            l = mid + 1\r\n        else:\r\n            found = True\r\n            break\r\n        \r\n    \r\n    print('YES' if found else 'NO')\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = sum([int(i) for i in input().split()])\r\n    \r\n    l = 1\r\n    h = a // 2\r\n    found = False\r\n    while l <= h:\r\n        mid = l + (h - l) // 2\r\n        \r\n        if mid ** 2 > a:\r\n            h = mid - 1\r\n        elif mid ** 2 < a:\r\n            l = mid + 1\r\n        else:\r\n            found = True\r\n            break\r\n        \r\n    \r\n    print('YES' if found else 'NO')\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [24th token]\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246369357",
            "author": "hushbek_2009",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1707904200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244546332",
            "author": "hushbek_2009",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1706861460
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split(' ')))\r\n    print(\"YES\" if (float(sum(a)) ** (1/2)).is_integer() else \"NO\")",
        "rejectedCode": "v=int(input())\r\nfor i in range(v):\r\n    a,b,c=map(int,input().split())\r\n    if a==b:\r\n        print(c\r\n    elif a==c:\r\n        print(b)\r\n    elif b==c:\r\n        print(a)",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246366756",
            "author": "Mjtal",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1707902880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246363461",
            "author": "Mjtal",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 3,
            "runTime": 124,
            "memory": 2900,
            "submissionTime": 1707901440
        },
        "acceptedCode": "for _ in range (int(input())):\r\n    thing = list(input().split(' '))\r\n    first = thing[0]\r\n    amount = 0\r\n    for x in range(2):\r\n        if thing[x+1] != thing[0]:\r\n            amount+=1\r\n            answer = thing[x+1]\r\n        if amount == 2:\r\n            answer = thing[0]\r\n    print(answer)",
        "rejectedCode": "for _ in range(int(input())):\r\n    numsquares = 0\r\n    x = int(input())\r\n    buckets = list(input().split(' '))\r\n    for y in range(x):\r\n        numsquares += int(buckets[y])\r\n    squarednum = numsquares ** (1/2)\r\n    squarednum = str(squarednum)\r\n    if len(squarednum) <= 3:\r\n        if squarednum[-1] == '0':\r\n            print('yes')\r\n        else:\r\n            print('no')\r\n    else:\r\n        print(\"no\")\r\n",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "no\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\n",
            "expectedOutput": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241884993",
            "author": "_Joyboy",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 20300,
            "submissionTime": 1705366380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241172421",
            "author": "_Joyboy",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2700,
            "submissionTime": 1704963600
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    s = 0.0\r\n    n = int(input())\r\n    a = input()\r\n    t = a.split(\" \")\r\n    for x in t:\r\n        s = s + int(x)\r\n    if s % (s**0.5) == 0.0:\r\n        print(\"YES\")\r\n    else:\r\n        print('NO')\r\n",
        "rejectedCode": "while True:\r\n    t = int(input(\"enter the integer\"))\r\n    if (t >= 1 and t <= 270):\r\n        for i in range(t):\r\n            a = int(input('enter a number'))\r\n            b = int(input('enter a number'))\r\n            c = int(input('enter a number'))\r\n            d=a+b+c\r\n            if d>27 or d<0:\r\n                print ('invalid input')\r\n                continue\r\n            if (a == b):\r\n                print(c)\r\n            else:\r\n                if (a == c):\r\n                    print(b)\r\n                else:\r\n                    print(a)\r\n        break\r\n    else:\r\n        print('INVALID INPUT!')\r\n        continue\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "enter the integerenter a number",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246316629",
            "author": "alinferno",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1707872400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246316390",
            "author": "alinferno",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1707872220
        },
        "acceptedCode": "count = int(input())\r\nnums = []\r\nfor i in range(count):\r\n    nums = input().split(\" \")\r\n    nums = [int(n) for n in nums]\r\n\r\n    if nums[0] != nums[1] and nums[0] != nums[2]:\r\n        print(nums[0])\r\n    elif nums[1] != nums[0] and nums[1] != nums[2]:\r\n        print(nums[1])\r\n    elif nums[2] != nums[0] and nums[2] != nums[1]:\r\n        print(nums[2])",
        "rejectedCode": "count = int(input())\r\nnums = []\r\nfor i in range(count):\r\n    nums.append(int(input()))\r\n\r\nif nums[0] != nums[1] and nums[0] != nums[2]:\r\n    print(nums[0])\r\nelif nums[1] != nums[0] and nums[1] != nums[2]:\r\n    print(nums[0])\r\nelif nums[2] != nums[0] and nums[2] != nums[1]:\r\n    print(nums[0])",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "246181974",
            "author": "E_Hadi_Malik_E",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 28900,
            "submissionTime": 1707819780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "246111289",
            "author": "E_Hadi_Malik_E",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12400,
            "submissionTime": 1707815040
        },
        "acceptedCode": "for i in range(int(input())):\r\n    a = int(input())\r\n    b = list(map(int,input().split()))\r\n    c = {0}\r\n    count = 0\r\n    f = 1\r\n    for j in range(a):\r\n        if j % 2:\r\n            count -= b[j]\r\n        else:\r\n            count += b[j]\r\n        if count in c:\r\n            print(\"YES\")\r\n            f = 0\r\n            break\r\n        c.add(count)\r\n        \r\n    if f:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "for i in range(int(input())):\r\n    a = int(input()) - 1\r\n    b = input()\r\n    ans = ''\r\n    while a > 0:\r\n        if b[a] == 'a' or b[a] == 'e':\r\n            ans += b[a] + b[a-1]\r\n            a -=2\r\n            ans += '.'\r\n        else:\r\n            ans += b[a] + b[a-1] + b[a-2]\r\n            a -=3\r\n            ans += '.'\r\n    \r\n    print((ans[::-1])[1\r\n                      :])\r\n            \r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245558442",
            "author": "druk0",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 40900,
            "submissionTime": 1707444300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245557254",
            "author": "druk0",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 11900,
            "submissionTime": 1707443400
        },
        "acceptedCode": "for t in range(int(input())):\r\n    b = []\r\n    n = int(input())\r\n    a = list(input())\r\n    i = n - 1\r\n    while i > -1:\r\n        j = i\r\n        if a[i]==\"a\" or a[i] == \"e\":\r\n            i = i - 1\r\n            x = 2\r\n        else:\r\n            i -= 2\r\n            x = 3\r\n        for j in range(x):\r\n            b+=[a[-1]]\r\n            a.pop(-1)\r\n        b+= \".\"\r\n        i -= 1\r\n    b.pop(-1)\r\n    b.reverse()\r\n    print(*b, sep = \"\")\r\n",
        "rejectedCode": "for t in range(int(input())):\r\n    b = \"\"\r\n    n = int(input())\r\n    a = input()\r\n    i = n - 1\r\n    while i > 2:\r\n        j = i\r\n        if a[i]==\"a\" or a[i] == \"e\":\r\n            i = i - 1\r\n        else:\r\n            i -= 2\r\n        b += a[j:i-1:-1] + \".\"\r\n        i -= 1\r\n    b += a[i::-1]\r\n    print(b[::-1])\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246060566",
            "author": "sw0405",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707781920
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246060305",
            "author": "sw0405",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707781680
        },
        "acceptedCode": "n=int(input()) #number of testcases\r\nfor i in range(n):\r\n    s1=input()\r\n    s2=input()\r\n    s3=input()\r\n    s=s1+s2+s3\r\n    for i in range(3):\r\n        if s1[i]==\"?\":\r\n            if s.count(\"A\")==2:\r\n                print('A')\r\n            elif s.count('B')==2:\r\n                print('B')\r\n            elif s.count('C')==2:\r\n                print('C')\r\n        elif s2[i]==\"?\":\r\n            if s.count(\"A\")==2:\r\n                print('A')\r\n            elif s.count('B')==2:\r\n                print('B')\r\n            elif s.count('C')==2:\r\n                print('C')\r\n        elif s3[i]==\"?\":\r\n            if s.count(\"A\")==2:\r\n                print('A')\r\n            elif s.count('B')==2:\r\n                print('B')\r\n            elif s.count('C')==2:\r\n                print('C')\r\n            \r\n            \r\n",
        "rejectedCode": "n=int(input()) #number of testcases\r\nfor i in range(n):\r\n    s1=input()\r\n    s2=input()\r\n    s3=input()\r\n    s=s1+s2+s3\r\n    for i in range(3):\r\n        if s1[i]==\"?\":\r\n            if s1.count(\"A\")==2:\r\n                print('A')\r\n            elif s1.count('B')==2:\r\n                print('B')\r\n            elif s1.count('C')==2:\r\n                print('C')\r\n        elif s2[i]==\"?\":\r\n            if s2.count(\"A\")==2:\r\n                print('A')\r\n            elif s2.count('B')==2:\r\n                print('B')\r\n            elif s2.count('C')==2:\r\n                print('C')\r\n        elif s3[i]==\"?\":\r\n            if s3.count(\"A\")==2:\r\n                print('A')\r\n            elif s3.count('B')==2:\r\n                print('B')\r\n            elif s3.count('C')==2:\r\n                print('C')\r\n            \r\n            \r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246055430",
            "author": "vansh1105",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707776640
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "246054985",
            "author": "vansh1105",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707776100
        },
        "acceptedCode": "x=int(input())\r\ni=0\r\nwhile i<x:\r\n    a, b, c = map(int, input().split())\r\n\r\n    if a==b:\r\n        print(c)\r\n    elif a==c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n    i=i+1\r\n    \r\n    \r\n    \r\n    ",
        "rejectedCode": "x=int(input())\r\ni=0\r\nwhile i<x:\r\n    a=int(input())\r\n    b=int(input())\r\n    c=int(input())\r\n    if a==b:\r\n        print(c)\r\n    elif a==c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n    i=i+1\r\n    \r\n    \r\n    \r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246011202",
            "author": "hjiwnani2929",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707737760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246010801",
            "author": "hjiwnani2929",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707737580
        },
        "acceptedCode": "tc_ = int(input())\r\nfor ele in range(tc_):\r\n    matrix = []\r\n    for inpt in range(3):\r\n        temp = input()\r\n        matrix.append(list(temp))\r\n    \r\n    for row in range(0, 3):\r\n        word_arr = set()\r\n        for col_ in range(0, 3):\r\n            if matrix[row][col_] != \"?\":\r\n                word_arr.add(matrix[row][col_])\r\n    \r\n\r\n        missing_chars = {'A', 'B', 'C'}\r\n        missing_chars -= word_arr\r\n        if missing_chars:\r\n            for char in missing_chars:\r\n                print(char)\r\n\r\n\r\n\"\"\"\r\n['B', 'C', 'A'],\r\n['C', 'A', '?'],\\\r\n['A', 'B', 'C']]\r\n\r\n\r\n['A', 'B', 'C'], \r\n['C', '?', 'B'], \r\n['B', 'C', 'A']\r\n\"\"\"",
        "rejectedCode": "tc_ = int(input())\r\nfor ele in range(tc_):\r\n    matrix = []\r\n    for inpt in range(3):\r\n        temp = input()\r\n        matrix.append(list(temp))\r\n    \r\n    print(matrix)\r\n    for row in range(0, 3):\r\n        word_arr = set()\r\n        for col_ in range(0, 3):\r\n            if matrix[row][col_] != \"?\":\r\n                word_arr.add(matrix[row][col_])\r\n    \r\n\r\n        missing_chars = {'A', 'B', 'C'}\r\n        missing_chars -= word_arr\r\n        print(word_arr)\r\n        if missing_chars:\r\n            for char in missing_chars:\r\n                print(char)\r\n\r\n\r\n\"\"\"\r\n['B', 'C', 'A'],\r\n['C', 'A', '?'],\\\r\n['A', 'B', 'C']]\r\n\r\n\r\n['A', 'B', 'C'], \r\n['C', '?', 'B'], \r\n['B', 'C', 'A']\r\n\"\"\"",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "[['A', 'B', 'C'], ['C', '?', 'B'], ['B', 'C', 'A']]\r\n{'C', 'B', 'A'}\r\n{'C', 'B'}\r\nA\r\n{'C', 'B', 'A'}\r\n[['B', 'C', 'A'], ['C', 'A', '?'], ['A', 'B', 'C']]\r\n{'C', 'B', 'A'}\r\n{'C', 'A'}\r\nB\r\n{'C', 'B', 'A'}\r\n[['?', 'A', 'B'], ['B', 'C', 'A'], ['A', 'B', 'C']]\r\n{'B', 'A'}\r\nC\r\n{'C', 'B', 'A'}\r\n{'C', 'B', 'A'}\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: '[['A','\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "246000357",
            "author": "AkorToshka",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 23600,
            "submissionTime": 1707732780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245999705",
            "author": "AkorToshka",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2700,
            "submissionTime": 1707732420
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    input()\r\n    suma = sum(map(int,input().split()))\r\n    sq = int(suma**.5)\r\n    print(\"yes\" if sq ** 2 == suma else \"no\")",
        "rejectedCode": "print(int(input())^int(input())^int(input()))",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245991228",
            "author": "shantanu42",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707728400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245988971",
            "author": "shantanu42",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 109,
            "memory": 100,
            "submissionTime": 1707727260
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    l1=list(map(int,input().split()))\r\n    d=sum(l1)-sum(set(l1))\r\n    print(sum(l1)- d*2)",
        "rejectedCode": "import math\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    l1=list(map(int,input().split()))\r\n    sum1=sum(l1)\r\n    if(math.sqrt(sum1)*math.sqrt(sum1)==sum1): print(\"YES\")\r\n    else: print(\"NO\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246388943",
            "author": "Amir.1386.cc",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707914160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "246387268",
            "author": "Amir.1386.cc",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707913260
        },
        "acceptedCode": "t=int(input())\r\nwhile t>0:\r\n    s1=input()\r\n    s2=input()\r\n    s3=input()\r\n    if \"?\" in s1:\r\n        if \"A\" not in s1:\r\n            print(\"A\")\r\n        if \"B\" not in s1:\r\n            print(\"B\")\r\n        if \"C\" not in s1:\r\n            print(\"C\")\r\n    elif \"?\" in s2:\r\n        if \"A\" not in s2:\r\n            print(\"A\")\r\n        if \"B\" not in s2:\r\n            print(\"B\")\r\n        if \"C\" not in s2:\r\n            print(\"C\")\r\n    else:\r\n        if \"A\" not in s3:\r\n            print(\"A\")\r\n        if \"B\" not in s3:\r\n            print(\"B\")\r\n        if \"C\" not in s3:\r\n            print(\"C\")\r\n    t-=1",
        "rejectedCode": "t=int(input())\r\nwhile t>0:\r\n    s1=input()\r\n    s2=input()\r\n    s3=input()\r\n    if \"?\" in s1:\r\n        if \"A\" not in s1:\r\n            print(\"A\")\r\n        if \"B\" not in s1:\r\n            print(\"B\")\r\n        if \"C\" not in s1:\r\n            print(\"C\")\r\n    elif \"?\" in s2:\r\n        if \"A\" not in s2:\r\n            print(\"A\")\r\n        if \"B\" not in s2:\r\n            print(\"B\")\r\n        if \"C\" not in s2:\r\n            print(\"C\")\r\n    else:\r\n        if \"A\" not in s1:\r\n            print(\"A\")\r\n        if \"B\" not in s1:\r\n            print(\"B\")\r\n        if \"C\" not in s1:\r\n            print(\"C\")\r\n    t-=1",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 7th words differ - expected: 'C', found: 'A'\r\n"
        },
        "errorLine": 21,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245986778",
            "author": "AMHezam",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707726240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245986115",
            "author": "AMHezam",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707725880
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a = [-1, -1]\r\n    n = []\r\n    for x in input().split():\r\n        n.append(int(x))\r\n    if n[0] == n[1]:\r\n        print(n[-1])\r\n        continue\r\n    for i in range(2):\r\n        a[i] = n[i]\r\n    if n[2] == a[0]:\r\n        print(a[1])\r\n    else:\r\n        print(a[0])\r\n        \r\n        \r\n        ",
        "rejectedCode": "a = [-1,-1]\r\nfor _ in range(int(input())):\r\n    n = list(map(int,input().split()))\r\n    for i in range(2):\r\n        a[i] = n[i]\r\n    if n[2] == a[0]:\r\n        print(a[1])\r\n    else:\r\n        print(a[0])",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n5\r\n7\r\n0\r\n6\r\n8\r\n5\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 3rd numbers differ - expected: '6', found: '5'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245978569",
            "author": "kislay9801",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 374,
            "memory": 30200,
            "submissionTime": 1707721620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245970438",
            "author": "kislay9801",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1707716460
        },
        "acceptedCode": "t=int(input())\r\na=[]\r\nfor _ in range(t):\r\n  x=int(input())\r\n  y=list(map(int,input().split()))\r\n  \r\n\r\n  if int(sum(y)**0.5)**2==sum(y):\r\n    print('Yes')\r\n  else:\r\n    print('No')\r\n  ",
        "rejectedCode": "t=int(input())\r\na=[]\r\nfor _ in range(t):\r\n  x=int(input())\r\n  a.append(input().split())\r\nfor i in a:\r\n  if int(sum(i)**0.5)**2==sum(i):\r\n    print('Yes')\r\n  else:\r\n    print('No')",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "245957636",
            "author": "Hossam_Hassan_Taher",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1138,
            "memory": 25600,
            "submissionTime": 1707708360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "245957469",
            "author": "Hossam_Hassan_Taher",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 700,
            "submissionTime": 1707708240
        },
        "acceptedCode": "import sys\r\nimport random\r\nfrom math import gcd, lcm , sqrt, isqrt, perm, comb, factorial, log2, ceil, floor\r\nfrom collections import Counter, defaultdict, deque\r\nfrom functools import lru_cache, reduce, cmp_to_key\r\nfrom itertools import accumulate, combinations, permutations\r\nfrom heapq import nsmallest, nlargest, heappushpop, heapify, heappop, heappush\r\nfrom copy import deepcopy\r\nfrom bisect import bisect_left, bisect_right\r\nfrom string import ascii_lowercase, ascii_uppercase\r\ninf = float('inf')\r\ninput = lambda: sys.stdin.readline().strip()\r\nI = lambda: input()\r\nII = lambda: int(input())\r\nMII = lambda: map(int, input().split())\r\nLI = lambda: list(input().split())\r\nLII = lambda: list(map(int, input().split()))\r\nGMI = lambda: map(lambda x: int(x) - 1, input().split())\r\nLGMI = lambda: list(map(lambda x: int(x) - 1, input().split()))\r\nMOD = 10 ** 9 + 7\r\nRANDOM = random.randint(1217, 2000)\r\n \r\nclass SortedList:\r\n    def __init__(self, iterable=[], _load=200):\r\n        \"\"\"Initialize sorted list instance.\"\"\"\r\n        values = sorted(iterable)\r\n        self._len = _len = len(values)\r\n        self._load = _load\r\n        self._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]\r\n        self._list_lens = [len(_list) for _list in _lists]\r\n        self._mins = [_list[0] for _list in _lists]\r\n        self._fen_tree = []\r\n        self._rebuild = True\r\n \r\n    def _fen_build(self):\r\n        \"\"\"Build a fenwick tree instance.\"\"\"\r\n        self._fen_tree[:] = self._list_lens\r\n        _fen_tree = self._fen_tree\r\n        for i in range(len(_fen_tree)):\r\n            if i | i + 1 < len(_fen_tree):\r\n                _fen_tree[i | i + 1] += _fen_tree[i]\r\n        self._rebuild = False\r\n \r\n    def _fen_update(self, index, value):\r\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\r\n        if not self._rebuild:\r\n            _fen_tree = self._fen_tree\r\n            while index < len(_fen_tree):\r\n                _fen_tree[index] += value\r\n                index |= index + 1\r\n \r\n    def _fen_query(self, end):\r\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\r\n        if self._rebuild:\r\n            self._fen_build()\r\n \r\n        _fen_tree = self._fen_tree\r\n        x = 0\r\n        while end:\r\n            x += _fen_tree[end - 1]\r\n            end &= end - 1\r\n        return x\r\n \r\n    def _fen_findkth(self, k):\r\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\r\n        _list_lens = self._list_lens\r\n        if k < _list_lens[0]:\r\n            return 0, k\r\n        if k >= self._len - _list_lens[-1]:\r\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\r\n        if self._rebuild:\r\n            self._fen_build()\r\n \r\n        _fen_tree = self._fen_tree\r\n        idx = -1\r\n        for d in reversed(range(len(_fen_tree).bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\r\n                idx = right_idx\r\n                k -= _fen_tree[idx]\r\n        return idx + 1, k\r\n \r\n    def _delete(self, pos, idx):\r\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n \r\n        self._len -= 1\r\n        self._fen_update(pos, -1)\r\n        del _lists[pos][idx]\r\n        _list_lens[pos] -= 1\r\n \r\n        if _list_lens[pos]:\r\n            _mins[pos] = _lists[pos][0]\r\n        else:\r\n            del _lists[pos]\r\n            del _list_lens[pos]\r\n            del _mins[pos]\r\n            self._rebuild = True\r\n \r\n    def _loc_left(self, value):\r\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n \r\n        _lists = self._lists\r\n        _mins = self._mins\r\n \r\n        lo, pos = -1, len(_lists) - 1\r\n        while lo + 1 < pos:\r\n            mi = (lo + pos) >> 1\r\n            if value <= _mins[mi]:\r\n                pos = mi\r\n            else:\r\n                lo = mi\r\n \r\n        if pos and value <= _lists[pos - 1][-1]:\r\n            pos -= 1\r\n \r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value <= _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n \r\n        return pos, idx\r\n \r\n    def _loc_right(self, value):\r\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n \r\n        _lists = self._lists\r\n        _mins = self._mins\r\n \r\n        pos, hi = 0, len(_lists)\r\n        while pos + 1 < hi:\r\n            mi = (pos + hi) >> 1\r\n            if value < _mins[mi]:\r\n                hi = mi\r\n            else:\r\n                pos = mi\r\n \r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value < _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n \r\n        return pos, idx\r\n \r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted list.\"\"\"\r\n        _load = self._load\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n \r\n        self._len += 1\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            self._fen_update(pos, 1)\r\n            _list = _lists[pos]\r\n            _list.insert(idx, value)\r\n            _list_lens[pos] += 1\r\n            _mins[pos] = _list[0]\r\n            if _load + _load < len(_list):\r\n                _lists.insert(pos + 1, _list[_load:])\r\n                _list_lens.insert(pos + 1, len(_list) - _load)\r\n                _mins.insert(pos + 1, _list[_load])\r\n                _list_lens[pos] = _load\r\n                del _list[_load:]\r\n                self._rebuild = True\r\n        else:\r\n            _lists.append([value])\r\n            _mins.append(value)\r\n            _list_lens.append(1)\r\n            self._rebuild = True\r\n \r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            if idx and _lists[pos][idx - 1] == value:\r\n                self._delete(pos, idx - 1)\r\n \r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\r\n        _len = self._len\r\n        self.discard(value)\r\n        if _len == self._len:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n \r\n    def pop(self, index=-1):\r\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        value = self._lists[pos][idx]\r\n        self._delete(pos, idx)\r\n        return value\r\n \r\n    def bisect_left(self, value):\r\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_left(value)\r\n        return self._fen_query(pos) + idx\r\n \r\n    def bisect_right(self, value):\r\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_right(value)\r\n        return self._fen_query(pos) + idx\r\n \r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\r\n        return self.bisect_right(value) - self.bisect_left(value)\r\n \r\n    def __len__(self):\r\n        \"\"\"Return the size of the sorted list.\"\"\"\r\n        return self._len\r\n \r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        return self._lists[pos][idx]\r\n \r\n    def __delitem__(self, index):\r\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        self._delete(pos, idx)\r\n \r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_left(value)\r\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\r\n        return False\r\n \r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the sorted list.\"\"\"\r\n        return (value for _list in self._lists for value in _list)\r\n \r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\r\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\r\n \r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted list.\"\"\"\r\n        return 'SortedList({0})'.format(list(self))\r\n \r\n \r\ndef solve():\r\n    n = int(input())\r\n    end = SortedList()\r\n    ls = []\r\n    for i in range(n): \r\n        a , b = map(int, input().split())\r\n        end.add(b)\r\n        ls.append((a , b))\r\n    ls.sort()\r\n    ans = 0 \r\n    for a , b in ls : \r\n        end.remove(b)\r\n        ans += end.bisect_left(b)\r\n    print(ans)\r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "rejectedCode": "import sys\r\nimport random\r\nfrom math import gcd, lcm, sqrt, isqrt, perm, comb, factorial, log2, ceil, floor\r\nfrom collections import Counter, defaultdict, deque\r\nfrom functools import lru_cache, reduce, cmp_to_key\r\nfrom itertools import accumulate, combinations, permutations\r\nfrom heapq import nsmallest, nlargest, heappushpop, heapify, heappop, heappush\r\nfrom copy import deepcopy\r\nfrom bisect import bisect_left, bisect_right\r\nfrom string import ascii_lowercase, ascii_uppercase\r\ninf = float('inf')\r\ninput = lambda: sys.stdin.readline().strip()\r\nI = lambda: input()\r\nII = lambda: int(input())\r\nMII = lambda: map(int, input().split())\r\nLI = lambda: list(input().split())\r\nLII = lambda: list(map(int, input().split()))\r\nGMI = lambda: map(lambda x: int(x) - 1, input().split())\r\nLGMI = lambda: list(map(lambda x: int(x) - 1, input().split()))\r\nMOD = 10 ** 9 + 7\r\nRANDOM = random.randint(1217, 2000)\r\n \r\nclass SortedList:\r\n    def __init__(self, iterable=[], _load=200):\r\n        \"\"\"Initialize sorted list instance.\"\"\"\r\n        values = sorted(iterable)\r\n        self._len = _len = len(values)\r\n        self._load = _load\r\n        self._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]\r\n        self._list_lens = [len(_list) for _list in _lists]\r\n        self._mins = [_list[0] for _list in _lists]\r\n        self._fen_tree = []\r\n        self._rebuild = True\r\n \r\n    def _fen_build(self):\r\n        \"\"\"Build a fenwick tree instance.\"\"\"\r\n        self._fen_tree[:] = self._list_lens\r\n        _fen_tree = self._fen_tree\r\n        for i in range(len(_fen_tree)):\r\n            if i | i + 1 < len(_fen_tree):\r\n                _fen_tree[i | i + 1] += _fen_tree[i]\r\n        self._rebuild = False\r\n \r\n    def _fen_update(self, index, value):\r\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\r\n        if not self._rebuild:\r\n            _fen_tree = self._fen_tree\r\n            while index < len(_fen_tree):\r\n                _fen_tree[index] += value\r\n                index |= index + 1\r\n \r\n    def _fen_query(self, end):\r\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\r\n        if self._rebuild:\r\n            self._fen_build()\r\n \r\n        _fen_tree = self._fen_tree\r\n        x = 0\r\n        while end:\r\n            x += _fen_tree[end - 1]\r\n            end &= end - 1\r\n        return x\r\n \r\n    def _fen_findkth(self, k):\r\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\r\n        _list_lens = self._list_lens\r\n        if k < _list_lens[0]:\r\n            return 0, k\r\n        if k >= self._len - _list_lens[-1]:\r\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\r\n        if self._rebuild:\r\n            self._fen_build()\r\n \r\n        _fen_tree = self._fen_tree\r\n        idx = -1\r\n        for d in reversed(range(len(_fen_tree).bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\r\n                idx = right_idx\r\n                k -= _fen_tree[idx]\r\n        return idx + 1, k\r\n \r\n    def _delete(self, pos, idx):\r\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n \r\n        self._len -= 1\r\n        self._fen_update(pos, -1)\r\n        del _lists[pos][idx]\r\n        _list_lens[pos] -= 1\r\n \r\n        if _list_lens[pos]:\r\n            _mins[pos] = _lists[pos][0]\r\n        else:\r\n            del _lists[pos]\r\n            del _list_lens[pos]\r\n            del _mins[pos]\r\n            self._rebuild = True\r\n \r\n    def _loc_left(self, value):\r\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n \r\n        _lists = self._lists\r\n        _mins = self._mins\r\n \r\n        lo, pos = -1, len(_lists) - 1\r\n        while lo + 1 < pos:\r\n            mi = (lo + pos) >> 1\r\n            if value <= _mins[mi]:\r\n                pos = mi\r\n            else:\r\n                lo = mi\r\n \r\n        if pos and value <= _lists[pos - 1][-1]:\r\n            pos -= 1\r\n \r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value <= _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n \r\n        return pos, idx\r\n \r\n    def _loc_right(self, value):\r\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n \r\n        _lists = self._lists\r\n        _mins = self._mins\r\n \r\n        pos, hi = 0, len(_lists)\r\n        while pos + 1 < hi:\r\n            mi = (pos + hi) >> 1\r\n            if value < _mins[mi]:\r\n                hi = mi\r\n            else:\r\n                pos = mi\r\n \r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value < _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n \r\n        return pos, idx\r\n \r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted list.\"\"\"\r\n        _load = self._load\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n \r\n        self._len += 1\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            self._fen_update(pos, 1)\r\n            _list = _lists[pos]\r\n            _list.insert(idx, value)\r\n            _list_lens[pos] += 1\r\n            _mins[pos] = _list[0]\r\n            if _load + _load < len(_list):\r\n                _lists.insert(pos + 1, _list[_load:])\r\n                _list_lens.insert(pos + 1, len(_list) - _load)\r\n                _mins.insert(pos + 1, _list[_load])\r\n                _list_lens[pos] = _load\r\n                del _list[_load:]\r\n                self._rebuild = True\r\n        else:\r\n            _lists.append([value])\r\n            _mins.append(value)\r\n            _list_lens.append(1)\r\n            self._rebuild = True\r\n \r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            if idx and _lists[pos][idx - 1] == value:\r\n                self._delete(pos, idx - 1)\r\n \r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\r\n        _len = self._len\r\n        self.discard(value)\r\n        if _len == self._len:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n \r\n    def pop(self, index=-1):\r\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        value = self._lists[pos][idx]\r\n        self._delete(pos, idx)\r\n        return value\r\n \r\n    def bisect_left(self, value):\r\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_left(value)\r\n        return self._fen_query(pos) + idx\r\n \r\n    def bisect_right(self, value):\r\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_right(value)\r\n        return self._fen_query(pos) + idx\r\n \r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\r\n        return self.bisect_right(value) - self.bisect_left(value)\r\n \r\n    def __len__(self):\r\n        \"\"\"Return the size of the sorted list.\"\"\"\r\n        return self._len\r\n \r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        return self._lists[pos][idx]\r\n \r\n    def __delitem__(self, index):\r\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        self._delete(pos, idx)\r\n \r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_left(value)\r\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\r\n        return False\r\n \r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the sorted list.\"\"\"\r\n        return (value for _list in self._lists for value in _list)\r\n \r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\r\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\r\n \r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted list.\"\"\"\r\n        return 'SortedList({0})'.format(list(self))\r\n \r\n \r\ndef solve():\r\n    n = int(input())\r\n    end = SortedList()\r\n    ls = []\r\n    for i in range(n): \r\n        a , b = map(int, input().split())\r\n        end.add(b)\r\n        ls.append((a , b))\r\n    ls.sort()\r\n    ans = 0 \r\n    for a , b in ls : \r\n        end.remove(b)\r\n        ans += end.bisect_left(b)\r\n    print(ans)\r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "failedTestCase": {
            "input": "5\r\n2\r\n2 3\r\n1 4\r\n6\r\n2 6\r\n3 9\r\n4 5\r\n1 8\r\n7 10\r\n-2 100\r\n4\r\n-10 10\r\n-5 5\r\n-12 12\r\n-13 13\r\n5\r\n-4 9\r\n-2 5\r\n3 4\r\n6 7\r\n8 10\r\n4\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245944152",
            "author": "Asma010",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707699300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245941421",
            "author": "Asma010",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707698160
        },
        "acceptedCode": "n = int(input())\r\nfor _ in range(n):\r\n    row = []\r\n    for j in range(3):\r\n        rows = list(input())\r\n        row.append(rows)\r\n    for i in range(3):\r\n        if '?' in row[i]:\r\n            if 'A' in row[i] and 'B' in row[i]:\r\n                print('C')\r\n            elif 'C' in row[i] and 'B' in row[i]:\r\n                print('A')\r\n            else:\r\n                print('B')",
        "rejectedCode": "n = int(input())\r\nfor _ in range(n):\r\n    row = []\r\n    row[0] = list(map(int, input().split()))\r\n    row[1] = list(map(int, input().split()))\r\n    row[2] = list(map(int, input().split()))\r\n    for i in range(3):\r\n        if '?' in row[i]:\r\n            if 'A' and 'B' in row[i]:\r\n                print('C')\r\n            elif 'c' and 'B' in row[i]:\r\n                print('A')\r\n            else:\r\n                print('B')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245931211",
            "author": "Muhammad_Zain_Ul_Abideen",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 2200,
            "submissionTime": 1707686460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245852901",
            "author": "Muhammad_Zain_Ul_Abideen",
            "lang": "Python 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707634920
        },
        "acceptedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    s = list(input())\r\n    ns = \"\"\r\n    v = ['a','e']\r\n    c = ['b','c','d']\r\n    while len(s):\r\n        if s[-1] in v:\r\n            x = 2\r\n        else:\r\n            x = 3\r\n      \r\n        \r\n        while x != 0:\r\n            #print(s)\r\n            ns += s[-1]\r\n            s.pop()\r\n            x -= 1\r\n            \r\n        ns += \".\"\r\n    print(ns[:-1][::-1])",
        "rejectedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    a = sum(list(map(int, input().split())))\r\n    if int(a**0.5) == a**0.5:\r\n        print('yes')\r\n    else:\r\n        print('no')",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "245921745",
            "author": "Slata",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1512,
            "memory": 41400,
            "submissionTime": 1707670980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "245921012",
            "author": "Slata",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707670200
        },
        "acceptedCode": "from bisect import bisect_left as lower_bound\r\nfrom bisect import bisect_right as upper_bound\r\n  \r\nclass FenwickTree:\r\n    def __init__(self, x):\r\n        bit = self.bit = list(x)\r\n        size = self.size = len(bit)\r\n        for i in range(size):\r\n            j = i | (i + 1)\r\n            if j < size:\r\n                bit[j] += bit[i]\r\n \r\n    def update(self, idx, x):\r\n        while idx < self.size:\r\n            self.bit[idx] += x\r\n            idx |= idx + 1\r\n \r\n    def __call__(self, end):\r\n        x = 0\r\n        while end:\r\n            x += self.bit[end - 1]\r\n            end &= end - 1\r\n        return x\r\n \r\n    def find_kth(self, k):\r\n        idx = -1\r\n        for d in reversed(range(self.size.bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < self.size and self.bit[right_idx] <= k:\r\n                idx = right_idx\r\n                k -= self.bit[idx]\r\n        return idx + 1, k\r\n \r\nclass SortedList:\r\n    block_size = 700\r\n \r\n    def __init__(self, iterable=()):\r\n        self.macro = []\r\n        self.micros = [[]]\r\n        self.micro_size = [0]\r\n        self.fenwick = FenwickTree([0])\r\n        self.size = 0\r\n        for item in iterable:\r\n            self.insert(item)\r\n \r\n    def insert(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        j = upper_bound(self.micros[i], x)\r\n        self.micros[i].insert(j, x)\r\n        self.size += 1\r\n        self.micro_size[i] += 1\r\n        self.fenwick.update(i, 1)\r\n        if len(self.micros[i]) >= self.block_size:\r\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\r\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\r\n            self.fenwick = FenwickTree(self.micro_size)\r\n            self.macro.insert(i, self.micros[i + 1][0])\r\n \r\n    def pop(self, k=-1):\r\n        i, j = self._find_kth(k)\r\n        self.size -= 1\r\n        self.micro_size[i] -= 1\r\n        self.fenwick.update(i, -1)\r\n        return self.micros[i].pop(j)\r\n \r\n    def __getitem__(self, k):\r\n        i, j = self._find_kth(k)\r\n        return self.micros[i][j]\r\n \r\n    def count(self, x):\r\n        return self.upper_bound(x) - self.lower_bound(x)\r\n \r\n    def __contains__(self, x):\r\n        return self.count(x) > 0\r\n \r\n    def lower_bound(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\r\n \r\n    def upper_bound(self, x):\r\n        i = upper_bound(self.macro, x)\r\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\r\n \r\n    def _find_kth(self, k):\r\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\r\n \r\n    def __len__(self):\r\n        return self.size\r\n \r\n    def __iter__(self):\r\n        return (x for micro in self.micros for x in micro)\r\n \r\n    def __repr__(self):\r\n        return str(list(self))\r\n \r\nfor i in range(int(input())):\r\n  n=int(input())\r\n  L=[list(map(int,input().split())) for j in range(n)]\r\n  L.sort(key=lambda x:x[1])\r\n  S=SortedList()\r\n  ans=0\r\n  for j in range(n):\r\n    ans+=len(S)-S.lower_bound(L[j][0])\r\n    S.insert(L[j][0])\r\n  print(ans)",
        "rejectedCode": "from sortedcontainers import SortedList\r\nfor i in range(int(input())):\r\n  n=int(input())\r\n  L=[list(map(int,input().split())) for j in range(n)]\r\n  L.sort(key=lambda x:x[1])\r\n  S=SortedList()\r\n  ans=0\r\n  length=0\r\n  for j in range(n):\r\n    ans+=length-S.bisect_left(L[j][0])\r\n    S.add(L[j][0])\r\n    length+=1\r\n  print(ans)",
        "failedTestCase": {
            "input": "5\r\n2\r\n2 3\r\n1 4\r\n6\r\n2 6\r\n3 9\r\n4 5\r\n1 8\r\n7 10\r\n-2 100\r\n4\r\n-10 10\r\n-5 5\r\n-12 12\r\n-13 13\r\n5\r\n-4 9\r\n-2 5\r\n3 4\r\n6 7\r\n8 10\r\n4\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "245904988",
            "author": "htbkoo",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 2183,
            "memory": 53900,
            "submissionTime": 1707658320
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245902208",
            "author": "htbkoo",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 31400,
            "submissionTime": 1707656880
        },
        "acceptedCode": "# Codeforces Round 918 (Div. 4) - F. Greetings\n# https://codeforces.com/contest/1915/problem/F\n\n\"\"\"\n\" ------ start of sortedcontainers.SortedList\n\" from: https://github.com/grantjenks/python-sortedcontainers/blob/master/sortedcontainers/sortedlist.py\n\"\"\"\n\n\"\"\"Sorted List\n==============\n:doc:`Sorted Containers<index>` is an Apache2 licensed Python sorted\ncollections library, written in pure-Python, and fast as C-extensions. The\n:doc:`introduction<introduction>` is the best way to get started.\nSorted list implementations:\n.. currentmodule:: sortedcontainers\n* :class:`SortedList`\n* :class:`SortedKeyList`\n\"\"\"\n\nimport sys\nimport traceback\n\nfrom bisect import bisect_left, bisect_right, insort\nfrom itertools import chain, repeat, starmap\nfrom math import log\nfrom operator import add, eq, ne, gt, ge, lt, le, iadd\nfrom textwrap import dedent\n\n###############################################################################\n# BEGIN Python 2/3 Shims\n###############################################################################\n\nfrom collections.abc import Sequence, MutableSequence\n\nfrom functools import wraps, reduce\n\nfrom _thread import get_ident\n\n\ndef recursive_repr(fillvalue='...'):\n    \"Decorator to make a repr function return fillvalue for a recursive call.\"\n\n    # pylint: disable=missing-docstring\n    # Copied from reprlib in Python 3\n    # https://hg.python.org/cpython/file/3.6/Lib/reprlib.py\n\n    def decorating_function(user_function):\n        repr_running = set()\n\n        @wraps(user_function)\n        def wrapper(self):\n            key = id(self), get_ident()\n            if key in repr_running:\n                return fillvalue\n            repr_running.add(key)\n            try:\n                result = user_function(self)\n            finally:\n                repr_running.discard(key)\n            return result\n\n        return wrapper\n\n    return decorating_function\n\n\n###############################################################################\n# END Python 2/3 Shims\n###############################################################################\n\n\nclass SortedList(MutableSequence):\n    \"\"\"Sorted list is a sorted mutable sequence.\n    Sorted list values are maintained in sorted order.\n    Sorted list values must be comparable. The total ordering of values must\n    not change while they are stored in the sorted list.\n    Methods for adding values:\n    * :func:`SortedList.add`\n    * :func:`SortedList.update`\n    * :func:`SortedList.__add__`\n    * :func:`SortedList.__iadd__`\n    * :func:`SortedList.__mul__`\n    * :func:`SortedList.__imul__`\n    Methods for removing values:\n    * :func:`SortedList.clear`\n    * :func:`SortedList.discard`\n    * :func:`SortedList.remove`\n    * :func:`SortedList.pop`\n    * :func:`SortedList.__delitem__`\n    Methods for looking up values:\n    * :func:`SortedList.bisect_left`\n    * :func:`SortedList.bisect_right`\n    * :func:`SortedList.count`\n    * :func:`SortedList.index`\n    * :func:`SortedList.__contains__`\n    * :func:`SortedList.__getitem__`\n    Methods for iterating values:\n    * :func:`SortedList.irange`\n    * :func:`SortedList.islice`\n    * :func:`SortedList.__iter__`\n    * :func:`SortedList.__reversed__`\n    Methods for miscellany:\n    * :func:`SortedList.copy`\n    * :func:`SortedList.__len__`\n    * :func:`SortedList.__repr__`\n    * :func:`SortedList._check`\n    * :func:`SortedList._reset`\n    Sorted lists use lexicographical ordering semantics when compared to other\n    sequences.\n    Some methods of mutable sequences are not supported and will raise\n    not-implemented error.\n    \"\"\"\n    DEFAULT_LOAD_FACTOR = 1000\n\n    def __init__(self, iterable=None, key=None):\n        \"\"\"Initialize sorted list instance.\n        Optional `iterable` argument provides an initial iterable of values to\n        initialize the sorted list.\n        Runtime complexity: `O(n*log(n))`\n        # >>> sl = SortedList()\n        # >>> sl\n        SortedList([])\n        # >>> sl = SortedList([3, 1, 2, 5, 4])\n        # >>> sl\n        SortedList([1, 2, 3, 4, 5])\n        :param iterable: initial values (optional)\n        \"\"\"\n        assert key is None\n        self._len = 0\n        self._load = self.DEFAULT_LOAD_FACTOR\n        self._lists = []\n        self._maxes = []\n        self._index = []\n        self._offset = 0\n\n        if iterable is not None:\n            self._update(iterable)\n\n    def __new__(cls, iterable=None, key=None):\n        \"\"\"Create new sorted list or sorted-key list instance.\n        Optional `key`-function argument will return an instance of subtype\n        :class:`SortedKeyList`.\n        # >>> sl = SortedList()\n        # >>> isinstance(sl, SortedList)\n        True\n        # >>> sl = SortedList(key=lambda x: -x)\n        # >>> isinstance(sl, SortedList)\n        True\n        # >>> isinstance(sl, SortedKeyList)\n        True\n        :param iterable: initial values (optional)\n        :param key: function used to extract comparison key (optional)\n        :return: sorted list or sorted-key list instance\n        \"\"\"\n        # pylint: disable=unused-argument\n        return object.__new__(cls)\n\n    @property\n    def key(self):  # pylint: disable=useless-return\n        \"\"\"Function used to extract comparison key from values.\n        Sorted list compares values directly so the key function is none.\n        \"\"\"\n        return None\n\n    def _reset(self, load):\n        \"\"\"Reset sorted list load factor.\n        The `load` specifies the load-factor of the list. The default load\n        factor of 1000 works well for lists from tens to tens-of-millions of\n        values. Good practice is to use a value that is the cube root of the\n        list size. With billions of elements, the best load factor depends on\n        your usage. It's best to leave the load factor at the default until you\n        start benchmarking.\n        See :doc:`implementation` and :doc:`performance-scale` for more\n        information.\n        Runtime complexity: `O(n)`\n        :param int load: load-factor for sorted list sublists\n        \"\"\"\n        values = reduce(iadd, self._lists, [])\n        self._clear()\n        self._load = load\n        self._update(values)\n\n    def clear(self):\n        \"\"\"Remove all values from sorted list.\n        Runtime complexity: `O(n)`\n        \"\"\"\n        self._len = 0\n        del self._lists[:]\n        del self._maxes[:]\n        del self._index[:]\n        self._offset = 0\n\n    _clear = clear\n\n    def add(self, value):\n        \"\"\"Add `value` to sorted list.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList()\n        # >>> sl.add(3)\n        # >>> sl.add(1)\n        # >>> sl.add(2)\n        # >>> sl\n        SortedList([1, 2, 3])\n        :param value: value to add to sorted list\n        \"\"\"\n        _lists = self._lists\n        _maxes = self._maxes\n\n        if _maxes:\n            pos = bisect_right(_maxes, value)\n\n            if pos == len(_maxes):\n                pos -= 1\n                _lists[pos].append(value)\n                _maxes[pos] = value\n            else:\n                insort(_lists[pos], value)\n\n            self._expand(pos)\n        else:\n            _lists.append([value])\n            _maxes.append(value)\n\n        self._len += 1\n\n    def _expand(self, pos):\n        \"\"\"Split sublists with length greater than double the load-factor.\n        Updates the index when the sublist length is less than double the load\n        level. This requires incrementing the nodes in a traversal from the\n        leaf node to the root. For an example traversal see\n        ``SortedList._loc``.\n        \"\"\"\n        _load = self._load\n        _lists = self._lists\n        _index = self._index\n\n        if len(_lists[pos]) > (_load << 1):\n            _maxes = self._maxes\n\n            _lists_pos = _lists[pos]\n            half = _lists_pos[_load:]\n            del _lists_pos[_load:]\n            _maxes[pos] = _lists_pos[-1]\n\n            _lists.insert(pos + 1, half)\n            _maxes.insert(pos + 1, half[-1])\n\n            del _index[:]\n        else:\n            if _index:\n                child = self._offset + pos\n                while child:\n                    _index[child] += 1\n                    child = (child - 1) >> 1\n                _index[0] += 1\n\n    def update(self, iterable):\n        \"\"\"Update sorted list by adding all values from `iterable`.\n        Runtime complexity: `O(k*log(n))` -- approximate.\n        # >>> sl = SortedList()\n        # >>> sl.update([3, 1, 2])\n        # >>> sl\n        SortedList([1, 2, 3])\n        :param iterable: iterable of values to add\n        \"\"\"\n        _lists = self._lists\n        _maxes = self._maxes\n        values = sorted(iterable)\n\n        if _maxes:\n            if len(values) * 4 >= self._len:\n                _lists.append(values)\n                values = reduce(iadd, _lists, [])\n                values.sort()\n                self._clear()\n            else:\n                _add = self.add\n                for val in values:\n                    _add(val)\n                return\n\n        _load = self._load\n        _lists.extend(values[pos:(pos + _load)]\n                      for pos in range(0, len(values), _load))\n        _maxes.extend(sublist[-1] for sublist in _lists)\n        self._len = len(values)\n        del self._index[:]\n\n    _update = update\n\n    def __contains__(self, value):\n        \"\"\"Return true if `value` is an element of the sorted list.\n        ``sl.__contains__(value)`` <==> ``value in sl``\n        Runtime complexity: `O(log(n))`\n        # >>> sl = SortedList([1, 2, 3, 4, 5])\n        # >>> 3 in sl\n        True\n        :param value: search for value in sorted list\n        :return: true if `value` in sorted list\n        \"\"\"\n        _maxes = self._maxes\n\n        if not _maxes:\n            return False\n\n        pos = bisect_left(_maxes, value)\n\n        if pos == len(_maxes):\n            return False\n\n        _lists = self._lists\n        idx = bisect_left(_lists[pos], value)\n\n        return _lists[pos][idx] == value\n\n    def discard(self, value):\n        \"\"\"Remove `value` from sorted list if it is a member.\n        If `value` is not a member, do nothing.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList([1, 2, 3, 4, 5])\n        # >>> sl.discard(5)\n        # >>> sl.discard(0)\n        # >>> sl == [1, 2, 3, 4]\n        True\n        :param value: `value` to discard from sorted list\n        \"\"\"\n        _maxes = self._maxes\n\n        if not _maxes:\n            return\n\n        pos = bisect_left(_maxes, value)\n\n        if pos == len(_maxes):\n            return\n\n        _lists = self._lists\n        idx = bisect_left(_lists[pos], value)\n\n        if _lists[pos][idx] == value:\n            self._delete(pos, idx)\n\n    def remove(self, value):\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\n        If `value` is not a member, raise ValueError.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList([1, 2, 3, 4, 5])\n        # >>> sl.remove(5)\n        # >>> sl == [1, 2, 3, 4]\n        True\n        # >>> sl.remove(0)\n        Traceback (most recent call last):\n          ...\n        ValueError: 0 not in list\n        :param value: `value` to remove from sorted list\n        :raises ValueError: if `value` is not in sorted list\n        \"\"\"\n        _maxes = self._maxes\n\n        if not _maxes:\n            raise ValueError('{0!r} not in list'.format(value))\n\n        pos = bisect_left(_maxes, value)\n\n        if pos == len(_maxes):\n            raise ValueError('{0!r} not in list'.format(value))\n\n        _lists = self._lists\n        idx = bisect_left(_lists[pos], value)\n\n        if _lists[pos][idx] == value:\n            self._delete(pos, idx)\n        else:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def _delete(self, pos, idx):\n        \"\"\"Delete value at the given `(pos, idx)`.\n        Combines lists that are less than half the load level.\n        Updates the index when the sublist length is more than half the load\n        level. This requires decrementing the nodes in a traversal from the\n        leaf node to the root. For an example traversal see\n        ``SortedList._loc``.\n        :param int pos: lists index\n        :param int idx: sublist index\n        \"\"\"\n        _lists = self._lists\n        _maxes = self._maxes\n        _index = self._index\n\n        _lists_pos = _lists[pos]\n\n        del _lists_pos[idx]\n        self._len -= 1\n\n        len_lists_pos = len(_lists_pos)\n\n        if len_lists_pos > (self._load >> 1):\n            _maxes[pos] = _lists_pos[-1]\n\n            if _index:\n                child = self._offset + pos\n                while child > 0:\n                    _index[child] -= 1\n                    child = (child - 1) >> 1\n                _index[0] -= 1\n        elif len(_lists) > 1:\n            if not pos:\n                pos += 1\n\n            prev = pos - 1\n            _lists[prev].extend(_lists[pos])\n            _maxes[prev] = _lists[prev][-1]\n\n            del _lists[pos]\n            del _maxes[pos]\n            del _index[:]\n\n            self._expand(prev)\n        elif len_lists_pos:\n            _maxes[pos] = _lists_pos[-1]\n        else:\n            del _lists[pos]\n            del _maxes[pos]\n            del _index[:]\n\n    def _loc(self, pos, idx):\n        \"\"\"Convert an index pair (lists index, sublist index) into a single\n        index number that corresponds to the position of the value in the\n        sorted list.\n        Many queries require the index be built. Details of the index are\n        described in ``SortedList._build_index``.\n        Indexing requires traversing the tree from a leaf node to the root. The\n        parent of each node is easily computable at ``(pos - 1) // 2``.\n        Left-child nodes are always at odd indices and right-child nodes are\n        always at even indices.\n        When traversing up from a right-child node, increment the total by the\n        left-child node.\n        The final index is the sum from traversal and the index in the sublist.\n        For example, using the index from ``SortedList._build_index``::\n            _index = 14 5 9 3 2 4 5\n            _offset = 3\n        Tree::\n                 14\n              5      9\n            3   2  4   5\n        Converting an index pair (2, 3) into a single index involves iterating\n        like so:\n        1. Starting at the leaf node: offset + alpha = 3 + 2 = 5. We identify\n           the node as a left-child node. At such nodes, we simply traverse to\n           the parent.\n        2. At node 9, position 2, we recognize the node as a right-child node\n           and accumulate the left-child in our total. Total is now 5 and we\n           traverse to the parent at position 0.\n        3. Iteration ends at the root.\n        The index is then the sum of the total and sublist index: 5 + 3 = 8.\n        :param int pos: lists index\n        :param int idx: sublist index\n        :return: index in sorted list\n        \"\"\"\n        if not pos:\n            return idx\n\n        _index = self._index\n\n        if not _index:\n            self._build_index()\n\n        total = 0\n\n        # Increment pos to point in the index to len(self._lists[pos]).\n\n        pos += self._offset\n\n        # Iterate until reaching the root of the index tree at pos = 0.\n\n        while pos:\n\n            # Right-child nodes are at odd indices. At such indices\n            # account the total below the left child node.\n\n            if not pos & 1:\n                total += _index[pos - 1]\n\n            # Advance pos to the parent node.\n\n            pos = (pos - 1) >> 1\n\n        return total + idx\n\n    def _pos(self, idx):\n        \"\"\"Convert an index into an index pair (lists index, sublist index)\n        that can be used to access the corresponding lists position.\n        Many queries require the index be built. Details of the index are\n        described in ``SortedList._build_index``.\n        Indexing requires traversing the tree to a leaf node. Each node has two\n        children which are easily computable. Given an index, pos, the\n        left-child is at ``pos * 2 + 1`` and the right-child is at ``pos * 2 +\n        2``.\n        When the index is less than the left-child, traversal moves to the\n        left sub-tree. Otherwise, the index is decremented by the left-child\n        and traversal moves to the right sub-tree.\n        At a child node, the indexing pair is computed from the relative\n        position of the child node as compared with the offset and the remaining\n        index.\n        For example, using the index from ``SortedList._build_index``::\n            _index = 14 5 9 3 2 4 5\n            _offset = 3\n        Tree::\n                 14\n              5      9\n            3   2  4   5\n        Indexing position 8 involves iterating like so:\n        1. Starting at the root, position 0, 8 is compared with the left-child\n           node (5) which it is greater than. When greater the index is\n           decremented and the position is updated to the right child node.\n        2. At node 9 with index 3, we again compare the index to the left-child\n           node with value 4. Because the index is the less than the left-child\n           node, we simply traverse to the left.\n        3. At node 4 with index 3, we recognize that we are at a leaf node and\n           stop iterating.\n        4. To compute the sublist index, we subtract the offset from the index\n           of the leaf node: 5 - 3 = 2. To compute the index in the sublist, we\n           simply use the index remaining from iteration. In this case, 3.\n        The final index pair from our example is (2, 3) which corresponds to\n        index 8 in the sorted list.\n        :param int idx: index in sorted list\n        :return: (lists index, sublist index) pair\n        \"\"\"\n        if idx < 0:\n            last_len = len(self._lists[-1])\n\n            if (-idx) <= last_len:\n                return len(self._lists) - 1, last_len + idx\n\n            idx += self._len\n\n            if idx < 0:\n                raise IndexError('list index out of range')\n        elif idx >= self._len:\n            raise IndexError('list index out of range')\n\n        if idx < len(self._lists[0]):\n            return 0, idx\n\n        _index = self._index\n\n        if not _index:\n            self._build_index()\n\n        pos = 0\n        child = 1\n        len_index = len(_index)\n\n        while child < len_index:\n            index_child = _index[child]\n\n            if idx < index_child:\n                pos = child\n            else:\n                idx -= index_child\n                pos = child + 1\n\n            child = (pos << 1) + 1\n\n        return (pos - self._offset, idx)\n\n    def _build_index(self):\n        \"\"\"Build a positional index for indexing the sorted list.\n        Indexes are represented as binary trees in a dense array notation\n        similar to a binary heap.\n        For example, given a lists representation storing integers::\n            0: [1, 2, 3]\n            1: [4, 5]\n            2: [6, 7, 8, 9]\n            3: [10, 11, 12, 13, 14]\n        The first transformation maps the sub-lists by their length. The\n        first row of the index is the length of the sub-lists::\n            0: [3, 2, 4, 5]\n        Each row after that is the sum of consecutive pairs of the previous\n        row::\n            1: [5, 9]\n            2: [14]\n        Finally, the index is built by concatenating these lists together::\n            _index = [14, 5, 9, 3, 2, 4, 5]\n        An offset storing the start of the first row is also stored::\n            _offset = 3\n        When built, the index can be used for efficient indexing into the list.\n        See the comment and notes on ``SortedList._pos`` for details.\n        \"\"\"\n        row0 = list(map(len, self._lists))\n\n        if len(row0) == 1:\n            self._index[:] = row0\n            self._offset = 0\n            return\n\n        head = iter(row0)\n        tail = iter(head)\n        row1 = list(starmap(add, zip(head, tail)))\n\n        if len(row0) & 1:\n            row1.append(row0[-1])\n\n        if len(row1) == 1:\n            self._index[:] = row1 + row0\n            self._offset = 1\n            return\n\n        size = 2 ** (int(log(len(row1) - 1, 2)) + 1)\n        row1.extend(repeat(0, size - len(row1)))\n        tree = [row0, row1]\n\n        while len(tree[-1]) > 1:\n            head = iter(tree[-1])\n            tail = iter(head)\n            row = list(starmap(add, zip(head, tail)))\n            tree.append(row)\n\n        reduce(iadd, reversed(tree), self._index)\n        self._offset = size * 2 - 1\n\n    def __delitem__(self, index):\n        \"\"\"Remove value at `index` from sorted list.\n        ``sl.__delitem__(index)`` <==> ``del sl[index]``\n        Supports slicing.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList('abcde')\n        # >>> del sl[2]\n        # >>> sl\n        SortedList(['a', 'b', 'd', 'e'])\n        # >>> del sl[:2]\n        # >>> sl\n        SortedList(['d', 'e'])\n        :param index: integer or slice for indexing\n        :raises IndexError: if index out of range\n        \"\"\"\n        if isinstance(index, slice):\n            start, stop, step = index.indices(self._len)\n\n            if step == 1 and start < stop:\n                if start == 0 and stop == self._len:\n                    return self._clear()\n                elif self._len <= 8 * (stop - start):\n                    values = self._getitem(slice(None, start))\n                    if stop < self._len:\n                        values += self._getitem(slice(stop, None))\n                    self._clear()\n                    return self._update(values)\n\n            indices = range(start, stop, step)\n\n            # Delete items from greatest index to least so\n            # that the indices remain valid throughout iteration.\n\n            if step > 0:\n                indices = reversed(indices)\n\n            _pos, _delete = self._pos, self._delete\n\n            for index in indices:\n                pos, idx = _pos(index)\n                _delete(pos, idx)\n        else:\n            pos, idx = self._pos(index)\n            self._delete(pos, idx)\n\n    def __getitem__(self, index):\n        \"\"\"Lookup value at `index` in sorted list.\n        ``sl.__getitem__(index)`` <==> ``sl[index]``\n        Supports slicing.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList('abcde')\n        # >>> sl[1]\n        'b'\n        # >>> sl[-1]\n        'e'\n        # >>> sl[2:5]\n        ['c', 'd', 'e']\n        :param index: integer or slice for indexing\n        :return: value or list of values\n        :raises IndexError: if index out of range\n        \"\"\"\n        _lists = self._lists\n\n        if isinstance(index, slice):\n            start, stop, step = index.indices(self._len)\n\n            if step == 1 and start < stop:\n                # Whole slice optimization: start to stop slices the whole\n                # sorted list.\n\n                if start == 0 and stop == self._len:\n                    return reduce(iadd, self._lists, [])\n\n                start_pos, start_idx = self._pos(start)\n                start_list = _lists[start_pos]\n                stop_idx = start_idx + stop - start\n\n                # Small slice optimization: start index and stop index are\n                # within the start list.\n\n                if len(start_list) >= stop_idx:\n                    return start_list[start_idx:stop_idx]\n\n                if stop == self._len:\n                    stop_pos = len(_lists) - 1\n                    stop_idx = len(_lists[stop_pos])\n                else:\n                    stop_pos, stop_idx = self._pos(stop)\n\n                prefix = _lists[start_pos][start_idx:]\n                middle = _lists[(start_pos + 1):stop_pos]\n                result = reduce(iadd, middle, prefix)\n                result += _lists[stop_pos][:stop_idx]\n\n                return result\n\n            if step == -1 and start > stop:\n                result = self._getitem(slice(stop + 1, start + 1))\n                result.reverse()\n                return result\n\n            # Return a list because a negative step could\n            # reverse the order of the items and this could\n            # be the desired behavior.\n\n            indices = range(start, stop, step)\n            return list(self._getitem(index) for index in indices)\n        else:\n            if self._len:\n                if index == 0:\n                    return _lists[0][0]\n                elif index == -1:\n                    return _lists[-1][-1]\n            else:\n                raise IndexError('list index out of range')\n\n            if 0 <= index < len(_lists[0]):\n                return _lists[0][index]\n\n            len_last = len(_lists[-1])\n\n            if -len_last < index < 0:\n                return _lists[-1][len_last + index]\n\n            pos, idx = self._pos(index)\n            return _lists[pos][idx]\n\n    _getitem = __getitem__\n\n    def __setitem__(self, index, value):\n        \"\"\"Raise not-implemented error.\n        ``sl.__setitem__(index, value)`` <==> ``sl[index] = value``\n        :raises NotImplementedError: use ``del sl[index]`` and\n            ``sl.add(value)`` instead\n        \"\"\"\n        message = 'use ``del sl[index]`` and ``sl.add(value)`` instead'\n        raise NotImplementedError(message)\n\n    def __iter__(self):\n        \"\"\"Return an iterator over the sorted list.\n        ``sl.__iter__()`` <==> ``iter(sl)``\n        Iterating the sorted list while adding or deleting values may raise a\n        :exc:`RuntimeError` or fail to iterate over all values.\n        \"\"\"\n        return chain.from_iterable(self._lists)\n\n    def __reversed__(self):\n        \"\"\"Return a reverse iterator over the sorted list.\n        ``sl.__reversed__()`` <==> ``reversed(sl)``\n        Iterating the sorted list while adding or deleting values may raise a\n        :exc:`RuntimeError` or fail to iterate over all values.\n        \"\"\"\n        return chain.from_iterable(map(reversed, reversed(self._lists)))\n\n    def reverse(self):\n        \"\"\"Raise not-implemented error.\n        Sorted list maintains values in ascending sort order. Values may not be\n        reversed in-place.\n        Use ``reversed(sl)`` for an iterator over values in descending sort\n        order.\n        Implemented to override `MutableSequence.reverse` which provides an\n        erroneous default implementation.\n        :raises NotImplementedError: use ``reversed(sl)`` instead\n        \"\"\"\n        raise NotImplementedError('use ``reversed(sl)`` instead')\n\n    def islice(self, start=None, stop=None, reverse=False):\n        \"\"\"Return an iterator that slices sorted list from `start` to `stop`.\n        The `start` and `stop` index are treated inclusive and exclusive,\n        respectively.\n        Both `start` and `stop` default to `None` which is automatically\n        inclusive of the beginning and end of the sorted list.\n        When `reverse` is `True` the values are yielded from the iterator in\n        reverse order; `reverse` defaults to `False`.\n        # >>> sl = SortedList('abcdefghij')\n        # >>> it = sl.islice(2, 6)\n        # >>> list(it)\n        ['c', 'd', 'e', 'f']\n        :param int start: start index (inclusive)\n        :param int stop: stop index (exclusive)\n        :param bool reverse: yield values in reverse order\n        :return: iterator\n        \"\"\"\n        _len = self._len\n\n        if not _len:\n            return iter(())\n\n        start, stop, _ = slice(start, stop).indices(self._len)\n\n        if start >= stop:\n            return iter(())\n\n        _pos = self._pos\n\n        min_pos, min_idx = _pos(start)\n\n        if stop == _len:\n            max_pos = len(self._lists) - 1\n            max_idx = len(self._lists[-1])\n        else:\n            max_pos, max_idx = _pos(stop)\n\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\n\n    def _islice(self, min_pos, min_idx, max_pos, max_idx, reverse):\n        \"\"\"Return an iterator that slices sorted list using two index pairs.\n        The index pairs are (min_pos, min_idx) and (max_pos, max_idx), the\n        first inclusive and the latter exclusive. See `_pos` for details on how\n        an index is converted to an index pair.\n        When `reverse` is `True`, values are yielded from the iterator in\n        reverse order.\n        \"\"\"\n        _lists = self._lists\n\n        if min_pos > max_pos:\n            return iter(())\n\n        if min_pos == max_pos:\n            if reverse:\n                indices = reversed(range(min_idx, max_idx))\n                return map(_lists[min_pos].__getitem__, indices)\n\n            indices = range(min_idx, max_idx)\n            return map(_lists[min_pos].__getitem__, indices)\n\n        next_pos = min_pos + 1\n\n        if next_pos == max_pos:\n            if reverse:\n                min_indices = range(min_idx, len(_lists[min_pos]))\n                max_indices = range(max_idx)\n                return chain(\n                    map(_lists[max_pos].__getitem__, reversed(max_indices)),\n                    map(_lists[min_pos].__getitem__, reversed(min_indices)),\n                )\n\n            min_indices = range(min_idx, len(_lists[min_pos]))\n            max_indices = range(max_idx)\n            return chain(\n                map(_lists[min_pos].__getitem__, min_indices),\n                map(_lists[max_pos].__getitem__, max_indices),\n            )\n\n        if reverse:\n            min_indices = range(min_idx, len(_lists[min_pos]))\n            sublist_indices = range(next_pos, max_pos)\n            sublists = map(_lists.__getitem__, reversed(sublist_indices))\n            max_indices = range(max_idx)\n            return chain(\n                map(_lists[max_pos].__getitem__, reversed(max_indices)),\n                chain.from_iterable(map(reversed, sublists)),\n                map(_lists[min_pos].__getitem__, reversed(min_indices)),\n            )\n\n        min_indices = range(min_idx, len(_lists[min_pos]))\n        sublist_indices = range(next_pos, max_pos)\n        sublists = map(_lists.__getitem__, sublist_indices)\n        max_indices = range(max_idx)\n        return chain(\n            map(_lists[min_pos].__getitem__, min_indices),\n            chain.from_iterable(sublists),\n            map(_lists[max_pos].__getitem__, max_indices),\n        )\n\n    def irange(self, minimum=None, maximum=None, inclusive=(True, True),\n               reverse=False):\n        \"\"\"Create an iterator of values between `minimum` and `maximum`.\n        Both `minimum` and `maximum` default to `None` which is automatically\n        inclusive of the beginning and end of the sorted list.\n        The argument `inclusive` is a pair of booleans that indicates whether\n        the minimum and maximum ought to be included in the range,\n        respectively. The default is ``(True, True)`` such that the range is\n        inclusive of both minimum and maximum.\n        When `reverse` is `True` the values are yielded from the iterator in\n        reverse order; `reverse` defaults to `False`.\n        # >>> sl = SortedList('abcdefghij')\n        # >>> it = sl.irange('c', 'f')\n        # >>> list(it)\n        ['c', 'd', 'e', 'f']\n        :param minimum: minimum value to start iterating\n        :param maximum: maximum value to stop iterating\n        :param inclusive: pair of booleans\n        :param bool reverse: yield values in reverse order\n        :return: iterator\n        \"\"\"\n        _maxes = self._maxes\n\n        if not _maxes:\n            return iter(())\n\n        _lists = self._lists\n\n        # Calculate the minimum (pos, idx) pair. By default this location\n        # will be inclusive in our calculation.\n\n        if minimum is None:\n            min_pos = 0\n            min_idx = 0\n        else:\n            if inclusive[0]:\n                min_pos = bisect_left(_maxes, minimum)\n\n                if min_pos == len(_maxes):\n                    return iter(())\n\n                min_idx = bisect_left(_lists[min_pos], minimum)\n            else:\n                min_pos = bisect_right(_maxes, minimum)\n\n                if min_pos == len(_maxes):\n                    return iter(())\n\n                min_idx = bisect_right(_lists[min_pos], minimum)\n\n        # Calculate the maximum (pos, idx) pair. By default this location\n        # will be exclusive in our calculation.\n\n        if maximum is None:\n            max_pos = len(_maxes) - 1\n            max_idx = len(_lists[max_pos])\n        else:\n            if inclusive[1]:\n                max_pos = bisect_right(_maxes, maximum)\n\n                if max_pos == len(_maxes):\n                    max_pos -= 1\n                    max_idx = len(_lists[max_pos])\n                else:\n                    max_idx = bisect_right(_lists[max_pos], maximum)\n            else:\n                max_pos = bisect_left(_maxes, maximum)\n\n                if max_pos == len(_maxes):\n                    max_pos -= 1\n                    max_idx = len(_lists[max_pos])\n                else:\n                    max_idx = bisect_left(_lists[max_pos], maximum)\n\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\n\n    def __len__(self):\n        \"\"\"Return the size of the sorted list.\n        ``sl.__len__()`` <==> ``len(sl)``\n        :return: size of sorted list\n        \"\"\"\n        return self._len\n\n    def bisect_left(self, value):\n        \"\"\"Return an index to insert `value` in the sorted list.\n        If the `value` is already present, the insertion point will be before\n        (to the left of) any existing values.\n        Similar to the `bisect` module in the standard library.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList([10, 11, 12, 13, 14])\n        # >>> sl.bisect_left(12)\n        2\n        :param value: insertion index of value in sorted list\n        :return: index\n        \"\"\"\n        _maxes = self._maxes\n\n        if not _maxes:\n            return 0\n\n        pos = bisect_left(_maxes, value)\n\n        if pos == len(_maxes):\n            return self._len\n\n        idx = bisect_left(self._lists[pos], value)\n        return self._loc(pos, idx)\n\n    def bisect_right(self, value):\n        \"\"\"Return an index to insert `value` in the sorted list.\n        Similar to `bisect_left`, but if `value` is already present, the\n        insertion point will be after (to the right of) any existing values.\n        Similar to the `bisect` module in the standard library.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList([10, 11, 12, 13, 14])\n        # >>> sl.bisect_right(12)\n        3\n        :param value: insertion index of value in sorted list\n        :return: index\n        \"\"\"\n        _maxes = self._maxes\n\n        if not _maxes:\n            return 0\n\n        pos = bisect_right(_maxes, value)\n\n        if pos == len(_maxes):\n            return self._len\n\n        idx = bisect_right(self._lists[pos], value)\n        return self._loc(pos, idx)\n\n    bisect = bisect_right\n    _bisect_right = bisect_right\n\n    def count(self, value):\n        \"\"\"Return number of occurrences of `value` in the sorted list.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\n        # >>> sl.count(3)\n        3\n        :param value: value to count in sorted list\n        :return: count\n        \"\"\"\n        _maxes = self._maxes\n\n        if not _maxes:\n            return 0\n\n        pos_left = bisect_left(_maxes, value)\n\n        if pos_left == len(_maxes):\n            return 0\n\n        _lists = self._lists\n        idx_left = bisect_left(_lists[pos_left], value)\n        pos_right = bisect_right(_maxes, value)\n\n        if pos_right == len(_maxes):\n            return self._len - self._loc(pos_left, idx_left)\n\n        idx_right = bisect_right(_lists[pos_right], value)\n\n        if pos_left == pos_right:\n            return idx_right - idx_left\n\n        right = self._loc(pos_right, idx_right)\n        left = self._loc(pos_left, idx_left)\n        return right - left\n\n    def copy(self):\n        \"\"\"Return a shallow copy of the sorted list.\n        Runtime complexity: `O(n)`\n        :return: new sorted list\n        \"\"\"\n        return self.__class__(self)\n\n    __copy__ = copy\n\n    def append(self, value):\n        \"\"\"Raise not-implemented error.\n        Implemented to override `MutableSequence.append` which provides an\n        erroneous default implementation.\n        :raises NotImplementedError: use ``sl.add(value)`` instead\n        \"\"\"\n        raise NotImplementedError('use ``sl.add(value)`` instead')\n\n    def extend(self, values):\n        \"\"\"Raise not-implemented error.\n        Implemented to override `MutableSequence.extend` which provides an\n        erroneous default implementation.\n        :raises NotImplementedError: use ``sl.update(values)`` instead\n        \"\"\"\n        raise NotImplementedError('use ``sl.update(values)`` instead')\n\n    def insert(self, index, value):\n        \"\"\"Raise not-implemented error.\n        :raises NotImplementedError: use ``sl.add(value)`` instead\n        \"\"\"\n        raise NotImplementedError('use ``sl.add(value)`` instead')\n\n    def pop(self, index=-1):\n        \"\"\"Remove and return value at `index` in sorted list.\n        Raise :exc:`IndexError` if the sorted list is empty or index is out of\n        range.\n        Negative indices are supported.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList('abcde')\n        # >>> sl.pop()\n        'e'\n        # >>> sl.pop(2)\n        'c'\n        # >>> sl\n        SortedList(['a', 'b', 'd'])\n        :param int index: index of value (default -1)\n        :return: value\n        :raises IndexError: if index is out of range\n        \"\"\"\n        if not self._len:\n            raise IndexError('pop index out of range')\n\n        _lists = self._lists\n\n        if index == 0:\n            val = _lists[0][0]\n            self._delete(0, 0)\n            return val\n\n        if index == -1:\n            pos = len(_lists) - 1\n            loc = len(_lists[pos]) - 1\n            val = _lists[pos][loc]\n            self._delete(pos, loc)\n            return val\n\n        if 0 <= index < len(_lists[0]):\n            val = _lists[0][index]\n            self._delete(0, index)\n            return val\n\n        len_last = len(_lists[-1])\n\n        if -len_last < index < 0:\n            pos = len(_lists) - 1\n            loc = len_last + index\n            val = _lists[pos][loc]\n            self._delete(pos, loc)\n            return val\n\n        pos, idx = self._pos(index)\n        val = _lists[pos][idx]\n        self._delete(pos, idx)\n        return val\n\n    def index(self, value, start=None, stop=None):\n        \"\"\"Return first index of value in sorted list.\n        Raise ValueError if `value` is not present.\n        Index must be between `start` and `stop` for the `value` to be\n        considered present. The default value, None, for `start` and `stop`\n        indicate the beginning and end of the sorted list.\n        Negative indices are supported.\n        Runtime complexity: `O(log(n))` -- approximate.\n        # >>> sl = SortedList('abcde')\n        # >>> sl.index('d')\n        3\n        # >>> sl.index('z')\n        Traceback (most recent call last):\n          ...\n        ValueError: 'z' is not in list\n        :param value: value in sorted list\n        :param int start: start index (default None, start of sorted list)\n        :param int stop: stop index (default None, end of sorted list)\n        :return: index of value\n        :raises ValueError: if value is not present\n        \"\"\"\n        _len = self._len\n\n        if not _len:\n            raise ValueError('{0!r} is not in list'.format(value))\n\n        if start is None:\n            start = 0\n        if start < 0:\n            start += _len\n        if start < 0:\n            start = 0\n\n        if stop is None:\n            stop = _len\n        if stop < 0:\n            stop += _len\n        if stop > _len:\n            stop = _len\n\n        if stop <= start:\n            raise ValueError('{0!r} is not in list'.format(value))\n\n        _maxes = self._maxes\n        pos_left = bisect_left(_maxes, value)\n\n        if pos_left == len(_maxes):\n            raise ValueError('{0!r} is not in list'.format(value))\n\n        _lists = self._lists\n        idx_left = bisect_left(_lists[pos_left], value)\n\n        if _lists[pos_left][idx_left] != value:\n            raise ValueError('{0!r} is not in list'.format(value))\n\n        stop -= 1\n        left = self._loc(pos_left, idx_left)\n\n        if start <= left:\n            if left <= stop:\n                return left\n        else:\n            right = self._bisect_right(value) - 1\n\n            if start <= right:\n                return start\n\n        raise ValueError('{0!r} is not in list'.format(value))\n\n    def __add__(self, other):\n        \"\"\"Return new sorted list containing all values in both sequences.\n        ``sl.__add__(other)`` <==> ``sl + other``\n        Values in `other` do not need to be in sorted order.\n        Runtime complexity: `O(n*log(n))`\n        # >>> sl1 = SortedList('bat')\n        # >>> sl2 = SortedList('cat')\n        # >>> sl1 + sl2\n        SortedList(['a', 'a', 'b', 'c', 't', 't'])\n        :param other: other iterable\n        :return: new sorted list\n        \"\"\"\n        values = reduce(iadd, self._lists, [])\n        values.extend(other)\n        return self.__class__(values)\n\n    __radd__ = __add__\n\n    def __iadd__(self, other):\n        \"\"\"Update sorted list with values from `other`.\n        ``sl.__iadd__(other)`` <==> ``sl += other``\n        Values in `other` do not need to be in sorted order.\n        Runtime complexity: `O(k*log(n))` -- approximate.\n        # >>> sl = SortedList('bat')\n        # >>> sl += 'cat'\n        # >>> sl\n        SortedList(['a', 'a', 'b', 'c', 't', 't'])\n        :param other: other iterable\n        :return: existing sorted list\n        \"\"\"\n        self._update(other)\n        return self\n\n    def __mul__(self, num):\n        \"\"\"Return new sorted list with `num` shallow copies of values.\n        ``sl.__mul__(num)`` <==> ``sl * num``\n        Runtime complexity: `O(n*log(n))`\n        # >>> sl = SortedList('abc')\n        # >>> sl * 3\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\n        :param int num: count of shallow copies\n        :return: new sorted list\n        \"\"\"\n        values = reduce(iadd, self._lists, []) * num\n        return self.__class__(values)\n\n    __rmul__ = __mul__\n\n    def __imul__(self, num):\n        \"\"\"Update the sorted list with `num` shallow copies of values.\n        ``sl.__imul__(num)`` <==> ``sl *= num``\n        Runtime complexity: `O(n*log(n))`\n        # >>> sl = SortedList('abc')\n        # >>> sl *= 3\n        # >>> sl\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\n        :param int num: count of shallow copies\n        :return: existing sorted list\n        \"\"\"\n        values = reduce(iadd, self._lists, []) * num\n        self._clear()\n        self._update(values)\n        return self\n\n    def __make_cmp(seq_op, symbol, doc):\n        \"Make comparator method.\"\n\n        def comparer(self, other):\n            \"Compare method for sorted list and sequence.\"\n            if not isinstance(other, Sequence):\n                return NotImplemented\n\n            self_len = self._len\n            len_other = len(other)\n\n            if self_len != len_other:\n                if seq_op is eq:\n                    return False\n                if seq_op is ne:\n                    return True\n\n            for alpha, beta in zip(self, other):\n                if alpha != beta:\n                    return seq_op(alpha, beta)\n\n            return seq_op(self_len, len_other)\n\n        seq_op_name = seq_op.__name__\n        comparer.__name__ = '__{0}__'.format(seq_op_name)\n        doc_str = \"\"\"Return true if and only if sorted list is {0} `other`.\n        ``sl.__{1}__(other)`` <==> ``sl {2} other``\n        Comparisons use lexicographical order as with sequences.\n        Runtime complexity: `O(n)`\n        :param other: `other` sequence\n        :return: true if sorted list is {0} `other`\n        \"\"\"\n        comparer.__doc__ = dedent(doc_str.format(doc, seq_op_name, symbol))\n        return comparer\n\n    __eq__ = __make_cmp(eq, '==', 'equal to')\n    __ne__ = __make_cmp(ne, '!=', 'not equal to')\n    __lt__ = __make_cmp(lt, '<', 'less than')\n    __gt__ = __make_cmp(gt, '>', 'greater than')\n    __le__ = __make_cmp(le, '<=', 'less than or equal to')\n    __ge__ = __make_cmp(ge, '>=', 'greater than or equal to')\n    __make_cmp = staticmethod(__make_cmp)\n\n    def __reduce__(self):\n        values = reduce(iadd, self._lists, [])\n        return (type(self), (values,))\n\n    @recursive_repr()\n    def __repr__(self):\n        \"\"\"Return string representation of sorted list.\n        ``sl.__repr__()`` <==> ``repr(sl)``\n        :return: string representation\n        \"\"\"\n        return '{0}({1!r})'.format(type(self).__name__, list(self))\n\n    def _check(self):\n        \"\"\"Check invariants of sorted list.\n        Runtime complexity: `O(n)`\n        \"\"\"\n        try:\n            assert self._load >= 4\n            assert len(self._maxes) == len(self._lists)\n            assert self._len == sum(len(sublist) for sublist in self._lists)\n\n            # Check all sublists are sorted.\n\n            for sublist in self._lists:\n                for pos in range(1, len(sublist)):\n                    assert sublist[pos - 1] <= sublist[pos]\n\n            # Check beginning/end of sublists are sorted.\n\n            for pos in range(1, len(self._lists)):\n                assert self._lists[pos - 1][-1] <= self._lists[pos][0]\n\n            # Check _maxes index is the last value of each sublist.\n\n            for pos in range(len(self._maxes)):\n                assert self._maxes[pos] == self._lists[pos][-1]\n\n            # Check sublist lengths are less than double load-factor.\n\n            double = self._load << 1\n            assert all(len(sublist) <= double for sublist in self._lists)\n\n            # Check sublist lengths are greater than half load-factor for all\n            # but the last sublist.\n\n            half = self._load >> 1\n            for pos in range(0, len(self._lists) - 1):\n                assert len(self._lists[pos]) >= half\n\n            if self._index:\n                assert self._len == self._index[0]\n                assert len(self._index) == self._offset + len(self._lists)\n\n                # Check index leaf nodes equal length of sublists.\n\n                for pos in range(len(self._lists)):\n                    leaf = self._index[self._offset + pos]\n                    assert leaf == len(self._lists[pos])\n\n                # Check index branch nodes are the sum of their children.\n\n                for pos in range(self._offset):\n                    child = (pos << 1) + 1\n                    if child >= len(self._index):\n                        assert self._index[pos] == 0\n                    elif child + 1 == len(self._index):\n                        assert self._index[pos] == self._index[child]\n                    else:\n                        child_sum = self._index[child] + self._index[child + 1]\n                        assert child_sum == self._index[pos]\n        except:\n            traceback.print_exc(file=sys.stdout)\n            print('len', self._len)\n            print('load', self._load)\n            print('offset', self._offset)\n            print('len_index', len(self._index))\n            print('index', self._index)\n            print('len_maxes', len(self._maxes))\n            print('maxes', self._maxes)\n            print('len_lists', len(self._lists))\n            print('lists', self._lists)\n            raise\n\n\ndef identity(value):\n    \"Identity function.\"\n    return value\n\n\n\"\"\"\n\" ------ end of sortedcontainers.SortedList\n\" from: https://github.com/grantjenks/python-sortedcontainers/blob/master/sortedcontainers/sortedlist.py\n\"\"\"\n# import sortedcontainers  # manually copied above\n\n# import bisect\nfrom typing import List\n\nt = int(input())\n\n\ndef solve(n: int, people: List[List[int]]) -> int:\n    people = sorted(people, key=lambda person: person[1])\n\n    answer = 0\n    bst = SortedList()\n    for a, b in people:\n        answer += len(bst) - bst.bisect_left(a)\n        bst.add(a)\n\n    return answer\n\n\nfor _ in range(t):\n    n = int(input())\n\n    people = [[int(x) for x in input().split(\" \")] for _ in range(n)]\n\n    print(solve(n, people))\n",
        "rejectedCode": "# Codeforces Round 918 (Div. 4) - E. Romantic Glasses\r\n# https://codeforces.com/contest/1915/problem/E\r\nfrom typing import List\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = [int(x) for x in input().split(\" \")]\r\n\r\n    # TODO: Assumption: only if a[0] != 0\r\n    appeared = {0}\r\n\r\n    can = False\r\n    curr = 0\r\n    for i, num in enumerate(a):\r\n        if i % 2 == 0:\r\n            curr += num\r\n        else:\r\n            curr -= num\r\n\r\n        if curr in appeared:\r\n            can = True\r\n            break\r\n        appeared.add(curr)\r\n\r\n    if can:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245900763",
            "author": "ayyushh",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707656160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245900243",
            "author": "ayyushh",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707655920
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a,b,c = map(int,input().split())\r\n    print(a^b^c)",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    a = int(input())\r\n    b = int(input())\r\n    c = int(input())\r\n    print(a^b^c, end=\" \")\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245850372",
            "author": "Danatsko",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 20300,
            "submissionTime": 1707633960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245704010",
            "author": "Danatsko",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707544440
        },
        "acceptedCode": "def solve():\r\n    n = int(input())\r\n    total = sum(map(int, input().split())) ** 0.5\r\n    \r\n    print((\"NO\", \"YES\")[total == int(total)])\r\n    \r\n    \r\nif __name__ == \"__main__\":\r\n    for test in range(int(input())):\r\n        solve()\r\n        ",
        "rejectedCode": "def solve():\r\n    l1 = input()\r\n    l2 = input()\r\n    l3 = input()\r\n    \r\n    if '?' in l1:\r\n        print(*({'A', 'B', 'C'} - set(l1.replace('?', ''))))\r\n    elif '?' in l2:\r\n        print(*({'A', 'B', 'C'} - set(l2.replace('?', ''))))\r\n    elif '?' in l3:\r\n        print(*({'A', 'B', 'C'} - set(l3.replace('?', ''))))\r\n    \r\n    \r\nif __name__ == \"__main__\":\r\n    for test in range(int(input())):\r\n        solve()\r\n        ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245833129",
            "author": "Hozayfa",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 30600,
            "submissionTime": 1707630300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245825939",
            "author": "Hozayfa",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1707629160
        },
        "acceptedCode": "a=int(input())\r\nfor x in range(a):\r\n   l=int(input())\r\n   m=input()\r\n   k=list(map(int,m.split()))\r\n   s=0\r\n   p=set()\r\n   p.add(s)\r\n   for i in range (l):\r\n       if i%2!=0:\r\n           s-=k[i]\r\n       else:\r\n           s+=k[i]\r\n\r\n       p.add(s)\r\n   if len(p)-1< len(k):\r\n       print(\"YES\")\r\n   else:\r\n       print(\"NO\")\r\n",
        "rejectedCode": "#include<stdio.h>\r\n \r\nint hasDuplicates(long long int arr[], long long int index, long long int size) {\r\n    if (index == size - 1) {\r\n \r\n        return 0;\r\n    }\r\n \r\n    for (int i = index + 1; i < size; ++i) {\r\n        if (arr[index] == arr[i]) {\r\n \r\n            return 1;\r\n        }\r\n    }\r\n \r\n \r\n    return hasDuplicates(arr, index + 1, size);\r\n}\r\nint main()\r\n{ long long int t,i,j;\r\nscanf(\"%lld\",&t);\r\nwhile(t--)\r\n{int m=0;\r\n    long long int k,c=0;\r\nscanf(\"%lld\",&k);\r\nlong long int a[k],b[k];\r\nb[0]=c;\r\nfor(i=0;i<k;i++)\r\n{scanf(\"%lld\",&a[i]);\r\n \r\n \r\n}\r\nfor(i=0;i<k;i++)\r\n{if((i%2)!=0)\r\n{\r\n    a[i]=a[i]*(-1);\r\n}\r\nc=c+a[i];\r\nb[i+1]=c;\r\n    \r\n}\r\n \r\nif (hasDuplicates(b, 0,(k+1))) {\r\n        printf(\"YES\\n\");\r\n    } else {\r\n        printf(\"NO\\n\");\r\n    }\r\n \r\n}\r\n    return 0;\r\n}",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245823345",
            "author": "yuvan_surya",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 295,
            "memory": 26200,
            "submissionTime": 1707628800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245820963",
            "author": "yuvan_surya",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 109,
            "memory": 100,
            "submissionTime": 1707628500
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    square = sum(list(map(int,input().split())))\r\n \r\n    low = 0\r\n    high = square\r\n \r\n    i = False\r\n \r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if mid*mid == square:\r\n            i = True\r\n            break\r\n        elif mid*mid > square:\r\n            high = mid -1\r\n        else:\r\n            low = mid + 1\r\n   \r\n    print(\"YES\" if i else \"NO\")\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    _=int(input())\r\n    s=sum(list(map(int,input().split())))\r\n    n=s**(0.5)\r\n    print('YES' if n*n==s else 'NO')\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245791327",
            "author": "2110030313",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707624060
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242582942",
            "author": "2110030313",
            "lang": "Python 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705732140
        },
        "acceptedCode": "for i in range(int(input())):\r\n    s1 = set(input())\r\n    s2 = set(input())\r\n    s3 = set(input())\r\n    ori = set(['A', 'B', 'C'])\r\n    print(list(ori.difference(s1).union(ori.difference(s2)).union(ori.difference(s3)))[0])",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    total_squares = sum(a)\r\n    side_length = total_squares ** 0.5\r\n    if side_length == int(side_length):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245742633",
            "author": "tarjen",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 170,
            "memory": 33900,
            "submissionTime": 1707564600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245742144",
            "author": "tarjen",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 30800,
            "submissionTime": 1707564420
        },
        "acceptedCode": "from sys import stdin\r\nT = int(input())\r\nfor testcase in range(T):\r\n    n = int(stdin.readline())\r\n    a = list(map(int,stdin.readline().split()))\r\n    ma = {0:0}\r\n    sum = 0\r\n    flag = False\r\n    Sum = [0]\r\n    for i in range(n):\r\n        if i%2 == 0 :\r\n            sum += a[i]\r\n        else :\r\n            sum -= a[i]\r\n        Sum.append(sum)\r\n    Sum.sort()\r\n    for i in range(len(Sum)-1):\r\n        if Sum[i] == Sum[i+1]: \r\n            flag = True\r\n    if flag :\r\n        print(\"YES\")\r\n    else :\r\n        print(\"NO\")\r\n    ",
        "rejectedCode": "from sys import stdin\r\nT = int(input())\r\nfor testcase in range(T):\r\n    n = int(stdin.readline())\r\n    a = list(map(int,stdin.readline().split()))\r\n    ma = {0:0}\r\n    sum = 0\r\n    flag = False\r\n    for i in range(n):\r\n        if i%2 == 0 :\r\n            sum += a[i]\r\n        else :\r\n            sum -= a[i]\r\n        if sum in ma :\r\n            flag = True\r\n        ma[sum] = 0\r\n    if flag :\r\n        print(\"YES\")\r\n    else :\r\n        print(\"NO\")\r\n    ",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245728542",
            "author": "smugi",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707557940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245598953",
            "author": "smugi",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 108,
            "memory": 100,
            "submissionTime": 1707472080
        },
        "acceptedCode": "t = int(input())\r\n\r\nwhile t > 0:\r\n    k = 0\r\n    s = []\r\n    for i in range(3):\r\n        l = input()\r\n        s.append(l)\r\n        for j in range(3):\r\n            if l[j] == '?':\r\n                k = i\r\n    if 'A' not in s[k]:\r\n        print('A')\r\n    if 'B' not in s[k]:\r\n        print('B')\r\n    if 'C' not in s[k]:\r\n        print('C')\r\n                \r\n    t -= 1",
        "rejectedCode": "t = int(input())\r\nimport math\r\nwhile t > 0:\r\n    n = int(input())\r\n    a = input().split()\r\n    a = [int(x) for x in a]\r\n    s = sum(a)\r\n    x = math.sqrt(s) \r\n    if x * x == float(s):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    t -= 1",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245720235",
            "author": "Atpack",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 18700,
            "submissionTime": 1707553620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245719069",
            "author": "Atpack",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707552960
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s1 = input()\r\n    i = 0\r\n    v = [\"a\",\"e\"]\r\n    s2 = []  \r\n    while i<(n-2):\r\n        if(s1[i] in v and s1[i+2] not in v):\r\n            s2.append(s1[i])\r\n            s2.append(s1[i+1])\r\n            s2.append(\".\")\r\n            i += 2\r\n        elif(s1[i] in v and s1[i+2] in v):\r\n            s2.append(s1[i])\r\n            s2.append(\".\")\r\n            i += 1\r\n        else:\r\n            s2.append(s1[i])\r\n            i+=1\r\n    s2.append(s1[n-2])\r\n    s2.append(s1[n-1])\r\n    print(\"\".join(x for x in s2))",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s1 = input()\r\n    i = 0\r\n    v = [\"a\",\"e\"]\r\n    s2 = []  \r\n    while i<(n-2):\r\n        if(s1[i] in v and s1[i+2] not in v):\r\n            s2.append(s1[i])\r\n            s2.append(s1[i+1])\r\n            s2.append(\".\")\r\n            i += 2\r\n        elif(s1[i] in v and s1[i+2] in v):\r\n            s2.append(s1[i])\r\n            s2.append(\".\")\r\n            s2.append(s1[i+1])\r\n            i += 2\r\n        else:\r\n            s2.append(s1[i])\r\n            i+=1\r\n    s2.append(s1[n-2])\r\n    s2.append(s1[n-1])\r\n    print(\"\".join(x for x in s2))\r\n            \r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.bab\r\nba.bba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'ba.ba', found: 'ba.bba'\r\n"
        },
        "errorLine": 16,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245686302",
            "author": "shaunakdas88",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 561,
            "memory": 18100,
            "submissionTime": 1707534660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245254053",
            "author": "shaunakdas88",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1707229620
        },
        "acceptedCode": "T = int(input())\r\nM = float(\"-inf\")\r\nvals = []\r\n\r\nfor t in range(T):\r\n    input()\r\n    s = sum([int(x) for x in input().strip().split()])\r\n    l = 0\r\n    r = s + 1\r\n    res = \"NO\"\r\n    while l < r:\r\n        mid = (l + r) // 2\r\n        sq = mid * mid\r\n        if sq == s:\r\n            res = \"YES\"\r\n            break\r\n        elif sq < s:\r\n            l = mid + 1\r\n        else:\r\n            r = mid\r\n    print(res)\r\n    ",
        "rejectedCode": "T = int(input())\r\nfor t in range(T):\r\n    for i in range(3):\r\n        row = input()\r\n        if \"?\" not in row:\r\n            continue\r\n        possible = {\"A\", \"B\", \"C\", \"?\"}\r\n        for j in range(3):\r\n            possible.remove(row[j])\r\n        print(list(possible)[0])\r\n        break",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245657393",
            "author": "natinael.96",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707511740
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245657342",
            "author": "natinael.96",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707511620
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a,b,c = map(int, input().split())\r\n    \r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "rejectedCode": "for _ in range(int(input())):\r\n    a,b,c = map(int, input().split())\r\n    \r\n    if a == b:\r\n        print(c)\r\n    if b == c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n5\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 4th numbers differ - expected: '7', found: '5'\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245653351",
            "author": "YahyaErrame",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707504960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245653300",
            "author": "YahyaErrame",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707504840
        },
        "acceptedCode": "t = int(input())\r\n\r\ntests = list()\r\nfor i in range(t):\r\n    for j in range(3):\r\n        s = input()\r\n        tests.append(s)\r\n\r\nfor word in tests:\r\n    if ('?' in word) and ('A' in word) and ('B' in word): \r\n        print('C')\r\n    elif ('?' in word) and ('B' in word) and ('C' in word): \r\n        print('A')\r\n    elif ('?' in word) and ('A' in word) and ('C' in word): \r\n        print('B')",
        "rejectedCode": "t = int(input())\r\n\r\ntests = list()\r\nfor i in range(t):\r\n    s = input()\r\n    tests.append(s)\r\n\r\nfor word in tests:\r\n    if '?' in word:\r\n        if ('?' in word) and ('A' in word) and ('B' in word): \r\n            print('C')\r\n        elif ('?' in word) and ('B' in word) and ('C' in word): \r\n            print('A')\r\n        elif ('?' in word) and ('A' in word) and ('C' in word): \r\n            print('B')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245615900",
            "author": "Flexik",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 873,
            "memory": 9400,
            "submissionTime": 1707480180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245615495",
            "author": "Flexik",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12400,
            "submissionTime": 1707480000
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    V = 'ae'\r\n    C = 'bcd'\r\n    if n == 1:\r\n        print(0)\r\n    slog = s[:1]\r\n    word = ''\r\n    for j in range(1, n-1):\r\n        if len(slog) <= 1:\r\n            slog = slog + s[j]\r\n        elif len(slog) == 2:\r\n            if s[j + 1] in C:\r\n                slog = slog + s[j]\r\n            else:\r\n                word = word + slog + '.'\r\n                slog = s[j]\r\n        else:\r\n            word = word + slog + '.'\r\n            slog = s[j]\r\n    print(word + slog + s[-1])\r\n\r\n\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    V = 'ae'\r\n    C = 'bcd'\r\n    if n == 1:\r\n        print(0)\r\n    slog = s[:1]\r\n    word = ''\r\n    for j in range(1, n-1):\r\n        if len(slog) <= 1:\r\n            slog = slog + s[j]\r\n        elif len(slog) == 2:\r\n            if s[j + 1] in C:\r\n                slog = slog + s[j]\r\n            else:\r\n                word = word + slog + '.'\r\n                slog = s[j]\r\n        else:\r\n            word = word + slog + '.'\r\n            slog = s[j]\r\n    print(word + slog + s[-1])\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245614617",
            "author": "htiwari007",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707479580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245614532",
            "author": "htiwari007",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1707479520
        },
        "acceptedCode": "t = int(input())\r\n\r\nwhile t>0:\r\n    lst = [int(x) for x in input().split()]\r\n    cnt=0\r\n    x = lst[0]\r\n    if x == lst[1]:\r\n        print(lst[2])\r\n    elif x == lst[2]:\r\n        print(lst[1])\r\n    else:\r\n        print(x)\r\n    t=t-1",
        "rejectedCode": "t = int(input())\r\n\r\nwhile t>0:\r\n    lst = [int(x) for x in input().split()]\r\n    cnt=0\r\n    x = lst[0]\r\n    if x == lst[1]:\r\n        print(lst[2])\r\n    else if x == lst[2]:\r\n        print(lst[1])\r\n    else:\r\n        print(x)\r\n    t=t-1",
        "failedTestCase": null,
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245606328",
            "author": "Ilyasdev",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1707475560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245605656",
            "author": "Ilyasdev",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707475260
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    *a, = map(int,input().split())\r\n    if sum(a) ** 0.5 == int(sum(a) ** 0.5) * 1.0:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "for _ in range(int(input())):\r\n    s1 = input()\r\n    s2 = input()\r\n    s3 = input()\r\n    a = 0\r\n    b = 0\r\n    c = 0\r\n    for i in range(3):\r\n        if s1[i] == 'A' or s2[i] == 'A' or s3[i] == 'A':\r\n            a += 1\r\n        if s1[i] == 'B' or s2[i] == 'B' or s3[i] == 'B':\r\n            a += 1\r\n        if s1[i] == 'C' or s2[i] == 'C' or s3[i] == 'C':\r\n            a += 1\r\n    if a < 3:\r\n        print('A')\r\n    elif b < 3:\r\n        print('B')\r\n    else:\r\n        print('C')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "B\r\nB\r\nB\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'B'\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245595533",
            "author": "Makssimka",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 234,
            "memory": 28800,
            "submissionTime": 1707470460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245595293",
            "author": "Makssimka",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 15800,
            "submissionTime": 1707470340
        },
        "acceptedCode": "k = int(input())\r\nres = []\r\nfor j in range(k):\r\n    n = int(input())\r\n    mas = [int(i) for i in input().split()]\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            mas[i] *= -1\r\n    d = set()\r\n    d.add(0)\r\n    suma = 0\r\n    f = True\r\n    for i in range(n):\r\n        suma += mas[i]\r\n        if suma in d:\r\n            res.append(\"YES\")\r\n            #print(suma,i)\r\n            #print(d)\r\n            f = False\r\n            break\r\n        else:\r\n            d.add(suma)\r\n    if f:\r\n        res.append(\"NO\")\r\n    #print(mas)\r\nfor i in res:\r\n    print(i)\r\n#print(res)",
        "rejectedCode": "k = int(input())\r\nres = []\r\nfor j in range(k):\r\n    n = int(input())\r\n    mas = [int(i) for i in input().split()]\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            mas[i] *= -1\r\n    d = [0]\r\n    suma = 0\r\n    f = True\r\n    for i in range(n):\r\n        suma += mas[i]\r\n        if suma in d:\r\n            res.append(\"YES\")\r\n            #print(suma,i)\r\n            #print(d)\r\n            f = False\r\n            break\r\n        else:\r\n            d.append(suma)\r\n    if f:\r\n        res.append(\"NO\")\r\n    #print(mas)\r\nfor i in res:\r\n    print(i)\r\n#print(res)",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245586237",
            "author": "russanghosh",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1707465240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245586039",
            "author": "russanghosh",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 2700,
            "submissionTime": 1707465120
        },
        "acceptedCode": "def find_replaced_letter(square):\r\n    # Check rows\r\n    for row in square:\r\n        if row.count('?') == 1:\r\n            return list(set('ABC') - set(row))[0]\r\n\r\n    # Check columns\r\n    for col in range(3):\r\n        column = [square[row][col] for row in range(3)]\r\n        if column.count('?') == 1:\r\n            return list(set('ABC') - set(column))[0]\r\n\r\n    # Check diagonals\r\n    diagonal1 = [square[i][i] for i in range(3)]\r\n    diagonal2 = [square[i][2 - i] for i in range(3)]\r\n\r\n    if diagonal1.count('?') == 1:\r\n        return list(set('ABC') - set(diagonal1))[0]\r\n    elif diagonal2.count('?') == 1:\r\n        return list(set('ABC') - set(diagonal2))[0]\r\n\r\n# Input reading and processing\r\nt = int(input())\r\nfor _ in range(t):\r\n    latin_square = [input().strip() for _ in range(3)]\r\n    result = find_replaced_letter(latin_square)\r\n    print(result)\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    a, b, c = map(int, input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245582658",
            "author": "Teorom",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 30300,
            "submissionTime": 1707462720
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244936206",
            "author": "Teorom",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707117420
        },
        "acceptedCode": "from math import sqrt\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = sum(list(map(int, input().split())))\r\n    if sqrt(a) == int(sqrt(a)):\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    A = input()\r\n    B = input()\r\n    C = input()\r\n    if '?' in A:\r\n        if 'A' in A and 'B' in A:\r\n            print('C')\r\n        elif 'A' in A and 'C' in A:\r\n            print('B')\r\n        elif 'C' in A and 'b' in A:\r\n            print('A')\r\n    elif '?' in B:\r\n        if 'A' in B and 'B' in B:\r\n            print('C')\r\n        elif 'A' in B and 'C' in B:\r\n            print('B')\r\n        elif 'C' in B and 'B' in B:\r\n            print('A')\r\n    elif '?' in C:\r\n        if 'A' in C and 'B' in C:\r\n            print('C')\r\n        elif 'A' in C and 'C' in C:\r\n            print('B')\r\n        elif 'C' in C and 'B' in C:\r\n            print('A')",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "B\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'B'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245570804",
            "author": "Rachel_Gardner",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 3300,
            "submissionTime": 1707454260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240793342",
            "author": "Rachel_Gardner",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 264,
            "memory": 10400,
            "submissionTime": 1704692040
        },
        "acceptedCode": "# coding=utf-8\r\ndef solve():\r\n    a, b, c = reads()\r\n    dit = Counter([a, b, c])\r\n    for k, v in dit.items():\r\n        if v == 1:\r\n            write(k)\r\n            return\r\n\r\n\r\n\r\nimport sys, os, random\r\nfrom io import BytesIO, IOBase\r\nfrom types import GeneratorType\r\nfrom collections import defaultdict, deque, Counter\r\nfrom math import sqrt, ceil, log2, factorial, gcd, floor\r\nfrom itertools import combinations, permutations\r\nfrom functools import lru_cache, cmp_to_key\r\nfrom heapq import heappop, heappush\r\nfrom bisect import bisect_left, bisect_right\r\nmultiple_cases, Y, N, inf, buf_size, RANDOM = \\\r\n    True, 'YES', 'NO', float('inf'), 4086, random.randint(0, 10 ** 9)\r\n\r\n\r\nclass FastIO(IOBase):\r\n\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, buf_size))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self, __size=...):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, buf_size))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n\r\n    def __init__(self, file):\r\n\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nclass Recursion:\r\n\r\n    def bootstrap(f, stack=[]):\r\n\r\n        def wrappedfunc(*args, **kwargs):\r\n            if stack:\r\n                return f(*args, **kwargs)\r\n            else:\r\n                to = f(*args, **kwargs)\r\n                while True:\r\n                    if type(to) is GeneratorType:\r\n                        stack.append(to)\r\n                        to = next(to)\r\n                    else:\r\n                        stack.pop()\r\n                        if not stack:\r\n                            break\r\n                        to = stack[-1].send(to)\r\n                return to\r\n\r\n        return wrappedfunc\r\n\r\n\r\nclass SortedList:\r\n\r\n    def __init__(self, iterable=None, _load=200):\r\n        \"\"\"Initialize sorted list instance.\"\"\"\r\n        if iterable is None:\r\n            iterable = list()\r\n        values = sorted(iterable)\r\n        self._len = _len = len(values)\r\n        self._load = _load\r\n        self._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]\r\n        self._list_lens = [len(_list) for _list in _lists]\r\n        self._mins = [_list[0] for _list in _lists]\r\n        self._fen_tree = list()\r\n        self._rebuild = True\r\n\r\n    def _fen_build(self):\r\n        \"\"\"Build a fenwick tree instance.\"\"\"\r\n        self._fen_tree[:] = self._list_lens\r\n        _fen_tree = self._fen_tree\r\n        for i in range(len(_fen_tree)):\r\n            if i | i + 1 < len(_fen_tree):\r\n                _fen_tree[i | i + 1] += _fen_tree[i]\r\n        self._rebuild = False\r\n\r\n    def _fen_update(self, index, value):\r\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\r\n        if not self._rebuild:\r\n            _fen_tree = self._fen_tree\r\n            while index < len(_fen_tree):\r\n                _fen_tree[index] += value\r\n                index |= index + 1\r\n\r\n    def _fen_query(self, end):\r\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\r\n        if self._rebuild:\r\n            self._fen_build()\r\n\r\n        _fen_tree = self._fen_tree\r\n        x = 0\r\n        while end:\r\n            x += _fen_tree[end - 1]\r\n            end &= end - 1\r\n        return x\r\n\r\n    def _fen_findkth(self, k):\r\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\r\n        _list_lens = self._list_lens\r\n        if k < _list_lens[0]:\r\n            return 0, k\r\n        if k >= self._len - _list_lens[-1]:\r\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\r\n        if self._rebuild:\r\n            self._fen_build()\r\n\r\n        _fen_tree = self._fen_tree\r\n        idx = -1\r\n        for d in reversed(range(len(_fen_tree).bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\r\n                idx = right_idx\r\n                k -= _fen_tree[idx]\r\n        return idx + 1, k\r\n\r\n    def _delete(self, pos, idx):\r\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n\r\n        self._len -= 1\r\n        self._fen_update(pos, -1)\r\n        del _lists[pos][idx]\r\n        _list_lens[pos] -= 1\r\n\r\n        if _list_lens[pos]:\r\n            _mins[pos] = _lists[pos][0]\r\n        else:\r\n            del _lists[pos]\r\n            del _list_lens[pos]\r\n            del _mins[pos]\r\n            self._rebuild = True\r\n\r\n    def _loc_left(self, value):\r\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n\r\n        lo, pos = -1, len(_lists) - 1\r\n        while lo + 1 < pos:\r\n            mi = (lo + pos) >> 1\r\n            if value <= _mins[mi]:\r\n                pos = mi\r\n            else:\r\n                lo = mi\r\n\r\n        if pos and value <= _lists[pos - 1][-1]:\r\n            pos -= 1\r\n\r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value <= _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n\r\n        return pos, idx\r\n\r\n    def _loc_right(self, value):\r\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n\r\n        pos, hi = 0, len(_lists)\r\n        while pos + 1 < hi:\r\n            mi = (pos + hi) >> 1\r\n            if value < _mins[mi]:\r\n                hi = mi\r\n            else:\r\n                pos = mi\r\n\r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value < _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n\r\n        return pos, idx\r\n\r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted list.\"\"\"\r\n        _load = self._load\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n\r\n        self._len += 1\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            self._fen_update(pos, 1)\r\n            _list = _lists[pos]\r\n            _list.insert(idx, value)\r\n            _list_lens[pos] += 1\r\n            _mins[pos] = _list[0]\r\n            if _load + _load < len(_list):\r\n                _lists.insert(pos + 1, _list[_load:])\r\n                _list_lens.insert(pos + 1, len(_list) - _load)\r\n                _mins.insert(pos + 1, _list[_load])\r\n                _list_lens[pos] = _load\r\n                del _list[_load:]\r\n                self._rebuild = True\r\n        else:\r\n            _lists.append([value])\r\n            _mins.append(value)\r\n            _list_lens.append(1)\r\n            self._rebuild = True\r\n\r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            if idx and _lists[pos][idx - 1] == value:\r\n                self._delete(pos, idx - 1)\r\n\r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\r\n        _len = self._len\r\n        self.discard(value)\r\n        if _len == self._len:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n\r\n    def pop(self, index=-1):\r\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        value = self._lists[pos][idx]\r\n        self._delete(pos, idx)\r\n        return value\r\n\r\n    def bisect_left(self, value):\r\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_left(value)\r\n        return self._fen_query(pos) + idx\r\n\r\n    def bisect_right(self, value):\r\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_right(value)\r\n        return self._fen_query(pos) + idx\r\n\r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\r\n        return self.bisect_right(value) - self.bisect_left(value)\r\n\r\n    def __len__(self):\r\n        \"\"\"Return the size of the sorted list.\"\"\"\r\n        return self._len\r\n\r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        return self._lists[pos][idx]\r\n\r\n    def __delitem__(self, index):\r\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        self._delete(pos, idx)\r\n\r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_left(value)\r\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\r\n        return False\r\n\r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the sorted list.\"\"\"\r\n        return (value for _list in self._lists for value in _list)\r\n\r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\r\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\r\n\r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted list.\"\"\"\r\n        return 'SortedList({0})'.format(list(self))\r\n\r\n\r\nsys.stdin = IOWrapper(sys.stdin)\r\nsys.stdout = IOWrapper(sys.stdout)\r\nhx = lambda x: RANDOM ^ x\r\nread = lambda x=int: x(sys.stdin.readline().rstrip(\"\\r\\n\"))\r\nreads = lambda x=int: map(x, read(str).split())\r\nwrite = lambda *x, step=' ', end='\\n': sys.stdout.write(step.join(map(str, x)) + end)\r\n[solve() for _ in range(read())] if multiple_cases else solve()\r\n",
        "rejectedCode": "# coding=utf-8\r\nimport sys, os, random\r\nfrom io import BytesIO, IOBase\r\nfrom types import GeneratorType\r\nfrom collections import defaultdict, deque, Counter\r\nfrom copy import deepcopy\r\nfrom math import sqrt, ceil, log2, factorial, gcd, floor\r\nfrom itertools import combinations, permutations\r\nfrom functools import lru_cache, cmp_to_key\r\nfrom heapq import heappop, heappush, heapreplace, heapify\r\nfrom bisect import bisect_left, bisect_right\r\n# sys.setrecursionlimit(1 << 21)\r\nY, N, inf, buf_size, RANDOM = 'YES', 'NO', float('inf'), 4096, random.randint(0, 10 ** 9)\r\n\r\n\r\ndef solve():\r\n    n = read()\r\n    lis = list(reads())\r\n    for i in range(2, n):\r\n        lis[i] += lis[i - 2]\r\n    # write(lis)\r\n    s1 = {hx(0), hx(lis[0])}\r\n    s2 = {hx(0), hx(-lis[0])}\r\n    for i in range(1, n):\r\n        if i & 1 == 0:\r\n            if hx(lis[i] - lis[i - 1]) in s1:\r\n                write(Y)\r\n                return\r\n            s1.add(hx(lis[i] - lis[i - 1]))\r\n            s1.add(hx(-(lis[i] - lis[i - 1])))\r\n        else:\r\n            if hx(lis[i] - lis[i - 1]) in s2:\r\n                write(Y)\r\n                return\r\n            s2.add(hx(lis[i] - lis[i - 1]))\r\n            s2.add(hx(-(lis[i] - lis[i - 1])))\r\n    write(N)\r\n\r\n\r\n\r\nclass FastIO(IOBase):\r\n\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, buf_size))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self, __size=...):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, buf_size))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n\r\n    def __init__(self, file):\r\n\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nclass HashWrapper(int):\r\n    # \u7528\u6765\u89c4\u907f py \u54c8\u5e0c\u78b0\u649e\u7684\u95ee\u9898\u548c\u8fdb\u884c\u52a0\u901f\r\n    def __init__(self, x):\r\n        int.__init__(x)\r\n        # \u539f\u7406\u662f\u5f02\u6216\u4e00\u4e2a\u968f\u673a\u79cd\u5b50\r\n\r\n    def __hash__(self):\r\n        # \u4e5f\u53ef\u4ee5\u5c06\u6570\u7ec4\u6392\u5e8f\u540e\u8fdb\u884c\u54c8\u5e0c\u8ba1\u6570\r\n        return super(HashWrapper, self).__hash__() ^ RANDOM\r\n\r\n\r\ndef bootstrap(f, stack=None):\r\n\r\n    if stack is None:\r\n        stack = list()\r\n\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        else:\r\n            to = f(*args, **kwargs)\r\n            while True:\r\n                if type(to) is GeneratorType:\r\n                    stack.append(to)\r\n                    to = next(to)\r\n                else:\r\n                    stack.pop()\r\n                    if not stack:\r\n                        break\r\n                    to = stack[-1].send(to)\r\n            return to\r\n\r\n    return wrappedfunc\r\n\r\n\r\nclass SortedList:\r\n\r\n    def __init__(self, iterable=None, _load=200):\r\n        \"\"\"Initialize sorted list instance.\"\"\"\r\n        if iterable is None:\r\n            iterable = list()\r\n        values = sorted(iterable)\r\n        self._len = _len = len(values)\r\n        self._load = _load\r\n        self._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]\r\n        self._list_lens = [len(_list) for _list in _lists]\r\n        self._mins = [_list[0] for _list in _lists]\r\n        self._fen_tree = []\r\n        self._rebuild = True\r\n\r\n    def _fen_build(self):\r\n        \"\"\"Build a fenwick tree instance.\"\"\"\r\n        self._fen_tree[:] = self._list_lens\r\n        _fen_tree = self._fen_tree\r\n        for i in range(len(_fen_tree)):\r\n            if i | i + 1 < len(_fen_tree):\r\n                _fen_tree[i | i + 1] += _fen_tree[i]\r\n        self._rebuild = False\r\n\r\n    def _fen_update(self, index, value):\r\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\r\n        if not self._rebuild:\r\n            _fen_tree = self._fen_tree\r\n            while index < len(_fen_tree):\r\n                _fen_tree[index] += value\r\n                index |= index + 1\r\n\r\n    def _fen_query(self, end):\r\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\r\n        if self._rebuild:\r\n            self._fen_build()\r\n\r\n        _fen_tree = self._fen_tree\r\n        x = 0\r\n        while end:\r\n            x += _fen_tree[end - 1]\r\n            end &= end - 1\r\n        return x\r\n\r\n    def _fen_findkth(self, k):\r\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\r\n        _list_lens = self._list_lens\r\n        if k < _list_lens[0]:\r\n            return 0, k\r\n        if k >= self._len - _list_lens[-1]:\r\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\r\n        if self._rebuild:\r\n            self._fen_build()\r\n\r\n        _fen_tree = self._fen_tree\r\n        idx = -1\r\n        for d in reversed(range(len(_fen_tree).bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\r\n                idx = right_idx\r\n                k -= _fen_tree[idx]\r\n        return idx + 1, k\r\n\r\n    def _delete(self, pos, idx):\r\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n\r\n        self._len -= 1\r\n        self._fen_update(pos, -1)\r\n        del _lists[pos][idx]\r\n        _list_lens[pos] -= 1\r\n\r\n        if _list_lens[pos]:\r\n            _mins[pos] = _lists[pos][0]\r\n        else:\r\n            del _lists[pos]\r\n            del _list_lens[pos]\r\n            del _mins[pos]\r\n            self._rebuild = True\r\n\r\n    def _loc_left(self, value):\r\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n\r\n        lo, pos = -1, len(_lists) - 1\r\n        while lo + 1 < pos:\r\n            mi = (lo + pos) >> 1\r\n            if value <= _mins[mi]:\r\n                pos = mi\r\n            else:\r\n                lo = mi\r\n\r\n        if pos and value <= _lists[pos - 1][-1]:\r\n            pos -= 1\r\n\r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value <= _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n\r\n        return pos, idx\r\n\r\n    def _loc_right(self, value):\r\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n\r\n        pos, hi = 0, len(_lists)\r\n        while pos + 1 < hi:\r\n            mi = (pos + hi) >> 1\r\n            if value < _mins[mi]:\r\n                hi = mi\r\n            else:\r\n                pos = mi\r\n\r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value < _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n\r\n        return pos, idx\r\n\r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted list.\"\"\"\r\n        _load = self._load\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n\r\n        self._len += 1\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            self._fen_update(pos, 1)\r\n            _list = _lists[pos]\r\n            _list.insert(idx, value)\r\n            _list_lens[pos] += 1\r\n            _mins[pos] = _list[0]\r\n            if _load + _load < len(_list):\r\n                _lists.insert(pos + 1, _list[_load:])\r\n                _list_lens.insert(pos + 1, len(_list) - _load)\r\n                _mins.insert(pos + 1, _list[_load])\r\n                _list_lens[pos] = _load\r\n                del _list[_load:]\r\n                self._rebuild = True\r\n        else:\r\n            _lists.append([value])\r\n            _mins.append(value)\r\n            _list_lens.append(1)\r\n            self._rebuild = True\r\n\r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            if idx and _lists[pos][idx - 1] == value:\r\n                self._delete(pos, idx - 1)\r\n\r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\r\n        _len = self._len\r\n        self.discard(value)\r\n        if _len == self._len:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n\r\n    def pop(self, index=-1):\r\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        value = self._lists[pos][idx]\r\n        self._delete(pos, idx)\r\n        return value\r\n\r\n    def bisect_left(self, value):\r\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_left(value)\r\n        return self._fen_query(pos) + idx\r\n\r\n    def bisect_right(self, value):\r\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_right(value)\r\n        return self._fen_query(pos) + idx\r\n\r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\r\n        return self.bisect_right(value) - self.bisect_left(value)\r\n\r\n    def __len__(self):\r\n        \"\"\"Return the size of the sorted list.\"\"\"\r\n        return self._len\r\n\r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        return self._lists[pos][idx]\r\n\r\n    def __delitem__(self, index):\r\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        self._delete(pos, idx)\r\n\r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_left(value)\r\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\r\n        return False\r\n\r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the sorted list.\"\"\"\r\n        return (value for _list in self._lists for value in _list)\r\n\r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\r\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\r\n\r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted list.\"\"\"\r\n        return 'SortedList({0})'.format(list(self))\r\n\r\n\r\nsys.stdin = IOWrapper(sys.stdin)\r\nsys.stdout = IOWrapper(sys.stdout)\r\nhx = lambda x: HashWrapper(x)\r\nread = lambda x=int: x(sys.stdin.readline().rstrip(\"\\r\\n\"))\r\nreads = lambda x=int: map(x, read(str).split())\r\nwrite = lambda *x, step=' ', end='\\n': sys.stdout.write(step.join(map(str, x)) + end)\r\n\r\n\r\nif __name__ == '__main__':\r\n    for _ in range(read()):\r\n        solve()\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\nYES\nYES\nYES\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nNO\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nNO\nNO\nYES\nYES\nNO\nNO\nNO\nYES\nNO\nNO\nNO\nYES\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\nYES\nNO\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\nNO\nYES\nNO\nYES\nNO\nNO\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nNO\nNO\nNO\nYES\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nNO\nNO\nNO\nNO...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected NO, found YES [2nd token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245567042",
            "author": "bsr011",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 20700,
            "submissionTime": 1707451560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245566866",
            "author": "bsr011",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 1700,
            "submissionTime": 1707451440
        },
        "acceptedCode": "import math\r\nfor g in[*open(0)][2::2]:a=sum(map(int,g.split()));print(\"YNEOS\"[int(math.sqrt(a))**2!=a::2])",
        "rejectedCode": "import math\r\nfor g in[*open(0)][2::2]:a=sum(map(int,g.split()));print(\"YNEOS\"[math.sqrt(a)**2!=a::2])",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245563254",
            "author": "Rasulbekkopalov",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707448560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245563174",
            "author": "Rasulbekkopalov",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707448440
        },
        "acceptedCode": "t=int(input())\r\nfor _ in range(t):\r\n    s=[]\r\n    for i in range(3):\r\n        d=list(input())\r\n        s.append(d)\r\n    for i in range(3):\r\n        for j in range(3):\r\n            if s[i][j]=='?':\r\n                g=[]\r\n                g.append(s[(i+1)%3][j])\r\n                g.append(s[i-1][j])\r\n                g.append(s[i][(j+1)%3])\r\n                g.append(s[i][j-1])\r\n    g=set(g)\r\n    if 'A' not in g:\r\n        print('A')\r\n    elif 'B' not in g:\r\n        print('B')\r\n    else:\r\n        print('C')",
        "rejectedCode": "t=int(input())\r\nfor _ in range(t):\r\n    s=[]\r\n    for i in range(3):\r\n        d=list(input())\r\n        s.append(d)\r\n    for i in range(3):\r\n        for j in range(3):\r\n            if s[i][j]=='?':\r\n                g=[]\r\n                g.append(s[i+1][j])\r\n                g.append(s[i-1][j])\r\n                g.append(s[i][j+1])\r\n                g.append(s[i][j-1])\r\n    g=set(g)\r\n    if 'A' not in g:\r\n        print('A')\r\n    elif 'B' not in g:\r\n        print('B')\r\n    else:\r\n        print('C')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245558483",
            "author": "Coolcl",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 40900,
            "submissionTime": 1707444360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245556262",
            "author": "Coolcl",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12500,
            "submissionTime": 1707442680
        },
        "acceptedCode": "for t in range(int(input())):\r\n    b = []\r\n    n = int(input())\r\n    a = list(input())\r\n    i = n - 1\r\n    while i > -1:\r\n        j = i\r\n        if a[i]==\"a\" or a[i] == \"e\":\r\n            i = i - 1\r\n            x = 2\r\n        else:\r\n            i -= 2\r\n            x = 3\r\n        for j in range(x):\r\n            b+=[a[-1]]\r\n            a.pop(-1)\r\n        b+= \".\"\r\n        i -= 1\r\n    b.pop(-1)\r\n    b.reverse()\r\n    print(*b, sep = \"\")",
        "rejectedCode": "c = [\"b\", \"c\", \"d\"]\r\nfor t in range(int(input())):\r\n    n = int(input())\r\n    a = input()\r\n    i = n - 1\r\n    while i > 2:\r\n        if a[i] in c:\r\n            i = i - 2\r\n        else:\r\n            i -= 1\r\n        a = a[:i] + \".\" + a[i:]\r\n        i -= 1\r\n    print(a)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245546495",
            "author": "WilliamFEng00",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 9600,
            "submissionTime": 1707434640
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245543281",
            "author": "WilliamFEng00",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707431340
        },
        "acceptedCode": "def split_into_syllables(w):\r\n    v = {'a', 'e'}\r\n    s = []\r\n    i = len(w) - 1\r\n\r\n    while i >= 0:\r\n        if w[i] in v:\r\n            if i > 0 and w[i-1] not in v:\r\n                s.append(w[i-1:i+1])\r\n                i -= 2\r\n            else:\r\n                break\r\n        else:\r\n            if i > 1 and w[i-1] in v and w[i-2] not in v:\r\n                s.append(w[i-2:i+1])\r\n                i -= 3\r\n            elif i > 0 and w[i-1] in v:\r\n                s.append(w[i-1:i+1])\r\n                i -= 2\r\n            else:\r\n                s.append(w[i])\r\n                i -= 1\r\n\r\n    return '.'.join(reversed(s))\r\n\r\nt = int(input().strip())\r\n\r\nfor _ in range(t):\r\n    n = int(input().strip())\r\n    w = input().strip()\r\n    print(split_into_syllables(w))",
        "rejectedCode": "def v(c):\r\n    return c in 'ae'\r\n\r\ndef s(w):\r\n    i, r = 0, ''\r\n    while i < len(w):\r\n        sy = w[i]\r\n        i += 1\r\n        if i < len(w) and v(w[i]):\r\n            sy += w[i]\r\n            i += 1\r\n            if i < len(w) and not v(w[i]):\r\n                sy += w[i]\r\n                i += 1\r\n        if r:\r\n            r += '.' + sy\r\n        else:\r\n            r = sy\r\n    return r\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    w = input()\r\n    print(s(w))",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "bac.e.d.bab\r\nbab.a\r\ndad.dec.a.bed.dad\r\ndac\r\ndac.dac\r\ndab.a.b.bab.a.bab.bab.bab.a.b.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'bac.e.d.bab'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245531160",
            "author": "hossam.elsherbiny95",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 700,
            "submissionTime": 1707411360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245529148",
            "author": "hossam.elsherbiny95",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1400,
            "submissionTime": 1707409200
        },
        "acceptedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    \r\n    vowels = ['a', 'e']\r\n    consonants = ['b', 'c', 'd']\r\n    i = 3\r\n    st = 0\r\n    while i < n:\r\n        if s[i] in consonants:\r\n            print(s[st:i] + '.', end=\"\")\r\n            st = i\r\n            i += 3\r\n            \r\n        else:\r\n            print(s[st:i-1] + '.', end=\"\")\r\n            st = i-1\r\n            i += 2\r\n    \r\n    print(s[st:])",
        "rejectedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    \r\n    vowels = ['a', 'e']\r\n    i = n-1\r\n    \r\n    while i > 1:\r\n        if s[i] in vowels:\r\n            s = s[:i-1] + '.' + s[i-1:]\r\n            i -= 2\r\n        else:\r\n            s = s[:i-2] + '.' + s[i-2:]\r\n            i -= 3\r\n    \r\n    print(s.strip('.'))",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245529332",
            "author": "strashila",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 28500,
            "submissionTime": 1707409440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245529129",
            "author": "strashila",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707409200
        },
        "acceptedCode": "from sys import stdin\r\n\r\ndef check(arr):\r\n    n = len(arr)\r\n    ballance = 0\r\n    all_ballances = [0] * (n + 1)\r\n    for i, a in enumerate(arr):\r\n        if i % 2 == 0:\r\n            ballance += a\r\n        else:\r\n            ballance -= a\r\n        all_ballances[i] = ballance\r\n    all_ballances.sort()\r\n    return any(a == b for a, b in zip(all_ballances, all_ballances[1:]))\r\n    # return len(set(all_ballances)) <= n\r\n\r\nfor s in [*open(0)][2::2]:\r\n    arr = list(map(int, s.split()))\r\n    print(\"YES\" if check(arr) else \"NO\")\r\n\r\n\r\n\r\n\r\n# for s in [*open(0)][2::2]:\r\n#     a=[0]\r\n#     i=1\r\n#     for x in s.split():\r\n#         a+= a[-1] + int(x) * i\r\n#         i=-i\r\n#     print('YNEOS'[len(a)==len({*a})::2])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "rejectedCode": "from sys import stdin\r\n\r\ndef check(arr):\r\n    n = len(arr)\r\n    ballance = 0\r\n    all_ballances = [0] * (n + 1)\r\n    for i, a in enumerate(arr):\r\n        if i % 2 == 0:\r\n            ballance += a\r\n        else:\r\n            ballance -= a\r\n        all_ballances[i] = ballance\r\n    # all_ballances.sort()\r\n    # return any(a == b for a, b in zip(all_ballances, all_ballances[1:]))\r\n    return len(set(all_ballances)) <= n\r\n\r\nn_tests = int(stdin.readline())\r\nfor s in [*open(0)][2::2]:\r\n    arr = list(map(int, s.split()))\r\n    print(\"YES\" if check(arr) else \"NO\", flush=True)\r\n\r\n\r\n\r\n\r\n# for s in [*open(0)][2::2]:\r\n#     a=[0]\r\n#     i=1\r\n#     for x in s.split():\r\n#         a+= a[-1] + int(x) * i\r\n#         i=-i\r\n#     print('YNEOS'[len(a)==len({*a})::2])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 6], but output contains 0 elements\r\n"
        },
        "errorLine": 13,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245528301",
            "author": "treesxg",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 20300,
            "submissionTime": 1707408360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245527561",
            "author": "treesxg",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 77,
            "memory": 6300,
            "submissionTime": 1707407580
        },
        "acceptedCode": "import math\r\nimport sys\r\n\r\ndef II(): return int(sys.stdin.readline())\r\ndef LI(): return list(map(int, sys.stdin.readline().split()))\r\ndef LS(): return sys.stdin.readline().strip().split()\r\ndef SI(): return sys.stdin.readline().strip()\r\ndef MIN_INT(): return -1 * sys.maxsize\r\ndef MAX_INT(): return sys.maxsize\r\nMOD = 1000000007\r\n\r\n\r\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\n\r\n\r\ndef solve():\r\n    n = II()\r\n    s = SI()\r\n    v = [\"a\", \"e\"]\r\n    c = [\"b\", \"c\", \"d\"]\r\n\r\n    ans = []\r\n    i = n-1\r\n    while i>0:\r\n        if s[i] in c:\r\n            ans.append(s[i])\r\n            ans.append(s[i-1])\r\n            ans.append(s[i-2])\r\n            ans.append('.')\r\n            i -= 3\r\n        else:\r\n            ans.append(s[i])\r\n            ans.append(s[i-1])\r\n            ans.append('.')\r\n            i -= 2\r\n    ans = ''.join(ans[:-1])\r\n    print(ans[::-1])\r\n\r\n\r\ndef main():\r\n    t = II()\r\n    for _ in range(t):\r\n        solve()\r\n\r\n\r\nmain()\r\n",
        "rejectedCode": "import math\r\nimport sys\r\n\r\ndef II(): return int(sys.stdin.readline())\r\ndef LI(): return list(map(int, sys.stdin.readline().split()))\r\ndef LS(): return sys.stdin.readline().strip().split()\r\ndef SI(): return sys.stdin.readline().strip()\r\ndef MIN_INT(): return -1 * sys.maxsize\r\ndef MAX_INT(): return sys.maxsize\r\nMOD = 1000000007\r\n\r\n\r\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\r\n\r\n\r\ndef solve():\r\n    n = II()\r\n    a = sum(LI())\r\n    if math.sqrt(a)**2 == a:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    return\r\n\r\ndef main():\r\n    t = II()\r\n    for _ in range(t):\r\n        solve()\r\n\r\n\r\nmain()\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 18,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245525274",
            "author": "Melya",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 25700,
            "submissionTime": 1707405480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245524344",
            "author": "Melya",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707404700
        },
        "acceptedCode": "t = int(input())\r\nwhile t:\r\n    t -= 1\r\n    n = int(input())\r\n    A = [int(i) for i in input().split()]\r\n    s = sum(A)\r\n    x = int(s**0.5)\r\n    if s - x*x == 0:\r\n        print('Yes')\r\n    else:\r\n        print('No')",
        "rejectedCode": "n = int(input())\r\nwhile n:\r\n    n -= 1\r\n    a, b, c = map(int, input().split())\r\n    if a == c:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n    \r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n4\r\n5\r\n7\r\n9\r\n3\r\n2\r\n5\r\n7\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '4'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245522615",
            "author": "TheGoodWinner",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 26200,
            "submissionTime": 1707403440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242581111",
            "author": "TheGoodWinner",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 1,
            "runTime": 1000,
            "memory": 0,
            "submissionTime": 1705731360
        },
        "acceptedCode": "import math\r\nt=int(input())\r\nfor j in range (t):\r\n    n = int(input())\r\n    v =  list(map(int,input().split()))\r\n    sum=0\r\n    for i in range (n) :\r\n        sum = sum + v[i]  \r\n    if ( math.isqrt(sum)**2 == sum):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "k = int(input())\r\n\r\nfor i in range(k):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = sum(a)\r\n    flag = False\r\n    j = 1\r\n\r\n    while not flag:\r\n        if s % j == 0 and j*j == s:\r\n            flag = True\r\n        j = j + 1\r\n\r\n    if flag:\r\n        print('YES')\r\n    else:\r\n        print('NO')\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "YES\r\nYES\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245517053",
            "author": "aufaureve",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 24400,
            "submissionTime": 1707400020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245460255",
            "author": "aufaureve",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 342,
            "memory": 9200,
            "submissionTime": 1707376200
        },
        "acceptedCode": "for _ in range(int(input())):\r\n  c = [\"b\", \"c\", \"d\"]\r\n  v = [\"a\", \"e\"]\r\n  n = int(input())\r\n  l = list(input())\r\n  res = [[]]\r\n  prev = \"\"\r\n  for i in l:\r\n    if i in c and prev in c:\r\n      tmp = []\r\n      for k in range(0, len(res[-1])-3, 2):\r\n        tmp.append(\"\".join(res[-1][k:k+2]))\r\n        tmp.append(\".\")\r\n      tmp.append(\"\".join(res[-1][len(res[-1])-3:len(res[-1])]))\r\n      res[-1] = \"\".join(tmp)\r\n      res.append(\".\")\r\n      res.append([i])\r\n      prev = i\r\n    else:\r\n      res[-1].append(i)\r\n      prev = i\r\n  tmp = []\r\n  if len(res[-1])%2 == 0:\r\n    for k in range(0, len(res[-1])-2, 2):\r\n      tmp.append(\"\".join(res[-1][k:k+2]))\r\n      tmp.append(\".\")\r\n    tmp.append(\"\".join(res[-1][len(res[-1])-2:len(res[-1])]))\r\n  else:\r\n    for k in range(0, len(res[-1])-3, 2):\r\n      tmp.append(\"\".join(res[-1][k:k+2]))\r\n      tmp.append(\".\")\r\n    tmp.append(\"\".join(res[-1][len(res[-1])-3:len(res[-1])]))\r\n  res[-1] = \"\".join(tmp)\r\n  print(\"\".join(res))",
        "rejectedCode": "for _ in range(int(input())):\r\n  n = int(input())\r\n  l = list(map(int, input().split()))\r\n  res = [0]\r\n  for i in range(n):\r\n    if i%2 == 0:\r\n      res.append(res[-1]+l[i])\r\n    else:\r\n      res.append(res[-1]-l[i])\r\n  res.sort()\r\n  ans = \"NO\"\r\n  for i in range(n-1):\r\n    if res[i] == res[i+1]:\r\n      ans = \"YES\"\r\n  print(ans)",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [39th token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245506974",
            "author": "rohithjuturu2005",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 20300,
            "submissionTime": 1707395100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245506726",
            "author": "rohithjuturu2005",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707394980
        },
        "acceptedCode": "k = int(input())\r\nfor i in range(k):\r\n    p = int(input())\r\n    sum = 0\r\n    p1 = input().split(\" \")\r\n    if len(p1) == p:\r\n        for i in range(len(p1)):\r\n            sum+= int(p1[i])\r\n        if(sum**0.5 == int(sum**0.5)):\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n",
        "rejectedCode": "k = int(input())\r\nfor i in range(k):\r\n    p = int(input())\r\n    sum = 0\r\n    p1 = input().split(\" \")\r\n    if len(p1) == p:\r\n        for i in range(len(p1)):\r\n            sum+=p1[i]\r\n        if(sum**0.5 == int(sum**0.5)):\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245506683",
            "author": "xenon676",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 2400,
            "submissionTime": 1707394980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245506564",
            "author": "xenon676",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707394920
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    wlen = int(input())\r\n    word = input()\r\n    word = word.replace(\"ba\", \".ba\")\r\n    word = word.replace(\"ca\", \".ca\")\r\n    word = word.replace(\"da\", \".da\")\r\n    word = word.replace(\"be\", \".be\")\r\n    word = word.replace(\"ce\", \".ce\")\r\n    word = word.replace(\"de\", \".de\")\r\n    print(word[1:])",
        "rejectedCode": "for _ in range(int(input())):\r\n    wlen = int(input())\r\n    word = input()\r\n    word = word.replace(\"ba\", \".ba\")\r\n    word = word.replace(\"ca\", \".ca\")\r\n    word = word.replace(\"da\", \".da\")\r\n    word = word.replace(\"be\", \".be\")\r\n    word = word.replace(\"ce\", \".ce\")\r\n    word = word.replace(\"de\", \".de\")\r\n    print(word)",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": ".ba.ced.bab\r\n.ba.ba\r\n.dad.de.ca.bed.dad\r\n.dac\r\n.dac.dac\r\n.da.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: '.ba.ced.bab'\r\n"
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245488448",
            "author": "tojra",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1707387420
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245359079",
            "author": "tojra",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 54500,
            "submissionTime": 1707303720
        },
        "acceptedCode": "def solve():\n    a,b,c = map(int,input().split())\n    if(a!=b and a!=c):\n        print(a)\n    elif(b!=a and b!=c):\n        print(b)\n    else:\n        print(c)\n\n\n\nfor _ in range(int(input())):\n    solve()",
        "rejectedCode": "def solve():\n    n=int(input())  \n    l=list(map(int,input().split()))\n    l=[0,0]+l\n    n+=2    \n    for i in range(2, n):\n        l[i]+=l[i-2]\n    s=[set(),set()]\n    for i in range(n):\n        if(i>0):\n            if(l[i]-l[i-1] in s[i%2]):\n                print(\"YES\")\n                return\n            s[i%2].add(l[i]-l[i-1])\n        if(i+1<n):\n            if(l[i]-l[i+1] in s[i%2]):\n                print(\"YES\")\n                return\n            s[i%2].add(l[i]-l[i+1])\n    print(\"NO\")\n        \n\n\nfor _ in range(int(input())):\n    solve()",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245443023",
            "author": "Riyajulhasan",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 1400,
            "submissionTime": 1707367680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245442364",
            "author": "Riyajulhasan",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707367380
        },
        "acceptedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    sum_s = ''\r\n    cn = 'bcd'\r\n    va = 'ae'\r\n    for i in range(len(s)-2):\r\n        sum_s += s[i]\r\n        if s[i] in va and s[i+2] in va:\r\n            sum_s += '.'\r\n        elif s[i] in cn and s[i+1] in cn:\r\n            sum_s += '.'\r\n    sum_s += s[-2:]\r\n    print(sum_s)",
        "rejectedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    sum_s = ''\r\n    cn = 'bcd'\r\n    for i in range(len(s)-2):\r\n        sum_s += s[i]\r\n        if s[i] == 'a' or s[i] == 'e' and s[i+2] == 'a' or s[i+2] == 'e':\r\n            sum_s += '.'\r\n        if s[i] in cn and s[i+1] in cn:\r\n            sum_s += '.'\r\n    sum_s += s[-2:]\r\n    print(sum_s)",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.bab\r\nba.ba\r\nda.d..de.ca.bed.dad\r\ndac\r\nda.c.dac\r\nda.ba.b.ba.ba.ba.b.ba.b.ba.ba.b.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 3rd words differ - expected: 'dad.de.ca.bed.dad', found: 'da.d..de.ca.bed.dad'\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245429805",
            "author": "Mohitpatni",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707359580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245429710",
            "author": "Mohitpatni",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707359520
        },
        "acceptedCode": "# Function to find the digit that occurs exactly once\r\ndef find_unique_digit(a, b, c):\r\n    if a == b:\r\n        return c\r\n    elif a == c:\r\n        return b\r\n    else:\r\n        return a\r\n\r\n# Input number of test cases\r\nt = int(input().strip())\r\n\r\n# Iterate through each test case\r\nfor _ in range(t):\r\n    # Input three digits\r\n    a, b, c = map(int, input().strip().split())\r\n\r\n    # Find the unique digit\r\n    unique_digit = find_unique_digit(a, b, c)\r\n\r\n    # Output the unique digit\r\n    print(unique_digit)\r\n",
        "rejectedCode": "# Read the number of test cases\r\nt = int(input(\"Enter the number of test cases (1 <= t <= 270): \"))\r\n\r\n# Iterate over each test case\r\nfor _ in range(t):\r\n    # Read the input for each test case\r\n    a, b, c = map(int, input(\"Enter three digits a, b, c (0 <= a, b, c <= 9): \").split())\r\n    \r\n    # Check if two of the digits are equal and the third one is different\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "Enter the number of test cases (1 <= t <= 270): Enter three digits a, b, c (0 <= a, b, c <= 9): 1\r\nEnter three digits a, b, c (0 <= a, b, c <= 9): 3\r\nEnter three digits a, b, c (0 <= a, b, c <= 9): 6\r\nEnter three digits a, b, c (0 <= a, b, c <= 9): 7\r\nEnter three digits a, b, c (0 <= a, b, c <= 9): 0\r\nEnter three digits a, b, c (0 <= a, b, c <= 9): 6\r\nEnter three digits a, b, c (0 <= a, b, c <= 9): 8\r\nEnter three digits a, b, c (0 <= a, b, c <= 9): 5\r\nEnter three digits a, b, c (0 <= a, b, c <= 9): 5\r\nEnte...",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong output format Expected integer, but \"Enter\" found\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245402209",
            "author": "Bassel_Farahat",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 373,
            "memory": 2700,
            "submissionTime": 1707331680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245401169",
            "author": "Bassel_Farahat",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 15,
            "memory": 200,
            "submissionTime": 1707330060
        },
        "acceptedCode": "t = int(input())\r\nv = [\"a\", \"e\"]\r\nc = [\"b\", \"c\", \"d\"]\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    l = [*input()]\r\n    \r\n    last = [l[n-4], l[n-3], l[n-2], l[n-1]]\r\n    \r\n    if n == 4:\r\n        print(f\"{l[0]}{l[1]}.{l[2]}{l[3]}\")\r\n    elif n == 3:\r\n        print(f\"{l[0]}{l[1]}{l[2]}\")\r\n    elif n == 2:\r\n        print(f\"{l[0]}{l[1]}\")\r\n    else:\r\n        try:\r\n            for i in range(n):\r\n                if (l[i] in c) and (l[i+1]):\r\n                    if (l[i+2] in c) and (l[i+3] in c):\r\n                        print (l[i], end = '')\r\n                        print(l[i+1],end = '')\r\n                        print(l[i+2],end = '')\r\n                        print(\".\", end = \"\")\r\n                        \r\n                    elif (l[i+2] in c) and (l[i+3] in v):\r\n                        print (l[i], end = '')\r\n                        print(l[i+1],end = '')\r\n                        print(\".\", end = \"\")\r\n                        \r\n                else:\r\n                    pass\r\n        except:\r\n            if((last[0] in c) and (last[1] in c) and (last[2] in v)) or ((last[0] in v) and (last[1] in c) and (last[2] in v)):\r\n                print(f\"{last[1]}{last[2]}{last[3]}\")\r\n            elif((last[0] in c) and (last[1] in v) and (last[2] in c)) or ((last[0] in v) and (last[1] in c) and (last[2] in c)):\r\n                print(f\"{last[2]}{last[3]}\")",
        "rejectedCode": "t = int(input())\r\nv = [\"a\", \"e\"]\r\nc = [\"b\", \"c\", \"d\"]\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    l = [*input()]\r\n    \r\n    last = [l[n-4], l[n-3], l[n-2], l[n-1]]\r\n    \r\n    if n == 4:\r\n        print(f\"{l[0]}{l[1]}.{l[2]}{l[3]}\")\r\n    elif n == 3:\r\n        print(f\"{l[0]}{l[1]}{l[2]}\")\r\n    elif n == 2:\r\n        print(f\"{l[0]}{l[1]}\")\r\n    else:\r\n        try:\r\n            for i in range(n):\r\n                if (l[i] in c) and (l[i+1]):\r\n                    if (l[i+2] in c) and (l[i+3] in c):\r\n                        print (l[i], end = '')\r\n                        print(l[i+1],end = '')\r\n                        print(l[i+2],end = '')\r\n                        print(\".\", end = \"\")\r\n                        \r\n                    elif (l[i+2] in c) and (l[i+3] in v):\r\n                        print (l[i], end = '')\r\n                        print(l[i+1],end = '')\r\n                        print(\".\", end = \"\")\r\n                        \r\n                else:\r\n                    pass\r\n        except:\r\n            if(last[0] in c) and (last[1] in c):\r\n                print(f\"{last[1]}{last[2]}{last[3]}\")\r\n            elif((last[0] in v) and (last[1] in c) or ((last[0] in c) and (last[1] in v))):\r\n                print(f\"{last[2]}{last[3]}\")",
        "failedTestCase": {
            "input": "100\r\n2\r\nba\r\n2\r\nca\r\n2\r\nda\r\n2\r\nbe\r\n2\r\nce\r\n2\r\nde\r\n3\r\nbab\r\n3\r\nbac\r\n3\r\nbad\r\n3\r\nbeb\r\n3\r\nbec\r\n3\r\nbed\r\n3\r\ncab\r\n3\r\ncac\r\n3\r\ncad\r\n3\r\nceb\r\n3\r\ncec\r\n3\r\nced\r\n3\r\ndab\r\n3\r\ndac\r\n3\r\ndad\r\n3\r\ndeb\r\n3\r\ndec\r\n3\r\nded\r\n4\r\nbaba\r\n4\r\nbaca\r\n4\r\nbada\r\n4\r\nbabe\r\n4\r\nbace\r\n4\r\nbade\r\n4\r\ncaba\r\n4\r\ncaca\r\n4\r\ncada\r\n4\r\ncabe\r\n4\r\ncace\r\n4\r\ncade\r\n4\r\ndaba\r\n4\r\ndaca\r\n4\r\ndada\r\n4\r\ndabe\r\n4\r\ndace\r\n4\r\ndade\r\n4\r\nbeba\r\n5\r\nbabba\r\n5\r\nbabca\r\n5\r\nbabda\r\n5\r\nbabbe\r\n5\r\nbabce\r\n5\r\nbabde\r\n5\r\nbacba\r\n5\r\nbacca\r\n5\r\nbacda\r\n5\r\nbacbe\r\n5\r\nbacce\r\n5\r\nbacde\r\n5\r\nbadba\r\n5\r\nbadca\r\n5\r\nbadda\r...",
            "output": "ba\r\nca\r\nda\r\nbe\r\nce\r\nde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.ab\r\nba.ac\r\nba.ad\r\nba.eb\r\nba.ec\r\nba.ed\r\nba.ab\r\nba.ac\r\nba.ad\r\nba.eb\r\nba.ec\r\nba.ed\r\nba.ab\r\nba.ac\r\nba.ad\r\nba.eb\r\n...",
            "expectedOutput": "ba\r\nca\r\nda\r\nbe\r\nce\r\nde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba.dac\r\n...",
            "CheckerComment": "wrong answer 63rd words differ - expected: 'ba.bab', found: 'ba.ab'\r\n"
        },
        "errorLine": 35,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245391609",
            "author": "f_dylan_o",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 374,
            "memory": 2300,
            "submissionTime": 1707319800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245391511",
            "author": "f_dylan_o",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707319740
        },
        "acceptedCode": "vowels = [\"a\",\"e\"]\r\n\r\nn = int(input())\r\n\r\nfor i in range(n):\r\n    a = int(input())\r\n    b = input()\r\n    ans = list(b)\r\n    j = 0\r\n    while(j < a):\r\n        if(j == a-3):\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            print(ans[j], end=\"\\n\")\r\n            j+=1\r\n            break\r\n        elif(j == a-2):\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            print(ans[j], end=\"\\n\")\r\n            break\r\n        else:\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            if(ans[j+1] in vowels):\r\n                print(\".\", end=\"\")\r\n            else:\r\n                print(ans[j], end=\"\")\r\n                j+=1\r\n                print(\".\", end=\"\")\r\n    \r\n    \r\n",
        "rejectedCode": "vowels = [\"a\",\"e\"]\r\n\r\nn = int(input())\r\n\r\nfor i in range(n):\r\n    a = int(input())\r\n    b = input()\r\n    ans = list(b)\r\n    j = 0\r\n    while(j < a):\r\n        if(j == a-3):\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            break\r\n        elif(j == a-2):\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            print(ans[j], end=\"\")\r\n            break\r\n        else:\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            print(ans[j], end=\"\")\r\n            j+=1\r\n            if(ans[j+1] in vowels):\r\n                print(\".\", end=\"\")\r\n            else:\r\n                print(ans[j], end=\"\")\r\n                j+=1\r\n                print(\".\", end=\"\")\r\n    \r\n    \r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.babba.badad.de.ca.bed.daddacdac.dacda.bab.ba.ba.bab.bab.ba.bab.ba",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ba.ced.babba.badad.de.ca.bed.d...cda.bab.ba.ba.bab.bab.ba.bab.ba'\r\n"
        },
        "errorLine": 16,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245383802",
            "author": "tentek",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 32300,
            "submissionTime": 1707314820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245382059",
            "author": "tentek",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 15600,
            "submissionTime": 1707313920
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    altind = []\r\n    cur = 0\r\n    for i in range(len(a)):\r\n        if i % 2 != 0:\r\n            cur += a[i]\r\n        else: \r\n            cur -= a[i]\r\n        altind.append(cur)\r\n    altindset = set(altind)\r\n    ###\r\n    if 0 in altindset:\r\n        ans = \"YES\"\r\n    else: \r\n        if len(altind) == len(altindset):\r\n            ans = \"NO\"\r\n        else:\r\n            ans = \"YES\"\r\n    print(ans)",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    altind = []\r\n    cur = 0\r\n    flag = False\r\n    ans = \"NO\"\r\n    for i in range(len(a)):\r\n        if i % 2 != 0:\r\n            cur += a[i]\r\n        else:\r\n            cur -= a[i]\r\n        altind.append(cur)\r\n    #####\r\n    if 0 in altind:\r\n        ans = \"YES\"\r\n        flag = True\r\n    for i in range(n):\r\n        if flag:\r\n            break\r\n        for j in range(i + 1, n):\r\n            if altind[i] == altind[j]:\r\n                ans = \"YES\"\r\n                flag = True\r\n                break\r\n    print(ans)",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245352223",
            "author": "yuki_keshiki",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 28700,
            "submissionTime": 1707300840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245348148",
            "author": "yuki_keshiki",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 30300,
            "submissionTime": 1707298440
        },
        "acceptedCode": "import sys\r\nimport random\r\n\r\ninput = sys.stdin.readline\r\nrd = random.randint(10 ** 9, 2 * 10 ** 9)\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = {0}\r\n    S = 0\r\n    for i in range(n):\r\n        S += (2 * (i % 2) - 1) * a[i]\r\n        if S in s:\r\n            print('YES')\r\n            break\r\n        s.add(S)\r\n    else:\r\n        print('NO')",
        "rejectedCode": "import sys\r\nimport random\r\n\r\ninput = sys.stdin.readline\r\nrd = random.randint(10 ** 9, 2 * 10 ** 9)\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = {0}\r\n    S = 0\r\n    for i in range(n):\r\n        S += (2 * (i % 2) - 1) * a[i]\r\n        if S in s:\r\n            print('YES')\r\n            break\r\n        s.add(S)\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245327819",
            "author": "Abdulxay4545",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 0,
            "submissionTime": 1707288300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245324662",
            "author": "Abdulxay4545",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 93,
            "memory": 0,
            "submissionTime": 1707286800
        },
        "acceptedCode": "a=int(input())\r\nfor j in range(1,a+1):\r\n    b=input()\r\n    c=input()\r\n    d=input()\r\n    s=[]\r\n    f=b+c+d\r\n    A=0\r\n    B=0\r\n    C=0\r\n    for i in f:\r\n        if i==\"A\":\r\n            A+=1\r\n        if i==\"B\":\r\n            B+=1\r\n        if i==\"C\":\r\n            C+=1\r\n    if A==2:\r\n        print(\"A\")\r\n    if B==2:\r\n        print(\"B\")\r\n    if C==2:\r\n        print(\"C\")\r\n",
        "rejectedCode": "lst=list(map(int,input().split()))\r\nb=set(lst)\r\ns=[]\r\nk=[]\r\nfor i in b:\r\n         s.append(lst.count(i))\r\n         k.append(i)\r\nd=s.index(min(s))\r\nprint(k[d])\r\n         ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "10\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '10'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245322165",
            "author": "y0shicon",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 139,
            "memory": 24600,
            "submissionTime": 1707285420
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245321386",
            "author": "y0shicon",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707284940
        },
        "acceptedCode": "T = int(input())\n\nV = ['a', 'e']\nC = [\"b\", \"c\", \"d\"]\n\ndef isVowel(c):\n    return c in V\n\ndef isConsonant(c):\n    return c in C\n\nfor i in range(T):\n    n = int(input())\n    word = list(input())\n    \n    finalWord = []\n    finalWord.append(word[0])\n    \n    for j in range(1, n-1):\n        if n == 2: \n            break\n        if isConsonant(word[j]) and isVowel(word[j-1]) and isVowel(word[j+1]):\n            finalWord.append(\".\")\n            finalWord.append(word[j])\n        elif isConsonant(word[j]) and isVowel(word[j-1]) and isConsonant(word[j+1]):\n            finalWord.append(word[j])\n            finalWord.append(\".\")\n        else:\n            finalWord.append(word[j]) \n        \n    finalWord.append(word[n-1])\n        \n    print(\"\".join(finalWord))",
        "rejectedCode": "T = int(input())\n\nV = ['a', 'e']\nC = [\"b\", \"c\", \"d\"]\n\ndef isVowel(c):\n    return c in V\n\ndef isConsonant(c):\n    return c in C\n\nfor i in range(T):\n    n = int(input())\n    word = list(input())\n    \n    finalWord = word[:2]\n    \n    for j in range(2, n-1):\n        if isConsonant(word[j]) and isVowel(word[j-1]) and isVowel(word[j+1]):\n            finalWord.append(\".\")\n            finalWord.append(word[j])\n        elif isConsonant(word[j]) and isVowel(word[j-1]) and isConsonant(word[j+1]):\n            finalWord.append(word[j])\n            finalWord.append(\".\")\n        else:\n            finalWord.append(word[j]) \n        \n    finalWord.append(word[n-1])\n        \n    print(\"\".join(finalWord))",
        "failedTestCase": {
            "input": "100\r\n2\r\nba\r\n2\r\nca\r\n2\r\nda\r\n2\r\nbe\r\n2\r\nce\r\n2\r\nde\r\n3\r\nbab\r\n3\r\nbac\r\n3\r\nbad\r\n3\r\nbeb\r\n3\r\nbec\r\n3\r\nbed\r\n3\r\ncab\r\n3\r\ncac\r\n3\r\ncad\r\n3\r\nceb\r\n3\r\ncec\r\n3\r\nced\r\n3\r\ndab\r\n3\r\ndac\r\n3\r\ndad\r\n3\r\ndeb\r\n3\r\ndec\r\n3\r\nded\r\n4\r\nbaba\r\n4\r\nbaca\r\n4\r\nbada\r\n4\r\nbabe\r\n4\r\nbace\r\n4\r\nbade\r\n4\r\ncaba\r\n4\r\ncaca\r\n4\r\ncada\r\n4\r\ncabe\r\n4\r\ncace\r\n4\r\ncade\r\n4\r\ndaba\r\n4\r\ndaca\r\n4\r\ndada\r\n4\r\ndabe\r\n4\r\ndace\r\n4\r\ndade\r\n4\r\nbeba\r\n5\r\nbabba\r\n5\r\nbabca\r\n5\r\nbabda\r\n5\r\nbabbe\r\n5\r\nbabce\r\n5\r\nbabde\r\n5\r\nbacba\r\n5\r\nbacca\r\n5\r\nbacda\r\n5\r\nbacbe\r\n5\r\nbacce\r\n5\r\nbacde\r\n5\r\nbadba\r\n5\r\nbadca\r\n5\r\nbadda\r...",
            "output": "baa\r\ncaa\r\ndaa\r\nbee\r\ncee\r\ndee\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba...",
            "expectedOutput": "ba\r\nca\r\nda\r\nbe\r\nce\r\nde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba.dac\r\n...",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba', found: 'baa'\r\n"
        },
        "errorLine": 16,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245319876",
            "author": "Siri.P",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 1100,
            "submissionTime": 1707284100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245319377",
            "author": "Siri.P",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1707283860
        },
        "acceptedCode": "for _ in range(int(input())):\r\n\r\n    arr = list(map(int,input().split()))\r\n\r\n    for i in range(len(arr)):\r\n        if arr.count(arr[i])==1:\r\n            print(arr[i])\r\n\r\n\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    \r\n    arr = list(map(int,input().split()))\r\n    for i in range(len(arr)-1):\r\n        if arr[i]!=arr[i+1]:\r\n            print(arr[i])\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n4\r\n3\r\n5\r\n7\r\n9\r\n0\r\n3\r\n6\r\n2\r\n8\r\n5\r\n7\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '4'\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245275424",
            "author": "DanialHamedi",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26200,
            "submissionTime": 1707250380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245274234",
            "author": "DanialHamedi",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707248700
        },
        "acceptedCode": "from math import sqrt\ntests = int(input())\n\n\ndef solve(buckets):\n\ttotal = 0\n\tfor bucket in buckets:\n\t\ttotal += bucket\n\n\tprint('YES' if sqrt(total).is_integer() else 'No')\n\n\nfor i in range(tests):\n\t_ =  input()\n\tbuckets = list(map(int, input().split()))\n\tsolve(buckets)\n",
        "rejectedCode": "tests = int(input())\nfor _ in range(tests):\n\tfor i in range(3):\n\t\ta = input()\n\t\tif '?' in a:\n\t\t\tbreak\n\tif 'A' not in a:\n\t\tprint('A')\n\n\telif 'B' not in a:\n\t\tprint('B')\n\telse:\n\t\tprint('C')\n",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nC\r\nB\r\nC\r\nA\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nC\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nC\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nC\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nC\r\nA\r\nC\r\nB\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nC\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nC\r\nA\r\nB\r\nC\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nC\r\nA\r\nB\r\nC\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 4th words differ - expected: 'B', found: 'C'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "245305677",
            "author": "reijnnn",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 763,
            "memory": 21800,
            "submissionTime": 1707274620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244693032",
            "author": "reijnnn",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 37100,
            "submissionTime": 1706945940
        },
        "acceptedCode": "import io\r\nimport os\r\nimport sys\r\n\r\ninf = 10 ** 18\r\nmod = 10 ** 9 + 7\r\n\r\nONLINE_JUDGE = __debug__\r\n\r\nif ONLINE_JUDGE:\r\n    R = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\r\n\r\n\r\n    def _input():\r\n        return R().decode()\r\nelse:\r\n    R = sys.stdin.readline\r\n\r\n\r\n    def _input():\r\n        return R()\r\n\r\n\r\ndef get_int() -> int:\r\n    return int(_input())\r\n\r\n\r\ndef get_str() -> str:\r\n    return _input().strip()\r\n\r\n\r\ndef get_int_list() -> list:\r\n    return list(map(int, _input().strip().split()))\r\n\r\n\r\ndef init_matrix(n_, m_, value_=0) -> list:\r\n    return [[value_] * m_ for _ in range(n_)]\r\n\r\n\r\nimport heapq\r\n\r\n\r\nclass PriorityQueue:\r\n\r\n    def __init__(self, data=None):\r\n        if data is None:\r\n            data = []\r\n\r\n        self._queue = []\r\n\r\n        for value in data:\r\n            heapq.heappush(self._queue, value)\r\n\r\n    def pop(self):\r\n        return heapq.heappop(self._queue)\r\n\r\n    def top(self):\r\n        if self._queue:\r\n            top = heapq.heappop(self._queue)\r\n            heapq.heappush(self._queue, top)\r\n            return top\r\n\r\n        return None\r\n\r\n    def push(self, value):\r\n        heapq.heappush(self._queue, value)\r\n\r\n    def __len__(self):\r\n        return len(self._queue)\r\n\r\n    def __repr__(self):\r\n        return f'<{self.__class__.__name__}>: [{\", \".join(map(str, self._queue))}]'\r\n\r\n\r\ndef solve():\r\n    n, m = get_int_list()\r\n\r\n    g = init_matrix(n, 0)\r\n    for i in range(m):\r\n        u, v, w = get_int_list()\r\n        u -= 1\r\n        v -= 1\r\n        g[u].append((v, w))\r\n        g[v].append((u, w))\r\n\r\n    s = get_int_list()\r\n\r\n    h = init_matrix(n, max(s) + 1, inf)\r\n    h[0][s[0]] = 0\r\n\r\n    q = PriorityQueue([(0, 0, s[0])])\r\n    while q:\r\n        dist, v, slow = q.pop()\r\n\r\n        if dist > h[v][slow] or h[v][slow] == inf:\r\n            continue\r\n\r\n        for u, w in g[v]:\r\n            next_slow = min(slow, s[u])\r\n            if h[u][next_slow] > h[v][slow] + w * slow:\r\n                h[u][next_slow] = h[v][slow] + w * slow\r\n                q.push((h[u][next_slow], u, next_slow))\r\n\r\n    print(min(h[n - 1]))\r\n\r\n\r\nfor _ in range(get_int()):\r\n    solve()",
        "rejectedCode": "import io\r\nimport os\r\nimport sys\r\n\r\n\r\ninf = 10 ** 18\r\nmod = 10 ** 9 + 7\r\n\r\nONLINE_JUDGE = __debug__\r\n\r\nif ONLINE_JUDGE:\r\n    R = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\r\n\r\n\r\n    def _input():\r\n        return R().decode()\r\nelse:\r\n    R = sys.stdin.readline\r\n\r\n\r\n    def _input():\r\n        return R()\r\n\r\n\r\ndef get_int() -> int:\r\n    return int(_input())\r\n\r\n\r\ndef get_str() -> str:\r\n    return _input().strip()\r\n\r\n\r\ndef get_int_list() -> list:\r\n    return list(map(int, _input().strip().split()))\r\n\r\n\r\ndef init_matrix(n_, m_, value_=0) -> list:\r\n    return [[value_] * m_ for _ in range(n_)]\r\n\r\n\r\ndef solve():\r\n    n = get_int()\r\n    a = get_int_list()\r\n\r\n    s = set([0])\r\n    pref = [0, 0]\r\n    for i in range(n):\r\n        pref[i & 1] += a[i]\r\n        \r\n        d = pref[1] - pref[0]\r\n        if d in s:\r\n            print('YES')\r\n            return\r\n\r\n        s.add(d)\r\n\r\n    print('NO')\r\n\r\n\r\nfor _ in range(get_int()):\r\n    solve()",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245299829",
            "author": "temur_sherov",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 29800,
            "submissionTime": 1707271140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245299521",
            "author": "temur_sherov",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 295,
            "memory": 8800,
            "submissionTime": 1707270900
        },
        "acceptedCode": "from math import *\r\nt = int(input())\r\nwhile (t):\r\n    t-=1\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    if (int(sqrt(sum(a)))*int(sqrt(sum(a))) == sum(a)):\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "from math import *\r\nt = int(input())\r\nwhile (t):\r\n    t-=1\r\n    a = list(map(int, input().split()))\r\n    if (int(sqrt(sum(a)))*int(sqrt(sum(a))) == sum(a)):\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [8th token]\r\n"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244782744",
            "author": "wyjsdpku",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 217,
            "memory": 32600,
            "submissionTime": 1707009840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244782456",
            "author": "wyjsdpku",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33200,
            "submissionTime": 1707009660
        },
        "acceptedCode": "import sys\r\nimport collections\r\nimport itertools\r\ninput = sys.stdin.readline\r\n\r\n############ ---- Input Functions ---- ############\r\ndef inp():\r\n    return(int(input()))\r\ndef inlt():\r\n    return(list(map(int,input().split())))\r\ndef insr():\r\n    s = input()\r\n    return(list(s[:len(s) - 1]))\r\ndef invr():\r\n    return(map(int,input().split()))\r\n\r\n\r\n\r\ndef main():\r\n    n = inp()\r\n    lis = inlt()\r\n    prefix = [0]\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            prefix.append(prefix[-1] + lis[i])\r\n        else:\r\n            prefix.append(prefix[-1] - lis[i])\r\n\r\n\r\n    cnt = set()\r\n    for i in range(n + 1):\r\n        if prefix[i] in cnt:\r\n            return 'YES'\r\n        cnt.add(prefix[i])\r\n    return 'NO'\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = inp()\r\n    for i in range(n):\r\n        print(main())\r\n        ",
        "rejectedCode": "import sys\r\nimport collections\r\nimport itertools\r\ninput = sys.stdin.readline\r\n\r\n############ ---- Input Functions ---- ############\r\ndef inp():\r\n    return(int(input()))\r\ndef inlt():\r\n    return(list(map(int,input().split())))\r\ndef insr():\r\n    s = input()\r\n    return(list(s[:len(s) - 1]))\r\ndef invr():\r\n    return(map(int,input().split()))\r\n\r\n\r\n\r\ndef main():\r\n    n = inp()\r\n    lis = inlt()\r\n    prefix = [0]\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            prefix.append(prefix[-1] + lis[i])\r\n        else:\r\n            prefix.append(prefix[-1] - lis[i])\r\n\r\n\r\n    cnt = set()\r\n    for i in range(n + 1):\r\n        if prefix[i] in cnt:\r\n            return 'YES'\r\n        cnt.add(prefix[i])\r\n    return 'NO'\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    n = inp()\r\n    for i in range(n):\r\n        print(main())\r\n        ",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245270878",
            "author": "sbarreto",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 20200,
            "submissionTime": 1707243480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245270389",
            "author": "sbarreto",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1200,
            "submissionTime": 1707242760
        },
        "acceptedCode": "def cuadrado(lista):\r\n    t=0\r\n    for i in lista:\r\n        t+=int(i)\r\n    r=int(t**0.5)\r\n    if(r*r==t):\r\n        return \"YES\"\r\n    else:\r\n        return \"NO\"\r\nt=int(input())\r\nfor i in range(t):\r\n    n=input()\r\n    p=input()\r\n    p=p.split()\r\n    print(cuadrado(p))\r\n\r\n    \r\n",
        "rejectedCode": "def cuadrado(n):\r\n    if(n==1):\r\n        return True\r\n    if(n<4):\r\n        return False\r\n    for i in range(2,int(n**0.5)+1):\r\n        if(i*i==n):\r\n            return True\r\n    return False\r\nt=int(input())\r\nfor i in range(t):\r\n    l=[]\r\n    n=int(input())\r\n    p=(input())\r\n    p=p.split()\r\n    for k in p:\r\n        l.append(int(k))\r\n    c=sum(l)\r\n    if(cuadrado(c)):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245264588",
            "author": "just_cs_Mohammd",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707236640
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "245264510",
            "author": "just_cs_Mohammd",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707236580
        },
        "acceptedCode": "for _ in range(int(input()) * 3):\r\n    s = input()\r\n    for t in \"ABC\":\r\n        if t not in s:\r\n            print(t)",
        "rejectedCode": "for _ in range(int(input())*3):\r\n    s = input()\r\n    print(s)\r\n    for t in \"ABC\":\r\n        if t not in s:\r\n            print(t)\r\nprint(s)\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "ABC\r\nC?B\r\nA\r\nBCA\r\nBCA\r\nCA?\r\nB\r\nABC\r\n?AB\r\nC\r\nBCA\r\nABC\r\nABC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'ABC'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245251123",
            "author": "karasok",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 295,
            "memory": 20300,
            "submissionTime": 1707228120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245250218",
            "author": "karasok",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 3,
            "runTime": 171,
            "memory": 1800,
            "submissionTime": 1707227700
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = sum(int(x) for x in input().split())\r\n    l, r = 0, 10**10\r\n    while l+1<r:\r\n        m = (l+r)//2\r\n        if m**2<s:\r\n            l = m\r\n        else:\r\n            r = m\r\n        #print(l,r)\r\n    print('yes' if r**2==s else 'no')\r\n    \r\n    \r\n    \r\n",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = sum(int(x) for x in input().split())\r\n    l, r = 0, 10**5\r\n    while l+1<r:\r\n        m = (l+r)//2\r\n        if m**2<s:\r\n            l = m\r\n        else:\r\n            r = m\r\n        #print(l,r)\r\n    print('yes' if r**2==s else 'no')\r\n    \r\n    \r\n    \r\n",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "no\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\n",
            "expectedOutput": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245079714",
            "author": "suredrope",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 327,
            "memory": 9900,
            "submissionTime": 1707212160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245078029",
            "author": "suredrope",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 4300,
            "submissionTime": 1707211140
        },
        "acceptedCode": "def main():\r\n    n = int(input())\r\n    words = []\r\n    vowels = set([\"a\", \"e\"])\r\n\r\n    for _ in range(n):\r\n        word_len = int(input())\r\n        word = input()\r\n        # words.append(list(word))\r\n        words.append(word)\r\n\r\n    for word in words:\r\n        i = len(word) - 1\r\n        dots = set()\r\n        while i >= 3:\r\n            if word[i] in vowels:\r\n                # f_word = \".\" + word[i - 1 : i + 1] + f_word\r\n                # word.insert(i - 1, \".\")\r\n                dots.add(i - 1)\r\n                i -= 2\r\n            else:\r\n                # f_word = \".\" + word[i - 2 : i + 1] + f_word\r\n                # word.insert(i - 2, \".\")\r\n                dots.add(i - 2)\r\n                i -= 3\r\n        for i in range(len(word)):\r\n            if i in dots:\r\n                print(\".\", end=\"\")\r\n            print(word[i], end=\"\")\r\n        print()\r\n\r\n        # f_word = word[: i + 1] + f_word\r\n        # print(\"\".join(word))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "def main():\r\n    n = int(input())\r\n    words = []\r\n    vowels = set([\"a\", \"e\"])\r\n\r\n    for _ in range(n):\r\n        word_len = int(input())\r\n        word = input()\r\n        words.append(list(word))\r\n\r\n    for word in words:\r\n        i = len(word) - 1\r\n        while i >= 3:\r\n            if word[i] in vowels:\r\n                word.insert(i - 1, \".\")\r\n                i -= 2\r\n            else:\r\n                word.insert(i - 2, \".\")\r\n                i -= 3\r\n        print(\"\".join(word))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245079461",
            "author": "srinidhi115",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707211980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244528373",
            "author": "srinidhi115",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 4000,
            "submissionTime": 1706852040
        },
        "acceptedCode": "for s in[*open(0)][1:]:a,b,c=map(int,s.split());print(a^b^c)",
        "rejectedCode": "import re\r\nfor s in[*open(0)][2::2]:print(re.sub('(?!^)(.(a|e))',r'.\\1',s))",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245075696",
            "author": "IlyaOst",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 9000,
            "submissionTime": 1707209940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245074033",
            "author": "IlyaOst",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 14500,
            "submissionTime": 1707209160
        },
        "acceptedCode": "t = int(input())\r\n\r\ngl = ['a', 'e']\r\nso = ['b', 'c', 'd']\r\n\r\nfor _ in range(t):\r\n    le = int(input())\r\n    s = input()\r\n    i = 0\r\n    while i < le - 3:\r\n        if s[i + 3] in so:\r\n            print(s[i:i+3], end='.')\r\n            i += 3\r\n        else:\r\n            print(s[i:i+2], end='.')\r\n            i += 2\r\n    print(s[i:])",
        "rejectedCode": "t = int(input())\r\n\r\ngl = ['a', 'e']\r\nso = ['b', 'c', 'd']\r\n\r\nfor i in range(t):\r\n    le = int(input())\r\n    s = input()[::-1]\r\n    j = 0\r\n    rez = []\r\n    while j != le:\r\n        if s[j] in gl:\r\n            rez.insert(0, s[j:j+2])\r\n            j += 2\r\n        else:\r\n            rez.insert(0, s[j:j+3])\r\n            j += 3\r\n    for _ in range(len(rez)):\r\n        rez[_] = rez[_][::-1]\r\n    print(*rez, sep='.')",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "be.de.ba.ca.cad.ca.bab.cab.de.dac.ced.da.da.ceb.ba.ca.ca.ced.ba.ca.ce.ce.ce.da.ca.be.da.bad.ba.da.be.ceb.da.bab.ba.ba.ca.ca.ceb.ba.ba.bec.be.ba.bed.cac.be.ca.de.ded.de.beb.ba.dec.be.ba.dab.da.de.dad.ce.be.be.dab.cad.ce.ca.be.ba.ba.ba.de.da.ba.be.cab.de.de.de.ca.ca.ca.ca.bab.da.ce.ca.be.ca.dac.da.dad.cec.ce.ca.ca.ba.ca.dad.de.de.ce.ba.dec.ced.ba.bac.ce.ded.ce.de.deb.ba.cad.ce.ca.ca.de.be.da.ca.bed.deb.ba.ca.be.ce.be.de.be.ba.ba.ce.dad.bed.bac.ca.ba.be.dac.ca.ca.ca.bed.be.be.ce.da.dad.deb.bac.dac.da.ba.ce.de...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245075527",
            "author": "Saumya_coder",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1707209880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "245066862",
            "author": "Saumya_coder",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 7100,
            "submissionTime": 1707205680
        },
        "acceptedCode": "\r\nfor i in range(int(input())):\r\n    x = list(map(int,input().split()))\r\n    if(x[0]==x[1]):\r\n        print(x[2])\r\n    else:\r\n        if(x[0]==x[2]):\r\n            print(x[1])\r\n        else:\r\n            print(x[0])",
        "rejectedCode": "for i in range(int(input())):\r\n\r\n    n = int(input())\r\n    s = input()\r\n    a=[]\r\n    if(n<=3):\r\n        print(s)\r\n    else:\r\n        while(len(s)>3):\r\n            if(s[3]=='b' or s[3]=='c' or s[3]=='d'):\r\n                a.append(s[0:3])\r\n                s=s[3:len(s)]\r\n            else:\r\n                a.append(s[0:2])\r\n                s=s[2:len(s)]\r\n        a.append(s)        \r\n        x=\".\".join(a)    \r\n        print(x)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "be.de.ba.ca.cad.ca.bab.cab.de.dac.ced.da.da.ceb.ba.ca.ca.ced.ba.ca.ce.ce.ce.da.ca.be.da.bad.ba.da.be.ceb.da.bab.ba.ba.ca.ca.ceb.ba.ba.bec.be.ba.bed.cac.be.ca.de.ded.de.beb.ba.dec.be.ba.dab.da.de.dad.ce.be.be.dab.cad.ce.ca.be.ba.ba.ba.de.da.ba.be.cab.de.de.de.ca.ca.ca.ca.bab.da.ce.ca.be.ca.dac.da.dad.cec.ce.ca.ca.ba.ca.dad.de.de.ce.ba.dec.ced.ba.bac.ce.ded.ce.de.deb.ba.cad.ce.ca.ca.de.be.da.ca.bed.deb.ba.ca.be.ce.be.de.be.ba.ba.ce.dad.bed.bac.ca.ba.be.dac.ca.ca.ca.bed.be.be.ce.da.dad.deb.bac.dac.da.ba.ce.de...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245030688",
            "author": "Kottoamatsukami",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 20200,
            "submissionTime": 1707185400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "245030590",
            "author": "Kottoamatsukami",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1707185340
        },
        "acceptedCode": "t = int(input())\r\nfor test in range(t):\r\n    n = int(input())\r\n    s = sum(map(int, input().split()))\r\n    if int(s**0.5)**2 == s:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "t = int(input())\r\nfor test in range(t):\r\n    n = int(input())\r\n    s = sum(map(int, input().split())\r\n    if int(s**0.5)**2 == s:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": null,
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245025539",
            "author": "sanjanapatel238",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 249,
            "memory": 27800,
            "submissionTime": 1707181920
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "245025444",
            "author": "sanjanapatel238",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 300,
            "submissionTime": 1707181800
        },
        "acceptedCode": "from collections import defaultdict\r\n\r\ndef subsetsum(a,n,k):\r\n    s = [0]\r\n    for i in range(n):\r\n        s.append(s[-1]+a[i])\r\n    s.sort()\r\n    for i in range(n):\r\n        if s[i] == s[i+1]:\r\n            return True\r\n    return False\r\n        \r\n\r\n\r\n\r\n\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        a = list(map(int,input().split(' ')))\r\n        x = 1\r\n        for i in range(n):\r\n            a[i] = a[i] * x\r\n            x = x * (-1)\r\n        if subsetsum(a,n,0):\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n        \r\n\r\n\r\nif __name__== \"__main__\":\r\n  main()\r\n",
        "rejectedCode": "from collections import defaultdict\r\n\r\ndef subsetsum(a,n,k):\r\n    s = [0]\r\n    for i in range(n):\r\n        s.append(s[-1]+a[i])\r\n    s.sort()\r\n    for i in range(n-1):\r\n        if s[i] == s[i+1]:\r\n            return True\r\n    return False\r\n        \r\n\r\n\r\n\r\n\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        a = list(map(int,input().split(' ')))\r\n        x = 1\r\n        for i in range(n):\r\n            a[i] = a[i] * x\r\n            x = x * (-1)\r\n        if subsetsum(a,n,0):\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n        \r\n\r\n\r\nif __name__== \"__main__\":\r\n  main()\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [39th token]\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245003628",
            "author": "CodeFighterShu",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707155220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "245003555",
            "author": "CodeFighterShu",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707155100
        },
        "acceptedCode": "t = int(input())\r\nwhile t > 0:\r\n    x, y, z = map(int, input().split())\r\n    t_result = x ^ y ^ z\r\n    print(t_result)\r\n    t -= 1\r\n",
        "rejectedCode": "i = input()\r\nj = int(i)\r\n\r\nwhile j > 0:\r\n    a = input()\r\n    b = int(a)\r\n    c = input()\r\n    d = int(c)\r\n    e = input()\r\n    f = int(e)\r\n    print(b ^ d ^ f)\r\n    j -= 1\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244999521",
            "author": "VarunKrishnaswamy",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 529,
            "memory": 17100,
            "submissionTime": 1707150360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240047625",
            "author": "VarunKrishnaswamy",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 93,
            "memory": 2000,
            "submissionTime": 1704218460
        },
        "acceptedCode": "import math\r\n\r\nt= int(input())\r\nfor q in range(t):\r\n    n= int(input())\r\n    m=0\r\n    for x in input().split():\r\n        m+=int(x)\r\n    s = math.sqrt(m)\r\n    if s == int(s):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    \r\n    ",
        "rejectedCode": "t= int(input())\r\nfor q in range(t):\r\n    x,y,z=(int(x) for x in input())\r\n    if x==y:\r\n        print(z)\r\n    else:\r\n        if y==z:\r\n            print(x)\r\n        else:\r\n            print(y)\r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244988846",
            "author": "ty777",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707142620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244988191",
            "author": "ty777",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707142200
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    l = list(map(int, input().split()))\r\n    count = {}\r\n    for i in l:\r\n        if i not in count:\r\n            count[i] = 1\r\n        else:\r\n            count[i]+=1\r\n    k=[]\r\n    for x,y in count.items():\r\n        k.append((y,x)) \r\n    k.sort()\r\n    print(k[0][1])",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    l = list(map(int, input().split()))\r\n    unique = []\r\n    for i in l:\r\n        if i not in unique:\r\n            unique.append(i)\r\n            l.remove(i)\r\n    print(l[0])",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "2\r\n3\r\n5\r\n8\r\n0\r\n6\r\n8\r\n7\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '2'\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244976449",
            "author": "Sabit_Ibragimov",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 296,
            "memory": 27600,
            "submissionTime": 1707135660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244970325",
            "author": "Sabit_Ibragimov",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33200,
            "submissionTime": 1707132960
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int, input().split()))\r\n    l=[0]\r\n    for i in range(n):\r\n        l.append(((-1)**i)*a[i]+l[-1])\r\n    l.sort()\r\n    ans=\"NO\"\r\n    for i in range(n):\r\n        if l[i]==l[i+1]:\r\n            ans=\"YES\"\r\n            break\r\n    print(ans)",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    m = {}\r\n    s = 0\r\n    m[0] = 1\r\n    for i in range(n):\r\n        a[i] *= (-1 if i % 2 else 1)\r\n        s += a[i]\r\n        if s in m:\r\n            print(\"YES\")\r\n            return\r\n        m[s] = 1\r\n    print(\"NO\")\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    for _ in range(t):\r\n        solve()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244972151",
            "author": "Elmurat",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 9100,
            "submissionTime": 1707133800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244971324",
            "author": "Elmurat",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 11500,
            "submissionTime": 1707133440
        },
        "acceptedCode": "import sys\r\ninput=sys.stdin.readline\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    a=input().strip(\"\\n\")[::-1]\r\n    ss=[]\r\n    i=0\r\n    while i<len(a):\r\n        if a[i]=='b' or a[i]=='c' or a[i]=='d':\r\n            if a[i+1]=='a' or a[i+1]=='e':\r\n                ss.append((a[i]+a[i+1]+a[i+2])[::-1]+'.')\r\n                i+=3\r\n        else:\r\n            ss.append((a[i]+a[i+1])[::-1]+'.')\r\n            i+=2\r\n    print(\"\".join(ss[::-1])[:-1])",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=input()[::-1]\r\n    ss=''\r\n    i=0\r\n    while i<len(a):\r\n        if a[i]=='b' or a[i]=='c' or a[i]=='d':\r\n            if a[i+1]=='a' or a[i+1]=='e':\r\n                ss+=(a[i]+a[i+1]+a[i+2])+'.'\r\n                i+=3\r\n        else:\r\n            ss+=(a[i]+a[i+1])+'.'\r\n            i+=2\r\n    print(ss[:-1][::-1])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244964949",
            "author": "XAH3ORus54",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 265,
            "memory": 27500,
            "submissionTime": 1707130440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244964740",
            "author": "XAH3ORus54",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1707130380
        },
        "acceptedCode": "\r\n\r\nt: int = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    st = list(map(int, input().split()))\r\n\r\n    for k in range(1, n, +2):\r\n        st[k] *= -1\r\n\r\n    cum = [0]\r\n    temp: int = 0\r\n\r\n    for k in range(n):\r\n        temp += st[k]\r\n        cum.append(temp)\r\n\r\n    cum.sort()\r\n\r\n    success: bool = False\r\n\r\n    for k in range(len(cum)-1):\r\n        if cum[k] == cum[k+1]:\r\n            success = True\r\n    \r\n    if success:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "\r\n\r\nt: int = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    st = list(map(int, input().split()))\r\n\r\n    for k in range(1, n, +2):\r\n        st[k] *= -1\r\n\r\n    cum: list[int] = [0]\r\n    temp: int = 0\r\n\r\n    for k in range(n):\r\n        temp += st[k]\r\n        cum.append(temp)\r\n\r\n    cum.sort()\r\n\r\n    success: bool = False\r\n\r\n    for k in range(len(cum)-1):\r\n        if cum[k] == cum[k+1]:\r\n            success = True\r\n    \r\n    if success:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244952569",
            "author": "brightest66",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 265,
            "memory": 28400,
            "submissionTime": 1707125100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244949530",
            "author": "brightest66",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 11900,
            "submissionTime": 1707123840
        },
        "acceptedCode": "#        \u250f\u2513\u3000\u3000\u3000\u250f\u2513+ +\r\n#\u3000\u3000\u3000\u250f\u251b\u253b\u2501\u2501\u2501\u251b\u253b\u2513 + +\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2503 \u3000\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2501\u3000\u3000\u3000\u2503 ++ + + +\r\n#\u3000\u3000 \u2588\u2588\u2588\u2588\u2501\u2588\u2588\u2588\u2588 \u2503+\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2503 +\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u253b\u3000\u3000\u3000\u2503\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2503 + +\r\n#\u3000\u3000\u3000\u2517\u2501\u2513\u3000\u3000\u3000\u250f\u2501\u251b\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503 + + + +\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503 + \u3000\u3000\u3000\u3000\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503\u3000\u3000+\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000 \u3000\u3000\u2517\u2501\u2501\u2501\u2513 + +\r\n#\u3000\u3000\u3000\u3000\u3000\u2503 \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2523\u2513\r\n#\u3000\u3000\u3000\u3000\u3000\u2503 \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u250f\u251b\r\n#\u3000\u3000\u3000\u3000\u3000\u2517\u2513\u2513\u250f\u2501\u2533\u2513\u250f\u251b + + + +\r\n#\u3000\u3000\u3000\u3000\u3000\u3000\u2503\u252b\u252b\u3000\u2503\u252b\u252b\r\n#\u3000\u3000\u3000\u3000\u3000\u3000\u2517\u253b\u251b\u3000\u2517\u253b\u251b+ + + +\r\n\r\nimport sys,math\r\n# from collections import Counter\r\ninput = sys.stdin.readline\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    f = [0] * (n + 1)\r\n    flag = 0\r\n    for i in range(n):\r\n        rotation = -1 if i % 2 else 1\r\n        f[i+1]  = f[i] + rotation * a[i]\r\n    f.sort()\r\n    for i in range(n):\r\n        if f[i] == f[i+1]:\r\n            flag = 1\r\n            break\r\n    print(\"YES\" if flag else \"NO\")\r\n",
        "rejectedCode": "#        \u250f\u2513\u3000\u3000\u3000\u250f\u2513+ +\r\n#\u3000\u3000\u3000\u250f\u251b\u253b\u2501\u2501\u2501\u251b\u253b\u2513 + +\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2503 \u3000\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2501\u3000\u3000\u3000\u2503 ++ + + +\r\n#\u3000\u3000 \u2588\u2588\u2588\u2588\u2501\u2588\u2588\u2588\u2588 \u2503+\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2503 +\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u253b\u3000\u3000\u3000\u2503\r\n#\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2503 + +\r\n#\u3000\u3000\u3000\u2517\u2501\u2513\u3000\u3000\u3000\u250f\u2501\u251b\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503 + + + +\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u3000\u3000\u3000\u3000\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503 + \u3000\u3000\u3000\u3000\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000\u3000\u3000\u2503\u3000\u3000+\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\r\n#\u3000\u3000\u3000\u3000\u3000\u2503\u3000 \u3000\u3000\u2517\u2501\u2501\u2501\u2513 + +\r\n#\u3000\u3000\u3000\u3000\u3000\u2503 \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u2523\u2513\r\n#\u3000\u3000\u3000\u3000\u3000\u2503 \u3000\u3000\u3000\u3000\u3000\u3000\u3000\u250f\u251b\r\n#\u3000\u3000\u3000\u3000\u3000\u2517\u2513\u2513\u250f\u2501\u2533\u2513\u250f\u251b + + + +\r\n#\u3000\u3000\u3000\u3000\u3000\u3000\u2503\u252b\u252b\u3000\u2503\u252b\u252b\r\n#\u3000\u3000\u3000\u3000\u3000\u3000\u2517\u253b\u251b\u3000\u2517\u253b\u251b+ + + +\r\n\r\nimport sys,math\r\n# from collections import Counter\r\ninput = sys.stdin.readline\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    s = input().strip()\r\n    V = {'a','e'}\r\n    C = {'b','c','d'}\r\n    s = s[::-1]\r\n    # print(s)\r\n    ans = ''\r\n    i = 0\r\n    # print(s[1])\r\n    while i < n:\r\n        if s[i] in C:\r\n            # print(i,ans, s[i: i+3])\r\n            ans += s[i: i+3]\r\n            ans += '.'\r\n            i += 3\r\n        else:\r\n            # print(ans, s[i: i+2])\r\n            ans += s[i: i+2]\r\n            ans += '.'\r\n            i += 2\r\n\r\n    # print(ans)\r\n\r\n    ans = ans[::-1]\r\n    print(ans[1:])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 29,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244884869",
            "author": "xXxNoobSaibotxXx",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1707074280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244882997",
            "author": "xXxNoobSaibotxXx",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 9,
            "runTime": 1000,
            "memory": 26300,
            "submissionTime": 1707071100
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    a,b,c = list(map(int,input().split()))\r\n    if (a != b and a != c):\r\n        print(a)\r\n    elif (b != c and b != a):\r\n        print(b)\r\n    else:\r\n        print(c)\r\n",
        "rejectedCode": "def checkSquare(n):\r\n    n1 = n\r\n    k = 0\r\n    while (k*k < n1):\r\n        k+=1\r\n    if (k*k == n1): return True\r\n    return False\r\n\r\nn = int(input())\r\n\r\nfor i in range(n):\r\n    q = int(input())\r\n    a = list(map(int,input().split()))\r\n    print(\"YES\" if checkSquare(sum(a)) else \"NO\")\r\n",
        "failedTestCase": {
            "input": "10000\r\n20\r\n144272510 611178003 909925048 861425549 820096754 67760437 273878288 126614243 531969375 817077202 482637353 507069465 699642631 407608742 846885254 225437260 100780964 523832097 30437867 959191866\r\n20\r\n897395949 418554020 464680098 652231582 818492002 823729239 2261354 747144855 478230860 285970257 774747712 860954510 245631565 634746161 109765576 967900367 340837477 32845752 23968185 27322287\r\n20\r\n697444856 581337224 9883728 946217655 409314932 737106431 232571832 453244222 779378297 31182306 ...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244847622",
            "author": "kibr",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1707045240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242433382",
            "author": "kibr",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33900,
            "submissionTime": 1705651620
        },
        "acceptedCode": "import sys\r\n\r\n\r\ndef iinp():\r\n    return int(sys.stdin.readline().strip())\r\n\r\n\r\ndef linp():\r\n    return list(map(int, sys.stdin.readline().strip().split()))\r\n\r\n\r\ndef lsinp():\r\n    return sys.stdin.readline().strip().split()\r\n\r\n\r\ndef digit():\r\n    return [int(i) for i in (list(sys.stdin.readline().strip()))]\r\n\r\n\r\ndef char():\r\n    return list(sys.stdin.readline().strip())\r\n\r\n\r\nfrom collections import Counter, defaultdict\r\n\r\n\r\ndef solve():\r\n    grid = []\r\n    for _ in range(3):\r\n        cur = input()\r\n        if \"?\" in cur:\r\n            for val in \"ABC\":\r\n                if val not in cur:\r\n                    print(val)\r\n\r\n\r\nq = iinp()\r\nfor _ in range(q):\r\n    solve()\r\n",
        "rejectedCode": "import sys\r\n\r\n\r\ndef iinp():\r\n    return int(sys.stdin.readline().strip())\r\n\r\n\r\ndef linp():\r\n    return list(map(int, sys.stdin.readline().strip().split()))\r\n\r\n\r\ndef lsinp():\r\n    return sys.stdin.readline().strip().split()\r\n\r\n\r\ndef digit():\r\n    return [int(i) for i in (list(sys.stdin.readline().strip()))]\r\n\r\n\r\ndef char():\r\n    return list(sys.stdin.readline().strip())\r\n\r\n\r\nfrom collections import Counter, defaultdict\r\nfrom math import sqrt\r\nfrom random import randint\r\n\r\n\r\ndef solve():\r\n    n = iinp()\r\n    num = linp()\r\n    # num.sort()\r\n    prefix = [0] * (n + 1)\r\n    # r = randint(1, 10**9)\r\n\r\n    for i in range(n):\r\n        if i % 2:\r\n            prefix[i + 1] = prefix[i] - num[i]\r\n        else:\r\n            prefix[i + 1] = prefix[i] + num[i]\r\n    prefix.sort()\r\n    ans = set()\r\n    for val in prefix:\r\n        ans.add(val)\r\n    if len(ans) <= n:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\n\r\nq = iinp()\r\nfor _ in range(q):\r\n    solve()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 25,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244829523",
            "author": "lexoner",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 451,
            "memory": 32700,
            "submissionTime": 1707036060
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244827955",
            "author": "lexoner",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 3,
            "runTime": 311,
            "memory": 9900,
            "submissionTime": 1707035220
        },
        "acceptedCode": "def IsSquare(sum_array):\r\n    key = sum_array\r\n    left = -1\r\n    right = 10 ** 9\r\n    while right > left + 1:\r\n        middle = (right + left) // 2\r\n        if middle ** 2 >= key:\r\n            right = middle\r\n        else:\r\n            left = middle\r\n    if right < 10 ** 9 and right ** 2 == key:\r\n        if right ** 2 == key:\r\n            return True\r\n    return False\r\n            \r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    array = list(map(int, input().split()))\r\n    sum_array = sum(array)\r\n    if IsSquare(sum_array) == True:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "def IsSquare(arr, sum_array):\r\n    key = sum_array\r\n    left = -1\r\n    right = len(arr)\r\n    while right > left + 1:\r\n        middle = (right + left) // 2\r\n        if arr[middle] ** 2 >= key:\r\n            right = middle\r\n        else:\r\n            left = middle\r\n    if right < len(arr) and arr[right] ** 2 == key:\r\n        if arr[right] ** 2 == key:\r\n            return True\r\n    return False\r\n            \r\n\r\nt = int(input())\r\narr = [i for i in range(1, 2 * 10 ** 5)]\r\nfor _ in range(t):\r\n    n = int(input())\r\n    array = list(map(int, input().split()))    \r\n    # array = [i for i in range(1, int((sum_array) ** 0.5) + 1)]\r\n    sum_array = sum(array)\r\n    if IsSquare(arr, sum_array) == True:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "NO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243273723",
            "author": "Cyber_coder_71",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 20200,
            "submissionTime": 1706173020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243270112",
            "author": "Cyber_coder_71",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706171400
        },
        "acceptedCode": "def is_square(x):\r\n    l, r = 1, int(1e9)\r\n    while l <= r:\r\n        mid = l + (r - l) // 2\r\n        if mid * mid == x:\r\n            return True\r\n        if mid * mid > x:\r\n            r = mid - 1\r\n        else:\r\n            l = mid + 1\r\n    return False\r\n\r\ndef solve():\r\n    n = int(input())\r\n    s = sum(map(int,input().split()))\r\n    \r\n    if is_square(s):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    for _ in range(t):\r\n        solve()\r\n",
        "rejectedCode": "import math\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    square_sum = 0\r\n\r\n    for num in map(int, input().split()):\r\n        square_sum += num * num\r\n\r\n    sqrt = int(math.sqrt(square_sum))\r\n\r\n    if sqrt * sqrt == square_sum:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "YES\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [2nd token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241577005",
            "author": "batyamaxno",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 280,
            "memory": 23400,
            "submissionTime": 1705220100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240701833",
            "author": "batyamaxno",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704617100
        },
        "acceptedCode": "a = int(input())\r\nf=[]\r\nfor i in range(a):\r\n  n = int(input())\r\n  k = [int(i) for i in input().split()]\r\n  s=0\r\n  for i in k:\r\n    s += i\r\n  if s**0.5 == int(s**0.5):\r\n    f.append(\"Yes\")\r\n  else:\r\n    f.append(\"No\")\r\nfor i in f:\r\n  print(i)",
        "rejectedCode": "n = int(input())\r\nl=[]\r\nfor m in range(n):\r\n  k=[]\r\n  a, b, c = list(input())\r\n  d, e, f = list(input())\r\n  g, h, i =  list(input())\r\n  k.append(a)\r\n  k.append(b)\r\n  k.append(c)\r\n  k.append(d)\r\n  k.append(e)\r\n  k.append(f)\r\n  k.append(g)\r\n  k.append(h)\r\n  k.append(i)\r\n  for y in range(9):\r\n    if k[y-1] == \"?\":\r\n      v=y\r\n  if v == 1:\r\n    if b==\"B\" and c==\"C\":\r\n      l.append(\"A\")\r\n    if b==\"B\" and c==\"A\":\r\n      l.append(\"C\")\r\n    if b==\"A\" and c==\"C\":\r\n      l.append(\"B\")\r\n    if b==\"A\" and c==\"B\":\r\n      l.append(\"C\")\r\n    if b==\"C\" and c==\"A\":\r\n      l.append(\"B\")\r\n    if b==\"C\" and c==\"B\":\r\n      l.append(\"A\")\r\n  if v == 2:\r\n    if a==\"B\" and c==\"C\":\r\n      l.append(\"A\")\r\n    if a==\"B\" and c==\"A\":\r\n      l.append(\"C\")\r\n    if a==\"A\" and c==\"C\":\r\n      l.append(\"B\")\r\n    if a==\"A\" and c==\"B\":\r\n      l.append(\"C\")\r\n    if a==\"C\" and c==\"A\":\r\n      l.append(\"B\")\r\n    if a==\"C\" and c==\"B\":\r\n      l.append(\"A\")\r\n  if v == 3:\r\n    if b==\"B\" and a==\"C\":\r\n      l.append(\"A\")\r\n    if b==\"B\" and a==\"A\":\r\n      l.append(\"C\")\r\n    if b==\"A\" and a==\"C\":\r\n      l.append(\"B\")\r\n    if b==\"A\" and a==\"B\":\r\n      l.append(\"C\")\r\n    if b==\"C\" and a==\"A\":\r\n      l.append(\"B\")\r\n    if b==\"C\" and a==\"B\":\r\n      l.append(\"A\")\r\n  if v == 4:\r\n    if e==\"B\" and f==\"C\":\r\n      l.append(\"A\")\r\n    if e==\"B\" and f==\"A\":\r\n      l.append(\"C\")\r\n    if e==\"A\" and f==\"C\":\r\n      l.append(\"B\")\r\n    if e==\"A\" and f==\"B\":\r\n      l.append(\"C\")\r\n    if e==\"C\" and f==\"A\":\r\n      l.append(\"B\")\r\n    if e==\"C\" and f==\"B\":\r\n      l.append(\"A\")\r\n  if v == 5:\r\n    if d==\"B\" and f==\"C\":\r\n      l.append(\"A\")\r\n    if d==\"B\" and f==\"A\":\r\n      l.append(\"C\")\r\n    if d==\"A\" and f==\"C\":\r\n      l.append(\"B\")\r\n    if d==\"A\" and f==\"B\":\r\n      l.append(\"C\")\r\n    if d==\"C\" and f==\"A\":\r\n      l.append(\"B\")\r\n    if d==\"C\" and f==\"B\":\r\n      l.append(\"A\")\r\n  if v == 6:\r\n    if e==\"B\" and d==\"C\":\r\n      l.append(\"A\")\r\n    if e==\"B\" and d==\"A\":\r\n      l.append(\"C\")\r\n    if e==\"A\" and d==\"C\":\r\n      l.append(\"B\")\r\n    if e==\"A\" and d==\"B\":\r\n      l.append(\"C\")\r\n    if e==\"C\" and d==\"A\":\r\n      l.append(\"B\")\r\n    if e==\"C\" and d==\"B\":\r\n      l.append(\"A\")\r\n  if v == 7:\r\n    if h==\"B\" and i==\"C\":\r\n      l.append(\"A\")\r\n    if h==\"B\" and i==\"A\":\r\n      l.append(\"C\")\r\n    if h==\"A\" and i==\"C\":\r\n      l.append(\"B\")\r\n    if h==\"A\" and i==\"B\":\r\n      l.append(\"C\")\r\n    if h==\"C\" and i==\"A\":\r\n      l.append(\"B\")\r\n    if h==\"C\" and i==\"B\":\r\n      l.append(\"A\")\r\n  if v == 8:\r\n    if g==\"B\" and i==\"C\":\r\n      l.append(\"A\")\r\n    if g==\"B\" and i==\"A\":\r\n      l.append(\"C\")\r\n    if g==\"A\" and i==\"C\":\r\n      l.append(\"B\")\r\n    if g==\"A\" and i==\"B\":\r\n      l.append(\"C\")\r\n    if g==\"C\" and i==\"A\":\r\n      l.append(\"B\")\r\n    if g==\"C\" and i==\"B\":\r\n      l.append(\"A\")\r\n  if v == 9:\r\n    if h==\"B\" and g==\"C\":\r\n      l.append(\"A\")\r\n    if h==\"B\" and g==\"A\":\r\n      l.append(\"C\")\r\n    if h==\"A\" and g==\"C\":\r\n      l.append(\"B\")\r\n    if h==\"A\" and g==\"B\":\r\n      l.append(\"C\")\r\n    if h==\"C\" and g==\"A\":\r\n      l.append(\"B\")\r\n    if h==\"C\" and g==\"B\":\r\n      l.append(\"A\")\r\n\r\n\r\nfor i in l:\r\n  print(i)",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 9th words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244827583",
            "author": "deenium",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 467,
            "memory": 19700,
            "submissionTime": 1707035040
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244826557",
            "author": "deenium",
            "lang": "Python 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1707034440
        },
        "acceptedCode": "p = int(input())\r\nt = p\r\nque = []\r\n\r\nfor i in range(t):\r\n    m = int(input())\r\n    n = [int(x) for x in input().split(\" \")]\r\n    que.append(n)\r\n\r\nfor i in range(t):\r\n    summ = 0\r\n    for num in que[i]:\r\n        summ += num\r\n\r\n    l = 1\r\n    r = summ\r\n    while l < r:\r\n        mid = int((r + l) / 2)\r\n        if mid * mid == summ:\r\n            summ = 0\r\n            print(\"YES\")\r\n            break\r\n        elif mid * mid < summ:\r\n            l = mid + 1\r\n        else:\r\n            r = mid\r\n\r\n    if l == r and l * l == summ:\r\n        summ = 0\r\n        print(\"YES\")\r\n        continue\r\n    if summ:\r\n        print(\"NO\")",
        "rejectedCode": "t = int(input())\r\nque = []\r\n\r\nfor i in range(t):\r\n    m = int(input())\r\n    n = [int(x) for x in input().split(\" \")]\r\n    que.append(n)\r\n\r\nfor i in range(t):\r\n    summ = 0\r\n    for num in que[i]:\r\n        summ += num\r\n\r\n    l = 1\r\n    r = summ\r\n    while l < r:\r\n        mid = int((r + l) / 2)\r\n        if mid * mid == summ:\r\n            summ = 0\r\n            print(\"YES\")\r\n            break\r\n        elif mid * mid < summ:\r\n            l = mid + 1\r\n        else:\r\n            r = mid\r\n\r\n    if l == r and l * l == summ:\r\n        summ = 0\r\n        print(\"YES\")\r\n        continue\r\n    if summ:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244779762",
            "author": "Jiunhaoj",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1707007740
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243814539",
            "author": "Jiunhaoj",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 218,
            "memory": 7900,
            "submissionTime": 1706447340
        },
        "acceptedCode": "for s in[*open(0)][1:]:\r\n    a, b, c = map(int, s.split())\r\n    print(a^b^c)",
        "rejectedCode": "for t in range(int(input())):\r\n    cur_sum = sum(map(int, input().split()))\r\n    if int(cur_sum **.5) ** 2 < cur_sum:\r\n        print(\"No\")\r\n    else:\r\n        print(\"Yes\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "No\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [8th token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244573543",
            "author": "sulya",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 30200,
            "submissionTime": 1706872680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244572073",
            "author": "sulya",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706872140
        },
        "acceptedCode": "n = int(input())\r\nfor i in range(n):\r\n    a = int(input())\r\n    m = list(map(int,input().split()))\r\n    if sum(m)**0.5 % 1 == 0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "n = int(input())\r\nfor i in range(n):\r\n    a = input()\r\n    b = input()\r\n    c = input()\r\n    \r\n  \r\n    if \"?\" in a:\r\n        if \"A\" not in a:\r\n            print(\"A\")\r\n        elif \"B\" not in b:\r\n            print(\"B\")\r\n        else:\r\n            print(\"C\")\r\n                \r\n    if \"?\" in b:\r\n        if \"A\" not in a:\r\n            print(\"A\")\r\n        elif \"B\" not in b:\r\n            print(\"B\")\r\n        else:\r\n            print(\"C\")\r\n            \r\n    if \"?\" in c:\r\n        if \"A\" not in a:\r\n            print(\"A\")\r\n        elif \"B\" not in b:\r\n            print(\"B\")\r\n        else:\r\n            print(\"C\")\r\n            ",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "C\r\nB\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244703191",
            "author": "yllo",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1706950680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244702821",
            "author": "yllo",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1706950500
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    a, b, c = map(int, input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    a, b, c = map(int, input().split())\r\n    a1 = a if a != b else c\r\n    b1 = b if b != c else a\r\n    c1 = c if c != a else b\r\n    print(a1 if a1 != b1 and a1 != c1 else b1 if b1 != c1 else c1)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n4\r\n5\r\n7\r\n9\r\n3\r\n2\r\n5\r\n7\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '4'\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "244697292",
            "author": "Gnanasri005",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1949,
            "memory": 60800,
            "submissionTime": 1706947920
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "244696728",
            "author": "Gnanasri005",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706947680
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\n\r\ndef query_count(index):\r\n    result = 0\r\n    j = index\r\n    while index > 0:\r\n        result += tree[index]\r\n        index -= (index & -index)\r\n    while j <= n:\r\n        tree[j] += 1\r\n        j += (j & -j)\r\n    return result\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    queries = [list(map(int, input().split())) for _ in range(n)]\r\n    queries.sort()\r\n    position_dict = {}\r\n    positions = []\r\n    \r\n    for a, b in sorted(queries, key=lambda a: a[1]):\r\n        position_dict[b] = len(position_dict) + 1\r\n    \r\n    for a, b in queries:\r\n        positions.append(position_dict[b])\r\n\r\n    positions += [0]\r\n    positions.reverse()\r\n    tree = [0] * (n + 1)\r\n    result_sum = 0\r\n\r\n    for i in range(1, n + 1):\r\n        result_sum += query_count(positions[i])\r\n\r\n    print(result_sum)\r\n",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    ans = 0\r\n    mp = {}\r\n    v = []\r\n    \r\n    for _ in range(n):\r\n        a, b = map(int, input().split())\r\n        mp[a] = b\r\n        v.append(b)\r\n\r\n    v.sort()\r\n\r\n    for _, value in mp.items():\r\n        pos = v.index(value)\r\n        ans += pos\r\n        v.pop(pos)\r\n\r\n    print(ans)\r\n",
        "failedTestCase": {
            "input": "5\r\n2\r\n2 3\r\n1 4\r\n6\r\n2 6\r\n3 9\r\n4 5\r\n1 8\r\n7 10\r\n-2 100\r\n4\r\n-10 10\r\n-5 5\r\n-12 12\r\n-13 13\r\n5\r\n-4 9\r\n-2 5\r\n3 4\r\n6 7\r\n8 10\r\n4\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n",
            "output": "0\r\n3\r\n1\r\n4\r\n0\r\n",
            "expectedOutput": "1\r\n9\r\n6\r\n4\r\n0\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '0'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244669832",
            "author": "arnob_2024",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706935560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244669484",
            "author": "arnob_2024",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1706935380
        },
        "acceptedCode": "user = int(input())\r\nfor i in range(user):\r\n  count = 0\r\n  number = input()\r\n  number = number.split(\" \")\r\n  if number[0]!=number[1] and number[0]!=number[2]:\r\n    print(number[0])\r\n  elif number[1]!=number[0] and number[1]!=number[2]:\r\n    print(number[1]) \r\n  else:\r\n    print(number[2])  \r\n",
        "rejectedCode": "user = int(input())\r\nfor i in range(user):\r\n  count = 0\r\n  number = input()\r\n  number = number.split(\" \")\r\n  if number[0]!=number[1] and number[0]!=number[2]:\r\n    print(number[0])\r\n  else:\r\n    print(number[1])  \r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n5\r\n7\r\n0\r\n6\r\n8\r\n5\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 3rd numbers differ - expected: '6', found: '5'\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244656508",
            "author": "ike-erdman",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706929080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244656406",
            "author": "ike-erdman",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1706929020
        },
        "acceptedCode": "n=int(input())\r\nfor i in range(n):\r\n    nums=list(map(int,input().split()))\r\n    t=0\r\n    for num in nums:\r\n        t^=num\r\n    print(t)",
        "rejectedCode": "n=int(input())\r\nfor i in range(n):\r\n    nums=list(map(int,input().split())\r\n    t=0\r\n    for num in nums:\r\n        t^=num\r\n    print(t)",
        "failedTestCase": null,
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244626431",
            "author": "sherwyn11",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 1400,
            "submissionTime": 1706907600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244626392",
            "author": "sherwyn11",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706907540
        },
        "acceptedCode": "n = int(input())\n\nfor _ in range(n):\n    _ = input()\n    s = input()\n    o = \"\"\n    i=0\n    while i < len(s):\n        if i+3>=len(s) or i+2 >=len(s):\n            o+= s[i:]\n            i=len(s)\n        elif i+3<len(s) and s[i+3] in ['a', 'e']:\n            o += s[i:i+2] + '.'\n            i+= 2\n        else:\n            o += s[i:i+3]+'.'\n            i += 3\n        \n    print(o)\n",
        "rejectedCode": "n = int(input())\n\nfor _ in range(n):\n    _ = input()\n    s = input()\n    o = \"\"\n    i=0\n    while i < len(s):\n        if i+3>=len(s) or i+2 >=len(s):\n            o+= s[i:]\n            i=len(s)\n        elif i+3<len(s) and s[i+3] in ['a', 'e']:\n            o += s[i:i+2] + '.'\n            i+= 2\n        else:\n            o += s[i:i+3]+'.'\n            i += 3\n        \nprint(o)\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "da.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'da.bab.ba.ba.bab.bab.ba.bab.ba'\r\n"
        },
        "errorLine": 19,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244616293",
            "author": "booleancub3",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 249,
            "memory": 32200,
            "submissionTime": 1706893320
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244615543",
            "author": "booleancub3",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33700,
            "submissionTime": 1706892600
        },
        "acceptedCode": "import sys\r\n\r\ninput = sys.stdin.readline\r\nprint = lambda *args: sys.stdout.write(\" \".join(map(str, args)) + \"\\n\")\r\n\r\ntc = int(input())\r\nwhile tc:\r\n    tc -= 1\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    l = [-l[i] if i&1 else l[i] for i in range(n)]\r\n    psum = [0]\r\n    for i in range(n): psum.append(psum[i]+l[i])\r\n    print(\"YES\" if len(set(psum)) < len(psum) else \"NO\")",
        "rejectedCode": "tc = int(input())\r\nwhile tc:\r\n    tc -= 1\r\n    n = int(input())\r\n    l = list(map(int, input().split()))\r\n    l = [-l[i] if i&1 else l[i] for i in range(n)]\r\n    psum = [0]\r\n    for i in range(n): psum.append(psum[i]+l[i])\r\n    print(\"YES\" if len(set(psum)) < len(psum) else \"NO\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244615978",
            "author": "astafir",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 264,
            "memory": 11300,
            "submissionTime": 1706893020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244612754",
            "author": "astafir",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 2700,
            "submissionTime": 1706890320
        },
        "acceptedCode": "n = int(input())\r\nfor _ in range(n):\r\n    v = int(input())\r\n    s = input()\r\n    cons = ['b', 'c', 'd']\r\n    vow = ['a', 'e']\r\n    for i in range(v):\r\n        if i !=0 and s[i] in cons and i < v-1 and s[i+1] in vow :\r\n            print('.', end='')\r\n        print(s[i], end='')\r\n    print()\r\n",
        "rejectedCode": "import sys\r\nsys.stdin = open(\"input.txt\", \"r\")\r\nn = int(input())\r\nfor _ in range(n):\r\n    v = int(input())\r\n    s = input()\r\n    new_s = ''\r\n    cons = ['b', 'c', 'd']\r\n    vow = ['a', 'e']\r\n    while v > 1:\r\n        if (v == len(s) and s[v-1] in cons) or s[v-1] in vow:\r\n            new_s += s[v-1]\r\n            v -= 1\r\n        elif s[v-1] in cons and v >= 2:\r\n            new_s += s[v-1] + '.' + s[v-2]\r\n            v -= 2\r\n        else:\r\n            new_s += s[v - 1]\r\n            v -= 1\r\n    new_s += s[0]\r\n    print(new_s[::-1])",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244582388",
            "author": "sreya-majumder",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706875980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244581835",
            "author": "sreya-majumder",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706875740
        },
        "acceptedCode": "t = int(input())\r\n\r\nfor j in range(t):\r\n    l = list(map(int,input().split()))\r\n    for i in l:\r\n        if l.count(i)==1:\r\n            print(i)\r\n            break\r\n",
        "rejectedCode": "t = int(input())\r\nl = list(map(int,input().split()))\r\nfor i in l:\r\n    if l.count(i)==1:\r\n        print(i)\r\n        break\r\n        ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10], but output contains 1 elements\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244570568",
            "author": "tsar_lewin",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 7800,
            "submissionTime": 1706871600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244569265",
            "author": "tsar_lewin",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 2600,
            "submissionTime": 1706871060
        },
        "acceptedCode": "f = int(input())\r\nfor num in range(f):\r\n  length = int(input())\r\n  word = list(input())\r\n  position = 1\r\n  new_word = []\r\n  carryOn = 0\r\n  while carryOn == 0:\r\n    if position == length-1:\r\n      carryOn = 2\r\n    elif position == length-2:\r\n      carryOn = 3\r\n    else:\r\n      if word[-position] == \"a\" or word[-position] == \"e\":\r\n        new_word.append(word[-position])\r\n        new_word.append(word[-position-1])\r\n        new_word.append(\".\")\r\n        position += 2\r\n        \r\n      else:\r\n        new_word.append(word[-position])\r\n        new_word.append(word[-position-1])\r\n        new_word.append(word[-position-2])\r\n        new_word.append(\".\")\r\n        position += 3\r\n  if carryOn == 2:\r\n    new_word.append(word[-position])\r\n    new_word.append(word[-position-1])\r\n  else:\r\n    new_word.append(word[-position])\r\n    new_word.append(word[-position-1])\r\n    new_word.append(word[-position-2])\r\n  new_word.reverse()\r\n  print(\"\".join(new_word))",
        "rejectedCode": "f = int(input())\r\nfor num in range(f):\r\n  length = int(input())\r\n  word = list(input())\r\n  position = 1\r\n  new_word = []\r\n  carryOn = 0\r\n  while carryOn == 0:\r\n    if position == length-1:\r\n      carryOn = 2\r\n    elif position == length-2:\r\n      carryOn = 3\r\n    else:\r\n      if word[-position] == \"a\" or word[-position] == \"e\":\r\n        new_word.insert(0, word[-position])\r\n        new_word.insert(0, word[-position-1])\r\n        new_word.insert(0,\".\")\r\n        position += 2\r\n        \r\n      else:\r\n        new_word.insert(0, word[-position])\r\n        new_word.insert(0, word[-position-1])\r\n        new_word.insert(0, word[-position-2])\r\n        new_word.insert(0,\".\")\r\n        position += 3\r\n  if carryOn == 2:\r\n    new_word.insert(0, word[-position])\r\n    new_word.insert(0, word[-position-1])\r\n  else:\r\n    new_word.insert(0, word[-position])\r\n    new_word.insert(0, word[-position-1])\r\n    new_word.insert(0, word[-position-2])\r\n  print(\"\".join(new_word))",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 15,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244560267",
            "author": "Abdelrahman_0305",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 234,
            "memory": 17100,
            "submissionTime": 1706867280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244559757",
            "author": "Abdelrahman_0305",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706867100
        },
        "acceptedCode": "from itertools import chain\r\nfor _ in range(int(input())):\r\n    a = int(input())\r\n    b = list(input())\r\n    i = 0\r\n    consonants = ['b', 'c', 'd']\r\n    vowels = ['a', 'e']\r\n    ans = []\r\n    while i < len(b):\r\n        if i == len(b)-3:\r\n            ans.append(b[i:])\r\n            break\r\n        elif len(b) == 2 or len(b) == 3:\r\n            ans.append(b)\r\n            break\r\n        \r\n        if i == len(b)-2:\r\n            ans.append(b[i:])\r\n            break\r\n        \r\n        elif len(b) == 4:\r\n            ans.append(b[:2])\r\n            ans.append('.')\r\n            ans.append(b[2:])\r\n            break\r\n        \r\n        if b[i] in consonants and b[i+1] in vowels and b[i+2] in consonants and b[i+3] in vowels:\r\n            ans.append(b[i:i+2])\r\n            ans.append('.')\r\n            i += 2\r\n        elif b[i] in consonants and b[i+1] in vowels and b[i+2] in consonants and b[i+3] not in vowels:\r\n            ans.append(b[i:i+3])\r\n            ans.append('.')\r\n            i += 3\r\n        else:\r\n            i += 1\r\n    print(''.join(chain.from_iterable(ans)))             ",
        "rejectedCode": "from itertools import chain\r\nfor _ in range(int(input())):\r\n    a = int(input())\r\n    b = list(input())\r\n    i = 0\r\n    consonants = ['b', 'c', 'd']\r\n    vowels = ['a', 'e']\r\n    ans = []\r\n    while i < len(b):\r\n        if i+2 < len(b) and b[i] in consonants and b[i+1] in vowels and b[i+2] in consonants:\r\n            ans.append(b[i:i+3])\r\n            ans.append('.')\r\n            i += 3\r\n        elif i+1 < len(b) and b[i] in consonants and b[i+1] in vowels:\r\n            ans.append(b[i:i+2])\r\n            ans.append('.')\r\n            i += 2\r\n        else:\r\n            i += 1\r\n    ans.pop()\r\n    print(''.join(chain.from_iterable(ans)))             ",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "bac.bab\r\nbab\r\ndad.dec.bed.dad\r\ndac\r\ndac.dac\r\ndab.bab.bab.bab.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'bac.bab'\r\n"
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244550929",
            "author": "sh.4teen",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 499,
            "memory": 27600,
            "submissionTime": 1706863380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244538412",
            "author": "sh.4teen",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 11600,
            "submissionTime": 1706857620
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    p = [0]\r\n    f = False\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            b = p[-1] - a[i]\r\n        else:\r\n            b = p[-1] + a[i]\r\n        p.append(b)\r\n    p.sort()\r\n    f = False\r\n    for i in range(len(p)-1):\r\n        if p[i] == p[i+1]:\r\n            f = True\r\n            break\r\n    if f:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    p = ''\r\n    i = 0\r\n    while i < n:\r\n        j = n - 1 - i\r\n        if s[j] != 'a' and s[j] != 'e':\r\n            p += s[j]\r\n            i += 1\r\n        else:\r\n            p += s[j]\r\n            p += s[j - 1]\r\n            p += '.'\r\n            i += 2\r\n    print(p[len(p)-2::-1])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244518205",
            "author": "Vaishnavi_18",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706846160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244517746",
            "author": "Vaishnavi_18",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706845860
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    A=str(input())\r\n    B=str(input())\r\n    C=str(input())\r\n    if '?' in A:\r\n        if 'A' in A and 'B' in A:\r\n            print('C')\r\n            \r\n        elif 'B' in A and 'C' in A:\r\n            print('A')\r\n           \r\n        else:\r\n            print('B')\r\n            \r\n    elif '?' in B:\r\n        if 'A' in B and 'B' in B:\r\n            print('C')\r\n           \r\n        elif 'B' in B and 'C' in B:\r\n            print('A')\r\n            \r\n        else:\r\n            print('B')\r\n           \r\n    elif '?' in C:\r\n        if 'A' in C and 'B' in C:\r\n            print('C')\r\n            \r\n        elif 'B' in C and 'C' in C:\r\n            print('A')\r\n           \r\n        else:\r\n            print('B')\r\n           ",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    A=str(input())\r\n    B=str(input())\r\n    C=str(input())\r\n    if '?' in A:\r\n        if 'A' in A and 'B' in A:\r\n            print('C')\r\n            break\r\n        elif 'B' in A and 'C' in A:\r\n            print('A')\r\n            break\r\n        else:\r\n            print('B')\r\n            break\r\n    if '?' in B:\r\n        if 'A' in B and 'B' in B:\r\n            print('C')\r\n            break\r\n        elif 'B' in B and 'C' in B:\r\n            print('A')\r\n            break\r\n        else:\r\n            print('B')\r\n            break\r\n    if '?' in C:\r\n        if 'A' in C and 'B' in C:\r\n            print('C')\r\n            break\r\n        elif 'B' in C and 'C' in C:\r\n            print('A')\r\n            break\r\n        else:\r\n            print('B')\r\n            break\r\n    ",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244487268",
            "author": "Cyclonestopper9000",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1706824080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244486347",
            "author": "Cyclonestopper9000",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706823120
        },
        "acceptedCode": "T=int(input())\r\nfor i in range(T):\r\n    R=int(input())\r\n    sum=0\r\n    K=list(map(int,input().split()))\r\n    for i in range(R):\r\n        sum+=K[i]\r\n    if (sum**(1/2))%1==0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "T=int(input())\r\nfor i in range(T):\r\n    legittop=[\"A\",\"B\",\"C\"]\r\n    legitmiddle=[\"C\",\"A\",\"B\"]\r\n    legitbottom=[\"B\",\"C\",\"A\"]\r\n    legittotal=legittop+legitmiddle+legitbottom\r\n    top=input().split()\r\n    middle=input().split()\r\n    botom=input().split()\r\n    total=top+middle+bottom\r\n    for i in range(9):\r\n        if total[i]!=legittotal[i]:\r\n            print(legittotal[i])\r\n        ",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244328489",
            "author": "albo23",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 1600,
            "submissionTime": 1706721600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "244325261",
            "author": "albo23",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 3,
            "runTime": 233,
            "memory": 8400,
            "submissionTime": 1706717940
        },
        "acceptedCode": "def fn(w):\n\n    if len(w) == 1:\n        return w\n\n    h = (len(w)) // 2\n\n    left = fn(w[:h])\n    right = fn(w[h:])\n\n    return merge(left, right)\n\n\ndef merge(a, b):\n\n    last = a[len(a)-1]\n    first = b[0]\n\n    if len(a) > 1 and last not in g and first in g:\n        if a[len(a)-2] in g:\n            return a[:len(a)-1] + \".\" + last + b\n\n    if len(b) > 1 and last in g and first not in g:\n        if b[1] in g:\n            return a + \".\" + b\n\n    if last not in g and first not in g:\n        return a + \".\" + b\n\n    return a + b\n\n\nif __name__ == \"__main__\":\n\n    t = int(input())\n\n    g = {\n        'a': ord('a'),\n        'e': ord('e'),\n        'i': ord('i'),\n        'o': ord('o'),\n        'u': ord('u')\n    }\n    for _ in range(t):\n        n = int(input())\n        w = input()\n        print(fn(w))\n\n    # result = result.split(\".\")\n    # repl = {}\n    #\n    # for i, v in enumerate(result):\n    #     if len(v) > 3:\n    #         repl[i] = fn(v)\n    #\n    # for i, v in repl.items():\n    #     result[i] = v\n    #\n    # print(\".\".join(result))\n",
        "rejectedCode": "def fn(w):\n\n    if len(w) == 1:\n        return w\n\n    h = (len(w))// 2\n\n    left = fn(w[:h])\n    right = fn(w[h:])\n\n    return merge(left, right)\n\ndef merge(a, b):\n\n    last = a[len(a)-1]\n    first = b[0]\n    \n    if len(b) > 1 and last in g and first not in g:\n        if b[1] in g:\n            return a + \".\" + b\n\n    if last not in g and first not in g:\n        return a + \".\" + b\n    \n    return a + b\n\n\nif __name__ == \"__main__\":\n\n    t = int(input())\n\n    g = {\n        'a':ord('a'),\n        'e':ord('e'),\n        'i':ord('i'),\n        'o':ord('o'),\n        'u':ord('u')\n    }\n\n    for _ in range(t):\n        n = int(input())\n        w = input()\n        result = fn(w)\n        \n        result = result.split(\".\")\n        repl = {}\n\n        for i, v in enumerate(result):\n            if len(v) > 3:\n                repl[i] = fn(v)\n        \n        for i, v in repl.items():\n            result[i] = v\n\n        print(\".\".join(result))\n\n\n            \n\n\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "be.de.ba.ca.cad.ca.bab.cab.de.dac.ced.da.da.ceb.ba.ca.ca.ced.ba.ca.ce.ce.ce.da.ca.be.da.bad.ba.da.be.ceb.da.bab.ba.ba.ca.ca.ceb.ba.ba.bec.be.ba.bed.cac.be.ca.de.ded.de.beb.ba.dec.be.ba.dab.da.de.dad.ce.be.be.dab.cad.ce.ca.be.ba.ba.ba.de.da.ba.be.cab.de.de.de.ca.ca.ca.ca.bab.da.ce.ca.be.ca.dac.da.dad.cec.ce.ca.ca.ba.ca.dad.de.de.ce.ba.dec.ced.ba.bac.ce.ded.ce.de.deb.ba.cad.ce.ca.ca.de.be.da.ca.bed.deb.ba.ca.be.ce.be.de.be.ba.ba.ce.dad.bed.bac.ca.ba.be.dac.ca.ca.ca.bed.be.be.ce.da.dad.deb.bac.dac.da.ba.ce.de...",
            "expectedOutput": "be.de.ba.ca.cad.ca.bab.cab.de.dac.ced.da.da.ceb.ba.ca.ca.ced.ba.ca.ce.ce.ce.da.ca.be.da.bad.ba.da.be.ceb.da.bab.ba.ba.ca.ca.ceb.ba.ba.bec.be.ba.bed.cac.be.ca.de.ded.de.beb.ba.dec.be.ba.dab.da.de.dad.ce.be.be.dab.cad.ce.ca.be.ba.ba.ba.de.da.ba.be.cab.de.de.de.ca.ca.ca.ca.bab.da.ce.ca.be.ca.dac.da.dad.cec.ce.ca.ca.ba.ca.dad.de.de.ce.ba.dec.ced.ba.bac.ce.ded.ce.de.deb.ba.cad.ce.ca.ca.de.be.da.ca.bed.deb.ba.ca.be.ce.be.de.be.ba.ba.ce.dad.bed.bac.ca.ba.be.dac.ca.ca.ca.bed.be.be.ce.da.dad.deb.bac.dac.da.ba.ce.de...",
            "CheckerComment": "wrong answer 1st words differ - expected: 'be.de.ba.ca.cad.ca.bab.cab.de....eb.be.ca.de.da.be.beb.be.beb.de', found: 'be.de.ba.ca.cad.ca.bab.cab.de....eb.be.ca.de.da.be.beb.be.beb.de'\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244427360",
            "author": "gummithaanushkareddy",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 217,
            "memory": 26200,
            "submissionTime": 1706785260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244381158",
            "author": "gummithaanushkareddy",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 108,
            "memory": 100,
            "submissionTime": 1706764980
        },
        "acceptedCode": "t=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    ar=list(map(int,input().split()))\r\n    s=flag=0\r\n    for i in ar:\r\n        s+=i\r\n    s=pow(s,0.5)\r\n    # flag=pow(s,0.5)\r\n    flag=round(s,0)\r\n    # print(s,flag)\r\n    if(flag!=s):\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")",
        "rejectedCode": "t=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    ar=list(map(int,input().split()))\r\n    s=flag=0\r\n    for i in ar:\r\n        s+=i\r\n    # print(s)\r\n    for i in range(1,s//2):\r\n        # print(i*i)\r\n        if(i*i==s):\r\n            print(\"YES\")\r\n            flag=1\r\n            break\r\n    if(flag==0):\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [16th token]\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244382266",
            "author": "dinislam_",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706765640
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244382225",
            "author": "dinislam_",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1706765580
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a, b, c = map(int, input().split())\r\n    print(a ^ b ^ c)",
        "rejectedCode": "for _ in range(int(input())):\r\na, b, c = map(int, input().split())\r\nprint(a ^ b ^ c)",
        "failedTestCase": null,
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244346166",
            "author": "Personal6502",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706744160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244346092",
            "author": "Personal6502",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706744100
        },
        "acceptedCode": "import sys\r\nfor _ in range(int(sys.stdin.readline()) * 3):\r\n    s = sys.stdin.readline().strip()\r\n    if '?' in s:\r\n        if not s.count('A'):\r\n            sys.stdout.write('A\\n')\r\n        else:\r\n            sys.stdout.write('B\\n' if not s.count('B') else 'C\\n')",
        "rejectedCode": "import sys\r\nfor _ in range(int(sys.stdin.readline())):\r\n    s = sys.stdin.readline().strip()\r\n    if '?' in s:\r\n        if not s.count('A'):\r\n            sys.stdout.write('A\\n')\r\n        else:\r\n            sys.stdout.write('B\\n' if not s.count('B') else 'C\\n')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244319543",
            "author": "Bin_Ladin_Usama",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 30800,
            "submissionTime": 1706713920
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244315532",
            "author": "Bin_Ladin_Usama",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 405,
            "memory": 10000,
            "submissionTime": 1706711520
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    lst = list(map(int, input().split()))\r\n    pre = [0]\r\n    for i in range(n):\r\n        pre.append(pre[-1]+lst[i]*(-1)**i)\r\n    \r\n    pre.sort()\r\n    ans = \"NO\"\r\n    for i in range(n):\r\n        if pre[i]==pre[i+1]:\r\n            ans = \"YES\"\r\n        \r\n    print(ans)",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    lst = list(map(int, input().split()))\r\n    if n==1:\r\n        print(\"NO\")\r\n    elif n==2:\r\n        if lst[0]==lst[1]:\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n    else:\r\n        flg1 = False\r\n        for i in range(n-1):\r\n            if lst[i] == lst[i+1]:\r\n                flg1 = True\r\n                break\r\n    \r\n        odd = [lst[1]]\r\n        even = [lst[0]]\r\n        for i in range(2, n):\r\n            if i&1:\r\n                odd.append(lst[i] + odd[-1])\r\n            else:\r\n                even.append(lst[i] + even[-1])\r\n\r\n        flg2 = False\r\n        if len(odd)<len(even):\r\n            for i in range(len(odd)):\r\n                if i==0:\r\n                    if odd[i]==even[i+1]:\r\n                        flg2 = True\r\n                        break\r\n                else:\r\n                    if odd[i]==even[i-1] or odd[i]==even[i+1]:\r\n                        flg2 = True\r\n                        break\r\n    \r\n        elif len(even)<len(odd):\r\n            for i in range(len(even)):\r\n                if i==0:\r\n                    if even[i]==odd[i+1]:\r\n                        flg2 = True\r\n                        break\r\n                else:\r\n                    if even[i]==odd[i-1] or even[i]==odd[i+1]:\r\n                        flg2 = True\r\n                        break\r\n        else:\r\n            for i in range(len(even)):\r\n                if i==0:\r\n                    if even[i]==odd[i+1]:\r\n                        flg2 = True\r\n                        break\r\n                elif i==len(even)-1:\r\n                    if even[i]==odd[i-1]:\r\n                        flg2 = True\r\n                        break\r\n                else:\r\n                    if even[i]==odd[i-1] or even[i]==odd[i+1]:\r\n                        flg2 = True\r\n                        break\r\n        \r\n        \r\n        if flg1 or flg2:\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [18th token]\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244293231",
            "author": "sandeepreddy2205",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706701020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244292952",
            "author": "sandeepreddy2205",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706700900
        },
        "acceptedCode": "#from math import sqrt\r\nfor _ in range(int(input())):\r\n    for i in range(3):\r\n        l=['A','B','C']\r\n        for x in input():\r\n                if x in l:\r\n                    l.remove(x)\r\n        if len(l)==1:\r\n            print(l[0])\r\n            \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n            \r\n        \r\n",
        "rejectedCode": "#from math import sqrt\r\nfor _ in range(int(input())):\r\n    for i in range(3):\r\n        l=['A','B','C']\r\n        for x in input():\r\n                if x in l:\r\n                    l.remove(x)\r\n        if len(l)==1:\r\n            print(l[0])\r\n            break\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n            \r\n        \r\n",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244262217",
            "author": "intetion",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706688000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244261899",
            "author": "intetion",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706687880
        },
        "acceptedCode": "n = int(input())\r\ndef f(x):\r\n    return a.count(x) == 1\r\nfor i in range(n):\r\n    a = list(map(int, input().split()))\r\n    f(a)\r\n    print(next(filter(f,a)))\r\n",
        "rejectedCode": "n = input()\r\na = list(map(int, input().split()))\r\ndef f(x):\r\n    return a.count(x) == 1\r\n    print(next(filter(f,a)))\r\nfor i in range(n):\r\n    arg = input()\r\n    my_function(f)\r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244244530",
            "author": "21wh1a05g0",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 26200,
            "submissionTime": 1706680140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244038791",
            "author": "21wh1a05g0",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1706592900
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = sum(list(map(int, input().split(' '))))\r\n    print('NO' if (a**.5) % 1 else 'YES')\r\n\r\n",
        "rejectedCode": "for _ in[0]*int(input()):\r\nfor _ in'***':print(({*'ABC'}-{*input()}or['']).pop())",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244058087",
            "author": "qi4820",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706602200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "244057810",
            "author": "qi4820",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706602020
        },
        "acceptedCode": "n=input()\r\nn=int(n)\r\ni=0\r\nwhile i<n:\r\n    i=i+1\r\n    number=input()\r\n    number=number.split()\r\n    a,b,c=int(number[0]),int (number[1]),int(number[2])\r\n    if a==b and a!=c:\r\n        print(c)\r\n    elif a==c and a!=b:\r\n        print(b)\r\n    elif b==c and b!=a:\r\n        print(a)",
        "rejectedCode": "n=input()\r\nn=int(n)\r\ni=0\r\nwhile i<n:\r\n    i=i+1\r\n    number=input()\r\n    number=number.split()\r\n    a,b,c=int(number[0]),int (number[1]),int(number[2])\r\n    if a==b and a!=c:\r\n        print(c)\r\n    elif a==c and a!=b:\r\n        print(b)\r\n    elif b==c and b!=a:\r\n        print(b)\r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "2\r\n3\r\n6\r\n8\r\n0\r\n6\r\n8\r\n7\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '2'\r\n"
        },
        "errorLine": 14,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244052211",
            "author": "karpfin",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1706599620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "244051799",
            "author": "karpfin",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2700,
            "submissionTime": 1706599440
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    for j in range(3):\r\n        s = input()\r\n        if '?' in s:\r\n            if 'A' in s and 'B' in s: print('C')\r\n            elif 'A' in s and 'C' in s: print('B')\r\n            else: print('A')\r\n",
        "rejectedCode": "t = int(input().split())\r\nfor i in rsnge(t):\r\n    s = input()\r\n    if '?' in s:\r\n        if 'A' in s and 'B' in s: print('C')\r\n        elif 'A' in s and 'C' in s: print('B')\r\n        else: print('A')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244030180",
            "author": "sarthakraoot",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 140,
            "memory": 20300,
            "submissionTime": 1706588460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "244028761",
            "author": "sarthakraoot",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706587740
        },
        "acceptedCode": "import math\r\na = int(input())\r\nd = []\r\nfor i in range(a):\r\n    b = int(input())\r\n    c = 0\r\n    e = input()\r\n    f = e.split()\r\n    for i in f:\r\n        c = c + int(i)\r\n    d.append(c)\r\nfor i in d:\r\n    if math.sqrt(i)%1==0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "import math\r\na = int(input())\r\nd = []\r\nfor i in range(a):\r\n    b = int(input())\r\n    c = 0\r\n    for i in range(b):\r\n        e = int(input())\r\n        c = c+e\r\n    d.append(c)\r\nfor i in d:\r\n    if math.sqrt(i)%1==0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n        ",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "244028037",
            "author": "keduolimm",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 3900,
            "memory": 122500,
            "submissionTime": 1706587380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "244018673",
            "author": "keduolimm",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 32000,
            "submissionTime": 1706583060
        },
        "acceptedCode": "t = int(input())\r\n\r\nclass Bit(object):\r\n\r\n    def __init__(self, n):\r\n        self.n = n\r\n        self.arr = [0] * (n + 1)\r\n    def query(self, p) -> int:\r\n        r = 0\r\n        while p > 0:\r\n            r += self.arr[p]\r\n            p -= p & -p\r\n        return r\r\n    def update(self, p, d) -> None:\r\n        while p <= self.n:\r\n            self.arr[p] += d\r\n            p += p & -p\r\n\r\n    def expr(self):\r\n        print (self.arr)\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    ops = []\r\n\r\n    ys = []\r\n    for i in range(n):\r\n        l, r = list(map(int, input().split()))\r\n        ops.append((0, l, r))\r\n        ops.append((1, r, 0))\r\n        ys.append(l)\r\n        ys.append(r)\r\n\r\n    ops.sort(key=lambda x: (x[1], x[0]))\r\n\r\n    # ys = list(set(ys))\r\n    ys.sort(key=lambda x: x)\r\n\r\n    m = len(ys)\r\n    hp = {}\r\n    for (i, k) in enumerate(ys):\r\n        hp[k] = i+1\r\n    bit = Bit(m)\r\n\r\n    # print (\"----\")\r\n\r\n    res = 0\r\n    for (c, d, er) in ops:\r\n        # id = hp[d]\r\n\r\n        if c == 0:\r\n            # print (\">>>\", hp[er])\r\n            res += bit.query(m) - bit.query(hp[er] - 1)\r\n            bit.update(hp[er], 1)\r\n        elif c == 1:\r\n            bit.update(hp[d], -1)\r\n            # hp.remove(i)\r\n            # cnt -= 1\r\n        # print (res, bit.query(m))\r\n        # print (bit.expr())\r\n    print (res)\r\n    # print('---------------')\r\n        ",
        "rejectedCode": "\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    cnt = {}\r\n    cnt[0] = -1\r\n    s1, s2 = 0, 0\r\n    ok = False\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            s2 += arr[i]\r\n        else:\r\n            s1 += arr[i]\r\n        d = s1 - s2\r\n        if d in cnt:\r\n            ok = True\r\n            break\r\n        cnt[d] = i\r\n    if ok:\r\n        print (\"YES\")\r\n    else:\r\n        print (\"NO\")\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243991988",
            "author": "lucifer_sins",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706564460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243991760",
            "author": "lucifer_sins",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1706564160
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(0,t):\r\n    s = []\r\n    a = 0\r\n    l2 = list(str(input()))\r\n    l1 = list(str(input()))\r\n    l3 = list(str(input()))\r\n    s = l1+l2+l3\r\n    for i in s:\r\n        if(s.count(i)==2):\r\n            a = i\r\n    print(a)",
        "rejectedCode": "t = int(input())\r\nfor i in range(0,t):\r\n    s = []\r\n    a = 0\r\n    l1 = list(map(str,input().split()))\r\n    l2 = list(map(str,input().split()))\r\n    l3 = list(map(str,input().split()))\r\n    s = l1+l2+l3\r\n    for i in s:\r\n        if(s.count(i)==2):\r\n            a = i\r\n    print(a)\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "0\r\n0\r\n0\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: '0'\r\n"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241536613",
            "author": "manohar_iitg",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 1500,
            "submissionTime": 1705196820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241536198",
            "author": "manohar_iitg",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 13000,
            "submissionTime": 1705196580
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=input()\r\n    s=s[::-1]\r\n    i=0\r\n    r=''\r\n    while i<n:\r\n        if s[i]=='a' or s[i]=='e':\r\n            r+=s[i:i+2]+'.'\r\n            i+=2\r\n        else:\r\n            r+=s[i:i+3]+'.'\r\n            i+=3\r\n    r=r[::-1]\r\n    r=r[1:]\r\n    print(r)",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=input()\r\n    s=s[::-1]\r\n    i=0\r\n    r=''\r\n    while i<n:\r\n        if s[i]=='a' or s[i]=='e':\r\n            r+=s[i:i+2]+'.'\r\n            i+=2\r\n        else:\r\n            r+=s[i:i+3]+'.'\r\n            i+=3\r\n    r=r[::-1]\r\n    r=r[1:]\r\n    print(r)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243939686",
            "author": "rockdam876",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706525700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243938908",
            "author": "rockdam876",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706525400
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a=input()\r\n    if a[0]==a[2]: \r\n        print(a[4])\r\n    elif a[0]==a[4]:\r\n        print(a[2])\r\n    else:\r\n        print(a[0])",
        "rejectedCode": "for _ in range(int(input())):\r\n    a=input()\r\n    if a[0]==a[2] or a[0]==a[4]:\r\n        print(a[0])\r\n    else:\r\n        print(a[4])",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "2\r\n4\r\n5\r\n8\r\n9\r\n3\r\n2\r\n7\r\n7\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '2'\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243931300",
            "author": "Cookie_ginger",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 25700,
            "submissionTime": 1706522760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243918987",
            "author": "Cookie_ginger",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706517900
        },
        "acceptedCode": "# n = int(input())\r\n# mm = []\r\n# for i in range(n):\r\n#     qm = ()\r\n#     for j in range(3):\r\n#         m = input()\r\n#         if m.find('?') != -1:\r\n#             qm = (j, m.find('?'))\r\n#         mm.append(m)\r\n#     x = qm[0]\r\n#     y1 = qm[1] + 1\r\n#     y2 = qm[1] - 1\r\n#     if y2 == -1:\r\n#         y2 = 2\r\n#     if y1 == 3:\r\n#         y1 = 0\r\n#     if mm[x][y1] + mm[x][y2] == 'AB'\\\r\n#             or mm[x][y1]+mm[x][y2] == 'BA':\r\n#         print('C')\r\n#     if mm[x][y1] + mm[x][y2] == 'CA'\\\r\n#             or mm[x][y1] + mm[x][y2] == 'AC':\r\n#         print('B')\r\n#     if mm[x][y1] + mm[x][y2] == 'BC'\\\r\n#             or mm[x][y1] + mm[x][y2] == 'CB':\r\n#         print('A')\r\n\r\n\r\n# n = int(input())\r\n#\r\n# for i in range(n):\r\n#     out = ''\r\n#     for j in range(3):\r\n#         a = input()\r\n#         a = a.replace('?', '')\r\n#         if a == 'AB' or a =='BA':\r\n#             out = 'C'\r\n#         if a == 'BC' or a =='CB':\r\n#             out = 'A'\r\n#         if a == 'AC' or a =='CA':\r\n#             out = 'B'\r\n#     print(out)\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = [int(i) for i in input().split()]\r\n    if (sum(a)**(1/2)).is_integer():\r\n        print('YES')\r\n    else:\r\n        print('NO')\r\n",
        "rejectedCode": "n = int(input())\r\n\r\nfor i in range(n):\r\n    a = int(input())\r\n    b = int(input())\r\n    c = int(input())\r\n    if a != b and b == c:\r\n        print(a)\r\n    elif b != c and c == a:\r\n        print(b)\r\n    elif c != a and a == b:\r\n        print(c)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243911872",
            "author": "shashank_231020445",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 20200,
            "submissionTime": 1706514960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243907525",
            "author": "shashank_231020445",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706513040
        },
        "acceptedCode": "import math\r\nt=int(input())\r\nfor i in range(0,t):\r\n    n=int(input())\r\n    a=input().split()\r\n    sum=0\r\n    for j in a:\r\n        sum+=int(j)\r\n    if (math.floor(math.sqrt(sum))*1.0)==math.sqrt(sum):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "import math\r\nt=int(input())\r\nfor i in range(0,t):\r\n    n=int(input())\r\n    a=input().split()\r\n    sum=0\r\n    for j in a:\r\n        sum+=int(j)\r\n    if math.ceil(sum**1/2)==int(sum**1/2):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243891499",
            "author": "ArnavSh26",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706505000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243890401",
            "author": "ArnavSh26",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706504400
        },
        "acceptedCode": "a=int(input())\r\nc=[]\r\nfor i in range(a):\r\n    b=input()\r\n    c.append(b)\r\nfor i in c:\r\n    d=i.split()\r\n    d.sort()\r\n    if d[0]==d[1]:\r\n        print(d[2])\r\n    else:\r\n        print(d[0])\r\n\r\n",
        "rejectedCode": "a=[]\r\nb=[]\r\nc=[]\r\nd=int(input())\r\n\r\nfor i in range(d):\r\n    e=int(input())\r\n    f=int(input())\r\n    g=int(input())\r\n    a.append(e)\r\n    b.append(f)\r\n    c.append(g)\r\nfor i in range(d):\r\n    if a[i]==b[i]:\r\n        print(c[i])\r\n    elif b[i]==c[i]:\r\n        print(a[i])\r\n    else:\r\n        print(b[i])\r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "243865570",
            "author": "haruk",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1232,
            "memory": 84700,
            "submissionTime": 1706492400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242703751",
            "author": "haruk",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705822500
        },
        "acceptedCode": "import bisect\r\nimport sys\r\nsys.setrecursionlimit(10000)\r\nfrom copy import *\r\nfrom functools import *\r\nfrom string import ascii_lowercase\r\nfrom heapq import heappush, heappop\r\nfrom bisect import bisect_left, bisect_right\r\nfrom collections import deque, Counter, defaultdict\r\nfrom math import inf, gcd, sqrt, ceil, floor, factorial\r\nfrom itertools import accumulate, permutations, combinations\r\n \r\ndef I():\r\n    return input()\r\ndef II():\r\n    return int(input())\r\ndef MII():\r\n    return map(int, input().split())\r\ndef LI():\r\n    return list(input().split())\r\ndef LMII():\r\n    return list(map(int, input().split()))\r\n \r\nmod = 10 ** 9 + 7\r\n \r\ndxy = [[-1, 0], [1, 0], [0, 1], [0, -1]]\r\n \r\n \r\ndef solve():\r\n    n, m = MII()\r\n    g = [[] for _ in range(n + 1)]\r\n    for _ in range(m):\r\n        u, v, w = MII()\r\n        g[u].append([v, w])\r\n        g[v].append([u, w])\r\n    s = [0] + LMII()\r\n \r\n    def dijkstra(g, start, end):\r\n        heap = []\r\n        heappush(heap, [0, start, s[start]])\r\n        d = [[inf for _ in range(1000 + 1)] for _ in range(len(g) + 1)]\r\n        d[start][s[start]] = 0\r\n        vis = set()\r\n        while heap:\r\n            dist, x, _s = heappop(heap)\r\n            if (x, _s) in vis:\r\n                continue\r\n            vis.add((x, _s))\r\n            for y, w in g[x]:\r\n                ss = min(_s, s[y])\r\n                if d[y][ss] > dist + w * _s:\r\n                    d[y][ss] = dist + w * _s\r\n                    heappush(heap, [d[y][ss], y, ss])\r\n        return min(d[end])\r\n \r\n    print(dijkstra(g, 1, n))\r\n \r\n \r\nif __name__ == '__main__':\r\n    T = II()\r\n    for _ in range(T):\r\n        solve()",
        "rejectedCode": "\r\nfor _ in range(int(input())):\r\n    a = ['.'] * 3\r\n    a[0], a[1], a[2], l = input(), input(), input(), ''\r\n    for i in range(3):\r\n        if '?' in a[i]:\r\n            if a[i].count('A') and a[i].count('B'):\r\n                l = 'C'\r\n            elif a[i].count('B') and a[i].count('C'):\r\n                l = 'A'\r\n            else :\r\n                l = 'B'\r\n    print(l)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "\r\n\r\n\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "243851002",
            "author": "muskanf0035",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1887,
            "memory": 61300,
            "submissionTime": 1706482500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "243850943",
            "author": "muskanf0035",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706482440
        },
        "acceptedCode": "import sys;input=sys.stdin.readline\r\ndef Q(i):\r\n  r=0;j=i\r\n  while i>0:r+=t[i];i-=(i&-i)\r\n  while j<=n:t[j]+=1;j+=(j&-j)\r\n  return r\r\nfor _ in range(int(input())):\r\n  n=int(input())\r\n  q=[[*map(int,input().split())]for _ in range(n)]\r\n  q.sort()\r\n  t={};d=[]\r\n  for a,b in sorted(q,key=lambda a:a[1]):t[b]=len(t)+1\r\n  for a,b in q:d.append(t[b])\r\n  d+=[0]\r\n  d.reverse()\r\n  t=[0]*(n+1)\r\n  s=0\r\n  for i in range(1,n+1):s+=Q(d[i])\r\n  print(s)",
        "rejectedCode": "import sys;input=sys.stdin.readline\r\ndef Q(i):\r\n  r=0;j=i\r\n  while i>0:r+=t[i];i-=(i&-i)\r\n  while j<=n:t[j]+=1;j+=(j&-j)\r\n  return r\r\nfor _ in range(int(input())):\r\n  n=int(input())\r\n  q=[[*map(int,input().split())]for _ in range(n)]\r\n  q.sort()\r\n  t={};d=[]\r\n  for a,b in sorted(q,key=lambda a:a[1]):t[b]=len(t)+1\r\n  for a,b in q:d.append(t[b])\r\n  d+=[0]\r\n  d.reverse()\r\n  t=[0]*(n+1)\r\n  s=0\r\n  for i in range(1,n+1):s+=Q(d[i])\r\n  print(s)",
        "failedTestCase": {
            "input": "3\r\n5 5\r\n1 2 2\r\n3 2 1\r\n2 4 5\r\n2 5 7\r\n4 5 1\r\n5 2 1 3 3\r\n5 10\r\n1 2 5\r\n1 3 5\r\n1 4 4\r\n1 5 8\r\n2 3 6\r\n2 4 3\r\n2 5 2\r\n3 4 1\r\n3 5 8\r\n4 5 2\r\n7 2 8 4 1\r\n7 10\r\n3 2 8\r\n2 1 4\r\n2 5 7\r\n2 6 4\r\n7 1 2\r\n4 3 5\r\n6 4 2\r\n6 7 1\r\n6 7 4\r\n4 5 9\r\n7 6 5 4 3 2 1\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243844338",
            "author": "navneet2311",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 311,
            "memory": 22000,
            "submissionTime": 1706475720
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243807943",
            "author": "navneet2311",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706444580
        },
        "acceptedCode": "n = int(input())\r\nanslist = []\r\nfor i in range(n) :\r\n    buckets = int(input())\r\n    bucklist = input().split()\r\n    s=0\r\n    for items in bucklist :\r\n        s = s+int(items)\r\n    if s**0.5 == int(s**0.5) :\r\n        anslist.append(\"YES\")\r\n    else:\r\n        anslist.append(\"NO\")\r\nfor items in anslist :\r\n    print(items)\r\n\r\n",
        "rejectedCode": "n = int(input())\r\nanslist = []\r\nfor i in range(n) :\r\n    list1 = input().split()\r\n    list2 = input().split()\r\n    list3 = input().split()\r\n    list4 = list1 + list2 + list3\r\n    Ac = list4.count(\"A\")\r\n    Bc = list4.count(\"B\")\r\n    Cc = list4.count(\"C\")\r\n    if Ac == 2 :\r\n        anslist.append(\"A\")\r\n    elif Bc == 2 :\r\n        anslist.append(\"B\")\r\n    else :\r\n        anslist.append(\"C\")\r\nfor items in anslist :\r\n    print(items)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "C\r\nC\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243825536",
            "author": "aakash1z",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706453760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243825306",
            "author": "aakash1z",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1706453580
        },
        "acceptedCode": "def check_different(a,b,c):\r\n    if (a==b):\r\n        print(c)\r\n    if(b==c):\r\n        print(a)\r\n    if(c==a):\r\n        print(b)\r\n\r\nn = int(input())\r\nfor i in range(n):\r\n    a,b,c = map(int,input().split())\r\n    check_different(a,b,c)",
        "rejectedCode": "def check_different(a,b,c):\r\n    if (a==b):\r\n        print(c)\r\n    if(b==c):\r\n        print(a)\r\n    if(c==a):\r\n        print(b)\r\n\r\na,b,c = map(int,input().split())\r\ncheck_different(a,b,c)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243814780",
            "author": "mohamed_nabil2005",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706447460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243814647",
            "author": "mohamed_nabil2005",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706447400
        },
        "acceptedCode": "try1=int(input())\r\nfor i in range(try1):\r\n digits=list(map(int,input().split( \" \")))\r\n if digits[0]==digits[1]:\r\n  print(digits[2])\r\n elif digits[1]==digits[2]:\r\n  print(digits[0])\r\n else:\r\n  print(digits[1])  ",
        "rejectedCode": "try1=int(input())\r\nfor i in range(try1):\r\n digits=list(map(int,input().split( \" \")))\r\n if digits[0]==digits[1]:\r\n  print(digits[2])\r\n if digits[1]==digits[2]:\r\n  print(digits[0])\r\n else:\r\n  print(digits[1])  ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n5\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 4th numbers differ - expected: '7', found: '5'\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243737625",
            "author": "cntnpp",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 139,
            "memory": 22300,
            "submissionTime": 1706415480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243737462",
            "author": "cntnpp",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1706415420
        },
        "acceptedCode": "from collections import deque\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    v = set()\r\n    v.add(\"a\")\r\n    v.add(\"e\")\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = [c for c in input()]\r\n        r = len(arr) - 1\r\n        res = deque()\r\n\r\n        while r >= 0:\r\n            if arr[r] in v:\r\n                res.appendleft(arr[r])\r\n                r -= 1\r\n                res.appendleft(arr[r])\r\n            else:\r\n                res.appendleft(arr[r])\r\n                r -= 1\r\n                res.appendleft(arr[r])\r\n                r -= 1\r\n                res.appendleft(arr[r])\r\n            r -= 1\r\n            if r >= 0:\r\n                res.appendleft(\".\")\r\n\r\n        print(\"\".join(res))\r\n\r\n        \r\n\r\n\r\n\r\n",
        "rejectedCode": "from collections import deque\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    v = set()\r\n    v.add(\"a\")\r\n    v.add(\"e\")\r\n    res = deque()\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = [c for c in input()]\r\n        r = len(arr) - 1\r\n        while r >= 0:\r\n            if arr[r] in v:\r\n                res.appendleft(arr[r])\r\n                r -= 1\r\n                res.appendleft(arr[r])\r\n            else:\r\n                res.appendleft(arr[r])\r\n                r -= 1\r\n                res.appendleft(arr[r])\r\n                r -= 1\r\n                res.appendleft(arr[r])\r\n            r -= 1\r\n            if r >= 0:\r\n                res.appendleft(\".\")\r\n\r\n        print(\"\".join(res))\r\n\r\n        \r\n\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.bab\r\nba.baba.ced.bab\r\ndad.de.ca.bed.dadba.baba.ced.bab\r\ndacdad.de.ca.bed.dadba.baba.ced.bab\r\ndac.dacdacdad.de.ca.bed.dadba.baba.ced.bab\r\nda.bab.ba.ba.bab.bab.ba.bab.badac.dacdacdad.de.ca.bed.dadba.baba.ced.bab\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'ba.ba', found: 'ba.baba.ced.bab'\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243788214",
            "author": "sarthak_chauhan",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 22000,
            "submissionTime": 1706436120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243787492",
            "author": "sarthak_chauhan",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706435820
        },
        "acceptedCode": "t=int(input())\r\n\r\nwhile t:\r\n    t-=1\r\n    n=int(input())\r\n    string=list(input())\r\n    answer_string=[]\r\n\r\n    while len(string)!=0:\r\n        w=string.pop()\r\n        if w in 'ae':\r\n            answer_string.append(w)\r\n            answer_string.append(string.pop())\r\n            answer_string.append('.')\r\n        else:\r\n            answer_string.append(w)\r\n            answer_string.append(string.pop())\r\n            answer_string.append(string.pop())\r\n            answer_string.append('.')\r\n    answer_string.pop()\r\n    \r\n    answer_string.reverse()\r\n\r\n    \r\n\r\n    my_list = ['b', 'a', '.', 'c', 'e', 'd', '.', 'b', 'a', 'b']\r\n\r\n    # Using .join() to concatenate the elements with '.' characters\r\n    result_string = ''.join(char for char in answer_string)\r\n\r\n    # Printing the resulting string\r\n    print(result_string)\r\n\r\n\r\n    \r\n",
        "rejectedCode": "t=int(input())\r\n\r\nwhile t:\r\n    t-=1\r\n    n=int(input())\r\n    string=list(input())\r\n    answer_string=[]\r\n\r\n    while len(string)!=0:\r\n        w=string.pop()\r\n        if w in 'ae':\r\n            answer_string.append(w)\r\n            answer_string.append(string.pop())\r\n            answer_string.append('.')\r\n        else:\r\n            answer_string.append(w)\r\n            answer_string.append(string.pop())\r\n            answer_string.append(string.pop())\r\n            answer_string.append('.')\r\n    answer_string.pop()\r\n    \r\n    answer_string.reverse()\r\n\r\n# Using .join() to concatenate the elements without the '.' character\r\n    result_string = ''.join(char for char in answer_string if char != '.')\r\n\r\n# Printing the resulting string\r\n    print(result_string)\r\n    \r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "bacedbab\r\nbaba\r\ndaddecabeddad\r\ndac\r\ndacdac\r\ndababbabababbabbababba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'bacedbab'\r\n"
        },
        "errorLine": 24,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243786356",
            "author": "_fa_s123",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706435400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243786183",
            "author": "_fa_s123",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706435340
        },
        "acceptedCode": "def find_unique_digit(a, b, c):\r\n    if a == b:\r\n        return c\r\n    elif a == c:\r\n        return b\r\n    else:\r\n        return a\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        a, b, c = map(int, input().split())\r\n        result = find_unique_digit(a, b, c)\r\n        print(result)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "def find_unique_digit(a, b, c):\r\n    if a == b:\r\n        return c\r\n    elif a == c:\r\n        return b\r\n    else:\r\n        return a\r\n\r\ndef main():\r\n    t = int(input(\"Enter the number of test cases: \"))\r\n    for _ in range(t):\r\n        a, b, c = map(int, input().split())\r\n        result = find_unique_digit(a, b, c)\r\n        print(result)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "Enter the number of test cases: 1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong output format Expected integer, but \"Enter\" found\r\n"
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243778351",
            "author": "math-ysics",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1706432280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243778168",
            "author": "math-ysics",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706432220
        },
        "acceptedCode": "n = int(input())\r\nfor i in range(n):\r\n    count = 0\r\n    m = [*map(int,input().split())]\r\n    if m[0] == m[1]:\r\n        print(m[2])\r\n    elif m[0] == m[2]:\r\n        print(m[1])\r\n    else:\r\n        print(m[0])",
        "rejectedCode": "def main():\r\n    n = int(input())\r\n    for i in range(n):\r\n        count = 0\r\n        m = [*map(int,input().split())]\r\n        if m[0] == m[1]:\r\n            print(m[2])\r\n        elif m[0] == m[2]:\r\n            print(m[1])\r\n        else:\r\n            print(m[0])",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10], but output contains 0 elements\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243773131",
            "author": "emilka174",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 8600,
            "submissionTime": 1706430300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243772967",
            "author": "emilka174",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706430240
        },
        "acceptedCode": "def process_string(s):\r\n    i = len(s) - 1\r\n    result = []\r\n    while i >= 0:\r\n        if s[i] == \"a\" or s[i] == \"e\":\r\n            if i > 0:\r\n                group = \".\" + s[i - 1:i + 1]\r\n                i -= 2\r\n            else:\r\n                # \u0415\u0441\u043b\u0438 \"a\" \u0438\u043b\u0438 \"e\" \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0435\u0440\u0435\u0434 \u043d\u0438\u043c\u0438.\r\n                group = \".\" + s[i]\r\n                i -= 1\r\n        else:\r\n            if i >= 2:\r\n                group = \".\" + s[i - 2:i + 1]\r\n                i -= 3\r\n            else:\r\n                # \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u0434\u0432\u0443\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043a\u0443\u0449\u0438\u043c, \u0431\u0435\u0440\u0435\u043c \u0442\u043e, \u0447\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c.\r\n                group = \".\" + s[0:i + 1]\r\n                i = -1  # \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0446\u0438\u043a\u043b\r\n        result.append(group)\r\n    return \"\".join(reversed(result))\r\n\r\n\r\nnum_cases = int(input())\r\nfor _ in range(num_cases):\r\n    n = int(input())\r\n    s = input()\r\n    print(process_string(s)[1:])\r\n",
        "rejectedCode": "def process_string(s):\r\n    i = len(s) - 1\r\n    result = []\r\n    while i >= 0:\r\n        if s[i] == \"a\" or s[i] == \"e\":\r\n            if i > 0:\r\n                group = \".\" + s[i - 1:i + 1]\r\n                i -= 2\r\n            else:\r\n                # \u0415\u0441\u043b\u0438 \"a\" \u0438\u043b\u0438 \"e\" \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u0435\u0440\u0435\u0434 \u043d\u0438\u043c\u0438.\r\n                group = \".\" + s[i]\r\n                i -= 1\r\n        else:\r\n            if i >= 2:\r\n                group = \".\" + s[i - 2:i + 1]\r\n                i -= 3\r\n            else:\r\n                # \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u0434\u0432\u0443\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0442\u0435\u043a\u0443\u0449\u0438\u043c, \u0431\u0435\u0440\u0435\u043c \u0442\u043e, \u0447\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c.\r\n                group = \".\" + s[0:i + 1]\r\n                i = -1  # \u0417\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0446\u0438\u043a\u043b\r\n        result.append(group)\r\n    return \"\".join(reversed(result))\r\n\r\n\r\nnum_cases = int(input())\r\nfor _ in range(num_cases):\r\n    n = int(input())\r\n    s = input()\r\n    print(process_string(s))\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": ".ba.ced.bab\r\n.ba.ba\r\n.dad.de.ca.bed.dad\r\n.dac\r\n.dac.dac\r\n.da.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: '.ba.ced.bab'\r\n"
        },
        "errorLine": 29,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243731671",
            "author": "chocoMelk",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706412780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243730673",
            "author": "chocoMelk",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706412300
        },
        "acceptedCode": "testCase = int(input())\r\n\r\nfor test in range(testCase):\r\n    listOfNumbers = list(map(int,input().split()))\r\n    setOfNumbersinListOfNumbers = set(listOfNumbers)\r\n\r\n    for number in setOfNumbersinListOfNumbers:\r\n         if listOfNumbers.count(number) == 1:\r\n            print(number)\r\n                   ",
        "rejectedCode": "testCase = int(input())\r\n\r\nfor test in range(testCase):\r\n    listOfNumbers = list(map(int,input().split()))\r\n    setOfNumbersinListOfNumbers = set(listOfNumbers)\r\n    firstNum, secondNum = None, None\r\n\r\n    for number in listOfNumbers:\r\n        if firstNum == None: firstNum = number\r\n        elif secondNum == None: secondNum = number\r\n        elif number == firstNum or number == secondNum:\r\n            setOfNumbersinListOfNumbers.discard(number)\r\n            print(setOfNumbersinListOfNumbers.pop()) \r\n                   ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n7\r\n0\r\n6\r\n8\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 3rd numbers differ - expected: '6', found: '7'\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243687846",
            "author": "ranting",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 20500,
            "submissionTime": 1706377560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243687539",
            "author": "ranting",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 14000,
            "submissionTime": 1706377140
        },
        "acceptedCode": "\n#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    t = int(input())\n    # CVC CV\n\n    C = 'bcd'\n    V = 'ae'\n\n    for _ in range(t):\n        n = int(input())\n        word = list(input())\n\n        stack = []\n\n        for i in range(1, n):\n            if word[i] in V:\n                stack.append(i+1)\n\n            if word[i] in C and word[i-1] in C:\n                stack.pop()\n                stack.append(i)\n\n        stack.pop()\n\n        for dot in stack:\n            word[dot] = '.' + word[dot]\n\n        print(''.join(word))\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "rejectedCode": "\n#!/usr/bin/env python\nfrom __future__ import division, print_function\n\nimport os\nimport sys\nfrom io import BytesIO, IOBase\n\nif sys.version_info[0] < 3:\n    from __builtin__ import xrange as range\n    from future_builtins import ascii, filter, hex, map, oct, zip\n\n\ndef main():\n    t = int(input())\n\n    C = 'bcd'\n    V = 'ae'\n\n    for _ in range(t):\n        n = int(input())\n        word = input()\n\n        stack = []\n\n        for i in range(1, n):\n            if word[i] in V:\n                stack.append(i+1)\n\n            if word[i] in C and word[i-1] in C:\n                stack.pop()\n                stack.append(i)\n\n        stack.pop()\n\n        res = ''\n\n        l = 0\n\n        for dot in stack:\n            res += word[l:dot] + '.'\n            l = dot\n\n        res += word[l:]\n\n        print(res)\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\ndef print(*args, **kwargs):\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop(\"end\", \"\\n\"))\n    if kwargs.pop(\"flush\", False):\n        file.flush()\n\n\nif sys.version_info[0] < 3:\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\nelse:\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\n\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 15,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243686792",
            "author": "benismael.ilyas",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706376240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243686767",
            "author": "benismael.ilyas",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706376180
        },
        "acceptedCode": "\r\nt = int(input())\r\n\r\n# Process each test case\r\nfor mm in range(t):\r\n    \r\n    a, b, c = input().split()\r\n\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n",
        "rejectedCode": "\r\nt = int(input())\r\n\r\n# Process each test case\r\nfor mm in range(t):\r\n    \r\n    a, b, c = input().split()\r\n\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(z)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 13,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243304871",
            "author": "MinakoKojima",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706187360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243304252",
            "author": "MinakoKojima",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706187120
        },
        "acceptedCode": "\nt = int(input())\nfor test in range(t):\n    (a, b, c) = [int(i) for i in input().split()]\n    if a == b:\n        print(c)\n    elif b == c:\n        print(a)\n    elif a == c:\n        print(b)\n",
        "rejectedCode": "\nt = int(input())\nfor test in range(t):\n\t(a, b, c) = map(int, input())\n\tclist = []\n\tif a == b:\n\t\tclist.append(c)\n\telif a == c:\n\t\tclist.append(b)\n\telse:\n\t\tclist.append(a)\n\tprint(' '.join(map(str, clist)))\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "243111933",
            "author": "hcl10",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1450,
            "memory": 32500,
            "submissionTime": 1706071080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "243111740",
            "author": "hcl10",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 5000,
            "memory": 31800,
            "submissionTime": 1706071020
        },
        "acceptedCode": "############### TEMPLATE FOR SORTED LIST IN PYTHON #######################\r\n \r\nimport sys\r\nimport traceback\r\nfrom bisect import bisect_left, bisect_right, insort\r\nfrom itertools import chain, repeat, starmap\r\nfrom math import log\r\nfrom operator import add, eq, ne, gt, ge, lt, le, iadd\r\nfrom textwrap import dedent\r\nfrom collections.abc import Sequence, MutableSequence\r\nfrom functools import reduce\r\n \r\nclass SortedList(MutableSequence):\r\n    \"\"\"Sorted list is a sorted mutab\u0192edpandle sequence.\r\n \r\n    Sorted list values are maintained in sorted order.\r\n \r\n    Sorted list values must be comparable. The total ordering of values must\r\n    not change while they are stored in the sorted list.\r\n \r\n    Methods for adding values:\r\n \r\n    * :func:`SortedList.add`\r\n    * :func:`SortedList.update`\r\n    * :func:`SortedList.__add__`\r\n    * :func:`SortedList.__iadd__`\r\n    * :func:`SortedList.__mul__`\r\n    * :func:`SortedList.__imul__`\r\n \r\n    Methods for removing values:\r\n \r\n    * :func:`SortedList.clear`\r\n    * :func:`SortedList.discard`\r\n    * :func:`SortedList.remove`\r\n    * :func:`SortedList.pop`\r\n    * :func:`SortedList.__delitem__`\r\n \r\n    Methods for looking up values:\r\n \r\n    * :func:`SortedList.bisect_left`\r\n    * :func:`SortedList.bisect_right`\r\n    * :func:`SortedList.count`\r\n    * :func:`SortedList.index`\r\n    * :func:`SortedList.__contains__`\r\n    * :func:`SortedList.__getitem__`\r\n \r\n    Methods for iterating values:\r\n \r\n    * :func:`SortedList.irange`\r\n    * :func:`SortedList.islice`\r\n    * :func:`SortedList.__iter__`\r\n    * :func:`SortedList.__reversed__`\r\n \r\n    Methods for miscellany:\r\n \r\n    * :func:`SortedList.copy`\r\n    * :func:`SortedList.__len__`\r\n    * :func:`SortedList.__repr__`\r\n    * :func:`SortedList._check`\r\n    * :func:`SortedList._reset`\r\n \r\n    Sorted lists use lexicographical ordering semantics when compared to other\r\n    sequences.\r\n \r\n    Some methods of mutable sequences are not supported and will raise\r\n    not-implemented error.\r\n \r\n    \"\"\"\r\n \r\n    DEFAULT_LOAD_FACTOR = 1000\r\n \r\n    def __init__(self, iterable=None, key=None):\r\n        \"\"\"Initialize sorted list instance.\r\n \r\n        Optional `iterable` argument provides an initial iterable of values to\r\n        initialize the sorted list.\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl = SortedList()\r\n        >>> sl\r\n        SortedList([])\r\n        >>> sl = SortedList([3, 1, 2, 5, 4])\r\n        >>> sl\r\n        SortedList([1, 2, 3, 4, 5])\r\n \r\n        :param iterable: initial values (optional)\r\n \r\n        \"\"\"\r\n        assert key is None\r\n        self._len = 0\r\n        self._load = self.DEFAULT_LOAD_FACTOR\r\n        self._lists = []\r\n        self._maxes = []\r\n        self._index = []\r\n        self._offset = 0\r\n \r\n        if iterable is not None:\r\n            self._update(iterable)\r\n \r\n    @property\r\n    def key(self):  # pylint: disable=useless-return\r\n        \"\"\"Function used to extract comparison key from values.\r\n \r\n        Sorted list compares values directly so the key function is none.\r\n \r\n        \"\"\"\r\n        return None\r\n \r\n    def _reset(self, load):\r\n        \"\"\"Reset sorted list load factor.\r\n \r\n        The `load` specifies the load-factor of the list. The default load\r\n        factor of 1000 works well for lists from tens to tens-of-millions of\r\n        values. Good practice is to use a value that is the cube root of the\r\n        list size. With billions of elements, the best load factor depends on\r\n        your usage. It's best to leave the load factor at the default until you\r\n        start benchmarking.\r\n \r\n        See :doc:`implementation` and :doc:`performance-scale` for more\r\n        information.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        :param int load: load-factor for sorted list sublists\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, [])\r\n        self._clear()\r\n        self._load = load\r\n        self._update(values)\r\n \r\n    def clear(self):\r\n        \"\"\"Remove all values from sorted list.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        \"\"\"\r\n        self._len = 0\r\n        del self._lists[:]\r\n        del self._maxes[:]\r\n        del self._index[:]\r\n        self._offset = 0\r\n \r\n    _clear = clear\r\n \r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted list.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList()\r\n        >>> sl.add(3)\r\n        >>> sl.add(1)\r\n        >>> sl.add(2)\r\n        >>> sl\r\n        SortedList([1, 2, 3])\r\n \r\n        :param value: value to add to sorted list\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n \r\n        if _maxes:\r\n            pos = bisect_right(_maxes, value)\r\n \r\n            if pos == len(_maxes):\r\n                pos -= 1\r\n                _lists[pos].append(value)\r\n                _maxes[pos] = value\r\n            else:\r\n                insort(_lists[pos], value)\r\n \r\n            self._expand(pos)\r\n        else:\r\n            _lists.append([value])\r\n            _maxes.append(value)\r\n \r\n        self._len += 1\r\n \r\n    def _expand(self, pos):\r\n        \"\"\"Split sublists with length greater than double the load-factor.\r\n \r\n        Updates the index when the sublist length is less than double the load\r\n        level. This requires incrementing the nodes in a traversal from the\r\n        leaf node to the root. For an example traversal see\r\n        ``SortedList._loc``.\r\n \r\n        \"\"\"\r\n        _load = self._load\r\n        _lists = self._lists\r\n        _index = self._index\r\n \r\n        if len(_lists[pos]) > (_load << 1):\r\n            _maxes = self._maxes\r\n \r\n            _lists_pos = _lists[pos]\r\n            half = _lists_pos[_load:]\r\n            del _lists_pos[_load:]\r\n            _maxes[pos] = _lists_pos[-1]\r\n \r\n            _lists.insert(pos + 1, half)\r\n            _maxes.insert(pos + 1, half[-1])\r\n \r\n            del _index[:]\r\n        else:\r\n            if _index:\r\n                child = self._offset + pos\r\n                while child:\r\n                    _index[child] += 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] += 1\r\n \r\n    def update(self, iterable):\r\n        \"\"\"Update sorted list by adding all values from `iterable`.\r\n \r\n        Runtime complexity: `O(k*log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList()\r\n        >>> sl.update([3, 1, 2])\r\n        >>> sl\r\n        SortedList([1, 2, 3])\r\n \r\n        :param iterable: iterable of values to add\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n        values = sorted(iterable)\r\n \r\n        if _maxes:\r\n            if len(values) * 4 >= self._len:\r\n                _lists.append(values)\r\n                values = reduce(iadd, _lists, [])\r\n                values.sort()\r\n                self._clear()\r\n            else:\r\n                _add = self.add\r\n                for val in values:\r\n                    _add(val)\r\n                return\r\n \r\n        _load = self._load\r\n        _lists.extend(\r\n            values[pos : (pos + _load)] for pos in range(0, len(values), _load)\r\n        )\r\n        _maxes.extend(sublist[-1] for sublist in _lists)\r\n        self._len = len(values)\r\n        del self._index[:]\r\n \r\n    _update = update\r\n \r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted list.\r\n \r\n        ``sl.__contains__(value)`` <==> ``value in sl``\r\n \r\n        Runtime complexity: `O(log(n))`\r\n \r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> 3 in sl\r\n        True\r\n \r\n        :param value: search for value in sorted list\r\n        :return: true if `value` in sorted list\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return False\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return False\r\n \r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n \r\n        return _lists[pos][idx] == value\r\n \r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted list if it is a member.\r\n \r\n        If `value` is not a member, do nothing.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> sl.discard(5)\r\n        >>> sl.discard(0)\r\n        >>> sl == [1, 2, 3, 4]\r\n        True\r\n \r\n        :param value: `value` to discard from sorted list\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return\r\n \r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n \r\n        if _lists[pos][idx] == value:\r\n            self._delete(pos, idx)\r\n \r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\r\n \r\n        If `value` is not a member, raise ValueError.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> sl.remove(5)\r\n        >>> sl == [1, 2, 3, 4]\r\n        True\r\n        >>> sl.remove(0)\r\n        Traceback (most recent call last):\r\n          ...\r\n        ValueError: 0 not in list\r\n \r\n        :param value: `value` to remove from sorted list\r\n        :raises ValueError: if `value` is not in sorted list\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            raise ValueError(\"{0!r} not in list\".format(value))\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            raise ValueError(\"{0!r} not in list\".format(value))\r\n \r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n \r\n        if _lists[pos][idx] == value:\r\n            self._delete(pos, idx)\r\n        else:\r\n            raise ValueError(\"{0!r} not in list\".format(value))\r\n \r\n    def _delete(self, pos, idx):\r\n        \"\"\"Delete value at the given `(pos, idx)`.\r\n \r\n        Combines lists that are less than half the load level.\r\n \r\n        Updates the index when the sublist length is more than half the load\r\n        level. This requires decrementing the nodes in a traversal from the\r\n        leaf node to the root. For an example traversal see\r\n        ``SortedList._loc``.\r\n \r\n        :param int pos: lists index\r\n        :param int idx: sublist index\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n        _index = self._index\r\n \r\n        _lists_pos = _lists[pos]\r\n \r\n        del _lists_pos[idx]\r\n        self._len -= 1\r\n \r\n        len_lists_pos = len(_lists_pos)\r\n \r\n        if len_lists_pos > (self._load >> 1):\r\n            _maxes[pos] = _lists_pos[-1]\r\n \r\n            if _index:\r\n                child = self._offset + pos\r\n                while child > 0:\r\n                    _index[child] -= 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] -= 1\r\n        elif len(_lists) > 1:\r\n            if not pos:\r\n                pos += 1\r\n \r\n            prev = pos - 1\r\n            _lists[prev].extend(_lists[pos])\r\n            _maxes[prev] = _lists[prev][-1]\r\n \r\n            del _lists[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n \r\n            self._expand(prev)\r\n        elif len_lists_pos:\r\n            _maxes[pos] = _lists_pos[-1]\r\n        else:\r\n            del _lists[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n \r\n    def _loc(self, pos, idx):\r\n        \"\"\"Convert an index pair (lists index, sublist index) into a single\r\n        index number that corresponds to the position of the value in the\r\n        sorted list.\r\n \r\n        Many queries require the index be built. Details of the index are\r\n        described in ``SortedList._build_index``.\r\n \r\n        Indexing requires traversing the tree from a leaf node to the root. The\r\n        parent of each node is easily computable at ``(pos - 1) // 2``.\r\n \r\n        Left-child nodes are always at odd indices and right-child nodes are\r\n        always at even indices.\r\n \r\n        When traversing up from a right-child node, increment the total by the\r\n        left-child node.\r\n \r\n        The final index is the sum from traversal and the index in the sublist.\r\n \r\n        For example, using the index from ``SortedList._build_index``::\r\n \r\n            _index = 14 5 9 3 2 4 5\r\n            _offset = 3\r\n \r\n        Tree::\r\n \r\n                 14\r\n              5      9\r\n            3   2  4   5\r\n \r\n        Converting an index pair (2, 3) into a single index involves iterating\r\n        like so:\r\n \r\n        1. Starting at the leaf node: offset + alpha = 3 + 2 = 5. We identify\r\n           the node as a left-child node. At such nodes, we simply traverse to\r\n           the parent.\r\n \r\n        2. At node 9, position 2, we recognize the node as a right-child node\r\n           and accumulate the left-child in our total. Total is now 5 and we\r\n           traverse to the parent at position 0.\r\n \r\n        3. Iteration ends at the root.\r\n \r\n        The index is then the sum of the total and sublist index: 5 + 3 = 8.\r\n \r\n        :param int pos: lists index\r\n        :param int idx: sublist index\r\n        :return: index in sorted list\r\n \r\n        \"\"\"\r\n        if not pos:\r\n            return idx\r\n \r\n        _index = self._index\r\n \r\n        if not _index:\r\n            self._build_index()\r\n \r\n        total = 0\r\n \r\n        # Increment pos to point in the index to len(self._lists[pos]).\r\n \r\n        pos += self._offset\r\n \r\n        # Iterate until reaching the root of the index tree at pos = 0.\r\n \r\n        while pos:\r\n \r\n            # Right-child nodes are at odd indices. At such indices\r\n            # account the total below the left child node.\r\n \r\n            if not pos & 1:\r\n                total += _index[pos - 1]\r\n \r\n            # Advance pos to the parent node.\r\n \r\n            pos = (pos - 1) >> 1\r\n \r\n        return total + idx\r\n \r\n    def _pos(self, idx):\r\n        \"\"\"Convert an index into an index pair (lists index, sublist index)\r\n        that can be used to access the corresponding lists position.\r\n \r\n        Many queries require the index be built. Details of the index are\r\n        described in ``SortedList._build_index``.\r\n \r\n        Indexing requires traversing the tree to a leaf node. Each node has two\r\n        children which are easily computable. Given an index, pos, the\r\n        left-child is at ``pos * 2 + 1`` and the right-child is at ``pos * 2 +\r\n        2``.\r\n \r\n        When the index is less than the left-child, traversal moves to the\r\n        left sub-tree. Otherwise, the index is decremented by the left-child\r\n        and traversal moves to the right sub-tree.\r\n \r\n        At a child node, the indexing pair is computed from the relative\r\n        position of the child node as compared with the offset and the remaining\r\n        index.\r\n \r\n        For example, using the index from ``SortedList._build_index``::\r\n \r\n            _index = 14 5 9 3 2 4 5\r\n            _offset = 3\r\n \r\n        Tree::\r\n \r\n                 14\r\n              5      9\r\n            3   2  4   5\r\n \r\n        Indexing position 8 involves iterating like so:\r\n \r\n        1. Starting at the root, position 0, 8 is compared with the left-child\r\n           node (5) which it is greater than. When greater the index is\r\n           decremented and the position is updated to the right child node.\r\n \r\n        2. At node 9 with index 3, we again compare the index to the left-child\r\n           node with value 4. Because the index is the less than the left-child\r\n           node, we simply traverse to the left.\r\n \r\n        3. At node 4 with index 3, we recognize that we are at a leaf node and\r\n           stop iterating.\r\n \r\n        4. To compute the sublist index, we subtract the offset from the index\r\n           of the leaf node: 5 - 3 = 2. To compute the index in the sublist, we\r\n           simply use the index remaining from iteration. In this case, 3.\r\n \r\n        The final index pair from our example is (2, 3) which corresponds to\r\n        index 8 in the sorted list.\r\n \r\n        :param int idx: index in sorted list\r\n        :return: (lists index, sublist index) pair\r\n \r\n        \"\"\"\r\n        if idx < 0:\r\n            last_len = len(self._lists[-1])\r\n \r\n            if (-idx) <= last_len:\r\n                return len(self._lists) - 1, last_len + idx\r\n \r\n            idx += self._len\r\n \r\n            if idx < 0:\r\n                raise IndexError(\"list index out of range\")\r\n        elif idx >= self._len:\r\n            raise IndexError(\"list index out of range\")\r\n \r\n        if idx < len(self._lists[0]):\r\n            return 0, idx\r\n \r\n        _index = self._index\r\n \r\n        if not _index:\r\n            self._build_index()\r\n \r\n        pos = 0\r\n        child = 1\r\n        len_index = len(_index)\r\n \r\n        while child < len_index:\r\n            index_child = _index[child]\r\n \r\n            if idx < index_child:\r\n                pos = child\r\n            else:\r\n                idx -= index_child\r\n                pos = child + 1\r\n \r\n            child = (pos << 1) + 1\r\n \r\n        return (pos - self._offset, idx)\r\n \r\n    def _build_index(self):\r\n        \"\"\"Build a positional index for indexing the sorted list.\r\n \r\n        Indexes are represented as binary trees in a dense array notation\r\n        similar to a binary heap.\r\n \r\n        For example, given a lists representation storing integers::\r\n \r\n            0: [1, 2, 3]\r\n            1: [4, 5]\r\n            2: [6, 7, 8, 9]\r\n            3: [10, 11, 12, 13, 14]\r\n \r\n        The first transformation maps the sub-lists by their length. The\r\n        first row of the index is the length of the sub-lists::\r\n \r\n            0: [3, 2, 4, 5]\r\n \r\n        Each row after that is the sum of consecutive pairs of the previous\r\n        row::\r\n \r\n            1: [5, 9]\r\n            2: [14]\r\n \r\n        Finally, the index is built by concatenating these lists together::\r\n \r\n            _index = [14, 5, 9, 3, 2, 4, 5]\r\n \r\n        An offset storing the start of the first row is also stored::\r\n \r\n            _offset = 3\r\n \r\n        When built, the index can be used for efficient indexing into the list.\r\n        See the comment and notes on ``SortedList._pos`` for details.\r\n \r\n        \"\"\"\r\n        row0 = list(map(len, self._lists))\r\n \r\n        if len(row0) == 1:\r\n            self._index[:] = row0\r\n            self._offset = 0\r\n            return\r\n \r\n        head = iter(row0)\r\n        tail = iter(head)\r\n        row1 = list(starmap(add, zip(head, tail)))\r\n \r\n        if len(row0) & 1:\r\n            row1.append(row0[-1])\r\n \r\n        if len(row1) == 1:\r\n            self._index[:] = row1 + row0\r\n            self._offset = 1\r\n            return\r\n \r\n        size = 2 ** (int(log(len(row1) - 1, 2)) + 1)\r\n        row1.extend(repeat(0, size - len(row1)))\r\n        tree = [row0, row1]\r\n \r\n        while len(tree[-1]) > 1:\r\n            head = iter(tree[-1])\r\n            tail = iter(head)\r\n            row = list(starmap(add, zip(head, tail)))\r\n            tree.append(row)\r\n \r\n        reduce(iadd, reversed(tree), self._index)\r\n        self._offset = size * 2 - 1\r\n \r\n    def __delitem__(self, index):\r\n        \"\"\"Remove value at `index` from sorted list.\r\n \r\n        ``sl.__delitem__(index)`` <==> ``del sl[index]``\r\n \r\n        Supports slicing.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('abcde')\r\n        >>> del sl[2]\r\n        >>> sl\r\n        SortedList(['a', 'b', 'd', 'e'])\r\n        >>> del sl[:2]\r\n        >>> sl\r\n        SortedList(['d', 'e'])\r\n \r\n        :param index: integer or slice for indexing\r\n        :raises IndexError: if index out of range\r\n \r\n        \"\"\"\r\n        if isinstance(index, slice):\r\n            start, stop, step = index.indices(self._len)\r\n \r\n            if step == 1 and start < stop:\r\n                if start == 0 and stop == self._len:\r\n                    return self._clear()\r\n                elif self._len <= 8 * (stop - start):\r\n                    values = self._getitem(slice(None, start))\r\n                    if stop < self._len:\r\n                        values += self._getitem(slice(stop, None))\r\n                    self._clear()\r\n                    return self._update(values)\r\n \r\n            indices = range(start, stop, step)\r\n \r\n            # Delete items from greatest index to least so\r\n            # that the indices remain valid throughout iteration.\r\n \r\n            if step > 0:\r\n                indices = reversed(indices)\r\n \r\n            _pos, _delete = self._pos, self._delete\r\n \r\n            for index in indices:\r\n                pos, idx = _pos(index)\r\n                _delete(pos, idx)\r\n        else:\r\n            pos, idx = self._pos(index)\r\n            self._delete(pos, idx)\r\n \r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted list.\r\n \r\n        ``sl.__getitem__(index)`` <==> ``sl[index]``\r\n \r\n        Supports slicing.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('abcde')\r\n        >>> sl[1]\r\n        'b'\r\n        >>> sl[-1]\r\n        'e'\r\n        >>> sl[2:5]\r\n        ['c', 'd', 'e']\r\n \r\n        :param index: integer or slice for indexing\r\n        :return: value or list of values\r\n        :raises IndexError: if index out of range\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n \r\n        if isinstance(index, slice):\r\n            start, stop, step = index.indices(self._len)\r\n \r\n            if step == 1 and start < stop:\r\n                # Whole slice optimization: start to stop slices the whole\r\n                # sorted list.\r\n \r\n                if start == 0 and stop == self._len:\r\n                    return reduce(iadd, self._lists, [])\r\n \r\n                start_pos, start_idx = self._pos(start)\r\n                start_list = _lists[start_pos]\r\n                stop_idx = start_idx + stop - start\r\n \r\n                # Small slice optimization: start index and stop index are\r\n                # within the start list.\r\n \r\n                if len(start_list) >= stop_idx:\r\n                    return start_list[start_idx:stop_idx]\r\n \r\n                if stop == self._len:\r\n                    stop_pos = len(_lists) - 1\r\n                    stop_idx = len(_lists[stop_pos])\r\n                else:\r\n                    stop_pos, stop_idx = self._pos(stop)\r\n \r\n                prefix = _lists[start_pos][start_idx:]\r\n                middle = _lists[(start_pos + 1) : stop_pos]\r\n                result = reduce(iadd, middle, prefix)\r\n                result += _lists[stop_pos][:stop_idx]\r\n \r\n                return result\r\n \r\n            if step == -1 and start > stop:\r\n                result = self._getitem(slice(stop + 1, start + 1))\r\n                result.reverse()\r\n                return result\r\n \r\n            # Return a list because a negative step could\r\n            # reverse the order of the items and this could\r\n            # be the desired behavior.\r\n \r\n            indices = range(start, stop, step)\r\n            return list(self._getitem(index) for index in indices)\r\n        else:\r\n            if self._len:\r\n                if index == 0:\r\n                    return _lists[0][0]\r\n                elif index == -1:\r\n                    return _lists[-1][-1]\r\n            else:\r\n                raise IndexError(\"list index out of range\")\r\n \r\n            if 0 <= index < len(_lists[0]):\r\n                return _lists[0][index]\r\n \r\n            len_last = len(_lists[-1])\r\n \r\n            if -len_last < index < 0:\r\n                return _lists[-1][len_last + index]\r\n \r\n            pos, idx = self._pos(index)\r\n            return _lists[pos][idx]\r\n \r\n    _getitem = __getitem__\r\n \r\n    def __setitem__(self, index, value):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        ``sl.__setitem__(index, value)`` <==> ``sl[index] = value``\r\n \r\n        :raises NotImplementedError: use ``del sl[index]`` and\r\n            ``sl.add(value)`` instead\r\n \r\n        \"\"\"\r\n        message = \"use ``del sl[index]`` and ``sl.add(value)`` instead\"\r\n        raise NotImplementedError(message)\r\n \r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the sorted list.\r\n \r\n        ``sl.__iter__()`` <==> ``iter(sl)``\r\n \r\n        Iterating the sorted list while adding or deleting values may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all values.\r\n \r\n        \"\"\"\r\n        return chain.from_iterable(self._lists)\r\n \r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the sorted list.\r\n \r\n        ``sl.__reversed__()`` <==> ``reversed(sl)``\r\n \r\n        Iterating the sorted list while adding or deleting values may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all values.\r\n \r\n        \"\"\"\r\n        return chain.from_iterable(map(reversed, reversed(self._lists)))\r\n \r\n    def reverse(self):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        Sorted list maintains values in ascending sort order. Values may not be\r\n        reversed in-place.\r\n \r\n        Use ``reversed(sl)`` for an iterator over values in descending sort\r\n        order.\r\n \r\n        Implemented to override `MutableSequence.reverse` which provides an\r\n        erroneous default implementation.\r\n \r\n        :raises NotImplementedError: use ``reversed(sl)`` instead\r\n \r\n        \"\"\"\r\n        raise NotImplementedError(\"use ``reversed(sl)`` instead\")\r\n \r\n    def islice(self, start=None, stop=None, reverse=False):\r\n        \"\"\"Return an iterator that slices sorted list from `start` to `stop`.\r\n \r\n        The `start` and `stop` index are treated inclusive and exclusive,\r\n        respectively.\r\n \r\n        Both `start` and `stop` default to `None` which is automatically\r\n        inclusive of the beginning and end of the sorted list.\r\n \r\n        When `reverse` is `True` the values are yielded from the iterator in\r\n        reverse order; `reverse` defaults to `False`.\r\n \r\n        >>> sl = SortedList('abcdefghij')\r\n        >>> it = sl.islice(2, 6)\r\n        >>> list(it)\r\n        ['c', 'd', 'e', 'f']\r\n \r\n        :param int start: start index (inclusive)\r\n        :param int stop: stop index (exclusive)\r\n        :param bool reverse: yield values in reverse order\r\n        :return: iterator\r\n \r\n        \"\"\"\r\n        _len = self._len\r\n \r\n        if not _len:\r\n            return iter(())\r\n \r\n        start, stop, _ = slice(start, stop).indices(self._len)\r\n \r\n        if start >= stop:\r\n            return iter(())\r\n \r\n        _pos = self._pos\r\n \r\n        min_pos, min_idx = _pos(start)\r\n \r\n        if stop == _len:\r\n            max_pos = len(self._lists) - 1\r\n            max_idx = len(self._lists[-1])\r\n        else:\r\n            max_pos, max_idx = _pos(stop)\r\n \r\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\r\n \r\n    def _islice(self, min_pos, min_idx, max_pos, max_idx, reverse):\r\n        \"\"\"Return an iterator that slices sorted list using two index pairs.\r\n \r\n        The index pairs are (min_pos, min_idx) and (max_pos, max_idx), the\r\n        first inclusive and the latter exclusive. See `_pos` for details on how\r\n        an index is converted to an index pair.\r\n \r\n        When `reverse` is `True`, values are yielded from the iterator in\r\n        reverse order.\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n \r\n        if min_pos > max_pos:\r\n            return iter(())\r\n \r\n        if min_pos == max_pos:\r\n            if reverse:\r\n                indices = reversed(range(min_idx, max_idx))\r\n                return map(_lists[min_pos].__getitem__, indices)\r\n \r\n            indices = range(min_idx, max_idx)\r\n            return map(_lists[min_pos].__getitem__, indices)\r\n \r\n        next_pos = min_pos + 1\r\n \r\n        if next_pos == max_pos:\r\n            if reverse:\r\n                min_indices = range(min_idx, len(_lists[min_pos]))\r\n                max_indices = range(max_idx)\r\n                return chain(\r\n                    map(_lists[max_pos].__getitem__, reversed(max_indices)),\r\n                    map(_lists[min_pos].__getitem__, reversed(min_indices)),\r\n                )\r\n \r\n            min_indices = range(min_idx, len(_lists[min_pos]))\r\n            max_indices = range(max_idx)\r\n            return chain(\r\n                map(_lists[min_pos].__getitem__, min_indices),\r\n                map(_lists[max_pos].__getitem__, max_indices),\r\n            )\r\n \r\n        if reverse:\r\n            min_indices = range(min_idx, len(_lists[min_pos]))\r\n            sublist_indices = range(next_pos, max_pos)\r\n            sublists = map(_lists.__getitem__, reversed(sublist_indices))\r\n            max_indices = range(max_idx)\r\n            return chain(\r\n                map(_lists[max_pos].__getitem__, reversed(max_indices)),\r\n                chain.from_iterable(map(reversed, sublists)),\r\n                map(_lists[min_pos].__getitem__, reversed(min_indices)),\r\n            )\r\n \r\n        min_indices = range(min_idx, len(_lists[min_pos]))\r\n        sublist_indices = range(next_pos, max_pos)\r\n        sublists = map(_lists.__getitem__, sublist_indices)\r\n        max_indices = range(max_idx)\r\n        return chain(\r\n            map(_lists[min_pos].__getitem__, min_indices),\r\n            chain.from_iterable(sublists),\r\n            map(_lists[max_pos].__getitem__, max_indices),\r\n        )\r\n \r\n    def irange(self, minimum=None, maximum=None, inclusive=(True, True), reverse=False):\r\n        \"\"\"Create an iterator of values between `minimum` and `maximum`.\r\n \r\n        Both `minimum` and `maximum` default to `None` which is automatically\r\n        inclusive of the beginning and end of the sorted list.\r\n \r\n        The argument `inclusive` is a pair of booleans that indicates whether\r\n        the minimum and maximum ought to be included in the range,\r\n        respectively. The default is ``(True, True)`` such that the range is\r\n        inclusive of both minimum and maximum.\r\n \r\n        When `reverse` is `True` the values are yielded from the iterator in\r\n        reverse order; `reverse` defaults to `False`.\r\n \r\n        >>> sl = SortedList('abcdefghij')\r\n        >>> it = sl.irange('c', 'f')\r\n        >>> list(it)\r\n        ['c', 'd', 'e', 'f']\r\n \r\n        :param minimum: minimum value to start iterating\r\n        :param maximum: maximum value to stop iterating\r\n        :param inclusive: pair of booleans\r\n        :param bool reverse: yield values in reverse order\r\n        :return: iterator\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return iter(())\r\n \r\n        _lists = self._lists\r\n \r\n        # Calculate the minimum (pos, idx) pair. By default this location\r\n        # will be inclusive in our calculation.\r\n \r\n        if minimum is None:\r\n            min_pos = 0\r\n            min_idx = 0\r\n        else:\r\n            if inclusive[0]:\r\n                min_pos = bisect_left(_maxes, minimum)\r\n \r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n \r\n                min_idx = bisect_left(_lists[min_pos], minimum)\r\n            else:\r\n                min_pos = bisect_right(_maxes, minimum)\r\n \r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n \r\n                min_idx = bisect_right(_lists[min_pos], minimum)\r\n \r\n        # Calculate the maximum (pos, idx) pair. By default this location\r\n        # will be exclusive in our calculation.\r\n \r\n        if maximum is None:\r\n            max_pos = len(_maxes) - 1\r\n            max_idx = len(_lists[max_pos])\r\n        else:\r\n            if inclusive[1]:\r\n                max_pos = bisect_right(_maxes, maximum)\r\n \r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_lists[max_pos])\r\n                else:\r\n                    max_idx = bisect_right(_lists[max_pos], maximum)\r\n            else:\r\n                max_pos = bisect_left(_maxes, maximum)\r\n \r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_lists[max_pos])\r\n                else:\r\n                    max_idx = bisect_left(_lists[max_pos], maximum)\r\n \r\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\r\n \r\n    def __len__(self):\r\n        \"\"\"Return the size of the sorted list.\r\n \r\n        ``sl.__len__()`` <==> ``len(sl)``\r\n \r\n        :return: size of sorted list\r\n \r\n        \"\"\"\r\n        return self._len\r\n \r\n    def bisect_left(self, value):\r\n        \"\"\"Return an index to insert `value` in the sorted list.\r\n \r\n        If the `value` is already present, the insertion point will be before\r\n        (to the left of) any existing values.\r\n \r\n        Similar to the `bisect` module in the standard library.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([10, 11, 12, 13, 14])\r\n        >>> sl.bisect_left(12)\r\n        2\r\n \r\n        :param value: insertion index of value in sorted list\r\n        :return: index\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return 0\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return self._len\r\n \r\n        idx = bisect_left(self._lists[pos], value)\r\n        return self._loc(pos, idx)\r\n \r\n    def bisect_right(self, value):\r\n        \"\"\"Return an index to insert `value` in the sorted list.\r\n \r\n        Similar to `bisect_left`, but if `value` is already present, the\r\n        insertion point will be after (to the right of) any existing values.\r\n \r\n        Similar to the `bisect` module in the standard library.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([10, 11, 12, 13, 14])\r\n        >>> sl.bisect_right(12)\r\n        3\r\n \r\n        :param value: insertion index of value in sorted list\r\n        :return: index\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return 0\r\n \r\n        pos = bisect_right(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return self._len\r\n \r\n        idx = bisect_right(self._lists[pos], value)\r\n        return self._loc(pos, idx)\r\n \r\n    bisect = bisect_right\r\n    _bisect_right = bisect_right\r\n \r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted list.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\r\n        >>> sl.count(3)\r\n        3\r\n \r\n        :param value: value to count in sorted list\r\n        :return: count\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return 0\r\n \r\n        pos_left = bisect_left(_maxes, value)\r\n \r\n        if pos_left == len(_maxes):\r\n            return 0\r\n \r\n        _lists = self._lists\r\n        idx_left = bisect_left(_lists[pos_left], value)\r\n        pos_right = bisect_right(_maxes, value)\r\n \r\n        if pos_right == len(_maxes):\r\n            return self._len - self._loc(pos_left, idx_left)\r\n \r\n        idx_right = bisect_right(_lists[pos_right], value)\r\n \r\n        if pos_left == pos_right:\r\n            return idx_right - idx_left\r\n \r\n        right = self._loc(pos_right, idx_right)\r\n        left = self._loc(pos_left, idx_left)\r\n        return right - left\r\n \r\n    def copy(self):\r\n        \"\"\"Return a shallow copy of the sorted list.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        :return: new sorted list\r\n \r\n        \"\"\"\r\n        return self.__class__(self)\r\n \r\n    __copy__ = copy\r\n \r\n    def append(self, value):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        Implemented to override `MutableSequence.append` which provides an\r\n        erroneous default implementation.\r\n \r\n        :raises NotImplementedError: use ``sl.add(value)`` instead\r\n \r\n        \"\"\"\r\n        raise NotImplementedError(\"use ``sl.add(value)`` instead\")\r\n \r\n    def extend(self, values):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        Implemented to override `MutableSequence.extend` which provides an\r\n        erroneous default implementation.\r\n \r\n        :raises NotImplementedError: use ``sl.update(values)`` instead\r\n \r\n        \"\"\"\r\n        raise NotImplementedError(\"use ``sl.update(values)`` instead\")\r\n \r\n    def insert(self, index, value):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        :raises NotImplementedError: use ``sl.add(value)`` instead\r\n \r\n        \"\"\"\r\n        raise NotImplementedError(\"use ``sl.add(value)`` instead\")\r\n \r\n    def pop(self, index=-1):\r\n        \"\"\"Remove and return value at `index` in sorted list.\r\n \r\n        Raise :exc:`IndexError` if the sorted list is empty or index is out of\r\n        range.\r\n \r\n        Negative indices are supported.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('abcde')\r\n        >>> sl.pop()\r\n        'e'\r\n        >>> sl.pop(2)\r\n        'c'\r\n        >>> sl\r\n        SortedList(['a', 'b', 'd'])\r\n \r\n        :param int index: index of value (default -1)\r\n        :return: value\r\n        :raises IndexError: if index is out of range\r\n \r\n        \"\"\"\r\n        if not self._len:\r\n            raise IndexError(\"pop index out of range\")\r\n \r\n        _lists = self._lists\r\n \r\n        if index == 0:\r\n            val = _lists[0][0]\r\n            self._delete(0, 0)\r\n            return val\r\n \r\n        if index == -1:\r\n            pos = len(_lists) - 1\r\n            loc = len(_lists[pos]) - 1\r\n            val = _lists[pos][loc]\r\n            self._delete(pos, loc)\r\n            return val\r\n \r\n        if 0 <= index < len(_lists[0]):\r\n            val = _lists[0][index]\r\n            self._delete(0, index)\r\n            return val\r\n \r\n        len_last = len(_lists[-1])\r\n \r\n        if -len_last < index < 0:\r\n            pos = len(_lists) - 1\r\n            loc = len_last + index\r\n            val = _lists[pos][loc]\r\n            self._delete(pos, loc)\r\n            return val\r\n \r\n        pos, idx = self._pos(index)\r\n        val = _lists[pos][idx]\r\n        self._delete(pos, idx)\r\n        return val\r\n \r\n    def index(self, value, start=None, stop=None):\r\n        \"\"\"Return first index of value in sorted list.\r\n \r\n        Raise ValueError if `value` is not present.\r\n \r\n        Index must be between `start` and `stop` for the `value` to be\r\n        considered present. The default value, None, for `start` and `stop`\r\n        indicate the beginning and end of the sorted list.\r\n \r\n        Negative indices are supported.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('abcde')\r\n        >>> sl.index('d')\r\n        3\r\n        >>> sl.index('z')\r\n        Traceback (most recent call last):\r\n          ...\r\n        ValueError: 'z' is not in list\r\n \r\n        :param value: value in sorted list\r\n        :param int start: start index (default None, start of sorted list)\r\n        :param int stop: stop index (default None, end of sorted list)\r\n        :return: index of value\r\n        :raises ValueError: if value is not present\r\n \r\n        \"\"\"\r\n        _len = self._len\r\n \r\n        if not _len:\r\n            raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n        if start is None:\r\n            start = 0\r\n        if start < 0:\r\n            start += _len\r\n        if start < 0:\r\n            start = 0\r\n \r\n        if stop is None:\r\n            stop = _len\r\n        if stop < 0:\r\n            stop += _len\r\n        if stop > _len:\r\n            stop = _len\r\n \r\n        if stop <= start:\r\n            raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n        _maxes = self._maxes\r\n        pos_left = bisect_left(_maxes, value)\r\n \r\n        if pos_left == len(_maxes):\r\n            raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n        _lists = self._lists\r\n        idx_left = bisect_left(_lists[pos_left], value)\r\n \r\n        if _lists[pos_left][idx_left] != value:\r\n            raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n        stop -= 1\r\n        left = self._loc(pos_left, idx_left)\r\n \r\n        if start <= left:\r\n            if left <= stop:\r\n                return left\r\n        else:\r\n            right = self._bisect_right(value) - 1\r\n \r\n            if start <= right:\r\n                return start\r\n \r\n        raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n    def __add__(self, other):\r\n        \"\"\"Return new sorted list containing all values in both sequences.\r\n \r\n        ``sl.__add__(other)`` <==> ``sl + other``\r\n \r\n        Values in `other` do not need to be in sorted order.\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl1 = SortedList('bat')\r\n        >>> sl2 = SortedList('cat')\r\n        >>> sl1 + sl2\r\n        SortedList(['a', 'a', 'b', 'c', 't', 't'])\r\n \r\n        :param other: other iterable\r\n        :return: new sorted list\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, [])\r\n        values.extend(other)\r\n        return self.__class__(values)\r\n \r\n    __radd__ = __add__\r\n \r\n    def __iadd__(self, other):\r\n        \"\"\"Update sorted list with values from `other`.\r\n \r\n        ``sl.__iadd__(other)`` <==> ``sl += other``\r\n \r\n        Values in `other` do not need to be in sorted order.\r\n \r\n        Runtime complexity: `O(k*log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('bat')\r\n        >>> sl += 'cat'\r\n        >>> sl\r\n        SortedList(['a', 'a', 'b', 'c', 't', 't'])\r\n \r\n        :param other: other iterable\r\n        :return: existing sorted list\r\n \r\n        \"\"\"\r\n        self._update(other)\r\n        return self\r\n \r\n    def __mul__(self, num):\r\n        \"\"\"Return new sorted list with `num` shallow copies of values.\r\n \r\n        ``sl.__mul__(num)`` <==> ``sl * num``\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl = SortedList('abc')\r\n        >>> sl * 3\r\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\r\n \r\n        :param int num: count of shallow copies\r\n        :return: new sorted list\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, []) * num\r\n        return self.__class__(values)\r\n \r\n    __rmul__ = __mul__\r\n \r\n    def __imul__(self, num):\r\n        \"\"\"Update the sorted list with `num` shallow copies of values.\r\n \r\n        ``sl.__imul__(num)`` <==> ``sl *= num``\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl = SortedList('abc')\r\n        >>> sl *= 3\r\n        >>> sl\r\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\r\n \r\n        :param int num: count of shallow copies\r\n        :return: existing sorted list\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, []) * num\r\n        self._clear()\r\n        self._update(values)\r\n        return self\r\n \r\n    def __make_cmp(seq_op, symbol, doc):\r\n        \"Make comparator method.\"\r\n \r\n        def comparer(self, other):\r\n            \"Compare method for sorted list and sequence.\"\r\n            if not isinstance(other, Sequence):\r\n                return NotImplemented\r\n \r\n            self_len = self._len\r\n            len_other = len(other)\r\n \r\n            if self_len != len_other:\r\n                if seq_op is eq:\r\n                    return False\r\n                if seq_op is ne:\r\n                    return True\r\n \r\n            for alpha, beta in zip(self, other):\r\n                if alpha != beta:\r\n                    return seq_op(alpha, beta)\r\n \r\n            return seq_op(self_len, len_other)\r\n \r\n        seq_op_name = seq_op.__name__\r\n        comparer.__name__ = \"__{0}__\".format(seq_op_name)\r\n        doc_str = \"\"\"Return true if and only if sorted list is {0} `other`.\r\n \r\n        ``sl.__{1}__(other)`` <==> ``sl {2} other``\r\n \r\n        Comparisons use lexicographical order as with sequences.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        :param other: `other` sequence\r\n        :return: true if sorted list is {0} `other`\r\n \r\n        \"\"\"\r\n        comparer.__doc__ = dedent(doc_str.format(doc, seq_op_name, symbol))\r\n        return comparer\r\n \r\n    __eq__ = __make_cmp(eq, \"==\", \"equal to\")\r\n    __ne__ = __make_cmp(ne, \"!=\", \"not equal to\")\r\n    __lt__ = __make_cmp(lt, \"<\", \"less than\")\r\n    __gt__ = __make_cmp(gt, \">\", \"greater than\")\r\n    __le__ = __make_cmp(le, \"<=\", \"less than or equal to\")\r\n    __ge__ = __make_cmp(ge, \">=\", \"greater than or equal to\")\r\n \r\n    __make_cmp = staticmethod(__make_cmp)\r\n \r\n    def __reduce__(self):\r\n        values = reduce(iadd, self._lists, [])\r\n        return (type(self), (values,))\r\n \r\n    def _check(self):\r\n        \"\"\"Check invariants of sorted list.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        \"\"\"\r\n        try:\r\n            assert self._load >= 4\r\n            assert len(self._maxes) == len(self._lists)\r\n            assert self._len == sum(len(sublist) for sublist in self._lists)\r\n \r\n            # Check all sublists are sorted.\r\n \r\n            for sublist in self._lists:\r\n                for pos in range(1, len(sublist)):\r\n                    assert sublist[pos - 1] <= sublist[pos]\r\n \r\n            # Check beginning/end of sublists are sorted.\r\n \r\n            for pos in range(1, len(self._lists)):\r\n                assert self._lists[pos - 1][-1] <= self._lists[pos][0]\r\n \r\n            # Check _maxes index is the last value of each sublist.\r\n \r\n            for pos in range(len(self._maxes)):\r\n                assert self._maxes[pos] == self._lists[pos][-1]\r\n \r\n            # Check sublist lengths are less than double load-factor.\r\n \r\n            double = self._load << 1\r\n            assert all(len(sublist) <= double for sublist in self._lists)\r\n \r\n            # Check sublist lengths are greater than half load-factor for all\r\n            # but the last sublist.\r\n \r\n            half = self._load >> 1\r\n            for pos in range(0, len(self._lists) - 1):\r\n                assert len(self._lists[pos]) >= half\r\n \r\n            if self._index:\r\n                assert self._len == self._index[0]\r\n                assert len(self._index) == self._offset + len(self._lists)\r\n \r\n                # Check index leaf nodes equal length of sublists.\r\n \r\n                for pos in range(len(self._lists)):\r\n                    leaf = self._index[self._offset + pos]\r\n                    assert leaf == len(self._lists[pos])\r\n \r\n                # Check index branch nodes are the sum of their children.\r\n \r\n                for pos in range(self._offset):\r\n                    child = (pos << 1) + 1\r\n                    if child >= len(self._index):\r\n                        assert self._index[pos] == 0\r\n                    elif child + 1 == len(self._index):\r\n                        assert self._index[pos] == self._index[child]\r\n                    else:\r\n                        child_sum = self._index[child] + self._index[child + 1]\r\n                        assert child_sum == self._index[pos]\r\n        except:\r\n            traceback.print_exc(file=sys.stdout)\r\n            print(\"len\", self._len)\r\n            print(\"load\", self._load)\r\n            print(\"offset\", self._offset)\r\n            print(\"len_index\", len(self._index))\r\n            print(\"index\", self._index)\r\n            print(\"len_maxes\", len(self._maxes))\r\n            print(\"maxes\", self._maxes)\r\n            print(\"len_lists\", len(self._lists))\r\n            print(\"lists\", self._lists)\r\n            raise\r\n\r\n############### END OF SORTED LIST TEMPLATE ########################\r\nfrom bisect import bisect_left\r\n# from sortedcontainers import SortedList\r\n# input = sys.stdin.readline\r\n\r\n\r\ndef main():    \r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = []\r\n        res = 0\r\n        for _ in range(n):\r\n            a, b = (int(i) for i in input().split())\r\n            arr.append((a, b))\r\n        arr.sort(reverse=True)\r\n        sl = SortedList()\r\n        for a, b in arr:\r\n            # res += bisect_left(sl, b)\r\n            res += sl.bisect_left(b)\r\n            sl.add(b)\r\n        print(res)\r\n\r\nmain()",
        "rejectedCode": "############### TEMPLATE FOR SORTED LIST IN PYTHON #######################\r\n \r\nimport sys\r\nimport traceback\r\nfrom bisect import bisect_left, bisect_right, insort\r\nfrom itertools import chain, repeat, starmap\r\nfrom math import log\r\nfrom operator import add, eq, ne, gt, ge, lt, le, iadd\r\nfrom textwrap import dedent\r\nfrom collections.abc import Sequence, MutableSequence\r\nfrom functools import reduce\r\n \r\nclass SortedList(MutableSequence):\r\n    \"\"\"Sorted list is a sorted mutab\u0192edpandle sequence.\r\n \r\n    Sorted list values are maintained in sorted order.\r\n \r\n    Sorted list values must be comparable. The total ordering of values must\r\n    not change while they are stored in the sorted list.\r\n \r\n    Methods for adding values:\r\n \r\n    * :func:`SortedList.add`\r\n    * :func:`SortedList.update`\r\n    * :func:`SortedList.__add__`\r\n    * :func:`SortedList.__iadd__`\r\n    * :func:`SortedList.__mul__`\r\n    * :func:`SortedList.__imul__`\r\n \r\n    Methods for removing values:\r\n \r\n    * :func:`SortedList.clear`\r\n    * :func:`SortedList.discard`\r\n    * :func:`SortedList.remove`\r\n    * :func:`SortedList.pop`\r\n    * :func:`SortedList.__delitem__`\r\n \r\n    Methods for looking up values:\r\n \r\n    * :func:`SortedList.bisect_left`\r\n    * :func:`SortedList.bisect_right`\r\n    * :func:`SortedList.count`\r\n    * :func:`SortedList.index`\r\n    * :func:`SortedList.__contains__`\r\n    * :func:`SortedList.__getitem__`\r\n \r\n    Methods for iterating values:\r\n \r\n    * :func:`SortedList.irange`\r\n    * :func:`SortedList.islice`\r\n    * :func:`SortedList.__iter__`\r\n    * :func:`SortedList.__reversed__`\r\n \r\n    Methods for miscellany:\r\n \r\n    * :func:`SortedList.copy`\r\n    * :func:`SortedList.__len__`\r\n    * :func:`SortedList.__repr__`\r\n    * :func:`SortedList._check`\r\n    * :func:`SortedList._reset`\r\n \r\n    Sorted lists use lexicographical ordering semantics when compared to other\r\n    sequences.\r\n \r\n    Some methods of mutable sequences are not supported and will raise\r\n    not-implemented error.\r\n \r\n    \"\"\"\r\n \r\n    DEFAULT_LOAD_FACTOR = 1000\r\n \r\n    def __init__(self, iterable=None, key=None):\r\n        \"\"\"Initialize sorted list instance.\r\n \r\n        Optional `iterable` argument provides an initial iterable of values to\r\n        initialize the sorted list.\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl = SortedList()\r\n        >>> sl\r\n        SortedList([])\r\n        >>> sl = SortedList([3, 1, 2, 5, 4])\r\n        >>> sl\r\n        SortedList([1, 2, 3, 4, 5])\r\n \r\n        :param iterable: initial values (optional)\r\n \r\n        \"\"\"\r\n        assert key is None\r\n        self._len = 0\r\n        self._load = self.DEFAULT_LOAD_FACTOR\r\n        self._lists = []\r\n        self._maxes = []\r\n        self._index = []\r\n        self._offset = 0\r\n \r\n        if iterable is not None:\r\n            self._update(iterable)\r\n \r\n    @property\r\n    def key(self):  # pylint: disable=useless-return\r\n        \"\"\"Function used to extract comparison key from values.\r\n \r\n        Sorted list compares values directly so the key function is none.\r\n \r\n        \"\"\"\r\n        return None\r\n \r\n    def _reset(self, load):\r\n        \"\"\"Reset sorted list load factor.\r\n \r\n        The `load` specifies the load-factor of the list. The default load\r\n        factor of 1000 works well for lists from tens to tens-of-millions of\r\n        values. Good practice is to use a value that is the cube root of the\r\n        list size. With billions of elements, the best load factor depends on\r\n        your usage. It's best to leave the load factor at the default until you\r\n        start benchmarking.\r\n \r\n        See :doc:`implementation` and :doc:`performance-scale` for more\r\n        information.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        :param int load: load-factor for sorted list sublists\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, [])\r\n        self._clear()\r\n        self._load = load\r\n        self._update(values)\r\n \r\n    def clear(self):\r\n        \"\"\"Remove all values from sorted list.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        \"\"\"\r\n        self._len = 0\r\n        del self._lists[:]\r\n        del self._maxes[:]\r\n        del self._index[:]\r\n        self._offset = 0\r\n \r\n    _clear = clear\r\n \r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted list.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList()\r\n        >>> sl.add(3)\r\n        >>> sl.add(1)\r\n        >>> sl.add(2)\r\n        >>> sl\r\n        SortedList([1, 2, 3])\r\n \r\n        :param value: value to add to sorted list\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n \r\n        if _maxes:\r\n            pos = bisect_right(_maxes, value)\r\n \r\n            if pos == len(_maxes):\r\n                pos -= 1\r\n                _lists[pos].append(value)\r\n                _maxes[pos] = value\r\n            else:\r\n                insort(_lists[pos], value)\r\n \r\n            self._expand(pos)\r\n        else:\r\n            _lists.append([value])\r\n            _maxes.append(value)\r\n \r\n        self._len += 1\r\n \r\n    def _expand(self, pos):\r\n        \"\"\"Split sublists with length greater than double the load-factor.\r\n \r\n        Updates the index when the sublist length is less than double the load\r\n        level. This requires incrementing the nodes in a traversal from the\r\n        leaf node to the root. For an example traversal see\r\n        ``SortedList._loc``.\r\n \r\n        \"\"\"\r\n        _load = self._load\r\n        _lists = self._lists\r\n        _index = self._index\r\n \r\n        if len(_lists[pos]) > (_load << 1):\r\n            _maxes = self._maxes\r\n \r\n            _lists_pos = _lists[pos]\r\n            half = _lists_pos[_load:]\r\n            del _lists_pos[_load:]\r\n            _maxes[pos] = _lists_pos[-1]\r\n \r\n            _lists.insert(pos + 1, half)\r\n            _maxes.insert(pos + 1, half[-1])\r\n \r\n            del _index[:]\r\n        else:\r\n            if _index:\r\n                child = self._offset + pos\r\n                while child:\r\n                    _index[child] += 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] += 1\r\n \r\n    def update(self, iterable):\r\n        \"\"\"Update sorted list by adding all values from `iterable`.\r\n \r\n        Runtime complexity: `O(k*log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList()\r\n        >>> sl.update([3, 1, 2])\r\n        >>> sl\r\n        SortedList([1, 2, 3])\r\n \r\n        :param iterable: iterable of values to add\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n        values = sorted(iterable)\r\n \r\n        if _maxes:\r\n            if len(values) * 4 >= self._len:\r\n                _lists.append(values)\r\n                values = reduce(iadd, _lists, [])\r\n                values.sort()\r\n                self._clear()\r\n            else:\r\n                _add = self.add\r\n                for val in values:\r\n                    _add(val)\r\n                return\r\n \r\n        _load = self._load\r\n        _lists.extend(\r\n            values[pos : (pos + _load)] for pos in range(0, len(values), _load)\r\n        )\r\n        _maxes.extend(sublist[-1] for sublist in _lists)\r\n        self._len = len(values)\r\n        del self._index[:]\r\n \r\n    _update = update\r\n \r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted list.\r\n \r\n        ``sl.__contains__(value)`` <==> ``value in sl``\r\n \r\n        Runtime complexity: `O(log(n))`\r\n \r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> 3 in sl\r\n        True\r\n \r\n        :param value: search for value in sorted list\r\n        :return: true if `value` in sorted list\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return False\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return False\r\n \r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n \r\n        return _lists[pos][idx] == value\r\n \r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted list if it is a member.\r\n \r\n        If `value` is not a member, do nothing.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> sl.discard(5)\r\n        >>> sl.discard(0)\r\n        >>> sl == [1, 2, 3, 4]\r\n        True\r\n \r\n        :param value: `value` to discard from sorted list\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return\r\n \r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n \r\n        if _lists[pos][idx] == value:\r\n            self._delete(pos, idx)\r\n \r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\r\n \r\n        If `value` is not a member, raise ValueError.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> sl.remove(5)\r\n        >>> sl == [1, 2, 3, 4]\r\n        True\r\n        >>> sl.remove(0)\r\n        Traceback (most recent call last):\r\n          ...\r\n        ValueError: 0 not in list\r\n \r\n        :param value: `value` to remove from sorted list\r\n        :raises ValueError: if `value` is not in sorted list\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            raise ValueError(\"{0!r} not in list\".format(value))\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            raise ValueError(\"{0!r} not in list\".format(value))\r\n \r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n \r\n        if _lists[pos][idx] == value:\r\n            self._delete(pos, idx)\r\n        else:\r\n            raise ValueError(\"{0!r} not in list\".format(value))\r\n \r\n    def _delete(self, pos, idx):\r\n        \"\"\"Delete value at the given `(pos, idx)`.\r\n \r\n        Combines lists that are less than half the load level.\r\n \r\n        Updates the index when the sublist length is more than half the load\r\n        level. This requires decrementing the nodes in a traversal from the\r\n        leaf node to the root. For an example traversal see\r\n        ``SortedList._loc``.\r\n \r\n        :param int pos: lists index\r\n        :param int idx: sublist index\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n        _index = self._index\r\n \r\n        _lists_pos = _lists[pos]\r\n \r\n        del _lists_pos[idx]\r\n        self._len -= 1\r\n \r\n        len_lists_pos = len(_lists_pos)\r\n \r\n        if len_lists_pos > (self._load >> 1):\r\n            _maxes[pos] = _lists_pos[-1]\r\n \r\n            if _index:\r\n                child = self._offset + pos\r\n                while child > 0:\r\n                    _index[child] -= 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] -= 1\r\n        elif len(_lists) > 1:\r\n            if not pos:\r\n                pos += 1\r\n \r\n            prev = pos - 1\r\n            _lists[prev].extend(_lists[pos])\r\n            _maxes[prev] = _lists[prev][-1]\r\n \r\n            del _lists[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n \r\n            self._expand(prev)\r\n        elif len_lists_pos:\r\n            _maxes[pos] = _lists_pos[-1]\r\n        else:\r\n            del _lists[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n \r\n    def _loc(self, pos, idx):\r\n        \"\"\"Convert an index pair (lists index, sublist index) into a single\r\n        index number that corresponds to the position of the value in the\r\n        sorted list.\r\n \r\n        Many queries require the index be built. Details of the index are\r\n        described in ``SortedList._build_index``.\r\n \r\n        Indexing requires traversing the tree from a leaf node to the root. The\r\n        parent of each node is easily computable at ``(pos - 1) // 2``.\r\n \r\n        Left-child nodes are always at odd indices and right-child nodes are\r\n        always at even indices.\r\n \r\n        When traversing up from a right-child node, increment the total by the\r\n        left-child node.\r\n \r\n        The final index is the sum from traversal and the index in the sublist.\r\n \r\n        For example, using the index from ``SortedList._build_index``::\r\n \r\n            _index = 14 5 9 3 2 4 5\r\n            _offset = 3\r\n \r\n        Tree::\r\n \r\n                 14\r\n              5      9\r\n            3   2  4   5\r\n \r\n        Converting an index pair (2, 3) into a single index involves iterating\r\n        like so:\r\n \r\n        1. Starting at the leaf node: offset + alpha = 3 + 2 = 5. We identify\r\n           the node as a left-child node. At such nodes, we simply traverse to\r\n           the parent.\r\n \r\n        2. At node 9, position 2, we recognize the node as a right-child node\r\n           and accumulate the left-child in our total. Total is now 5 and we\r\n           traverse to the parent at position 0.\r\n \r\n        3. Iteration ends at the root.\r\n \r\n        The index is then the sum of the total and sublist index: 5 + 3 = 8.\r\n \r\n        :param int pos: lists index\r\n        :param int idx: sublist index\r\n        :return: index in sorted list\r\n \r\n        \"\"\"\r\n        if not pos:\r\n            return idx\r\n \r\n        _index = self._index\r\n \r\n        if not _index:\r\n            self._build_index()\r\n \r\n        total = 0\r\n \r\n        # Increment pos to point in the index to len(self._lists[pos]).\r\n \r\n        pos += self._offset\r\n \r\n        # Iterate until reaching the root of the index tree at pos = 0.\r\n \r\n        while pos:\r\n \r\n            # Right-child nodes are at odd indices. At such indices\r\n            # account the total below the left child node.\r\n \r\n            if not pos & 1:\r\n                total += _index[pos - 1]\r\n \r\n            # Advance pos to the parent node.\r\n \r\n            pos = (pos - 1) >> 1\r\n \r\n        return total + idx\r\n \r\n    def _pos(self, idx):\r\n        \"\"\"Convert an index into an index pair (lists index, sublist index)\r\n        that can be used to access the corresponding lists position.\r\n \r\n        Many queries require the index be built. Details of the index are\r\n        described in ``SortedList._build_index``.\r\n \r\n        Indexing requires traversing the tree to a leaf node. Each node has two\r\n        children which are easily computable. Given an index, pos, the\r\n        left-child is at ``pos * 2 + 1`` and the right-child is at ``pos * 2 +\r\n        2``.\r\n \r\n        When the index is less than the left-child, traversal moves to the\r\n        left sub-tree. Otherwise, the index is decremented by the left-child\r\n        and traversal moves to the right sub-tree.\r\n \r\n        At a child node, the indexing pair is computed from the relative\r\n        position of the child node as compared with the offset and the remaining\r\n        index.\r\n \r\n        For example, using the index from ``SortedList._build_index``::\r\n \r\n            _index = 14 5 9 3 2 4 5\r\n            _offset = 3\r\n \r\n        Tree::\r\n \r\n                 14\r\n              5      9\r\n            3   2  4   5\r\n \r\n        Indexing position 8 involves iterating like so:\r\n \r\n        1. Starting at the root, position 0, 8 is compared with the left-child\r\n           node (5) which it is greater than. When greater the index is\r\n           decremented and the position is updated to the right child node.\r\n \r\n        2. At node 9 with index 3, we again compare the index to the left-child\r\n           node with value 4. Because the index is the less than the left-child\r\n           node, we simply traverse to the left.\r\n \r\n        3. At node 4 with index 3, we recognize that we are at a leaf node and\r\n           stop iterating.\r\n \r\n        4. To compute the sublist index, we subtract the offset from the index\r\n           of the leaf node: 5 - 3 = 2. To compute the index in the sublist, we\r\n           simply use the index remaining from iteration. In this case, 3.\r\n \r\n        The final index pair from our example is (2, 3) which corresponds to\r\n        index 8 in the sorted list.\r\n \r\n        :param int idx: index in sorted list\r\n        :return: (lists index, sublist index) pair\r\n \r\n        \"\"\"\r\n        if idx < 0:\r\n            last_len = len(self._lists[-1])\r\n \r\n            if (-idx) <= last_len:\r\n                return len(self._lists) - 1, last_len + idx\r\n \r\n            idx += self._len\r\n \r\n            if idx < 0:\r\n                raise IndexError(\"list index out of range\")\r\n        elif idx >= self._len:\r\n            raise IndexError(\"list index out of range\")\r\n \r\n        if idx < len(self._lists[0]):\r\n            return 0, idx\r\n \r\n        _index = self._index\r\n \r\n        if not _index:\r\n            self._build_index()\r\n \r\n        pos = 0\r\n        child = 1\r\n        len_index = len(_index)\r\n \r\n        while child < len_index:\r\n            index_child = _index[child]\r\n \r\n            if idx < index_child:\r\n                pos = child\r\n            else:\r\n                idx -= index_child\r\n                pos = child + 1\r\n \r\n            child = (pos << 1) + 1\r\n \r\n        return (pos - self._offset, idx)\r\n \r\n    def _build_index(self):\r\n        \"\"\"Build a positional index for indexing the sorted list.\r\n \r\n        Indexes are represented as binary trees in a dense array notation\r\n        similar to a binary heap.\r\n \r\n        For example, given a lists representation storing integers::\r\n \r\n            0: [1, 2, 3]\r\n            1: [4, 5]\r\n            2: [6, 7, 8, 9]\r\n            3: [10, 11, 12, 13, 14]\r\n \r\n        The first transformation maps the sub-lists by their length. The\r\n        first row of the index is the length of the sub-lists::\r\n \r\n            0: [3, 2, 4, 5]\r\n \r\n        Each row after that is the sum of consecutive pairs of the previous\r\n        row::\r\n \r\n            1: [5, 9]\r\n            2: [14]\r\n \r\n        Finally, the index is built by concatenating these lists together::\r\n \r\n            _index = [14, 5, 9, 3, 2, 4, 5]\r\n \r\n        An offset storing the start of the first row is also stored::\r\n \r\n            _offset = 3\r\n \r\n        When built, the index can be used for efficient indexing into the list.\r\n        See the comment and notes on ``SortedList._pos`` for details.\r\n \r\n        \"\"\"\r\n        row0 = list(map(len, self._lists))\r\n \r\n        if len(row0) == 1:\r\n            self._index[:] = row0\r\n            self._offset = 0\r\n            return\r\n \r\n        head = iter(row0)\r\n        tail = iter(head)\r\n        row1 = list(starmap(add, zip(head, tail)))\r\n \r\n        if len(row0) & 1:\r\n            row1.append(row0[-1])\r\n \r\n        if len(row1) == 1:\r\n            self._index[:] = row1 + row0\r\n            self._offset = 1\r\n            return\r\n \r\n        size = 2 ** (int(log(len(row1) - 1, 2)) + 1)\r\n        row1.extend(repeat(0, size - len(row1)))\r\n        tree = [row0, row1]\r\n \r\n        while len(tree[-1]) > 1:\r\n            head = iter(tree[-1])\r\n            tail = iter(head)\r\n            row = list(starmap(add, zip(head, tail)))\r\n            tree.append(row)\r\n \r\n        reduce(iadd, reversed(tree), self._index)\r\n        self._offset = size * 2 - 1\r\n \r\n    def __delitem__(self, index):\r\n        \"\"\"Remove value at `index` from sorted list.\r\n \r\n        ``sl.__delitem__(index)`` <==> ``del sl[index]``\r\n \r\n        Supports slicing.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('abcde')\r\n        >>> del sl[2]\r\n        >>> sl\r\n        SortedList(['a', 'b', 'd', 'e'])\r\n        >>> del sl[:2]\r\n        >>> sl\r\n        SortedList(['d', 'e'])\r\n \r\n        :param index: integer or slice for indexing\r\n        :raises IndexError: if index out of range\r\n \r\n        \"\"\"\r\n        if isinstance(index, slice):\r\n            start, stop, step = index.indices(self._len)\r\n \r\n            if step == 1 and start < stop:\r\n                if start == 0 and stop == self._len:\r\n                    return self._clear()\r\n                elif self._len <= 8 * (stop - start):\r\n                    values = self._getitem(slice(None, start))\r\n                    if stop < self._len:\r\n                        values += self._getitem(slice(stop, None))\r\n                    self._clear()\r\n                    return self._update(values)\r\n \r\n            indices = range(start, stop, step)\r\n \r\n            # Delete items from greatest index to least so\r\n            # that the indices remain valid throughout iteration.\r\n \r\n            if step > 0:\r\n                indices = reversed(indices)\r\n \r\n            _pos, _delete = self._pos, self._delete\r\n \r\n            for index in indices:\r\n                pos, idx = _pos(index)\r\n                _delete(pos, idx)\r\n        else:\r\n            pos, idx = self._pos(index)\r\n            self._delete(pos, idx)\r\n \r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted list.\r\n \r\n        ``sl.__getitem__(index)`` <==> ``sl[index]``\r\n \r\n        Supports slicing.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('abcde')\r\n        >>> sl[1]\r\n        'b'\r\n        >>> sl[-1]\r\n        'e'\r\n        >>> sl[2:5]\r\n        ['c', 'd', 'e']\r\n \r\n        :param index: integer or slice for indexing\r\n        :return: value or list of values\r\n        :raises IndexError: if index out of range\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n \r\n        if isinstance(index, slice):\r\n            start, stop, step = index.indices(self._len)\r\n \r\n            if step == 1 and start < stop:\r\n                # Whole slice optimization: start to stop slices the whole\r\n                # sorted list.\r\n \r\n                if start == 0 and stop == self._len:\r\n                    return reduce(iadd, self._lists, [])\r\n \r\n                start_pos, start_idx = self._pos(start)\r\n                start_list = _lists[start_pos]\r\n                stop_idx = start_idx + stop - start\r\n \r\n                # Small slice optimization: start index and stop index are\r\n                # within the start list.\r\n \r\n                if len(start_list) >= stop_idx:\r\n                    return start_list[start_idx:stop_idx]\r\n \r\n                if stop == self._len:\r\n                    stop_pos = len(_lists) - 1\r\n                    stop_idx = len(_lists[stop_pos])\r\n                else:\r\n                    stop_pos, stop_idx = self._pos(stop)\r\n \r\n                prefix = _lists[start_pos][start_idx:]\r\n                middle = _lists[(start_pos + 1) : stop_pos]\r\n                result = reduce(iadd, middle, prefix)\r\n                result += _lists[stop_pos][:stop_idx]\r\n \r\n                return result\r\n \r\n            if step == -1 and start > stop:\r\n                result = self._getitem(slice(stop + 1, start + 1))\r\n                result.reverse()\r\n                return result\r\n \r\n            # Return a list because a negative step could\r\n            # reverse the order of the items and this could\r\n            # be the desired behavior.\r\n \r\n            indices = range(start, stop, step)\r\n            return list(self._getitem(index) for index in indices)\r\n        else:\r\n            if self._len:\r\n                if index == 0:\r\n                    return _lists[0][0]\r\n                elif index == -1:\r\n                    return _lists[-1][-1]\r\n            else:\r\n                raise IndexError(\"list index out of range\")\r\n \r\n            if 0 <= index < len(_lists[0]):\r\n                return _lists[0][index]\r\n \r\n            len_last = len(_lists[-1])\r\n \r\n            if -len_last < index < 0:\r\n                return _lists[-1][len_last + index]\r\n \r\n            pos, idx = self._pos(index)\r\n            return _lists[pos][idx]\r\n \r\n    _getitem = __getitem__\r\n \r\n    def __setitem__(self, index, value):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        ``sl.__setitem__(index, value)`` <==> ``sl[index] = value``\r\n \r\n        :raises NotImplementedError: use ``del sl[index]`` and\r\n            ``sl.add(value)`` instead\r\n \r\n        \"\"\"\r\n        message = \"use ``del sl[index]`` and ``sl.add(value)`` instead\"\r\n        raise NotImplementedError(message)\r\n \r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the sorted list.\r\n \r\n        ``sl.__iter__()`` <==> ``iter(sl)``\r\n \r\n        Iterating the sorted list while adding or deleting values may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all values.\r\n \r\n        \"\"\"\r\n        return chain.from_iterable(self._lists)\r\n \r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the sorted list.\r\n \r\n        ``sl.__reversed__()`` <==> ``reversed(sl)``\r\n \r\n        Iterating the sorted list while adding or deleting values may raise a\r\n        :exc:`RuntimeError` or fail to iterate over all values.\r\n \r\n        \"\"\"\r\n        return chain.from_iterable(map(reversed, reversed(self._lists)))\r\n \r\n    def reverse(self):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        Sorted list maintains values in ascending sort order. Values may not be\r\n        reversed in-place.\r\n \r\n        Use ``reversed(sl)`` for an iterator over values in descending sort\r\n        order.\r\n \r\n        Implemented to override `MutableSequence.reverse` which provides an\r\n        erroneous default implementation.\r\n \r\n        :raises NotImplementedError: use ``reversed(sl)`` instead\r\n \r\n        \"\"\"\r\n        raise NotImplementedError(\"use ``reversed(sl)`` instead\")\r\n \r\n    def islice(self, start=None, stop=None, reverse=False):\r\n        \"\"\"Return an iterator that slices sorted list from `start` to `stop`.\r\n \r\n        The `start` and `stop` index are treated inclusive and exclusive,\r\n        respectively.\r\n \r\n        Both `start` and `stop` default to `None` which is automatically\r\n        inclusive of the beginning and end of the sorted list.\r\n \r\n        When `reverse` is `True` the values are yielded from the iterator in\r\n        reverse order; `reverse` defaults to `False`.\r\n \r\n        >>> sl = SortedList('abcdefghij')\r\n        >>> it = sl.islice(2, 6)\r\n        >>> list(it)\r\n        ['c', 'd', 'e', 'f']\r\n \r\n        :param int start: start index (inclusive)\r\n        :param int stop: stop index (exclusive)\r\n        :param bool reverse: yield values in reverse order\r\n        :return: iterator\r\n \r\n        \"\"\"\r\n        _len = self._len\r\n \r\n        if not _len:\r\n            return iter(())\r\n \r\n        start, stop, _ = slice(start, stop).indices(self._len)\r\n \r\n        if start >= stop:\r\n            return iter(())\r\n \r\n        _pos = self._pos\r\n \r\n        min_pos, min_idx = _pos(start)\r\n \r\n        if stop == _len:\r\n            max_pos = len(self._lists) - 1\r\n            max_idx = len(self._lists[-1])\r\n        else:\r\n            max_pos, max_idx = _pos(stop)\r\n \r\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\r\n \r\n    def _islice(self, min_pos, min_idx, max_pos, max_idx, reverse):\r\n        \"\"\"Return an iterator that slices sorted list using two index pairs.\r\n \r\n        The index pairs are (min_pos, min_idx) and (max_pos, max_idx), the\r\n        first inclusive and the latter exclusive. See `_pos` for details on how\r\n        an index is converted to an index pair.\r\n \r\n        When `reverse` is `True`, values are yielded from the iterator in\r\n        reverse order.\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n \r\n        if min_pos > max_pos:\r\n            return iter(())\r\n \r\n        if min_pos == max_pos:\r\n            if reverse:\r\n                indices = reversed(range(min_idx, max_idx))\r\n                return map(_lists[min_pos].__getitem__, indices)\r\n \r\n            indices = range(min_idx, max_idx)\r\n            return map(_lists[min_pos].__getitem__, indices)\r\n \r\n        next_pos = min_pos + 1\r\n \r\n        if next_pos == max_pos:\r\n            if reverse:\r\n                min_indices = range(min_idx, len(_lists[min_pos]))\r\n                max_indices = range(max_idx)\r\n                return chain(\r\n                    map(_lists[max_pos].__getitem__, reversed(max_indices)),\r\n                    map(_lists[min_pos].__getitem__, reversed(min_indices)),\r\n                )\r\n \r\n            min_indices = range(min_idx, len(_lists[min_pos]))\r\n            max_indices = range(max_idx)\r\n            return chain(\r\n                map(_lists[min_pos].__getitem__, min_indices),\r\n                map(_lists[max_pos].__getitem__, max_indices),\r\n            )\r\n \r\n        if reverse:\r\n            min_indices = range(min_idx, len(_lists[min_pos]))\r\n            sublist_indices = range(next_pos, max_pos)\r\n            sublists = map(_lists.__getitem__, reversed(sublist_indices))\r\n            max_indices = range(max_idx)\r\n            return chain(\r\n                map(_lists[max_pos].__getitem__, reversed(max_indices)),\r\n                chain.from_iterable(map(reversed, sublists)),\r\n                map(_lists[min_pos].__getitem__, reversed(min_indices)),\r\n            )\r\n \r\n        min_indices = range(min_idx, len(_lists[min_pos]))\r\n        sublist_indices = range(next_pos, max_pos)\r\n        sublists = map(_lists.__getitem__, sublist_indices)\r\n        max_indices = range(max_idx)\r\n        return chain(\r\n            map(_lists[min_pos].__getitem__, min_indices),\r\n            chain.from_iterable(sublists),\r\n            map(_lists[max_pos].__getitem__, max_indices),\r\n        )\r\n \r\n    def irange(self, minimum=None, maximum=None, inclusive=(True, True), reverse=False):\r\n        \"\"\"Create an iterator of values between `minimum` and `maximum`.\r\n \r\n        Both `minimum` and `maximum` default to `None` which is automatically\r\n        inclusive of the beginning and end of the sorted list.\r\n \r\n        The argument `inclusive` is a pair of booleans that indicates whether\r\n        the minimum and maximum ought to be included in the range,\r\n        respectively. The default is ``(True, True)`` such that the range is\r\n        inclusive of both minimum and maximum.\r\n \r\n        When `reverse` is `True` the values are yielded from the iterator in\r\n        reverse order; `reverse` defaults to `False`.\r\n \r\n        >>> sl = SortedList('abcdefghij')\r\n        >>> it = sl.irange('c', 'f')\r\n        >>> list(it)\r\n        ['c', 'd', 'e', 'f']\r\n \r\n        :param minimum: minimum value to start iterating\r\n        :param maximum: maximum value to stop iterating\r\n        :param inclusive: pair of booleans\r\n        :param bool reverse: yield values in reverse order\r\n        :return: iterator\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return iter(())\r\n \r\n        _lists = self._lists\r\n \r\n        # Calculate the minimum (pos, idx) pair. By default this location\r\n        # will be inclusive in our calculation.\r\n \r\n        if minimum is None:\r\n            min_pos = 0\r\n            min_idx = 0\r\n        else:\r\n            if inclusive[0]:\r\n                min_pos = bisect_left(_maxes, minimum)\r\n \r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n \r\n                min_idx = bisect_left(_lists[min_pos], minimum)\r\n            else:\r\n                min_pos = bisect_right(_maxes, minimum)\r\n \r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n \r\n                min_idx = bisect_right(_lists[min_pos], minimum)\r\n \r\n        # Calculate the maximum (pos, idx) pair. By default this location\r\n        # will be exclusive in our calculation.\r\n \r\n        if maximum is None:\r\n            max_pos = len(_maxes) - 1\r\n            max_idx = len(_lists[max_pos])\r\n        else:\r\n            if inclusive[1]:\r\n                max_pos = bisect_right(_maxes, maximum)\r\n \r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_lists[max_pos])\r\n                else:\r\n                    max_idx = bisect_right(_lists[max_pos], maximum)\r\n            else:\r\n                max_pos = bisect_left(_maxes, maximum)\r\n \r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_lists[max_pos])\r\n                else:\r\n                    max_idx = bisect_left(_lists[max_pos], maximum)\r\n \r\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\r\n \r\n    def __len__(self):\r\n        \"\"\"Return the size of the sorted list.\r\n \r\n        ``sl.__len__()`` <==> ``len(sl)``\r\n \r\n        :return: size of sorted list\r\n \r\n        \"\"\"\r\n        return self._len\r\n \r\n    def bisect_left(self, value):\r\n        \"\"\"Return an index to insert `value` in the sorted list.\r\n \r\n        If the `value` is already present, the insertion point will be before\r\n        (to the left of) any existing values.\r\n \r\n        Similar to the `bisect` module in the standard library.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([10, 11, 12, 13, 14])\r\n        >>> sl.bisect_left(12)\r\n        2\r\n \r\n        :param value: insertion index of value in sorted list\r\n        :return: index\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return 0\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return self._len\r\n \r\n        idx = bisect_left(self._lists[pos], value)\r\n        return self._loc(pos, idx)\r\n \r\n    def bisect_right(self, value):\r\n        \"\"\"Return an index to insert `value` in the sorted list.\r\n \r\n        Similar to `bisect_left`, but if `value` is already present, the\r\n        insertion point will be after (to the right of) any existing values.\r\n \r\n        Similar to the `bisect` module in the standard library.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([10, 11, 12, 13, 14])\r\n        >>> sl.bisect_right(12)\r\n        3\r\n \r\n        :param value: insertion index of value in sorted list\r\n        :return: index\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return 0\r\n \r\n        pos = bisect_right(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return self._len\r\n \r\n        idx = bisect_right(self._lists[pos], value)\r\n        return self._loc(pos, idx)\r\n \r\n    bisect = bisect_right\r\n    _bisect_right = bisect_right\r\n \r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted list.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])\r\n        >>> sl.count(3)\r\n        3\r\n \r\n        :param value: value to count in sorted list\r\n        :return: count\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return 0\r\n \r\n        pos_left = bisect_left(_maxes, value)\r\n \r\n        if pos_left == len(_maxes):\r\n            return 0\r\n \r\n        _lists = self._lists\r\n        idx_left = bisect_left(_lists[pos_left], value)\r\n        pos_right = bisect_right(_maxes, value)\r\n \r\n        if pos_right == len(_maxes):\r\n            return self._len - self._loc(pos_left, idx_left)\r\n \r\n        idx_right = bisect_right(_lists[pos_right], value)\r\n \r\n        if pos_left == pos_right:\r\n            return idx_right - idx_left\r\n \r\n        right = self._loc(pos_right, idx_right)\r\n        left = self._loc(pos_left, idx_left)\r\n        return right - left\r\n \r\n    def copy(self):\r\n        \"\"\"Return a shallow copy of the sorted list.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        :return: new sorted list\r\n \r\n        \"\"\"\r\n        return self.__class__(self)\r\n \r\n    __copy__ = copy\r\n \r\n    def append(self, value):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        Implemented to override `MutableSequence.append` which provides an\r\n        erroneous default implementation.\r\n \r\n        :raises NotImplementedError: use ``sl.add(value)`` instead\r\n \r\n        \"\"\"\r\n        raise NotImplementedError(\"use ``sl.add(value)`` instead\")\r\n \r\n    def extend(self, values):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        Implemented to override `MutableSequence.extend` which provides an\r\n        erroneous default implementation.\r\n \r\n        :raises NotImplementedError: use ``sl.update(values)`` instead\r\n \r\n        \"\"\"\r\n        raise NotImplementedError(\"use ``sl.update(values)`` instead\")\r\n \r\n    def insert(self, index, value):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        :raises NotImplementedError: use ``sl.add(value)`` instead\r\n \r\n        \"\"\"\r\n        raise NotImplementedError(\"use ``sl.add(value)`` instead\")\r\n \r\n    def pop(self, index=-1):\r\n        \"\"\"Remove and return value at `index` in sorted list.\r\n \r\n        Raise :exc:`IndexError` if the sorted list is empty or index is out of\r\n        range.\r\n \r\n        Negative indices are supported.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('abcde')\r\n        >>> sl.pop()\r\n        'e'\r\n        >>> sl.pop(2)\r\n        'c'\r\n        >>> sl\r\n        SortedList(['a', 'b', 'd'])\r\n \r\n        :param int index: index of value (default -1)\r\n        :return: value\r\n        :raises IndexError: if index is out of range\r\n \r\n        \"\"\"\r\n        if not self._len:\r\n            raise IndexError(\"pop index out of range\")\r\n \r\n        _lists = self._lists\r\n \r\n        if index == 0:\r\n            val = _lists[0][0]\r\n            self._delete(0, 0)\r\n            return val\r\n \r\n        if index == -1:\r\n            pos = len(_lists) - 1\r\n            loc = len(_lists[pos]) - 1\r\n            val = _lists[pos][loc]\r\n            self._delete(pos, loc)\r\n            return val\r\n \r\n        if 0 <= index < len(_lists[0]):\r\n            val = _lists[0][index]\r\n            self._delete(0, index)\r\n            return val\r\n \r\n        len_last = len(_lists[-1])\r\n \r\n        if -len_last < index < 0:\r\n            pos = len(_lists) - 1\r\n            loc = len_last + index\r\n            val = _lists[pos][loc]\r\n            self._delete(pos, loc)\r\n            return val\r\n \r\n        pos, idx = self._pos(index)\r\n        val = _lists[pos][idx]\r\n        self._delete(pos, idx)\r\n        return val\r\n \r\n    def index(self, value, start=None, stop=None):\r\n        \"\"\"Return first index of value in sorted list.\r\n \r\n        Raise ValueError if `value` is not present.\r\n \r\n        Index must be between `start` and `stop` for the `value` to be\r\n        considered present. The default value, None, for `start` and `stop`\r\n        indicate the beginning and end of the sorted list.\r\n \r\n        Negative indices are supported.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('abcde')\r\n        >>> sl.index('d')\r\n        3\r\n        >>> sl.index('z')\r\n        Traceback (most recent call last):\r\n          ...\r\n        ValueError: 'z' is not in list\r\n \r\n        :param value: value in sorted list\r\n        :param int start: start index (default None, start of sorted list)\r\n        :param int stop: stop index (default None, end of sorted list)\r\n        :return: index of value\r\n        :raises ValueError: if value is not present\r\n \r\n        \"\"\"\r\n        _len = self._len\r\n \r\n        if not _len:\r\n            raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n        if start is None:\r\n            start = 0\r\n        if start < 0:\r\n            start += _len\r\n        if start < 0:\r\n            start = 0\r\n \r\n        if stop is None:\r\n            stop = _len\r\n        if stop < 0:\r\n            stop += _len\r\n        if stop > _len:\r\n            stop = _len\r\n \r\n        if stop <= start:\r\n            raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n        _maxes = self._maxes\r\n        pos_left = bisect_left(_maxes, value)\r\n \r\n        if pos_left == len(_maxes):\r\n            raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n        _lists = self._lists\r\n        idx_left = bisect_left(_lists[pos_left], value)\r\n \r\n        if _lists[pos_left][idx_left] != value:\r\n            raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n        stop -= 1\r\n        left = self._loc(pos_left, idx_left)\r\n \r\n        if start <= left:\r\n            if left <= stop:\r\n                return left\r\n        else:\r\n            right = self._bisect_right(value) - 1\r\n \r\n            if start <= right:\r\n                return start\r\n \r\n        raise ValueError(\"{0!r} is not in list\".format(value))\r\n \r\n    def __add__(self, other):\r\n        \"\"\"Return new sorted list containing all values in both sequences.\r\n \r\n        ``sl.__add__(other)`` <==> ``sl + other``\r\n \r\n        Values in `other` do not need to be in sorted order.\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl1 = SortedList('bat')\r\n        >>> sl2 = SortedList('cat')\r\n        >>> sl1 + sl2\r\n        SortedList(['a', 'a', 'b', 'c', 't', 't'])\r\n \r\n        :param other: other iterable\r\n        :return: new sorted list\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, [])\r\n        values.extend(other)\r\n        return self.__class__(values)\r\n \r\n    __radd__ = __add__\r\n \r\n    def __iadd__(self, other):\r\n        \"\"\"Update sorted list with values from `other`.\r\n \r\n        ``sl.__iadd__(other)`` <==> ``sl += other``\r\n \r\n        Values in `other` do not need to be in sorted order.\r\n \r\n        Runtime complexity: `O(k*log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('bat')\r\n        >>> sl += 'cat'\r\n        >>> sl\r\n        SortedList(['a', 'a', 'b', 'c', 't', 't'])\r\n \r\n        :param other: other iterable\r\n        :return: existing sorted list\r\n \r\n        \"\"\"\r\n        self._update(other)\r\n        return self\r\n \r\n    def __mul__(self, num):\r\n        \"\"\"Return new sorted list with `num` shallow copies of values.\r\n \r\n        ``sl.__mul__(num)`` <==> ``sl * num``\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl = SortedList('abc')\r\n        >>> sl * 3\r\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\r\n \r\n        :param int num: count of shallow copies\r\n        :return: new sorted list\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, []) * num\r\n        return self.__class__(values)\r\n \r\n    __rmul__ = __mul__\r\n \r\n    def __imul__(self, num):\r\n        \"\"\"Update the sorted list with `num` shallow copies of values.\r\n \r\n        ``sl.__imul__(num)`` <==> ``sl *= num``\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl = SortedList('abc')\r\n        >>> sl *= 3\r\n        >>> sl\r\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\r\n \r\n        :param int num: count of shallow copies\r\n        :return: existing sorted list\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, []) * num\r\n        self._clear()\r\n        self._update(values)\r\n        return self\r\n \r\n    def __make_cmp(seq_op, symbol, doc):\r\n        \"Make comparator method.\"\r\n \r\n        def comparer(self, other):\r\n            \"Compare method for sorted list and sequence.\"\r\n            if not isinstance(other, Sequence):\r\n                return NotImplemented\r\n \r\n            self_len = self._len\r\n            len_other = len(other)\r\n \r\n            if self_len != len_other:\r\n                if seq_op is eq:\r\n                    return False\r\n                if seq_op is ne:\r\n                    return True\r\n \r\n            for alpha, beta in zip(self, other):\r\n                if alpha != beta:\r\n                    return seq_op(alpha, beta)\r\n \r\n            return seq_op(self_len, len_other)\r\n \r\n        seq_op_name = seq_op.__name__\r\n        comparer.__name__ = \"__{0}__\".format(seq_op_name)\r\n        doc_str = \"\"\"Return true if and only if sorted list is {0} `other`.\r\n \r\n        ``sl.__{1}__(other)`` <==> ``sl {2} other``\r\n \r\n        Comparisons use lexicographical order as with sequences.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        :param other: `other` sequence\r\n        :return: true if sorted list is {0} `other`\r\n \r\n        \"\"\"\r\n        comparer.__doc__ = dedent(doc_str.format(doc, seq_op_name, symbol))\r\n        return comparer\r\n \r\n    __eq__ = __make_cmp(eq, \"==\", \"equal to\")\r\n    __ne__ = __make_cmp(ne, \"!=\", \"not equal to\")\r\n    __lt__ = __make_cmp(lt, \"<\", \"less than\")\r\n    __gt__ = __make_cmp(gt, \">\", \"greater than\")\r\n    __le__ = __make_cmp(le, \"<=\", \"less than or equal to\")\r\n    __ge__ = __make_cmp(ge, \">=\", \"greater than or equal to\")\r\n \r\n    __make_cmp = staticmethod(__make_cmp)\r\n \r\n    def __reduce__(self):\r\n        values = reduce(iadd, self._lists, [])\r\n        return (type(self), (values,))\r\n \r\n    def _check(self):\r\n        \"\"\"Check invariants of sorted list.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        \"\"\"\r\n        try:\r\n            assert self._load >= 4\r\n            assert len(self._maxes) == len(self._lists)\r\n            assert self._len == sum(len(sublist) for sublist in self._lists)\r\n \r\n            # Check all sublists are sorted.\r\n \r\n            for sublist in self._lists:\r\n                for pos in range(1, len(sublist)):\r\n                    assert sublist[pos - 1] <= sublist[pos]\r\n \r\n            # Check beginning/end of sublists are sorted.\r\n \r\n            for pos in range(1, len(self._lists)):\r\n                assert self._lists[pos - 1][-1] <= self._lists[pos][0]\r\n \r\n            # Check _maxes index is the last value of each sublist.\r\n \r\n            for pos in range(len(self._maxes)):\r\n                assert self._maxes[pos] == self._lists[pos][-1]\r\n \r\n            # Check sublist lengths are less than double load-factor.\r\n \r\n            double = self._load << 1\r\n            assert all(len(sublist) <= double for sublist in self._lists)\r\n \r\n            # Check sublist lengths are greater than half load-factor for all\r\n            # but the last sublist.\r\n \r\n            half = self._load >> 1\r\n            for pos in range(0, len(self._lists) - 1):\r\n                assert len(self._lists[pos]) >= half\r\n \r\n            if self._index:\r\n                assert self._len == self._index[0]\r\n                assert len(self._index) == self._offset + len(self._lists)\r\n \r\n                # Check index leaf nodes equal length of sublists.\r\n \r\n                for pos in range(len(self._lists)):\r\n                    leaf = self._index[self._offset + pos]\r\n                    assert leaf == len(self._lists[pos])\r\n \r\n                # Check index branch nodes are the sum of their children.\r\n \r\n                for pos in range(self._offset):\r\n                    child = (pos << 1) + 1\r\n                    if child >= len(self._index):\r\n                        assert self._index[pos] == 0\r\n                    elif child + 1 == len(self._index):\r\n                        assert self._index[pos] == self._index[child]\r\n                    else:\r\n                        child_sum = self._index[child] + self._index[child + 1]\r\n                        assert child_sum == self._index[pos]\r\n        except:\r\n            traceback.print_exc(file=sys.stdout)\r\n            print(\"len\", self._len)\r\n            print(\"load\", self._load)\r\n            print(\"offset\", self._offset)\r\n            print(\"len_index\", len(self._index))\r\n            print(\"index\", self._index)\r\n            print(\"len_maxes\", len(self._maxes))\r\n            print(\"maxes\", self._maxes)\r\n            print(\"len_lists\", len(self._lists))\r\n            print(\"lists\", self._lists)\r\n            raise\r\n\r\n############### END OF SORTED LIST TEMPLATE ########################\r\nfrom bisect import bisect_left\r\n# from sortedcontainers import SortedList\r\ninput = sys.stdin.readline\r\n\r\n\r\ndef main():    \r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        arr = []\r\n        res = 0\r\n        for _ in range(n):\r\n            a, b = (int(i) for i in input().split())\r\n            arr.append((a, b))\r\n        arr.sort(reverse=True)\r\n        sl = SortedList()\r\n        for a, b in arr:\r\n            res += bisect_left(sl, b)\r\n            sl.add(b)\r\n        print(res)\r\n\r\nmain()",
        "failedTestCase": {
            "input": "1\r\n200000\r\n647453678 930853853\r\n-586814073 570193412\r\n-490363662 281213000\r\n-703158044 591740767\r\n137659014 352608457\r\n-774601557 -390838254\r\n-867423209 -524087527\r\n-28391755 692355005\r\n-729209925 704738138\r\n-217098545 856705188\r\n-716155101 191142422\r\n-901655099 656094991\r\n384746555 694653351\r\n-605420601 -561339913\r\n811192007 826647575\r\n-377150013 354556959\r\n684345222 874905831\r\n-46479142 170684323\r\n-793019907 5395128\r\n-788095085 -445094138\r\n-380816261 893458206\r\n-31460295 62063481\r\n-501097580 -409603254\r\n...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1536,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243093787",
            "author": "Anik422",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 20200,
            "submissionTime": 1706062020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243091396",
            "author": "Anik422",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706060820
        },
        "acceptedCode": "import math\r\n\r\nn = int(input())\r\n\r\nfor _ in range(n):\r\n    len_arry = int(input())\r\n    arry = sum(map(int, input().split()))\r\n    value = math.sqrt(arry)\r\n    int_value = int(value)\r\n    if(value - int_value == 0):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    \r\n",
        "rejectedCode": "n = int(input())\r\narry = []\r\nfor _ in range(n):\r\n    for _ in range(3):\r\n        a, b, c = map(str, input().split())\r\n        arry.append([a, b, c])\r\n\r\nfor i in arry:\r\n    if \"?\" in i:\r\n        if \"A\" not in i:\r\n            print(\"A\")\r\n        elif \"B\" not in i:\r\n            print(\"B\")\r\n        else:\r\n            print(\"C\")",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "243074919",
            "author": "daniellicodes",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 404,
            "memory": 29300,
            "submissionTime": 1706049780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "243074792",
            "author": "daniellicodes",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 27700,
            "submissionTime": 1706049660
        },
        "acceptedCode": "tc = int(input())\r\n\r\nfor t in range(tc):\r\n    n = int(input())\r\n    arr = [int(x) for x in input().split()]\r\n    res = [0]\r\n    seen = set()\r\n    cur = 0\r\n    seen.add(cur)\r\n    yes = False\r\n    for i in range(n):\r\n        if i % 2 == 1:\r\n            cur -= arr[i]\r\n        else:\r\n            cur += arr[i]\r\n\r\n        res.append(cur)\r\n    res.sort()\r\n\r\n    # print(res)\r\n    for i in range(1, len(res)):\r\n        if res[i] == res[i-1]:\r\n            yes = True\r\n\r\n    print(\"Yes\" if yes else \"No\")",
        "rejectedCode": "from random import getrandbits\r\n\r\nRANDOM = getrandbits(32)\r\n\r\nclass Wrapper(int):\r\n    def __init__(self, x):\r\n        int.__init__(x)\r\n    def __hash__(self):\r\n        return super(Wrapper, self).__hash__() ^ RANDOM\r\n\r\nimport sys\r\ninput = sys.stdin.readline\r\n\r\ntc = int(input())\r\n\r\nfor t in range(tc):\r\n    n = int(input())\r\n    arr = [int(x) for x in input().split()]\r\n\r\n    seen = set()\r\n    cur = 0\r\n    seen.add(cur)\r\n    yes = False\r\n    for i in range(n):\r\n        if i % 2 == 1:\r\n            cur -= arr[i]\r\n        else:\r\n            cur += arr[i]\r\n        if cur in seen:\r\n            yes = True\r\n            break\r\n\r\n        seen.add(cur)\r\n\r\n    print(\"Yes\" if yes else \"No\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243083031",
            "author": "Bakhtzhan",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 326,
            "memory": 27400,
            "submissionTime": 1706056560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243081137",
            "author": "Bakhtzhan",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 2800,
            "submissionTime": 1706055300
        },
        "acceptedCode": "import math\r\nt=int(input())\r\na=[]\r\nfor i in range(t):\r\n    b=int(input())\r\n    c=sum(list(map(int,input().split())))\r\n    k=int(math.sqrt(c))\r\n    if k*k==c:\r\n        a.append(1)\r\n    else:\r\n        a.append(0)\r\nfor i in range(t):\r\n    if a[i]==1:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "import math\r\nt=int(input())\r\na=[]\r\nfor i in range(t):\r\n    b=int(input())\r\n    c=sum(list(map(int,input().split())))\r\n    k=int(math.sqrt(c))\r\n    if k*k==c:\r\n        a.append(1)\r\n    else:\r\n        a.append(0)\r\nfor i in range(t):\r\n    if a[i]==1:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "243061568",
            "author": "randombernie",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 27500,
            "submissionTime": 1706030760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "243061500",
            "author": "randombernie",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 31200,
            "submissionTime": 1706030700
        },
        "acceptedCode": "# My competitive programming template - January 2024\r\n# by randombernie\r\n\r\nfrom types import GeneratorType\r\nfrom sys import stdin, stdout\r\nfrom collections import Counter, deque, defaultdict\r\nfrom math import ceil, comb, sqrt, factorial, perm, log, gcd, lcm, floor\r\nfrom functools import lru_cache\r\nfrom bisect import bisect_left, bisect_right\r\nfrom heapq import heapify, heappush, heappop\r\n\r\n# pajenegod orz\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        to = f(*args, **kwargs)\r\n        while True:\r\n            if type(to) is GeneratorType:\r\n                stack.append(to)\r\n                to = next(to)\r\n            else:\r\n                stack.pop()\r\n                if not stack:\r\n                    break\r\n                to = stack[-1].send(to)\r\n        return to\r\n\r\n    return wrappedfunc\r\n\r\ndef input():\r\n    \"\"\" Faster input parsing \"\"\"\r\n    return stdin.readline().strip()\r\n\r\ndef print(string, newline=True):\r\n    \"\"\"Prints a single string on a new line\"\"\"\r\n    if newline:\r\n        stdout.write(str(string) + \"\\n\")\r\n    else:\r\n        stdout.write(str(string))\r\n    \r\ndef print_array(array):\r\n    \"\"\" Prints an array of values, the way CodeForces requires \"\"\"\r\n    stdout.write(\" \".join(map(str, array)) + \"\\n\")\r\n\r\ndef bin(x):\r\n    \"\"\"A replacement for the built-in bin function, without the 0x\"\"\"\r\n    return format(x, \"b\")\r\n\r\ndef find_primes(limit, return_all=True):\r\n    \"\"\" Finds all the prime numbers from 1 to a specified limit (inclusive). Sieve of Erastothenes \"\"\"\r\n    is_prime = [1] * (limit + 1)\r\n    is_prime[1] = 0\r\n    \r\n    for i in range(2, limit + 1):\r\n        if i * i > limit:\r\n            break\r\n        if is_prime[i]:\r\n            for j in range(i * i, limit + 1, i):\r\n                is_prime[j] = 0\r\n    if return_all:\r\n        return is_prime\r\n    else:\r\n        return [i for i in range(2, limit + 1) if is_prime[i]]\r\n    \r\n\r\ndef is_even(x):\r\n    return x % 2 == 0\r\n\r\ndef factorize(x):\r\n    factors = set()\r\n    for i in range(1, ceil(sqrt(x)) + 1):\r\n        if x % i == 0:\r\n            factors.add(i)\r\n            factors.add(x // i)\r\n    return factors\r\n\r\ndef dict_merge(a, b):\r\n        result = {}\r\n        for i in a.keys():\r\n            result[i] = a[i]\r\n        for j in b.keys():\r\n            if j in result:\r\n                result[j] += b[j]\r\n            else:\r\n                result[j] = b[j]\r\n        return result\r\n\r\ndef split_binary_string(s):\r\n    result = []\r\n\r\n    for i in s:\r\n        if result[-1] and i == result[-1][-1]:\r\n            result[-1].append(i)\r\n        else:\r\n            result.append([i])\r\n\r\n    return result\r\n\r\ndef is_alternating(s):\r\n    if len(s) == 1:\r\n        return True\r\n    \r\n    for i in range(1, len(s)):\r\n        if s[i] == s[i-1]:\r\n            return False\r\n    return True\r\n\r\ndef is_sorted(a):\r\n    last = 0\r\n    for i in a:\r\n        if i - last < 0:\r\n            return False\r\n        last = i\r\n    return True\r\n\r\ndef is_palindrome(s):\r\n    for i in range(len(s) // 2):\r\n        if s[i] != s[len(s) - i - 1]:\r\n            return False\r\n    return True\r\n\r\ndef get_prime_rep(x):\r\n    factors = factorize(x)\r\n    f = sorted(factors)\r\n    count = defaultdict(int)\r\n    seen = set()\r\n\r\n    for i in f:\r\n        if i != 1 and i not in seen:\r\n            seen.add(i)\r\n            p = 1\r\n            \r\n            for j in factors:\r\n                if j != i and j % i == 0:\r\n                    seen.add(j)\r\n                    \r\n            while i ** p in factors:\r\n                count[i] += 1\r\n                p += 1\r\n                seen.add(i ** p)\r\n\r\n    return count\r\n            \r\n            \r\ndef parity(x):\r\n    return is_even(x)\r\n\r\ndef check(row, k):\r\n    i, j = 0, 0\r\n    dot_count = 0\r\n    best = float(\"inf\")\r\n    \r\n    while j < len(row):\r\n        if row[j] not in \".o\":\r\n            i = j + 1\r\n            dot_count = 0\r\n        else:\r\n            if row[j] == \".\":\r\n                dot_count += 1\r\n                \r\n            width = j - i + 1\r\n            \r\n            if width == k:\r\n                best = min(best, dot_count)\r\n                if row[i] == \".\":\r\n                    dot_count -= 1\r\n                i += 1\r\n        j += 1\r\n\r\n    return best\r\n    \r\ndef solve():            \r\n    for t in range(int(input())):\r\n        n = int(input())\r\n        a = [int(_) for _ in input().split()]\r\n\r\n        for i in range(n):\r\n            if i % 2 == 0:\r\n                a[i] = -1 * a[i]\r\n\r\n        total = 0\r\n        prefix = []\r\n        \r\n        for v in a:\r\n            total += v\r\n            prefix.append(total)\r\n\r\n        ans = \"NO\"\r\n        prefix.sort()\r\n        \r\n        for i in range(n):\r\n            if prefix[i] == 0 or (i > 0 and prefix[i] == prefix[i-1]):\r\n                ans = \"YES\"\r\n                break\r\n\r\n        print(ans)\r\n\r\n    \r\nif __name__ == \"__main__\":\r\n    solve()\r\n",
        "rejectedCode": "# My competitive programming template - January 2024\r\n# by randombernie\r\n\r\nfrom types import GeneratorType\r\nfrom sys import stdin, stdout\r\nfrom collections import Counter, deque, defaultdict\r\nfrom math import ceil, comb, sqrt, factorial, perm, log, gcd, lcm, floor\r\nfrom functools import lru_cache\r\nfrom bisect import bisect_left, bisect_right\r\nfrom heapq import heapify, heappush, heappop\r\n\r\n# pajenegod orz\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        to = f(*args, **kwargs)\r\n        while True:\r\n            if type(to) is GeneratorType:\r\n                stack.append(to)\r\n                to = next(to)\r\n            else:\r\n                stack.pop()\r\n                if not stack:\r\n                    break\r\n                to = stack[-1].send(to)\r\n        return to\r\n\r\n    return wrappedfunc\r\n\r\ndef input():\r\n    \"\"\" Faster input parsing \"\"\"\r\n    return stdin.readline().strip()\r\n\r\ndef print(string, newline=True):\r\n    \"\"\"Prints a single string on a new line\"\"\"\r\n    if newline:\r\n        stdout.write(str(string) + \"\\n\")\r\n    else:\r\n        stdout.write(str(string))\r\n    \r\ndef print_array(array):\r\n    \"\"\" Prints an array of values, the way CodeForces requires \"\"\"\r\n    stdout.write(\" \".join(map(str, array)) + \"\\n\")\r\n\r\ndef bin(x):\r\n    \"\"\"A replacement for the built-in bin function, without the 0x\"\"\"\r\n    return format(x, \"b\")\r\n\r\ndef find_primes(limit, return_all=True):\r\n    \"\"\" Finds all the prime numbers from 1 to a specified limit (inclusive). Sieve of Erastothenes \"\"\"\r\n    is_prime = [1] * (limit + 1)\r\n    is_prime[1] = 0\r\n    \r\n    for i in range(2, limit + 1):\r\n        if i * i > limit:\r\n            break\r\n        if is_prime[i]:\r\n            for j in range(i * i, limit + 1, i):\r\n                is_prime[j] = 0\r\n    if return_all:\r\n        return is_prime\r\n    else:\r\n        return [i for i in range(2, limit + 1) if is_prime[i]]\r\n    \r\n\r\ndef is_even(x):\r\n    return x % 2 == 0\r\n\r\ndef factorize(x):\r\n    factors = set()\r\n    for i in range(1, ceil(sqrt(x)) + 1):\r\n        if x % i == 0:\r\n            factors.add(i)\r\n            factors.add(x // i)\r\n    return factors\r\n\r\ndef dict_merge(a, b):\r\n        result = {}\r\n        for i in a.keys():\r\n            result[i] = a[i]\r\n        for j in b.keys():\r\n            if j in result:\r\n                result[j] += b[j]\r\n            else:\r\n                result[j] = b[j]\r\n        return result\r\n\r\ndef split_binary_string(s):\r\n    result = []\r\n\r\n    for i in s:\r\n        if result[-1] and i == result[-1][-1]:\r\n            result[-1].append(i)\r\n        else:\r\n            result.append([i])\r\n\r\n    return result\r\n\r\ndef is_alternating(s):\r\n    if len(s) == 1:\r\n        return True\r\n    \r\n    for i in range(1, len(s)):\r\n        if s[i] == s[i-1]:\r\n            return False\r\n    return True\r\n\r\ndef is_sorted(a):\r\n    last = 0\r\n    for i in a:\r\n        if i - last < 0:\r\n            return False\r\n        last = i\r\n    return True\r\n\r\ndef is_palindrome(s):\r\n    for i in range(len(s) // 2):\r\n        if s[i] != s[len(s) - i - 1]:\r\n            return False\r\n    return True\r\n\r\ndef get_prime_rep(x):\r\n    factors = factorize(x)\r\n    f = sorted(factors)\r\n    count = defaultdict(int)\r\n    seen = set()\r\n\r\n    for i in f:\r\n        if i != 1 and i not in seen:\r\n            seen.add(i)\r\n            p = 1\r\n            \r\n            for j in factors:\r\n                if j != i and j % i == 0:\r\n                    seen.add(j)\r\n                    \r\n            while i ** p in factors:\r\n                count[i] += 1\r\n                p += 1\r\n                seen.add(i ** p)\r\n\r\n    return count\r\n            \r\n            \r\ndef parity(x):\r\n    return is_even(x)\r\n\r\ndef check(row, k):\r\n    i, j = 0, 0\r\n    dot_count = 0\r\n    best = float(\"inf\")\r\n    \r\n    while j < len(row):\r\n        if row[j] not in \".o\":\r\n            i = j + 1\r\n            dot_count = 0\r\n        else:\r\n            if row[j] == \".\":\r\n                dot_count += 1\r\n                \r\n            width = j - i + 1\r\n            \r\n            if width == k:\r\n                best = min(best, dot_count)\r\n                if row[i] == \".\":\r\n                    dot_count -= 1\r\n                i += 1\r\n        j += 1\r\n\r\n    return best\r\n    \r\ndef solve():            \r\n    for t in range(int(input())):\r\n        n = int(input())\r\n        a = [int(_) for _ in input().split()]\r\n\r\n        for i in range(n):\r\n            if i % 2 == 0:\r\n                a[i] = -1 * a[i]\r\n\r\n        total = 0\r\n        prefix = []\r\n        \r\n        for v in a:\r\n            total += v\r\n            prefix.append(total)\r\n\r\n        seen = set()\r\n        ans = \"NO\"\r\n        \r\n        for v in prefix:\r\n            if v in seen or v == 0:\r\n                ans = \"YES\"\r\n                break\r\n            seen.add(v)\r\n\r\n        print(ans)\r\n\r\n    \r\nif __name__ == \"__main__\":\r\n    solve()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 189,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243034251",
            "author": "Dali_Zid",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1706011860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243034058",
            "author": "Dali_Zid",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1706011800
        },
        "acceptedCode": "import math\r\nfor _ in range (int(input())):\r\n    n=int(input())\r\n    L=list(map(int,input().split()))\r\n    s=0\r\n    for i in range(n):\r\n        s+=L[i]\r\n    if(math.sqrt(s).is_integer()):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "import math\r\nfor _ in range (int(input())):\r\n    n=int(input())\r\n    L=list(map(int,input().split()))\r\n    s=0\r\n    for i in range(n):\r\n        s+=L[i]\r\n    if(math.sqrt(s).is_integer):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected NO, found YES [3rd token]\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243032140",
            "author": "alexanderbalu",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1706011080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243032054",
            "author": "alexanderbalu",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706011020
        },
        "acceptedCode": "def find_unique_digit(a, b, c):\r\n    if a == b:\r\n        return c\r\n    elif a == c:\r\n        return b\r\n    else:\r\n        return a\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        a, b, c = map(int, input().split())\r\n        result = find_unique_digit(a, b, c)\r\n        print(result)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "def find_unique_digit(a, b, c):\r\n    if a == b:\r\n        return c\r\n    elif a == c:\r\n        return b\r\n    else:\r\n        return a\r\n\r\ndef main():\r\n    t = int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432: \"))\r\n    for _ in range(t):\r\n        a, b, c = map(int, input().split())\r\n        result = find_unique_digit(a, b, c)\r\n        print(result)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432: 1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong output format Expected integer, but \"\u0412\u0432\u0435\u0434\u0438\u0442\u0435\" found\r\n"
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243030144",
            "author": "leela_9009",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706010300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243027892",
            "author": "leela_9009",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706009400
        },
        "acceptedCode": "n=int(input())\r\nfor i in range(n):\r\n    for i in range(3):\r\n        a=input()\r\n        if 'A' not in a:\r\n            print('A')\r\n        if 'B' not in a:\r\n            print('B')\r\n        if 'C' not in a:\r\n            print('C')",
        "rejectedCode": "n=int(input())\r\nfor i in range(n):\r\n    s1=input()\r\n    s2=input()\r\n    s3=input()\r\n    c1=0\r\n    c2=0\r\n    c3=0\r\n    for j in range(n):\r\n        if s1[j]=='A' or s2[j]=='A' or s3[j]=='A':\r\n            c1+=1\r\n        if s1[j]=='B' or s2[j]=='B' or s3[j]=='B':\r\n            c2+=1\r\n        if s1[j]=='C' or s2[j]=='C' or s3[j]=='C':\r\n            c3+=1\r\n    if c1<3:\r\n        print('A')\r\n    elif c2<3:\r\n        print('B')\r\n    elif c3<3:\r\n        print('C')",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243027131",
            "author": "codingnoobDMZ",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706009100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243027065",
            "author": "codingnoobDMZ",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1706009040
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    comparator = [\"A\",\"B\",\"C\"]\r\n    for _ in range(3):\r\n        s = input().replace(\" \",\"\")\r\n        if \"?\" in s:\r\n            for ch in s: \r\n                if ch != \"?\": comparator.remove(ch)\r\n            print(*comparator)",
        "rejectedCode": "for _ in range(int(input())):\r\n    comparator = [\"A\",\"B\",\"C\"]\r\n    for _ in range(3):\r\n        s = input().replace(\" \",\"\")\r\n        if \"?\" in s:\r\n            for ch in s: \r\n                if ch != \"?\": comparator.remove(ch)\r\n            print(comparator)",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "['A']\r\n['B']\r\n['C']\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: '['A']'\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242644473",
            "author": "varravr",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 311,
            "memory": 28100,
            "submissionTime": 1705769880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "242644063",
            "author": "varravr",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1705769280
        },
        "acceptedCode": "t = int(input())\r\nresults = []\r\n\r\nfor _ in range(t):\r\n  _ = int(input())\r\n\r\n  n_sum = sum(list(map(int, input().split())))\r\n  results.append('YES' if int(n_sum ** 0.5) == n_sum ** 0.5 else 'NO')\r\n\r\nprint('\\n'.join(map(str, results)))",
        "rejectedCode": "t = int(input())\r\nresults = []\r\n\r\nfor _ in range(t):\r\n  for _ in range(3): \r\n    s = input()\r\n\r\n    if '?' in s: \r\n      l = s.split('?')\r\n      results.append(list(set(l) ^ set(['A', 'B', 'C']))[0])\r\n\r\nprint('\\n'.join(map(str, results)))",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243018617",
            "author": "srinivasmalli15",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 300,
            "submissionTime": 1706005680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243012221",
            "author": "srinivasmalli15",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 300,
            "submissionTime": 1706002800
        },
        "acceptedCode": "from collections import Counter\r\ntests = int(input())\r\nfor _ in range(tests):\r\n    inp=[]\r\n    for row in range(3):\r\n        inprow = list(input().split(\" \"))\r\n        inp.append(inprow)\r\n    for j in inp:\r\n        for i in j:\r\n            count = Counter(i)\r\n            if 'A' not in count:\r\n                print('A')\r\n                break\r\n            elif 'B' not in count:\r\n                print('B')\r\n                break\r\n            elif 'C' not in count:\r\n                print('C')\r\n                break\r\n    \r\n\r\n\r\n",
        "rejectedCode": "from collections import Counter\r\ntest = int(input())\r\nres = []\r\nfor _ in range(test):\r\n    inp = list(map(int,input().split()))\r\n    count = Counter(inp)\r\n    for i in count:\r\n        if count[i] == 2:\r\n            res.append(i)\r\n            break\r\nfor i in res:\r\n    print(i)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "2\r\n4\r\n5\r\n8\r\n9\r\n3\r\n2\r\n7\r\n7\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '2'\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243007429",
            "author": "Akash_iiitd",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706000700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "243006420",
            "author": "Akash_iiitd",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1200,
            "submissionTime": 1706000280
        },
        "acceptedCode": "t = int(input())\r\nans = []\r\nfor i in range(t):\r\n    l = list(map(int,input().split()))\r\n    if l[0]==l[1]:\r\n        ans.append(l[2])\r\n    elif l[0]==l[2]:\r\n        ans.append(l[1])\r\n    else:\r\n        ans.append(l[0])\r\nfor j in ans:\r\n    print(j)",
        "rejectedCode": "import math\r\ndef check_sq(a):\r\n    for i in range(int(math.sqrt(a))+1):\r\n        if i*i==a:\r\n            return True\r\n    return False\r\nt = int(input())\r\nans = []\r\nfor i in range(t):\r\n    x = int(input())\r\n    l = list(map(int,input().split()))\r\n    s = sum(l)\r\n    if check_sq(s):\r\n        ans.append(\"YES\")\r\n    else:\r\n        ans.append(\"NO\")\r\nfor j in ans:\r\n    print(j)",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242975003",
            "author": "fififrz",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 530,
            "memory": 17400,
            "submissionTime": 1705983960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242972079",
            "author": "fififrz",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 327,
            "memory": 6100,
            "submissionTime": 1705983240
        },
        "acceptedCode": "import math\r\n\r\nn = int(input())\r\n\r\n\r\ndef isSqr(s):\r\n    sq = int(math.sqrt(s))\r\n    if sq * sq == s:\r\n        print('YES')\r\n    else:\r\n        print('NO')\r\n\r\n\r\nwhile n > 0:\r\n    x = int(input())\r\n    y = input().split()\r\n    a = 0\r\n    for i in range(x):\r\n        a += int(y[i])\r\n    isSqr(a)\r\n    n -= 1\r\n",
        "rejectedCode": "import math\r\n\r\nn = int(input())\r\n\r\n\r\ndef isSqr(s):\r\n    sq = math.sqrt(s)\r\n    if sq * sq == s:\r\n        print('YES')\r\n    else:\r\n        print('NO')\r\n\r\n\r\nwhile n > 0:\r\n    x = int(input())\r\n    y = input().split()\r\n    a = 0\r\n    for i in range(x):\r\n        a += int(y[i])\r\n    isSqr(a)\r\n    n -= 1\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242964573",
            "author": "akshayjadhavkrishnaholic",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 1700,
            "submissionTime": 1705979460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240207213",
            "author": "akshayjadhavkrishnaholic",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1500,
            "submissionTime": 1704341580
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=input()\r\n    i=0\r\n    k=''\r\n    while i<n:\r\n        if s[i]!='a' and s[i]!='e':\r\n            if i<n-3 and (s[i+3]=='a' or s[i+3]=='e'):\r\n                k+=(s[i:i+2]+'.')\r\n                i+=2\r\n            else:\r\n                k+=(s[i:i+3]+'.')\r\n                i+=3\r\n    \r\n    print(k[:-1])",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=input()\r\n    s=s[::-1]\r\n    t=0\r\n    k=''\r\n    while t<n:\r\n        if s[t]=='a' or s[t]=='e':\r\n            k+=(s[t:t+2]+'.')\r\n            t+=2\r\n        else:\r\n            k+=(s[t:t+3]+'.')\r\n            t+=3\r\n    print(k[:-1][::-1])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "be.de.ba.ca.cad.ca.bab.cab.de.dac.ced.da.da.ceb.ba.ca.ca.ced.ba.ca.ce.ce.ce.da.ca.be.da.bad.ba.da.be.ceb.da.bab.ba.ba.ca.ca.ceb.ba.ba.bec.be.ba.bed.cac.be.ca.de.ded.de.beb.ba.dec.be.ba.dab.da.de.dad.ce.be.be.dab.cad.ce.ca.be.ba.ba.ba.de.da.ba.be.cab.de.de.de.ca.ca.ca.ca.bab.da.ce.ca.be.ca.dac.da.dad.cec.ce.ca.ca.ba.ca.dad.de.de.ce.ba.dec.ced.ba.bac.ce.ded.ce.de.deb.ba.cad.ce.ca.ca.de.be.da.ca.bed.deb.ba.ca.be.ce.be.de.be.ba.ba.ce.dad.bed.bac.ca.ba.be.dac.ca.ca.ca.bed.be.be.ce.da.dad.deb.bac.dac.da.ba.ce.de...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242947471",
            "author": "Pacybwoah",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 0,
            "submissionTime": 1705969980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242947444",
            "author": "Pacybwoah",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1705969920
        },
        "acceptedCode": "def find_single_digit(a, b, c):\r\n    if a == b:\r\n        return c\r\n    elif a == c:\r\n        return b\r\n    else:\r\n        return a\r\n\r\ndef main():\r\n    t = int(input())\r\n    \r\n    for _ in range(t):\r\n        a, b, c = map(int, input().split())\r\n        result = find_single_digit(a, b, c)\r\n        print(result)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "def find_single_digit(a, b, c):\r\n    if a == b:\r\n        return c\r\n    elif a == c:\r\n        return b\r\n    else:\r\n        return a\r\n\r\ndef main():\r\n    t = int(input(\"Enter the number of test cases: \"))\r\n    \r\n    for _ in range(t):\r\n        a, b, c = map(int, input().split())\r\n        result = find_single_digit(a, b, c)\r\n        print(result)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "Enter the number of test cases: 1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong output format Expected integer, but \"Enter\" found\r\n"
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "242936247",
            "author": "HuangYS",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 733,
            "memory": 21800,
            "submissionTime": 1705959120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "242936159",
            "author": "HuangYS",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 34,
            "runTime": 4000,
            "memory": 84400,
            "submissionTime": 1705959060
        },
        "acceptedCode": "import heapq\r\nfor _ in range(int(input())):\r\n    n,m=map(int,input().split())\r\n    if n==751:\r\n        print(375000)\r\n        continue\r\n    p=[{} for i in range(n+1)]\r\n    l=[tuple(map(int,input().split())) for i in range(m)]\r\n    w=list(map(int,input().split()))\r\n    for i in range(m):\r\n        a,b,c=l[i]\r\n        p[a][b]=min(p[a].setdefault(b,1e9),c)\r\n        p[b][a]=min(p[b].setdefault(a,1e9),c)\r\n    f=[[float('inf')]*1000 for i in range(n)]\r\n    q=[]\r\n    c=w[0]\r\n    for u in p[1]:\r\n        q.append((c*p[1][u],u,c))\r\n        f[u-1][c-1]=c*p[1][u]\r\n    heapq.heapify(q)\r\n    while q:\r\n        a,b,c=heapq.heappop(q)\r\n        if b==n:\r\n            print(a)\r\n            break\r\n        if f[b-1][c-1]>a:\r\n            continue\r\n        h=min(c,w[b-1])\r\n        for u in p[b]:\r\n            d,e=u,p[b][u]\r\n            if f[d-1][h-1]<a+e*h:\r\n                   continue\r\n            f[d-1][h-1]=a+e*h\r\n            heapq.heappush(q, (a+e*h,d,h))\r\n    #print(min(f[-1]))",
        "rejectedCode": "import heapq\r\nfor _ in range(int(input())):\r\n    n,m=map(int,input().split())\r\n    p=[{} for i in range(n+1)]\r\n    l=[tuple(map(int,input().split())) for i in range(m)]\r\n    w=list(map(int,input().split()))\r\n    for i in range(m):\r\n        a,b,c=l[i]\r\n        p[a][b]=min(p[a].setdefault(b,1e9),c)\r\n        p[b][a]=min(p[b].setdefault(a,1e9),c)\r\n    f=[[float('inf')]*1000 for i in range(n)]\r\n    q=[]\r\n    c=w[0]\r\n    for u in p[1]:\r\n        q.append((c*p[1][u],u,c))\r\n        f[u-1][c-1]=c*p[1][u]\r\n    heapq.heapify(q)\r\n    while q:\r\n        a,b,c=heapq.heappop(q)\r\n        if b==n:\r\n            print(a)\r\n            break\r\n        if f[b-1][c-1]>a:\r\n            continue\r\n        h=min(c,w[b-1])\r\n        for u in p[b]:\r\n            d,e=u,p[b][u]\r\n            if f[d-1][h-1]<a+e*h:\r\n                   continue\r\n            f[d-1][h-1]=a+e*h\r\n            heapq.heappush(q, (a+e*h,d,h))\r\n    #print(min(f[-1]))",
        "failedTestCase": {
            "input": "1\r\n751 1000\r\n1 2 1\r\n1 3 1\r\n2 4 1\r\n3 4 1\r\n4 5 1\r\n4 6 1\r\n5 7 1\r\n6 7 1\r\n7 8 1\r\n7 9 1\r\n8 10 1\r\n9 10 1\r\n10 11 1\r\n10 12 1\r\n11 13 1\r\n12 13 1\r\n13 14 1\r\n13 15 1\r\n14 16 1\r\n15 16 1\r\n16 17 1\r\n16 18 1\r\n17 19 1\r\n18 19 1\r\n19 20 1\r\n19 21 1\r\n20 22 1\r\n21 22 1\r\n22 23 1\r\n22 24 1\r\n23 25 1\r\n24 25 1\r\n25 26 1\r\n25 27 1\r\n26 28 1\r\n27 28 1\r\n28 29 1\r\n28 30 1\r\n29 31 1\r\n30 31 1\r\n31 32 1\r\n31 33 1\r\n32 34 1\r\n33 34 1\r\n34 35 1\r\n34 36 1\r\n35 37 1\r\n36 37 1\r\n37 38 1\r\n37 39 1\r\n38 40 1\r\n39 40 1\r\n40 41 1\r\n40 42 1\r\n41 43 1\r\n42 43 1\r\n43 44 1\r\n43 45 1...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242921041",
            "author": "Eya_Z",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705936020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242920948",
            "author": "Eya_Z",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705935960
        },
        "acceptedCode": "def unique(a, b, c):\r\n    if a == c:\r\n        return b\r\n    elif a == b:\r\n        return c\r\n    elif b==c:\r\n        return a\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n    a, b, c = map(int, input().split())\r\n    result = unique(a, b, c)\r\n    print(result)",
        "rejectedCode": "def unique(a, b, c):\r\n    if a == c:\r\n        return b\r\n    elif a == b:\r\n        return c\r\n    elif b==c:\r\n        return a\r\nwhile not(( 1<=t) and (t<=270)):\r\n    t = int(input())\r\nfor i in range(t):\r\n    a, b, c = map(int, input().split())\r\n    result = unique(a, b, c)\r\n    print(result)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242915208",
            "author": "hemanthsaipula18",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705931820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242914371",
            "author": "hemanthsaipula18",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705931340
        },
        "acceptedCode": "t=int(input())\r\nfor _ in range(t):\r\n    a,b,c=map(int,input().split())\r\n    if(a == b and a != c):\r\n        print(c)\r\n    elif(b == c and c != a):\r\n        print(a)\r\n    elif(c == a and a != b):\r\n        print(b)\r\n",
        "rejectedCode": "a=int(input())\r\nb=int(input())\r\nc=int(input())\r\nif(a == b and a != c):\r\n    print(c)\r\nelif(b == c and c != a):\r\n    print(a)\r\nelif(c == a and a != b):\r\n    print(b)\r\n\r\nelse:\r\n    print(\"Nee M Raa\")\r\n\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242904663",
            "author": "lina_herman",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26200,
            "submissionTime": 1705926480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242904371",
            "author": "lina_herman",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705926360
        },
        "acceptedCode": "import math\r\n\r\ntry:\r\n    t = int(input())\r\n    case = 0\r\n\r\n    while case < t:\r\n        n = int(input())\r\n        a = list(map(int, input().strip().split()))[:n]\r\n\r\n        total_squares = sum(a)\r\n\r\n        if math.sqrt(total_squares) % 1 == 0:\r\n            print('YES')\r\n        else:\r\n            print('NO')\r\n        case += 1\r\nexcept EOFError as e:\r\n    print(end=\" \")\r\n\r\n\r\n",
        "rejectedCode": "import math\r\n\r\ntry:\r\n    t = int(input())\r\n    case = 0\r\n\r\n    while case < t:\r\n        n = int(input())\r\n        a = list(map(int, input().strip().split()))[:n]\r\n\r\n        total_squares = sum(a)\r\n\r\n        if math.isqrt(total_squares) ** 2 == total_sqaures:\r\n            print('YES')\r\n        else:\r\n            print('NO')\r\n        case += 1\r\nexcept EOFError as e:\r\n    print(end=\" \")\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 13,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240374985",
            "author": "trantrungnguyen154",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 390,
            "memory": 26200,
            "submissionTime": 1704450240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240374520",
            "author": "trantrungnguyen154",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 8900,
            "submissionTime": 1704450000
        },
        "acceptedCode": "def solution(arr: list, n: int) -> int:\r\n    res = sum(arr)\r\n\r\n    left = 1\r\n    right = 10**9\r\n\r\n    while left <= right:\r\n        mid = left + (right - left) // 2    \r\n        if mid ** 2 == res:\r\n            return \"YES\"\r\n        elif mid ** 2 < res:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n\r\n    return \"NO\"\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    while t:\r\n        n = int(input())\r\n        arr = list(map(int, input().split()))\r\n        print(solution(arr, n))\r\n        t -= 1",
        "rejectedCode": "def solution(arr: list, n: int) -> int:\r\n    res = sum(arr)\r\n    if res == 1:\r\n        return \"YES\"\r\n    for i in range(0, res//2+1):\r\n        if i * i == res:\r\n            return \"YES\"\r\n    return \"NO\"\r\n\r\nif __name__ == '__main__':\r\n    t = int(input())\r\n    while t:\r\n        n = int(input())\r\n        arr = list(map(int, input().split()))\r\n        print(solution(arr, n))\r\n        t -= 1",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "YES\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243319836",
            "author": "AbhiramNagam",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 1000,
            "submissionTime": 1706196720
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243316613",
            "author": "AbhiramNagam",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1706194080
        },
        "acceptedCode": "def func(n,s):\r\n    v=\"ae\"\r\n    c=\"bcd\"\r\n    ans=\"\"\r\n    i=0\r\n    while True:\r\n        # print(\"si : \",i)\r\n        if i+1>=len(s):\r\n            break\r\n        if s[i] in c:\r\n            if s[i+1] in v:\r\n                if i+2 >=len(s):\r\n                    ans+=s[i:i+2]\r\n                    break\r\n                if s[i+2] in c:\r\n                    if i+3>=len(s):\r\n                        ans+=s[i:]\r\n                        break\r\n                    if s[i+3] in v:\r\n                        # print(i,\"++\")\r\n\r\n                        ans+=s[i:i+2]\r\n                        pass\r\n                    else:\r\n                        # print(i,\"--\")\r\n                        ans+=s[i:i+3]\r\n                        i+=1\r\n            ans+=\".\"\r\n            # print(ans)\r\n        i+=2\r\n    return ans\r\nt=int(input())\r\nwhile t:\r\n    t-=1\r\n    n=int(input())\r\n    s=input()\r\n    ans=func(n,s)\r\n    print(ans)\r\n    # print(\"=====> \",ans)\r\n",
        "rejectedCode": "t=int(input())\r\na,b,c=list(map(int,input().split()))\r\nprint(a^b^c)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10], but output contains 1 elements\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243248249",
            "author": "Sangeethsr",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706160480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243248141",
            "author": "Sangeethsr",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1706160420
        },
        "acceptedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    a, b, c = map(int, input().split())\r\n    \r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)",
        "rejectedCode": "= int(input())\r\n\r\nfor _ in range(t):\r\n    a, b, c = map(int, input().split())\r\n    \r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243184075",
            "author": "Pengy_yay",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1706106000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "243184006",
            "author": "Pengy_yay",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706105940
        },
        "acceptedCode": "numtrials = int(input())\r\ntrials = []\r\nfor trial in range(numtrials):\r\n    trials.append(list(map(int, input().split())))\r\n\r\nfor trial in trials:\r\n    if trial[0] == trial[1]:\r\n        print(trial[2])\r\n    elif trial[0] == trial[2]:\r\n        print(trial[1])\r\n    else:\r\n        print(trial[0])",
        "rejectedCode": "numtrials = int(input())\r\ntrials = []\r\nfor trial in range(numtrials):\r\n    trials.append(list(map(int, input().split())))\r\n\r\nfor trial in trials:\r\n    print(f'aah: {trial}')\r\n    if trial[0] == trial[1]:\r\n        print(trial[2])\r\n    elif trial[0] == trial[2]:\r\n        print(trial[1])\r\n    else:\r\n        print(trial[0])",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "aah: [1, 2, 2]\r\n1\r\naah: [4, 3, 4]\r\n3\r\naah: [5, 5, 6]\r\n6\r\naah: [7, 8, 8]\r\n7\r\naah: [9, 0, 9]\r\n0\r\naah: [3, 6, 3]\r\n6\r\naah: [2, 8, 2]\r\n8\r\naah: [5, 7, 7]\r\n5\r\naah: [7, 7, 5]\r\n5\r\naah: [5, 7, 5]\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong output format Expected integer, but \"aah:\" found\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243204202",
            "author": "L17RoNin",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706130960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "243203994",
            "author": "L17RoNin",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1706130720
        },
        "acceptedCode": "t=int(input())\r\nfor _ in range(t):\r\n    for _ in range(3):\r\n        a=input()\r\n        if \"A\" not in a:\r\n            print(\"A\")\r\n        elif \"C\" not in a:\r\n            print(\"C\")\r\n        elif \"B\" not in a:\r\n            print(\"B\")    ",
        "rejectedCode": "t=int(input())\r\nfor _ in range(t):\r\n    a=input()\r\n    if \"A\" and \"B\" in a:\r\n        print(\"C\")\r\n    elif \"B\" and \"C\" in a:\r\n        print(\"A\")\r\n    elif \"B\" not in a:\r\n        print(\"B\")",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "C\r\nC\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243181467",
            "author": "VijayBalaji",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 327,
            "memory": 33500,
            "submissionTime": 1706104320
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "243181150",
            "author": "VijayBalaji",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1706104140
        },
        "acceptedCode": "number_of_test_cases=int(input(\"\"))\r\nj=1\r\nwhile j<=number_of_test_cases:\r\n    j+=1\r\n    l=int(input())\r\n    a=list(input())\r\n    V=\"ae\"\r\n    C=\"bcd\"\r\n    b=a[::-1]\r\n    c=[]\r\n    k=0\r\n    while k<l:\r\n        if b[k] in C:\r\n            c+=b[k:k+3]+[\".\"]\r\n            k+=3\r\n        else:\r\n            c+=b[k:k+2]+[\".\"]\r\n            k+=2\r\n    d=c[::-1]\r\n    for i in range(len(d)):\r\n        if i==0:\r\n            continue\r\n        else:\r\n            print(d[i], end=\"\")\r\n    print()",
        "rejectedCode": "number_of_test_cases=int(input(\"\"))\r\nj=1\r\nwhile j<=number_of_test_cases:\r\n    j+=1\r\n    l=int(input())\r\n    a=list(input())\r\n    V=\"ae\"\r\n    C=\"bcd\"\r\n    b=a[::-1]\r\n    c=[]\r\n    k=0\r\n    while k<l:\r\n        if b[k] in C:\r\n            c+=b[0:3]+[\".\"]\r\n            k+=3\r\n        else:\r\n            c+=b[0:2]+[\".\"]\r\n            k+=2\r\n    d=c[::-1]\r\n    for i in range(len(d)):\r\n        if i==0:\r\n            continue\r\n        else:\r\n            print(d[i], end=\"\")\r\n    print()",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ab.bab.bab\r\nba.ba\r\ndad.ad.ad.dad.dad\r\ndac\r\ndac.dac\r\nba.bba.ba.ba.bba.bba.ba.bba.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ab.bab.bab'\r\n"
        },
        "errorLine": 14,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242731485",
            "author": "Gouenji17",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705836780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239619751",
            "author": "Gouenji17",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1703927820
        },
        "acceptedCode": "l=list(map(int,input().split()))\r\nt=l[0]\r\nfor i in range(0,t):\r\n    l1=list(map(int,input().split()))\r\n    a=l1[0]\r\n    b=l1[1]\r\n    c=l1[2]\r\n    if(a==b):\r\n        print(c)\r\n    elif(a==c):\r\n        print(b)\r\n    else:\r\n        print(a)\r\n   ",
        "rejectedCode": "from math import*\r\nt=list(map(int,input().split()))\r\nfor i in range(0,t[0],1):\r\n    l=list(map(int,input().split()))\r\n    g=list(map(int,input().split()))\r\n    s=0\r\n    for j in range (0,l[0]):\r\n        s=s+g[j]\r\n    sq=sqrt(s)\r\n    if((s/sq)==sq):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n ",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242706984",
            "author": "Syuzi777",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1705824240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241737857",
            "author": "Syuzi777",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 11700,
            "submissionTime": 1705312560
        },
        "acceptedCode": "def solve():\r\n    a, b, c = [int(x) for x in input().split()]\r\n    print(a ^ b ^ c)\r\n    \r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "rejectedCode": "t = int(input())\r\nwhile t:\r\n    n = int(input())\r\n    s = input()\r\n    ans = \"\"\r\n    i = n - 1\r\n    while (i > 1):\r\n        if (s[i] == 'a' or s[i] == 'e'):\r\n            ans += (s[i] + s[i - 1] + '.') \r\n            i -= 1\r\n        else:\r\n            ans += s[i]\r\n        i -= 1\r\n    ans += (s[1] + s[0])\r\n    print(ans[::-1])\r\n    t -= 1",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242663501",
            "author": "hohohohohohong",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 38500,
            "submissionTime": 1705799280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242663400",
            "author": "hohohohohohong",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 35100,
            "submissionTime": 1705799220
        },
        "acceptedCode": "import sys\r\n\r\ninput = lambda: sys.stdin.buffer.readline().decode().strip()\r\nfrom math import inf, gcd, lcm, log, log2, floor, ceil, sqrt, isqrt\r\nfrom collections import defaultdict, deque, Counter\r\nfrom heapq import heappush, heappop, heapify\r\nfrom functools import lru_cache\r\nfrom itertools import permutations, accumulate, groupby\r\nfrom bisect import insort, bisect_left, bisect_right\r\nimport random\r\n\r\n\r\n# template taken from https://codeforces.com/contest/1703/submission/164030692 - Author mkawa2\r\nclass DefaultDict:\r\n    def __init__(self, default=None):\r\n        self.default = default\r\n        self.x = random.randrange(1, 1 << 31)\r\n        self.dd = defaultdict(default)\r\n\r\n    def __repr__(self):\r\n        return \"{\" + \", \".join(f\"{k ^ self.x}: {v}\" for k, v in self.dd.items()) + \"}\"\r\n\r\n    def __eq__(self, other):\r\n        for k in set(self) | set(other):\r\n            if self[k] != other[k]: return False\r\n        return True\r\n\r\n    def __or__(self, other):\r\n        res = DefaultDict(self.default)\r\n        for k, v in self.dd: res[k] = v\r\n        for k, v in other.dd: res[k] = v\r\n        return res\r\n\r\n    def __len__(self):\r\n        return len(self.dd)\r\n\r\n    def __getitem__(self, item):\r\n        return self.dd[item ^ self.x]\r\n\r\n    def __setitem__(self, key, value):\r\n        self.dd[key ^ self.x] = value\r\n\r\n    def __delitem__(self, key):\r\n        del self.dd[key ^ self.x]\r\n\r\n    def __contains__(self, item):\r\n        return item ^ self.x in self.dd\r\n\r\n    def items(self):\r\n        for k, v in self.dd.items(): yield (k ^ self.x, v)\r\n\r\n    def keys(self):\r\n        for k in self.dd: yield k ^ self.x\r\n\r\n    def values(self):\r\n        for v in self.dd.values(): yield v\r\n\r\n    def __iter__(self):\r\n        for k in self.dd: yield k ^ self.x\r\n\r\n\r\nclass CounterInt(DefaultDict):\r\n    def __init__(self, aa=[]):\r\n        super().__init__(int)\r\n        for a in aa: self.dd[a ^ self.x] += 1\r\n\r\n    def __add__(self, other):\r\n        res = CounterInt()\r\n        for k in set(self) | set(other):\r\n            v = self[k] + other[k]\r\n            if v > 0: res[k] = v\r\n        return res\r\n\r\n    def __sub__(self, other):\r\n        res = CounterInt()\r\n        for k in set(self) | set(other):\r\n            v = self[k] - other[k]\r\n            if v > 0: res[k] = v\r\n        return res\r\n\r\n    def __and__(self, other):\r\n        res = CounterInt()\r\n        for k in self:\r\n            v = min(self[k], other[k])\r\n            if v > 0: res[k] = v\r\n        return res\r\n\r\n    def __or__(self, other):\r\n        res = CounterInt()\r\n        for k in set(self) | set(other):\r\n            v = max(self[k], other[k])\r\n            if v > 0: res[k] = v\r\n        return res\r\n\r\n\r\nclass Set:\r\n    def __init__(self, aa=[]):\r\n        self.x = random.randrange(1, 1 << 31)\r\n        self.st = set()\r\n        for a in aa: self.st.add(a ^ self.x)\r\n\r\n    def __repr__(self):\r\n        return \"{\" + \", \".join(str(k ^ self.x) for k in self.st) + \"}\"\r\n\r\n    def __len__(self):\r\n        return len(self.st)\r\n\r\n    def add(self, item):\r\n        self.st.add(item ^ self.x)\r\n\r\n    def discard(self, item):\r\n        self.st.discard(item ^ self.x)\r\n\r\n    def __contains__(self, item):\r\n        return item ^ self.x in self.st\r\n\r\n    def __iter__(self):\r\n        for k in self.st: yield k ^ self.x\r\n\r\n    def pop(self):\r\n        return self.st.pop() ^ self.x\r\n\r\n    def __or__(self, other):\r\n        res = Set(self)\r\n        for a in other: res.add(a)\r\n        return res\r\n\r\n    def __and__(self, other):\r\n        res = Set()\r\n        for a in self:\r\n            if a in other: res.add(a)\r\n        for a in other:\r\n            if a in self: res.add(a)\r\n        return res\r\n\r\n\r\n# https://leetcode.com/problems/create-sorted-array-through-instructions/discuss/1245397/C%2B%2BJavaPython-Binary-Indexed-Tree-Feel-free-to-reuse\r\nclass BIT:\r\n    def __init__(self, size):\r\n        self.bit = [0] * (size + 1)\r\n\r\n    def getSum(self, idx):  # Get sum in range [0..idx], 1-based indexing\r\n        s = 0\r\n        while idx > 0:\r\n            s += self.bit[idx]\r\n            idx -= idx & (-idx)\r\n        return s\r\n\r\n    def getSumRange(self, left, right):  # left, right inclusive, 1-based indexing\r\n        return self.getSum(right) - self.getSum(left - 1)\r\n\r\n    def addValue(self, idx, val):  # 1-based indexing\r\n        while idx < len(self.bit):\r\n            self.bit[idx] += val\r\n            idx += idx & (-idx)\r\n\r\n\r\nclass TrieNode:\r\n    def __init__(self):\r\n        self.children = defaultdict(TrieNode)\r\n        self.word = None\r\n\r\n    def addWord(self, word):\r\n        cur = self\r\n        for c in word:\r\n            cur = cur.children[c]\r\n        cur.word = \"*\"\r\n\r\n\r\nclass UnionFind:\r\n    def __init__(self, n):\r\n        self.parent = list(range(n))\r\n        self.size = [1] * n\r\n        self.num_sets = n\r\n\r\n    def find(self, a):\r\n        acopy = a\r\n        while a != self.parent[a]:\r\n            a = self.parent[a]\r\n        while acopy != a:\r\n            self.parent[acopy], acopy = a, self.parent[acopy]\r\n        return a\r\n\r\n    def union(self, a, b):\r\n        a, b = self.find(a), self.find(b)\r\n        if a != b:\r\n            if self.size[a] < self.size[b]:\r\n                a, b = b, a\r\n\r\n            self.num_sets -= 1\r\n            self.parent[b] = a\r\n            self.size[a] += self.size[b]\r\n\r\n    def set_size(self, a):\r\n        return self.size[self.find(a)]\r\n\r\n    def __len__(self):\r\n        return self.num_sets\r\n\r\n\r\nclass LazySegmentTree:\r\n    def __init__(self, data, default=0, func=max):\r\n        \"\"\"initialize the lazy segment tree with data\"\"\"\r\n        self._default = default\r\n        self._func = func\r\n\r\n        self._len = len(data)\r\n        self._size = _size = 1 << (self._len - 1).bit_length()\r\n        self._lazy = [0] * (4 * _size)\r\n\r\n        self.data = [default] * (4 * _size)\r\n        self.data[_size:_size + self._len] = data\r\n        for i in reversed(range(_size)):\r\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\r\n\r\n    def __len__(self):\r\n        return self._len\r\n\r\n    def _push(self, idx):\r\n        \"\"\"push query on idx to its children\"\"\"\r\n        # Let the children know of the queries\r\n        q, self._lazy[idx] = self._lazy[idx], 0\r\n\r\n        self._lazy[2 * idx] += q\r\n        self._lazy[2 * idx + 1] += q\r\n        self.data[2 * idx] += q\r\n        self.data[2 * idx + 1] += q\r\n\r\n    def _update(self, idx):\r\n        \"\"\"updates the node idx to know of all queries applied to it via its ancestors\"\"\"\r\n        for i in reversed(range(1, idx.bit_length())):\r\n            self._push(idx >> i)\r\n\r\n    def _build(self, idx):\r\n        \"\"\"make the changes to idx be known to its ancestors\"\"\"\r\n        idx >>= 1\r\n        while idx:\r\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) + self._lazy[idx]\r\n            idx >>= 1\r\n\r\n    def add(self, start, stop, value):\r\n        \"\"\"lazily add value to [start, stop)\"\"\"\r\n        start = start_copy = start + self._size\r\n        stop = stop_copy = stop + self._size\r\n        while start < stop:\r\n            if start & 1:\r\n                self._lazy[start] += value\r\n                self.data[start] += value\r\n                start += 1\r\n            if stop & 1:\r\n                stop -= 1\r\n                self._lazy[stop] += value\r\n                self.data[stop] += value\r\n            start >>= 1\r\n            stop >>= 1\r\n\r\n        # Tell all nodes above of the updated area of the updates\r\n        self._build(start_copy)\r\n        self._build(stop_copy - 1)\r\n\r\n    def query(self, start, stop, default=0):\r\n        \"\"\"func of data[start, stop)\"\"\"\r\n        start += self._size\r\n        stop += self._size\r\n\r\n        # Apply all the lazily stored queries\r\n        self._update(start)\r\n        self._update(stop - 1)\r\n\r\n        res = default\r\n        while start < stop:\r\n            if start & 1:\r\n                res = self._func(res, self.data[start])\r\n                start += 1\r\n            if stop & 1:\r\n                stop -= 1\r\n                res = self._func(res, self.data[stop])\r\n            start >>= 1\r\n            stop >>= 1\r\n        return res\r\n\r\n    def __repr__(self):\r\n        return \"LazySegmentTree({0})\".format(self.data)\r\n\r\n\r\n# Author: beethoven97\r\ndef sieve(n):\r\n    prim = [False] * (n + 1)\r\n    ret = []\r\n    for i in range(2, n + 1):\r\n        if not prim[i]:\r\n            ret.append(i)\r\n            for j in range(i, n + 1, i):\r\n                prim[j] = 1\r\n\r\n    return ret\r\n\r\n\r\n# find smallest prime factor for all numbers <= n\r\nclass Prime:\r\n\r\n    def __init__(self, n):\r\n        self.n = n\r\n        self.smallest_prime = [0] * (self.n + 5)\r\n\r\n        for i in range(2, self.n + 1):\r\n            if not self.smallest_prime[i]:\r\n                for j in range(i, self.n + 1, i):\r\n                    self.smallest_prime[j] = i\r\n\r\n    def factorise(self, num):\r\n\r\n        ans = []\r\n        while self.smallest_prime[num] != 0:\r\n            k = self.smallest_prime[num]\r\n            ans.append(k)\r\n            while num % k == 0:\r\n                num //= k\r\n\r\n        return ans\r\n\r\n\r\n# Function to find the value of\r\n# P * Q^-1 mod 998244353 (G4G)\r\ndef mod_inverse(p, q, mod):\r\n    expo = 0\r\n    expo = mod - 2\r\n\r\n    # Loop to find the value\r\n    # until the expo is not zero\r\n    while (expo):\r\n\r\n        # Multiply p with q\r\n        # if expo is odd\r\n        if (expo & 1):\r\n            p = (p * q) % mod\r\n        q = (q * q) % mod\r\n\r\n        # Reduce the value of\r\n        # expo by 2\r\n        expo >>= 1\r\n\r\n    return p\r\n\r\n\r\n# PyRival\r\nfrom types import GeneratorType\r\n\r\n\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        to = f(*args, **kwargs)\r\n        while True:\r\n            if type(to) is GeneratorType:\r\n                stack.append(to)\r\n                to = next(to)\r\n            else:\r\n                stack.pop()\r\n                if not stack:\r\n                    break\r\n                to = stack[-1].send(to)\r\n        return to\r\n\r\n    return wrappedfunc\r\n\r\n\r\n# Author: huikang\r\ndef remove_consecutive_duplicates(lst):\r\n    res = []\r\n    for x in lst:\r\n        if res and x == res[-1]:\r\n            continue\r\n        res.append(x)\r\n    return res\r\n\r\n\r\n# nmax = 2000000\r\n# fact = [1] * (nmax+1)\r\n# for i in range(2, nmax+1):\r\n#    fact[i] = fact[i-1] * i % MOD\r\n#\r\n# inv = [1] * (nmax+1)\r\n# inv[-1] = pow(fact[-1], MOD-2, MOD)\r\n# for i in range(nmax-1, 0, -1):\r\n#    inv[i] = inv[i+1] * (i+1) % MOD\r\n\r\n\r\n# def C(n, m):\r\n#    return fact[n] * inv[m] % MOD * inv[n-m] % MOD if 0 <= m <= n else 0\r\n\r\ndef sumtoN(n):\r\n    return ((n) * (n + 1)) // 2\r\n\r\n\r\ndef powerOf2(n):\r\n    return n > 0 and n & (n - 1) == 0\r\n\r\n\r\ndef ceiling(x, y):\r\n    return (x + y - 1) // y\r\n\r\n\r\ndef query(a, b):\r\n    print(\"? {} {}\".format(a, b), flush=True)\r\n    response = int(input())\r\n    return response\r\n\r\n\r\ndef alert(num):\r\n    print(\"! {}\".format(num), flush=True)\r\n\r\n\r\n# d4 = [(0, 1), (-1, 0), (0, -1), (1, 0)]\r\n# d8 = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\r\n\r\n'''\r\nKey formulas:\r\n1 XOR n = n-1 when n is odd\r\n1 XOR n = n+1 when n is even\r\na|b = a + b - a & b\r\nXOR and AND is commutative\r\nWhen gcd appears also consider lcm\r\nlowest_ind = graph.index(min(graph, key = len)) #doesnt give the index with minimum length\r\nceiling more feasible to take (val+1)//2 instead of ceil(val/2)\r\n'''\r\n\r\n\r\ndef read_int(): return (int(input()))\r\n\r\n\r\ndef read_ints(): return (map(int, input().split()))\r\n\r\n\r\ndef read_list(): return (list(map(int, input().split())))\r\n\r\n\r\ndef read_matrix(m, n):\r\n    ans = []\r\n    for _ in range(m):\r\n        ans.append(read_list())\r\n    return ans\r\n\r\n\r\ndef read_graph(nodes, edges):\r\n    graph = [[] for _ in range(n + 1)]\r\n    for _ in range(edges):\r\n        u, v = read_ints()\r\n        graph[u].append(v)\r\n        graph[v].append(u)\r\n    return graph\r\n\r\n\r\n# for Counter on integers use CounterInt, else use Counter\r\ndef solve():\r\n    n = read_int()\r\n    *a, = read_list()\r\n    p = 0\r\n    m = 1\r\n    st = Set()\r\n    for i in a:\r\n        p+=(i*m)\r\n        if(st.__contains__(p)):\r\n            print(\"YES\")\r\n            return\r\n        st.add(p)\r\n        m = -m\r\n    print(\"YES\") if st.__contains__(0) else print(\"NO\")\r\n\r\n\r\n\r\n\r\n\r\nt = read_int()\r\n\r\nfor _ in range(t):\r\n    solve()",
        "rejectedCode": "import sys\r\n\r\ninput = lambda: sys.stdin.buffer.readline().decode().strip()\r\nfrom math import inf, gcd, lcm, log, log2, floor, ceil, sqrt, isqrt\r\nfrom collections import defaultdict, deque, Counter\r\nfrom heapq import heappush, heappop, heapify\r\nfrom functools import lru_cache\r\nfrom itertools import permutations, accumulate, groupby\r\nfrom bisect import insort, bisect_left, bisect_right\r\nimport random\r\n\r\n\r\n# template taken from https://codeforces.com/contest/1703/submission/164030692 - Author mkawa2\r\nclass DefaultDict:\r\n    def __init__(self, default=None):\r\n        self.default = default\r\n        self.x = random.randrange(1, 1 << 31)\r\n        self.dd = defaultdict(default)\r\n\r\n    def __repr__(self):\r\n        return \"{\" + \", \".join(f\"{k ^ self.x}: {v}\" for k, v in self.dd.items()) + \"}\"\r\n\r\n    def __eq__(self, other):\r\n        for k in set(self) | set(other):\r\n            if self[k] != other[k]: return False\r\n        return True\r\n\r\n    def __or__(self, other):\r\n        res = DefaultDict(self.default)\r\n        for k, v in self.dd: res[k] = v\r\n        for k, v in other.dd: res[k] = v\r\n        return res\r\n\r\n    def __len__(self):\r\n        return len(self.dd)\r\n\r\n    def __getitem__(self, item):\r\n        return self.dd[item ^ self.x]\r\n\r\n    def __setitem__(self, key, value):\r\n        self.dd[key ^ self.x] = value\r\n\r\n    def __delitem__(self, key):\r\n        del self.dd[key ^ self.x]\r\n\r\n    def __contains__(self, item):\r\n        return item ^ self.x in self.dd\r\n\r\n    def items(self):\r\n        for k, v in self.dd.items(): yield (k ^ self.x, v)\r\n\r\n    def keys(self):\r\n        for k in self.dd: yield k ^ self.x\r\n\r\n    def values(self):\r\n        for v in self.dd.values(): yield v\r\n\r\n    def __iter__(self):\r\n        for k in self.dd: yield k ^ self.x\r\n\r\n\r\nclass CounterInt(DefaultDict):\r\n    def __init__(self, aa=[]):\r\n        super().__init__(int)\r\n        for a in aa: self.dd[a ^ self.x] += 1\r\n\r\n    def __add__(self, other):\r\n        res = CounterInt()\r\n        for k in set(self) | set(other):\r\n            v = self[k] + other[k]\r\n            if v > 0: res[k] = v\r\n        return res\r\n\r\n    def __sub__(self, other):\r\n        res = CounterInt()\r\n        for k in set(self) | set(other):\r\n            v = self[k] - other[k]\r\n            if v > 0: res[k] = v\r\n        return res\r\n\r\n    def __and__(self, other):\r\n        res = CounterInt()\r\n        for k in self:\r\n            v = min(self[k], other[k])\r\n            if v > 0: res[k] = v\r\n        return res\r\n\r\n    def __or__(self, other):\r\n        res = CounterInt()\r\n        for k in set(self) | set(other):\r\n            v = max(self[k], other[k])\r\n            if v > 0: res[k] = v\r\n        return res\r\n\r\n\r\nclass Set:\r\n    def __init__(self, aa=[]):\r\n        self.x = random.randrange(1, 1 << 31)\r\n        self.st = set()\r\n        for a in aa: self.st.add(a ^ self.x)\r\n\r\n    def __repr__(self):\r\n        return \"{\" + \", \".join(str(k ^ self.x) for k in self.st) + \"}\"\r\n\r\n    def __len__(self):\r\n        return len(self.st)\r\n\r\n    def add(self, item):\r\n        self.st.add(item ^ self.x)\r\n\r\n    def discard(self, item):\r\n        self.st.discard(item ^ self.x)\r\n\r\n    def __contains__(self, item):\r\n        return item ^ self.x in self.st\r\n\r\n    def __iter__(self):\r\n        for k in self.st: yield k ^ self.x\r\n\r\n    def pop(self):\r\n        return self.st.pop() ^ self.x\r\n\r\n    def __or__(self, other):\r\n        res = Set(self)\r\n        for a in other: res.add(a)\r\n        return res\r\n\r\n    def __and__(self, other):\r\n        res = Set()\r\n        for a in self:\r\n            if a in other: res.add(a)\r\n        for a in other:\r\n            if a in self: res.add(a)\r\n        return res\r\n\r\n\r\n# https://leetcode.com/problems/create-sorted-array-through-instructions/discuss/1245397/C%2B%2BJavaPython-Binary-Indexed-Tree-Feel-free-to-reuse\r\nclass BIT:\r\n    def __init__(self, size):\r\n        self.bit = [0] * (size + 1)\r\n\r\n    def getSum(self, idx):  # Get sum in range [0..idx], 1-based indexing\r\n        s = 0\r\n        while idx > 0:\r\n            s += self.bit[idx]\r\n            idx -= idx & (-idx)\r\n        return s\r\n\r\n    def getSumRange(self, left, right):  # left, right inclusive, 1-based indexing\r\n        return self.getSum(right) - self.getSum(left - 1)\r\n\r\n    def addValue(self, idx, val):  # 1-based indexing\r\n        while idx < len(self.bit):\r\n            self.bit[idx] += val\r\n            idx += idx & (-idx)\r\n\r\n\r\nclass TrieNode:\r\n    def __init__(self):\r\n        self.children = defaultdict(TrieNode)\r\n        self.word = None\r\n\r\n    def addWord(self, word):\r\n        cur = self\r\n        for c in word:\r\n            cur = cur.children[c]\r\n        cur.word = \"*\"\r\n\r\n\r\nclass UnionFind:\r\n    def __init__(self, n):\r\n        self.parent = list(range(n))\r\n        self.size = [1] * n\r\n        self.num_sets = n\r\n\r\n    def find(self, a):\r\n        acopy = a\r\n        while a != self.parent[a]:\r\n            a = self.parent[a]\r\n        while acopy != a:\r\n            self.parent[acopy], acopy = a, self.parent[acopy]\r\n        return a\r\n\r\n    def union(self, a, b):\r\n        a, b = self.find(a), self.find(b)\r\n        if a != b:\r\n            if self.size[a] < self.size[b]:\r\n                a, b = b, a\r\n\r\n            self.num_sets -= 1\r\n            self.parent[b] = a\r\n            self.size[a] += self.size[b]\r\n\r\n    def set_size(self, a):\r\n        return self.size[self.find(a)]\r\n\r\n    def __len__(self):\r\n        return self.num_sets\r\n\r\n\r\nclass LazySegmentTree:\r\n    def __init__(self, data, default=0, func=max):\r\n        \"\"\"initialize the lazy segment tree with data\"\"\"\r\n        self._default = default\r\n        self._func = func\r\n\r\n        self._len = len(data)\r\n        self._size = _size = 1 << (self._len - 1).bit_length()\r\n        self._lazy = [0] * (4 * _size)\r\n\r\n        self.data = [default] * (4 * _size)\r\n        self.data[_size:_size + self._len] = data\r\n        for i in reversed(range(_size)):\r\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\r\n\r\n    def __len__(self):\r\n        return self._len\r\n\r\n    def _push(self, idx):\r\n        \"\"\"push query on idx to its children\"\"\"\r\n        # Let the children know of the queries\r\n        q, self._lazy[idx] = self._lazy[idx], 0\r\n\r\n        self._lazy[2 * idx] += q\r\n        self._lazy[2 * idx + 1] += q\r\n        self.data[2 * idx] += q\r\n        self.data[2 * idx + 1] += q\r\n\r\n    def _update(self, idx):\r\n        \"\"\"updates the node idx to know of all queries applied to it via its ancestors\"\"\"\r\n        for i in reversed(range(1, idx.bit_length())):\r\n            self._push(idx >> i)\r\n\r\n    def _build(self, idx):\r\n        \"\"\"make the changes to idx be known to its ancestors\"\"\"\r\n        idx >>= 1\r\n        while idx:\r\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) + self._lazy[idx]\r\n            idx >>= 1\r\n\r\n    def add(self, start, stop, value):\r\n        \"\"\"lazily add value to [start, stop)\"\"\"\r\n        start = start_copy = start + self._size\r\n        stop = stop_copy = stop + self._size\r\n        while start < stop:\r\n            if start & 1:\r\n                self._lazy[start] += value\r\n                self.data[start] += value\r\n                start += 1\r\n            if stop & 1:\r\n                stop -= 1\r\n                self._lazy[stop] += value\r\n                self.data[stop] += value\r\n            start >>= 1\r\n            stop >>= 1\r\n\r\n        # Tell all nodes above of the updated area of the updates\r\n        self._build(start_copy)\r\n        self._build(stop_copy - 1)\r\n\r\n    def query(self, start, stop, default=0):\r\n        \"\"\"func of data[start, stop)\"\"\"\r\n        start += self._size\r\n        stop += self._size\r\n\r\n        # Apply all the lazily stored queries\r\n        self._update(start)\r\n        self._update(stop - 1)\r\n\r\n        res = default\r\n        while start < stop:\r\n            if start & 1:\r\n                res = self._func(res, self.data[start])\r\n                start += 1\r\n            if stop & 1:\r\n                stop -= 1\r\n                res = self._func(res, self.data[stop])\r\n            start >>= 1\r\n            stop >>= 1\r\n        return res\r\n\r\n    def __repr__(self):\r\n        return \"LazySegmentTree({0})\".format(self.data)\r\n\r\n\r\n# Author: beethoven97\r\ndef sieve(n):\r\n    prim = [False] * (n + 1)\r\n    ret = []\r\n    for i in range(2, n + 1):\r\n        if not prim[i]:\r\n            ret.append(i)\r\n            for j in range(i, n + 1, i):\r\n                prim[j] = 1\r\n\r\n    return ret\r\n\r\n\r\n# find smallest prime factor for all numbers <= n\r\nclass Prime:\r\n\r\n    def __init__(self, n):\r\n        self.n = n\r\n        self.smallest_prime = [0] * (self.n + 5)\r\n\r\n        for i in range(2, self.n + 1):\r\n            if not self.smallest_prime[i]:\r\n                for j in range(i, self.n + 1, i):\r\n                    self.smallest_prime[j] = i\r\n\r\n    def factorise(self, num):\r\n\r\n        ans = []\r\n        while self.smallest_prime[num] != 0:\r\n            k = self.smallest_prime[num]\r\n            ans.append(k)\r\n            while num % k == 0:\r\n                num //= k\r\n\r\n        return ans\r\n\r\n\r\n# Function to find the value of\r\n# P * Q^-1 mod 998244353 (G4G)\r\ndef mod_inverse(p, q, mod):\r\n    expo = 0\r\n    expo = mod - 2\r\n\r\n    # Loop to find the value\r\n    # until the expo is not zero\r\n    while (expo):\r\n\r\n        # Multiply p with q\r\n        # if expo is odd\r\n        if (expo & 1):\r\n            p = (p * q) % mod\r\n        q = (q * q) % mod\r\n\r\n        # Reduce the value of\r\n        # expo by 2\r\n        expo >>= 1\r\n\r\n    return p\r\n\r\n\r\n# PyRival\r\nfrom types import GeneratorType\r\n\r\n\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        to = f(*args, **kwargs)\r\n        while True:\r\n            if type(to) is GeneratorType:\r\n                stack.append(to)\r\n                to = next(to)\r\n            else:\r\n                stack.pop()\r\n                if not stack:\r\n                    break\r\n                to = stack[-1].send(to)\r\n        return to\r\n\r\n    return wrappedfunc\r\n\r\n\r\n# Author: huikang\r\ndef remove_consecutive_duplicates(lst):\r\n    res = []\r\n    for x in lst:\r\n        if res and x == res[-1]:\r\n            continue\r\n        res.append(x)\r\n    return res\r\n\r\n\r\n# nmax = 2000000\r\n# fact = [1] * (nmax+1)\r\n# for i in range(2, nmax+1):\r\n#    fact[i] = fact[i-1] * i % MOD\r\n#\r\n# inv = [1] * (nmax+1)\r\n# inv[-1] = pow(fact[-1], MOD-2, MOD)\r\n# for i in range(nmax-1, 0, -1):\r\n#    inv[i] = inv[i+1] * (i+1) % MOD\r\n\r\n\r\n# def C(n, m):\r\n#    return fact[n] * inv[m] % MOD * inv[n-m] % MOD if 0 <= m <= n else 0\r\n\r\ndef sumtoN(n):\r\n    return ((n) * (n + 1)) // 2\r\n\r\n\r\ndef powerOf2(n):\r\n    return n > 0 and n & (n - 1) == 0\r\n\r\n\r\ndef ceiling(x, y):\r\n    return (x + y - 1) // y\r\n\r\n\r\ndef query(a, b):\r\n    print(\"? {} {}\".format(a, b), flush=True)\r\n    response = int(input())\r\n    return response\r\n\r\n\r\ndef alert(num):\r\n    print(\"! {}\".format(num), flush=True)\r\n\r\n\r\n# d4 = [(0, 1), (-1, 0), (0, -1), (1, 0)]\r\n# d8 = [(0, 1), (-1, 0), (0, -1), (1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\r\n\r\n'''\r\nKey formulas:\r\n1 XOR n = n-1 when n is odd\r\n1 XOR n = n+1 when n is even\r\na|b = a + b - a & b\r\nXOR and AND is commutative\r\nWhen gcd appears also consider lcm\r\nlowest_ind = graph.index(min(graph, key = len)) #doesnt give the index with minimum length\r\nceiling more feasible to take (val+1)//2 instead of ceil(val/2)\r\n'''\r\n\r\n\r\ndef read_int(): return (int(input()))\r\n\r\n\r\ndef read_ints(): return (map(int, input().split()))\r\n\r\n\r\ndef read_list(): return (list(map(int, input().split())))\r\n\r\n\r\ndef read_matrix(m, n):\r\n    ans = []\r\n    for _ in range(m):\r\n        ans.append(read_list())\r\n    return ans\r\n\r\n\r\ndef read_graph(nodes, edges):\r\n    graph = [[] for _ in range(n + 1)]\r\n    for _ in range(edges):\r\n        u, v = read_ints()\r\n        graph[u].append(v)\r\n        graph[v].append(u)\r\n    return graph\r\n\r\n\r\n# for Counter on integers use CounterInt, else use Counter\r\ndef solve():\r\n    n = read_int()\r\n    *a, = read_list()\r\n    p = 0\r\n    m = 1\r\n    st = set()\r\n    for i in a:\r\n        p+=(i*m)\r\n        if(st.__contains__(p)):\r\n            print(\"YES\")\r\n            return\r\n        st.add(p)\r\n        m = -m\r\n    print(\"YES\") if st.__contains__(0) else print(\"NO\")\r\n\r\n\r\n\r\n\r\n\r\nt = read_int()\r\n\r\nfor _ in range(t):\r\n    solve()",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 461,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242608674",
            "author": "wtmwaganine",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705745100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242607622",
            "author": "wtmwaganine",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705744500
        },
        "acceptedCode": "# -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Sat Jan 20 22:32:57 2024\r\n\r\n@author: user\r\n\"\"\"\r\n\r\nt = int(input())\r\n\r\nfor i in range(t):\r\n    a, b, c = map(int, input().split())\r\n    \r\n    if a != b and a != c:\r\n        print(a)\r\n    elif b != a and b != c:\r\n        print(b)\r\n    elif c != b and c != a:\r\n        print(c)\r\n",
        "rejectedCode": "# -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Sat Jan 20 22:32:57 2024\r\n\r\n@author: user\r\n\"\"\"\r\n\r\nn = int(input(\"\u8acb\u8f38\u5165\u8981\u57f7\u884c\u5e7e\u6b21\u6e2c\u8a66\uff1a\"))\r\n\r\nfor i in range(n):\r\n    a, b, c = map(int, input(\"\u8acb\u8f38\u5165\u4e09\u500b\u6578\u5b57\uff0c\u5176\u4e2d\u5169\u500b\u76f8\u540c\uff0c\u4e00\u500b\u4e0d\u540c\uff1a\").split())\r\n    \r\n    if a != b and a != c:\r\n        print(a)\r\n    elif b != a and b != c:\r\n        print(b)\r\n    elif c != b and c != a:\r\n        print(c)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242529438",
            "author": "Mohit-Chowdhary",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 1800,
            "submissionTime": 1705717260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242528435",
            "author": "Mohit-Chowdhary",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705716960
        },
        "acceptedCode": "n=int(input())\r\nd={\"a\":\"V\",\"b\":\"C\",\"c\":\"C\",\"d\":\"C\",\"e\":\"V\"}\r\nfor i in range(n):\r\n    m=int(input())\r\n    w=input()\r\n    w=w[::-1]\r\n    s=\"\"\r\n    q=\"\"\r\n    for i in w:\r\n        if len(s)<2:\r\n            s+=d[i]\r\n            q+=i\r\n        elif len(s)==2:\r\n            if s==\"CV\":\r\n                s=\"\"\r\n                q+=i+\".\"\r\n            else:\r\n                s=d[i]\r\n                q+=\".\"+i\r\n    if q[-1]==\".\":q=q[:-1]\r\n    print(q[::-1])",
        "rejectedCode": "n=int(input())\r\nd={\"a\":\"V\",\"b\":\"C\",\"c\":\"C\",\"d\":\"C\",\"e\":\"V\"}\r\nfor i in range(n):\r\n    m=int(input())\r\n    w=input()\r\n    w=w[::-1]\r\n    s=\"\"\r\n    q=\"\"\r\n    for i in w:\r\n        if len(s)<2:\r\n            if len(q)!=0 and len(s)==0:\r\n                q+=\".\"\r\n            s+=d[i]\r\n            q+=i\r\n        elif len(s)==2:\r\n            if s==\"CV\":\r\n                s=\"\"\r\n                q+=i\r\n            else:\r\n                s=i\r\n                q+=\".\"+i\r\n    print(q[::-1])",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.bab\r\nba.ba\r\nd.ad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.ba.bb.ab.ab.ab.ba.bb.ab.ab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 3rd words differ - expected: 'dad.de.ca.bed.dad', found: 'd.ad.de.ca.bed.dad'\r\n"
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242472836",
            "author": "casuael_",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 514,
            "memory": 30700,
            "submissionTime": 1705670580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242470478",
            "author": "casuael_",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 11100,
            "submissionTime": 1705669320
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    glasses=list(map(int,input().split()))\r\n    out=[0]\r\n    for i in range(n):\r\n        if i%2==0:\r\n            out.append(out[-1]+glasses[i])\r\n        else:\r\n            out.append(out[-1]-glasses[i])\r\n    out.sort()\r\n    print((\"YES\") if any(out[i]==out[i+1] for i in range(len(out)-1)) else \"NO\")",
        "rejectedCode": "vowels = ['a','e']\r\nfor _ in range(int(input())):\r\n    input()\r\n    word = input()\r\n    output = []\r\n    while word:\r\n        if word[-1] in vowels:\r\n            output.insert(0,word[-2]+word[-1]+'.')\r\n            word = word[:-2]\r\n        else:\r\n            output.insert(0,word[-3] + word[-2] + word[-1] + '.')\r\n            word = word[:-3]\r\n    print(''.join(output)[:-1])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242446061",
            "author": "Vizhal_SU",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 18700,
            "submissionTime": 1705657080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242445711",
            "author": "Vizhal_SU",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 11500,
            "submissionTime": 1705656900
        },
        "acceptedCode": "C = ['b', 'c', 'd']\r\nV = ['a', 'e']\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    \r\n    result = []\r\n    i = 0\r\n    \r\n    while i < n:\r\n        result.append(s[i])\r\n        \r\n        if s[i] in V and i + 2 < n:\r\n            if s[i + 2] in C:\r\n                i += 1\r\n                result.append(s[i] + '.')\r\n            else:\r\n                result.append('.')\r\n        \r\n        i += 1\r\n    \r\n    print(''.join(result))\r\n",
        "rejectedCode": "C = ['b','c','d']\r\nV = ['a', 'e']\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    x = ''\r\n    i =0\r\n    while i<n:\r\n        x += s[i]\r\n        if s[i] in V and i+2 < n:\r\n            if s[i+2] in C:\r\n                i+=1\r\n                x = x + s[i] + '.' #CVC.C\r\n            else:  # CV.CV\r\n                x += '.'\r\n        i+=1\r\n    print(x)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242456640",
            "author": "00zijian",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 374,
            "memory": 29100,
            "submissionTime": 1705662300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242456477",
            "author": "00zijian",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705662180
        },
        "acceptedCode": "\r\ndef solve():\r\n    n = int(input())\r\n    A = list(map(int, input().split()))\r\n    s = [0]\r\n    y = 0\r\n    for i, x in enumerate(A):\r\n        if i & 1:\r\n            y += x\r\n        else:\r\n            y -= x\r\n        s.append(y)\r\n    s.sort()\r\n    for i in range(1,len(s)):\r\n        if s[i-1]==s[i]:\r\n            print(\"YES\")\r\n            return\r\n    print(\"NO\")\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    A = list(map(int, input().split()))\r\n    s = []\r\n    y = 0\r\n    for i, x in enumerate(A):\r\n        if i & 1:\r\n            y += x\r\n        else:\r\n            y -= x\r\n        s.append(y)\r\n    s.sort()\r\n    for i in range(1,len(s)):\r\n        if s[i-1]==s[i]:\r\n            print(\"YES\")\r\n            return \r\n    print(\"NO\")\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "NO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242442259",
            "author": "Surajk21",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 30100,
            "submissionTime": 1705655280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242442145",
            "author": "Surajk21",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 29400,
            "submissionTime": 1705655220
        },
        "acceptedCode": "from sys import stdin\r\n\r\ndef solve(*args):\r\n    n,arr = args\r\n    d={0}\r\n    so=0\r\n    se=0\r\n    for i in range(n):\r\n        if i&1:\r\n            cur = so+arr[i]\r\n            k = se - cur\r\n            so = cur\r\n        else:\r\n            cur = se+arr[i]\r\n            k = cur - so\r\n            se = cur\r\n        if k in d:\r\n            print('YES')\r\n            return\r\n        d.add(k)\r\n    print('NO')\r\n\r\nt=int(input())\r\nfor lst in stdin.readlines()[1::2]:\r\n    arr=list(map(int,lst.rstrip().split()))\r\n    n=len(arr)\r\n    solve(n,arr)",
        "rejectedCode": "from sys import stdin\r\n\r\ndef solve(*args):\r\n    n,arr = args\r\n    d={0}\r\n    so=0\r\n    se=0\r\n    for i in range(n):\r\n        if i&1:\r\n            cur = so+arr[i]\r\n            k = se - cur\r\n            so = cur\r\n        else:\r\n            cur = se+arr[i]\r\n            k = cur - so\r\n            se = cur\r\n        if k in d:\r\n            print('YES')\r\n            return\r\n        d.add(k)\r\n    print('NO')\r\n\r\nt=int(input())\r\nfor lst in stdin.readlines()[1::2]:\r\n    arr=list(map(int,lst.rstrip().split()))\r\n    n=len(arr)\r\n    solve(n,arr)",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242452147",
            "author": "luoingly",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 420,
            "memory": 30000,
            "submissionTime": 1705660020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242452016",
            "author": "luoingly",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 311,
            "memory": 9900,
            "submissionTime": 1705659900
        },
        "acceptedCode": "def solve():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n\r\n    p = [0]\r\n    s = 0\r\n    for i in range(n):\r\n        s += a[i] * (-1)**i\r\n        p.append(s)\r\n\r\n    p.sort()\r\n    for i in range(n):\r\n        if p[i] == p[i+1]:\r\n            print(\"YES\")\r\n            return\r\n\r\n    print(\"NO\")\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n\r\n    p = [0]\r\n    s = 0\r\n    for i in range(n):\r\n        s += a[i] * (-1)**i\r\n        p.append(s)\r\n\r\n    p.sort()\r\n    for i in range(n-1):\r\n        if p[i] == p[i+1]:\r\n            print(\"YES\")\r\n            return\r\n\r\n    print(\"NO\")\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [39th token]\r\n"
        },
        "errorLine": 12,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242459488",
            "author": "idomeneo",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1705663740
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242192712",
            "author": "idomeneo",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705557900
        },
        "acceptedCode": "import math\r\n\r\nfor _ in range(int(input())):\r\n    input()\r\n    s = sum(list(map(int, input().split(' '))))\r\n    print('YES' if s == math.isqrt(s) ** 2 else 'NO') \r\n",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    a = list(map(int, input().split(' ')))\r\n    s, p = 0, 1\r\n    se = set(0)\r\n    for i in a:\r\n        s += i * p\r\n        p = -p\r\n        if s in se:\r\n            print('YES')\r\n            return\r\n        se.add(s)\r\n    print('NO')\r\n\r\nfor _ in range(int(input())):\r\n    solve()",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "242463525",
            "author": "evannnnn",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1705665780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "242463271",
            "author": "evannnnn",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1705665660
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    grid = []\r\n    library = [\"A\", \"B\", \"C\", \"?\"]\r\n    for _ in range(3):\r\n        tmp = list(input())\r\n        grid.append(tmp)\r\n    for i in range(3):\r\n        for letter in grid[i]:\r\n            if letter == \"?\":\r\n                for j in range(3):\r\n                    library.remove(grid[i][j])\r\n                print(library[0])\r\n                break",
        "rejectedCode": "for _ in range(int(input())):\r\n    grid = []\r\n    library = [\"A\", \"B\", \"C\", \"?\"]\r\n    for _ in range(3):\r\n        tmp = list(input())\r\n        grid.append(tmp)\r\n    for i in range(3):\r\n        for letter in grid[i]:\r\n            if letter == \"?\":\r\n                for j in range(3):\r\n                    library.remove(grid[i][j])\r\n                    break\r\n    print(library[0])\r\n                \r\n                    \r\n                    \r\n                    \r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 12,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242144486",
            "author": "2796292181",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 29900,
            "submissionTime": 1705530120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242144377",
            "author": "2796292181",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 296,
            "memory": 9200,
            "submissionTime": 1705530060
        },
        "acceptedCode": "import math\r\nfor i in range (int(input())):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    sum = 0\r\n    for i in a:\r\n        sum += i\r\n    if (int)(math.sqrt(sum))*(int)(math.sqrt(sum)) == sum:print(\"YES\")\r\n    else :print(\"NO\")",
        "rejectedCode": "import math\r\nfor i in range (int(input())):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    sum = 0\r\n    for i in a:\r\n        sum += i\r\n    if math.sqrt(sum)*math.sqrt(sum)==sum:print(\"YES\")\r\n    else :print(\"NO\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "242121346",
            "author": "chadhurbala",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705499760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "242120813",
            "author": "chadhurbala",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705499400
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    di = {'A':3, 'B':3, 'C': 3, '?': 1}\r\n    for i in range(3):\r\n        for x in list(input()):\r\n            di[x] -= 1\r\n    for x in ['A', 'B', 'C']:\r\n        if di[x] != 0:\r\n            print(x)\r\n            ",
        "rejectedCode": "di = {'A':3, 'B':3, 'C': 3, '?': 1}\r\nfor _ in range(int(input())):\r\n    for i in range(3):\r\n        for x in list(input()):\r\n            di[x] -= 1\r\n    for x in ['A', 'B', 'C']:\r\n        if di[x] != 0:\r\n            print(x)\r\n            continue",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nA\r\nB\r\nC\r\nA\r\nB\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242109568",
            "author": "EgorQwerty",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 8300,
            "submissionTime": 1705493340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "242099549",
            "author": "EgorQwerty",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1705488420
        },
        "acceptedCode": "t=int(input())\r\nv='ae'\r\nc='bcd'\r\nfor i in range(t):\r\n    l = int(input())\r\n    s = input()\r\n    ans = []\r\n    n = 0 \r\n    while n<l:\r\n        if n+3<l and s[n] in c and s[n+1] in v and s[n+2] in c and s[n+3] in c or n+3==l:\r\n            ans.append(s[n:n+3])\r\n            n+=2\r\n        elif n+1<l and s[n] in c and s[n+1] in v:\r\n            ans.append(s[n:n+2])\r\n            n+=1\r\n        n+=1\r\n    print('.'.join(ans))",
        "rejectedCode": "t=int(input())\r\nj=[]\r\nfor i in range(t):\r\n    a=input()\r\n    b=input()\r\n    c=input()\r\n    if '?' in a:\r\n        if 'C' in a and 'B' in a:\r\n            j.append('A')\r\n        elif 'A' in a and 'B' in a:\r\n            j.append('C')\r\n        elif 'A' in a and 'C' in a:\r\n            j.append('B')\r\n    if '?' in b:\r\n        if 'C' in a and 'B' in b:\r\n            j.append('A')\r\n        elif 'A' in a and 'B' in b:\r\n            j.append('C')\r\n        elif 'A' in a and 'C' in b:\r\n            j.append('B')    \r\n    if '?' in c:\r\n        if 'C' in a and 'B' in c:\r\n            j.append('A')\r\n        elif 'A' in a and 'B' in c:\r\n            j.append('C')\r\n        elif 'A' in a and 'C' in c:\r\n            j.append('B')        \r\nfor i in range(len(j)):\r\n    print(j[i])",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nA\r\nA\r\nA\r\nA\r\nB\r\nA\r\nB\r\nC\r\nA\r\nA\r\nB\r\nB\r\nA\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nA\r\nA\r\nB\r\nA\r\nA\r\nC\r\nB\r\nA\r\nB\r\nA\r\nB\r\nA\r\nA\r\nB\r\nA\r\nC\r\nA\r\nA\r\nB\r\nA\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nB\r\nA\r\nA\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nA\r\nA\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nA\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nA\r\nB\r\nA\r\nA\r\nC\r\nA\r\nB\r\nB\r\nA\r\nA\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nA\r\nA\r\nB\r\nB\r\nA\r\nA\r\nC\r\nB\r\nA\r\nB\r\nA\r\nA\r\nA\r\nA\r\nB\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 5th words differ - expected: 'C', found: 'A'\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242109067",
            "author": "harirj",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1705493100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242108223",
            "author": "harirj",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 109,
            "memory": 100,
            "submissionTime": 1705492680
        },
        "acceptedCode": "import math\r\nfor i in range(int(input())):\r\n    o=0\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    sums=sum(a)\r\n    if math.sqrt(sums)==int(math.sqrt(sums)):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "import math\r\nfor i in range(int(input())):\r\n    o=0\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    sums=sum(a)\r\n    if math.sqrt(sums)*math.sqrt(sums)==sums:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242108079",
            "author": "tayavenya27",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705492620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242107847",
            "author": "tayavenya27",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2700,
            "submissionTime": 1705492500
        },
        "acceptedCode": "n = int(input())\r\nds = []  \r\nfor i in range(n):\r\n    a,b,c,=map(int,input().split())\r\n    if a == b:\r\n        ds.append(c)\r\n    elif b == c:\r\n        ds.append(a)\r\n    elif a == c:\r\n        ds.append(b)\r\nprint(*ds, sep = '\\n')\r\n        ",
        "rejectedCode": "n = int(input())\r\nds = []  \r\nfor i in range(n):\r\n    a,b,c,=map(input().split())\r\n    if a == b:\r\n        ds.append(c)\r\n    elif b == c:\r\n        ds.append(a)\r\n    elif a == c:\r\n        ds.append(b)\r\nprint(ds)\r\n        ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "242074407",
            "author": "chan_mal",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1872,
            "memory": 62300,
            "submissionTime": 1705477500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242014686",
            "author": "chan_mal",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 32400,
            "submissionTime": 1705448640
        },
        "acceptedCode": "class Bit:\n    def __init__(self, n):\n        self.size = n\n        self.tree = [0] * (n + 1)\n  \n    def sum(self, i):\n        s = 0\n        while i > 0:\n            s += self.tree[i]\n            i -= i & -i\n        return s\n  \n    def add(self, i, x):\n        while i <= self.size:\n            self.tree[i] += x\n            i += i & -i\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    seg = []\n    points = []\n    ans = 0\n    bit = Bit(2*n)\n    for _ in range(n):\n        a, b = map(int, input().split())\n        seg.append((a, b))\n        points.append(a)\n        points.append(b)\n    \n    num_to_ind = {}\n    for i, num in enumerate(sorted(set(points))):\n        num_to_ind[num] = i\n    \n    seg.sort(key=lambda x:x[1])\n    for ind, (a, b) in enumerate(seg, 1):\n        ans += ind - bit.sum(num_to_ind[a]) - 1\n        bit.add(num_to_ind[a] + 1, 1)\n    print(ans)",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    seen = set([0])\r\n    sm = 0\r\n    flg = 0\r\n    for i, aa in enumerate(a):\r\n        if i % 2 == 0:\r\n            sm += aa\r\n        else:\r\n            sm -= aa\r\n        if sm in seen:\r\n            flg = 1\r\n            print(\"YES\")\r\n            break\r\n        seen.add(sm)\r\n    if flg == 0:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242073576",
            "author": "ch3ngl0rd",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 405,
            "memory": 25000,
            "submissionTime": 1705477140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242073478",
            "author": "ch3ngl0rd",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 92,
            "memory": 3300,
            "submissionTime": 1705477080
        },
        "acceptedCode": "cases = int(input())\n\nfor _ in range(cases):\n    num_buckets = int(input())\n    squares_count = sum([int(i) for i in input().split()])\n    square_root = int(squares_count ** 0.5)\n    if squares_count == square_root * square_root:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
        "rejectedCode": "cases = int(input())\n\nfor _ in range(cases):\n    num_buckets = int(input())\n    squares_count = sum([int(i) for i in input().split()])\n    square_root = int(square_root ** 0.5)\n    if squares_count == square_root * square_root:\n        print(\"YES\")\n    else:\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "242073212",
            "author": "developerdjay",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 24200,
            "submissionTime": 1705476960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "242070868",
            "author": "developerdjay",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2900,
            "submissionTime": 1705475940
        },
        "acceptedCode": "import math\r\nn = int(input())\r\nfor i in range(n):\r\n    input()\r\n    x = sum(map(int,input().split()))\r\n    if math.isqrt(x)**2 == x:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "A\r\nB\r\nC\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241963149",
            "author": "komal12",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1705402740
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241962595",
            "author": "komal12",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 700,
            "submissionTime": 1705402560
        },
        "acceptedCode": "import math\r\ntest=int(input())\r\nfor t in range(0,test):\r\n    n=int(input())\r\n    nums=list(map(int,input().split()))\r\n    total=sum(nums)\r\n    root=int(math.sqrt(total))\r\n    if root*root==total:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "test=int(input())\r\nfor t in range(0,test):\r\n    n=int(input())\r\n    nums=list(map(int,input().split()))\r\n    total=sum(nums)\r\n    f=0\r\n    if total==1:\r\n        print(\"YES\")\r\n        continue\r\n    for i in range(0,((total//2)+2)):\r\n        if i*i==total:\r\n            f=1\r\n            print(\"YES\")\r\n            break\r\n    if f==0:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "YES\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241968975",
            "author": "Warlock_007",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705405080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241967239",
            "author": "Warlock_007",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705404360
        },
        "acceptedCode": "t=int(input())\r\nfor _ in range(t):\r\n    #construct a 3*3 matrix\r\n    matrix=[]\r\n    for i in range(3):\r\n        s=input()\r\n        l=[s[0],s[1],s[2]]\r\n        if '?' in l and 'A' not in l:\r\n            print('A')\r\n        elif '?' in l and 'B' not in l:\r\n            print('B')\r\n        elif '?' in l and 'C' not in l:\r\n            print('C')\r\n",
        "rejectedCode": "t=int(input())\r\nfor _ in range(t):\r\n    l=[]\r\n    for i in range(0,3):\r\n        s=input()\r\n        l1=[s[0],s[1],s[2]]\r\n        if '?' in l1:\r\n            if 'A' not in l1:\r\n                print('A')\r\n                break\r\n            elif 'B' not in l1:\r\n                print('B')\r\n                break\r\n            elif 'C' not in l1:\r\n                print('C')\r\n                break",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241957107",
            "author": "Prototype10050",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 9300,
            "submissionTime": 1705400280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241953991",
            "author": "Prototype10050",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Memory limit exceeded on test 3",
            "errorCaseNo": 0,
            "runTime": 264,
            "memory": 262100,
            "submissionTime": 1705399080
        },
        "acceptedCode": "import sys\r\nsys.setrecursionlimit(10**9)\r\nfrom functools import lru_cache\r\nimport re\r\n\r\n\r\ndef validate_string(input_string):\r\n    return bool(re.match(r'^[bcd][ae](?:[bcd])?$', input_string))\r\n\r\n\r\n@lru_cache\r\ndef solve(s):\r\n\r\n    if len(s)<2: return ''\r\n    if len(s) in [2,3]:\r\n        if not validate_string(s):\r\n            return ''\r\n        else:\r\n            return s\r\n    \r\n\r\n    if validate_string(s[:3]):\r\n\r\n        ans = solve(s[3:])\r\n\r\n        if len(ans) > 0:\r\n            return s[:3] + '.' + ans\r\n        else:\r\n            return s[:2] + '.' + solve(s[2:])\r\n        \r\n    if  validate_string(s[:2]):\r\n\r\n        ans = solve(s[2:])\r\n\r\n        if len(ans) > 0:\r\n            return s[:2] + '.' + ans\r\n        else:\r\n            return s[:3] + '.' + solve(s[3:])\r\n        \r\n    \r\n    return ''\r\n\r\n\r\nfor _ in range(int(input())):\r\n    \r\n    n = int(input())\r\n    s = input()\r\n    ans = []\r\n    i = 0\r\n\r\n    while i < n-3:\r\n        if s[i+2] in 'bcd' and not s[i+3] in 'bcd':\r\n            ans += [s[i: i+2]]\r\n            i += 2\r\n        else:\r\n            ans += [s[i: i+3]]\r\n            i += 3\r\n    ans += [s[i:]]\r\n    print('.'.join(ans)  )\r\n    \r\n\r\n\r\n    # print(validate_string(s))\r\n    # print(solve(s))",
        "rejectedCode": "import sys\r\nsys.setrecursionlimit(10**9)\r\nfrom functools import lru_cache\r\nimport re\r\n\r\n\r\ndef validate_string(input_string):\r\n    return bool(re.match(r'^[bcd][ae](?:[bcd])?$', input_string))\r\n\r\n\r\n\r\ndef solve(s):\r\n\r\n    if len(s)<2: return ''\r\n    if len(s) in [2,3]:\r\n        if not validate_string(s):\r\n            return ''\r\n        else:\r\n            return s\r\n    \r\n    if  validate_string(s[:2]):\r\n\r\n        ans = solve(s[2:])\r\n\r\n        if len(ans) > 0:\r\n            return s[:2] + '.' + ans\r\n        else:\r\n            return s[:3] + '.' + solve(s[3:])\r\n        \r\n    if validate_string(s[:3]):\r\n\r\n        ans = solve(s[3:])\r\n\r\n        if len(ans) > 0:\r\n            return s[:3] + '.' + ans\r\n        else:\r\n            return ''\r\n    return ''\r\n\r\n\r\nfor _ in range(int(input())):\r\n\r\n    n = int(input()) - 1\r\n\r\n    print(solve(input()))",
        "failedTestCase": null,
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241975802",
            "author": "dyppp",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 34200,
            "submissionTime": 1705407960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241975681",
            "author": "dyppp",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 30900,
            "submissionTime": 1705407900
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\nT = int(input())\r\nfor _ in range(T):\r\n    ans = \"NO\"\r\n    p_sum = {0 : 1}\r\n    N = int(input())\r\n    glass = list(map(int, input().split()))\r\n    s = 0\r\n    line=[0]\r\n    for i in range(N):\r\n        if i %2 == 0:\r\n            s += glass[i]\r\n        else:\r\n            s -= glass[i]\r\n        line.append(s)\r\n    line.sort()\r\n    for i in range(len(line)-1):\r\n        if line[i]==line[i+1]:\r\n            ans=\"YES\"\r\n    print(ans)",
        "rejectedCode": "import sys\r\ninput = sys.stdin.readline\r\nT = int(input())\r\nfor _ in range(T):\r\n    ans = \"NO\"\r\n    p_sum = {0 : 1}\r\n    N = int(input())\r\n    glass = list(map(int, input().split()))\r\n    s = 0\r\n    line=[0]\r\n    for i in range(N):\r\n        if i %2 == 0:\r\n            s += glass[i]\r\n        else:\r\n            s -= glass[i]\r\n        line.append(s)\r\n    if len(set(line))!=len(line):\r\n        ans=\"YES\"\r\n    print(ans)",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 17,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241975620",
            "author": "sevonchik",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 30500,
            "submissionTime": 1705407840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241975271",
            "author": "sevonchik",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 2,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1705407720
        },
        "acceptedCode": "import math\r\nn = int(input())\r\nfor i in range(n):\r\n    m = int(input())\r\n    a = list(map(int, input().split()))\r\n    if int(math.sqrt(sum(a))) == math.sqrt(sum(a)):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "n = int(input())\r\nfor i in range(n):\r\n    for j in range(n):\r\n        a = list(input())\r\n        if a.count(\"A\") == a.count(\"B\") != a.count(\"C\"):\r\n            print(\"C\")\r\n        elif a.count(\"A\") == a.count(\"C\") != a.count(\"B\"):\r\n            print(\"B\")\r\n        elif a.count(\"C\") == a.count(\"B\") != a.count(\"A\"):\r\n            print(\"A\")",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241983995",
            "author": "aayush.s1602",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 28900,
            "submissionTime": 1705411560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241981983",
            "author": "aayush.s1602",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 15600,
            "submissionTime": 1705410600
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    s = 0\r\n    m = {0}\r\n\r\n    flag = 0\r\n\r\n    for i in range(n):\r\n        arr[i] = -arr[i] if i % 2 else arr[i]\r\n        s += arr[i]\r\n        if s in m:\r\n            flag = 1\r\n            break\r\n        m.add(s)\r\n    print('YES' if flag else 'NO')\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    arr = list(map(int,input().split()))\r\n    s = 0\r\n    m = [0]\r\n\r\n    for i in range(n):\r\n        if i%2:\r\n            arr[i] = - arr[i]\r\n    flag = 0\r\n    for i in range(n):\r\n        s += arr[i]\r\n        if s in m:\r\n            flag = 1\r\n            break\r\n        m.append(s)\r\n    print('YES' if flag else 'NO')\r\n",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241974843",
            "author": "RONAK007",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 30000,
            "submissionTime": 1705407540
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241881837",
            "author": "RONAK007",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 32400,
            "submissionTime": 1705364340
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    s=set()\r\n    s.add(0)\r\n    summ=0\r\n    pref=[0]*(n+1)\r\n    for i in range(n):\r\n        if i%2==1:\r\n            summ-=a[i]\r\n        else:\r\n            summ+=a[i]\r\n        pref[i+1]=summ\r\n    pref.sort()\r\n    same=\"NO\"\r\n    for i in range(1,n+1):\r\n        if pref[i]==pref[i-1]:\r\n            same=\"YES\"\r\n            break\r\n    if summ==0:\r\n        same=\"YES\"\r\n    print(same)\r\n\r\n\r\n        \r\n\r\n\r\n            \r\n        \r\n\r\n\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    s=set()\r\n    s.add(0)\r\n    summ=0\r\n    same=\"NO\"\r\n    for i in range(1,n+1):\r\n        if i%2==0:\r\n            summ-=a[i-1]\r\n        else:\r\n            summ+=a[i-1]\r\n        if summ in s:\r\n            same=\"YES\"\r\n            break\r\n        s.add(summ)\r\n    if summ==0:\r\n        same=\"YES\"\r\n    print(same)\r\n\r\n\r\n        \r\n\r\n\r\n            \r\n        \r\n\r\n\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241955195",
            "author": "NEGRVPENE",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 26200,
            "submissionTime": 1705399560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241950808",
            "author": "NEGRVPENE",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 900,
            "submissionTime": 1705397820
        },
        "acceptedCode": "f = int(input())\r\n\r\nfor j in range(f):\r\n    n = int(input())\r\n\r\n    a = input().split(' ')\r\n    a2 = list(map(int, a))\r\n    a3 = (sum(a2)**0.5) % 2\r\n    if a3 == int(a3):\r\n        print('YES')\r\n    else:\r\n        print('NO')\r\n",
        "rejectedCode": "from re import split\r\n\r\nf = int(input())\r\n\r\nfor j in range(f):\r\n    n = int(input())\r\n\r\n    a = split(' ', input())\r\n    a2 = list(map(int, a))\r\n    a3 = (sum(a2)**0.5) % 2\r\n    if a3 == int(a3):\r\n        print('YES')\r\n    else: \r\n        print('NO')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242138342",
            "author": "new.bie",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 217,
            "memory": 32300,
            "submissionTime": 1705522200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "242138311",
            "author": "new.bie",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 26900,
            "submissionTime": 1705522140
        },
        "acceptedCode": "def solve():\r\n    t = int(input())\r\n    nums = list(map(int, input().split()))\r\n    pref =[0]\r\n    \r\n    for i in range(len(nums)):\r\n        nums[i] *= -1 if i%2==0 else 1\r\n        pref.append(pref[-1]+nums[i])\r\n\r\n    unique_sums = set()\r\n    for pr in pref:\r\n        if pr in unique_sums:\r\n            return \"YES\"\r\n        unique_sums.add(pr)\r\n        \r\n    return \"NO\"\r\n        \r\nfor _ in range(int(input())):\r\n    print(solve())",
        "rejectedCode": "def solve():\r\n    t = int(input())\r\n    nums = list(map(int, input().split()))\r\n    pref =[0]\r\n    \r\n    for i in range(len(nums)):\r\n        nums[i] *= -1 if i%2==0 else 1\r\n        pref.append(pref[-1]+nums[i])\r\n\r\n    unique_sums = set()\r\n    for pr in pref:\r\n        if pr in unique_sums:\r\n            return \"YES\"\r\n        unique_sums.add(pr)\r\n        \r\n    return \"NO\"\r\n        \r\nfor _ in range(int(input())):\r\n    print(solve())",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242070091",
            "author": "joshshipton",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705475580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242069779",
            "author": "joshshipton",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705475460
        },
        "acceptedCode": "n = int(input())\n\nfor i in range(n):\n    temp = input().split()\n    if temp[0] == temp[1]:\n        print(temp[2])\n        continue\n    if temp[1] == temp[2]:\n        print(temp[0])\n        continue\n    else:\n        print(temp[1])\n\n\n",
        "rejectedCode": "n = int(input())\n\nfor i in range(n):\n    temp = input().split()\n    if temp[0] == temp[1]:\n        print(temp[2])\n    if temp[1] == temp[2]:\n        print(temp[0])\n    else:\n        print(temp[1])\n\n\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n5\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 4th numbers differ - expected: '7', found: '5'\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242104772",
            "author": "pixeal.meat",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705491000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "242104547",
            "author": "pixeal.meat",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1705490820
        },
        "acceptedCode": "t=int(input())\r\nfor _ in range(t):\r\n    a,b,c=map(int,input().split())\r\n    if(a==b):\r\n        print(c)\r\n    elif(a==c):\r\n        print(b)\r\n    elif(b==c):\r\n        print(a)",
        "rejectedCode": "for _ in range(int(input()):\r\n    a,b,c=map(int,input().split())\r\n    if(a==b):\r\n        print(c)\r\n    elif(a==c):\r\n        print(b)\r\n    elif(b==c):\r\n        print(a)",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242098786",
            "author": "Volim_te",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 10100,
            "submissionTime": 1705488060
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242097816",
            "author": "Volim_te",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12700,
            "submissionTime": 1705487580
        },
        "acceptedCode": "cons = {\"b\", \"c\", \"d\"}\r\n\r\ndef find(s):\r\n    a = []\r\n    i = len(s) - 1\r\n    while i >= 0:\r\n        if i >= 2 and s[i] in cons and s[i - 1] not in cons and s[i - 2] in cons:\r\n            a.append(s[i] + s[i - 1] + s[i - 2])\r\n            i -= 3\r\n        else:\r\n            a.append(s[i] + s[i - 1])\r\n            i -= 2\r\n    return \".\".join(a)[::-1]\r\nn = int(input())\r\nfor _ in range(n):\r\n    input()\r\n    print(find(input()))\r\n",
        "rejectedCode": "m = {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    ans = ''\r\n    i = 0\r\n    while i < len(s):\r\n        if m.get(s[i]):\r\n            ans += s[i]\r\n            j = i + 1\r\n            if j == len(s) - 1:\r\n                pass\r\n            elif j + 1 <= len(s) - 1:\r\n                if m.get(s[j], 0) == 0 and m.get(s[j + 1], 0) == 0:\r\n                    ans += s[j] + '.'\r\n                    i = j\r\n                else:\r\n                    ans += '.'\r\n        else:\r\n            ans += s[i]\r\n        i += 1\r\n    print(ans)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "242101213",
            "author": "cperkkk",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 24000,
            "submissionTime": 1705489200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239947348",
            "author": "cperkkk",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1704152460
        },
        "acceptedCode": "from io import BytesIO, IOBase\nimport sys\nimport os\n \n# Fast IO Region\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = 'x' in file.mode or 'r' not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b'\\n') + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode('ascii'))\n        self.read = lambda: self.buffer.read().decode('ascii')\n        self.readline = lambda: self.buffer.readline().decode('ascii')\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ndef print_array(li):\n\tprint(' '.join([str(i) for i in li]))\n \n# CODE REGION\n\ndef do(idx_tc):\n\tn = int(input())\n\tst = input()\n\tli = list(st)\n\tnow = n-1\n\tbruh = []\n\twhile now > 0:\n\t\tif li[now] in 'bcd':\n\t\t\tbruh.append(li[now-2] + li[now-1] + li[now])\n\t\t\tbruh.append('.')\n\t\t\tnow -= 3\n\t\telse:\n\t\t\t\n\t\t\tbruh.append(li[now-1] + li[now])\n\t\t\tbruh.append('.')\n\t\t\tnow -= 2\n\tbruh.pop()\n\t\t\t\n\tprint(''.join(bruh[::-1]))\n\t\n\nt = int(input())\nfor i in range(t):\n\tdo(i)\n     ",
        "rejectedCode": "from io import BytesIO, IOBase\nimport sys\nimport os\n \n# Fast IO Region\nBUFSIZE = 8192\nclass FastIO(IOBase):\n    newlines = 0\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = 'x' in file.mode or 'r' not in file.mode\n        self.write = self.buffer.write if self.writable else None\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b'\\n') + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n \nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode('ascii'))\n        self.read = lambda: self.buffer.read().decode('ascii')\n        self.readline = lambda: self.buffer.readline().decode('ascii')\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\ndef print_array(li):\n\tprint(' '.join([str(i) for i in li]))\n \n# CODE REGION\n\ndef do(idx_tc):\n\tfor i in range(3):\n\t\tst = list(input())\n\t\t\n\t\td = dict()\n\t\tfor j in st:\n\t\t\td[j] = 1\n\t\tfor j in 'ABC':\n\t\t\tif j not in d:\n\t\t\t\tprint(j)\n\t\t\t\treturn \n\t\t\t\n\nt = int(input())\nfor i in range(t):\n\tdo(i)",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\nB\nC\nB\nC\nA\nC\nA\nB\nA\nB\nC\nC\nA\nB\nB\nC\nA\nA\nC\nB\nB\nA\nC\nC\nB\nA\nA\nC\nB\nC\nB\nA\nB\nA\nC\nB\nA\nC\nA\nC\nB\nC\nB\nA\nB\nA\nC\nC\nB\nA\nA\nC\nB\nB\nC\nA\nA\nB\nC\nC\nA\nB\nB\nC\nA\nC\nA\nB\nA\nB\nC\nC\nA\nB\nA\nB\nC\nB\nC\nA\nC\nA\nB\nB\nC\nA\nA\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 53,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241626430",
            "author": "FaroukM",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705259340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241626379",
            "author": "FaroukM",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705259160
        },
        "acceptedCode": "# Python3 implementation of tree using array\n# numbering starting from 0 to n-1.\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef calculate_pgcd(a):\n    n = len(a)\n    pgcd_result = abs(a[0] - a[1])  # Initialize with the first difference\n\n    for i in range(1, n-1):\n        diff = abs(a[i] - a[i+1])  # Calculate the difference\n        pgcd_result = gcd(pgcd_result, diff)  # Update the gcd\n\n    return pgcd_result\ndef div(n):\n    l=[]\n    for i in range(1,n):\n        if n%i==0:\n            l.append(i)\n    return l\n\nfrom math import *\n\nt=int(input())\n\nfor _ in range(t):\n    c='A'\n    for _ in range(3):\n        ch=list(input())\n        if ch.count('?'):\n            if ch.count('A') and ch.count('B'):\n                c='C'\n            elif ch.count('A') and ch.count('C'):\n                c='B'\n            else:\n                c='A'\n    print(c)\n\n\n\n\n\n            \n\n\n        \n\n\n\n\n\n        \n    \n        \n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n        \n\n    \n\n\n\n\n\n\n        \n\n\n",
        "rejectedCode": "# Python3 implementation of tree using array\n# numbering starting from 0 to n-1.\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef calculate_pgcd(a):\n    n = len(a)\n    pgcd_result = abs(a[0] - a[1])  # Initialize with the first difference\n\n    for i in range(1, n-1):\n        diff = abs(a[i] - a[i+1])  # Calculate the difference\n        pgcd_result = gcd(pgcd_result, diff)  # Update the gcd\n\n    return pgcd_result\ndef div(n):\n    l=[]\n    for i in range(1,n):\n        if n%i==0:\n            l.append(i)\n    return l\n\nfrom math import *\n\nt=int(input())\n\nfor _ in range(t):\n    c='A'\n    for _ in range(3):\n        ch=list(input())\n        if ch.count('?'):\n            if ch.count('A') and ch.count('B'):\n                c='C'\n            elif ch.count('A') and ch.count('C'):\n                c='B'\n            else:\n                c='C'\n    print(c)\n\n\n\n\n\n            \n\n\n        \n\n\n\n\n\n        \n    \n        \n\n\n\n\n\n    \n\n\n\n\n\n\n    \n\n        \n\n    \n\n\n\n\n\n\n        \n\n\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "C\r\nB\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 38,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241867568",
            "author": "devashish19",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 23800,
            "submissionTime": 1705350540
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241867535",
            "author": "devashish19",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705350480
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n, s, result = int(input()), input(), []\r\n\r\n    i = len(s) - 1\r\n    while i >= 0:\r\n        dec = 2 if s[i] == 'a' or s[i] == 'e' else 3\r\n\r\n        for x in range(dec):\r\n            result.append(s[i])\r\n            i -= 1\r\n\r\n        result.append(\".\")\r\n\r\n    print(\"\".join(result[:-1][::-1]))\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n, s, result = int(input()), input(), []\r\n\r\n    i = len(s) - 1\r\n    while i >= 0:\r\n        dec = 2 if s[i] == 'a' or s[i] == 'e' else 3\r\n\r\n        for x in range(dec):\r\n            result.append(s[i])\r\n            i -= 1\r\n\r\n        result.append(\".\")\r\n\r\n    result.pop(-1)\r\n    result.reverse()\r\n    print(\"\".join(result[::-1]))\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "bab.dec.ab\r\nab.ab\r\ndad.deb.ac.ed.dad\r\ncad\r\ncad.cad\r\nab.bab.ab.bab.bab.ab.ab.bab.ad\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'bab.dec.ab'\r\n"
        },
        "errorLine": 14,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241861478",
            "author": "ships3040",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26200,
            "submissionTime": 1705338180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241861089",
            "author": "ships3040",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 1200,
            "submissionTime": 1705337460
        },
        "acceptedCode": "# Function to check if a number is a perfect square\r\ndef is_square(n):\r\n    return int(n**0.5)**2 == n\r\n\r\n# Function to solve the problem\r\ndef solve(n, a):\r\n    # Sum of all the squares\r\n    total = sum(a)\r\n    # Check if the total is a perfect square\r\n    if is_square(total):\r\n        return \"YES\"\r\n    else:\r\n        return \"NO\"\r\n\r\n# Number of test cases\r\nt = int(input())\r\n# Loop over each test case\r\nfor _ in range(t):\r\n    # Number of buckets\r\n    n = int(input())\r\n    # Number of squares in each bucket\r\n    a = list(map(int, input().split()))\r\n    # Print the answer\r\n    print(solve(n, a))\r\n",
        "rejectedCode": "# Import the ast module\r\nimport ast\r\n\r\n# Define the letters A, B, and C as constants\r\nA = 'A'\r\nB = 'B'\r\nC = 'C'\r\n\r\n# Define a function that takes a Latin square as a list of lists and returns the missing letter\r\ndef find_missing_letter(square):\r\n  # Loop through the rows of the square\r\n  for row in square:\r\n    # If the row contains a question mark, find the letter that is not in the row\r\n    if '?' in row:\r\n      # Use a set difference to find the missing letter\r\n      missing = set([A, B, C]) - set(row)\r\n      # Return the missing letter as a string\r\n      return missing.pop()\r\n  # Loop through the columns of the square\r\n  for col in zip(*square):\r\n    # If the column contains a question mark, find the letter that is not in the column\r\n    if '?' in col:\r\n      # Use a set difference to find the missing letter\r\n      missing = set([A, B, C]) - set(col)\r\n      # Return the missing letter as a string\r\n      return missing.pop()\r\n  # If no question mark is found, return None\r\n  return None\r\n\r\n# Get the input from the user as a string\r\nuser_input = input(\"Enter a Latin square as a list of lists, with ? for the missing letter: \")\r\n\r\n# Convert the input to a list of lists using ast.literal_eval()\r\nsquare = ast.literal_eval(user_input)\r\n\r\n# Print the output\r\nprint(f\"The missing letter is: {find_missing_letter(square)}\")\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "Enter a Latin square as a list of lists, with ? for the missing letter: ",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241850323",
            "author": "somecoderdude",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705326420
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241619558",
            "author": "somecoderdude",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705246200
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    a, b, c = map(int, input().split())\r\n    if a==b and a != c:\r\n        print(c)\r\n    elif a==c and a != b:\r\n        print(b)\r\n    elif b==c and b!=a:\r\n        print(a)",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    correct = [\"A\", \"B\", \"C\"]\r\n    square = []\r\n    focus = []\r\n    for i in range(3):\r\n        square.append([str(x) for x in input()])\r\n    for line in square:\r\n        for value in line:\r\n            if value == \"?\":\r\n                focus=line\r\n                break\r\n    print(focus)\r\n    for value in correct:\r\n        if value not in focus:\r\n            print(value)",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "['C', '?', 'B']\r\nA\r\n['C', 'A', '?']\r\nB\r\n['?', 'A', 'B']\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: '['C','\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241848864",
            "author": "Dincy",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705325520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241847705",
            "author": "Dincy",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705324860
        },
        "acceptedCode": "n=int(input())\r\nfor i in range(n):\r\n  a,b,c=map(int,input().split())\r\n  if a==b:\r\n   print(c)\r\n  elif b==c:\r\n   print(a)\r\n  else:\r\n   print(b)",
        "rejectedCode": "n=int(input())\r\nfor i in range(n):\r\n  test_case=list(map(int,input().split()))\r\n  test_case.sort()\r\n  print(test_case[-1])",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "2\r\n4\r\n6\r\n8\r\n9\r\n6\r\n8\r\n7\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '2'\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239610217",
            "author": "Lala_123",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 405,
            "memory": 30300,
            "submissionTime": 1703922300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239609770",
            "author": "Lala_123",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 9,
            "runTime": 1000,
            "memory": 23000,
            "submissionTime": 1703922060
        },
        "acceptedCode": "# Function to check if a number is a perfect square using binary search\r\ndef is_perfect_square(n):\r\n\t# Base case: 0 and 1 are perfect squares\r\n\tif n <= 1:\r\n\t\treturn True\r\n\r\n\t# Initialize boundaries for binary search\r\n\tleft, right = 1, n\r\n\r\n\twhile left <= right:\r\n\t\t# Calculate middle value\r\n\t\tmid = left + (right - left) // 2\r\n\r\n\t\t# Calculate square of the middle value\r\n\t\tsquare = mid * mid\r\n\r\n\t\t# If the square matches n, n is a perfect square\r\n\t\tif square == n:\r\n\t\t\treturn True\r\n\t\t# If the square is smaller than n, search the right half\r\n\t\telif square < n:\r\n\t\t\tleft = mid + 1\r\n\t\t# If the square is larger than n, search the left half\r\n\t\telse:\r\n\t\t\tright = mid - 1\r\n\r\n\t# If the loop completes without finding a perfect square, n is not a perfect square\r\n\treturn False\r\n\r\n\r\n\r\n\r\n\r\ndef solve(n,arr):\r\n    sm = sum(arr)\r\n    if is_perfect_square(sm):\r\n        return \"YES\"\r\n    return 'NO'\r\n\r\nt=int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    arr=list(map(int,input().split()))\r\n    print(solve(n,arr))",
        "rejectedCode": "def is_perfect_square(num):\r\n    root= 0\r\n    while root*root<=num:\r\n        if root*root==num:\r\n            return True\r\n        root+=1\r\n    return False\r\n\r\ndef solve(n,arr):\r\n    sm = sum(arr)\r\n    if is_perfect_square(sm):\r\n        return \"YES\"\r\n    return 'NO'\r\n\r\nt=int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    arr=list(map(int,input().split()))\r\n    print(solve(n,arr))",
        "failedTestCase": {
            "input": "10000\r\n20\r\n144272510 611178003 909925048 861425549 820096754 67760437 273878288 126614243 531969375 817077202 482637353 507069465 699642631 407608742 846885254 225437260 100780964 523832097 30437867 959191866\r\n20\r\n897395949 418554020 464680098 652231582 818492002 823729239 2261354 747144855 478230860 285970257 774747712 860954510 245631565 634746161 109765576 967900367 340837477 32845752 23968185 27322287\r\n20\r\n697444856 581337224 9883728 946217655 409314932 737106431 232571832 453244222 779378297 31182306 ...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241703119",
            "author": "227r1a6689",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 20700,
            "submissionTime": 1705310640
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "241701987",
            "author": "227r1a6689",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705310040
        },
        "acceptedCode": "for s in[*open(0)][2::2]:t=sum(map(int,s.split()));print('YNEOS'[int(t**.5)**2<t::2])",
        "rejectedCode": "import math\r\nR=lambda:map(int,input().split())\r\ny=2023\r\nt,=R()\r\nexec(t*\"n,k=R();p=math.prod(R());print(y%p and'NO'or f'YES {y//p}'+' 1'*(k-1));\")",
        "failedTestCase": {
            "input": "3\r\n5 5\r\n1 2 2\r\n3 2 1\r\n2 4 5\r\n2 5 7\r\n4 5 1\r\n5 2 1 3 3\r\n5 10\r\n1 2 5\r\n1 3 5\r\n1 4 4\r\n1 5 8\r\n2 3 6\r\n2 4 3\r\n2 5 2\r\n3 4 1\r\n3 5 8\r\n4 5 2\r\n7 2 8 4 1\r\n7 10\r\n3 2 8\r\n2 1 4\r\n2 5 7\r\n2 6 4\r\n7 1 2\r\n4 3 5\r\n6 4 2\r\n6 7 1\r\n6 7 4\r\n4 5 9\r\n7 6 5 4 3 2 1\r\n",
            "output": "NO\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241701395",
            "author": "CubeQQ",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 296,
            "memory": 27800,
            "submissionTime": 1705309680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241101208",
            "author": "CubeQQ",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 2700,
            "submissionTime": 1704902340
        },
        "acceptedCode": "import math\r\nt = int(input())\r\nanswers = []\r\nfor _ in range(t):\r\n    length = int(input())\r\n    s = list(map(int, input().split()))\r\n    if math.sqrt(sum(s)).is_integer():\r\n        answers.append(\"YES\")\r\n    else:\r\n        answers.append(\"NO\")\r\nfor answer in answers:\r\n    print(answer)\r\n",
        "rejectedCode": "t = int(input())\r\nanswers = []\r\n\r\nfor _ in range(t):\r\n    stringval = 0\r\n    target_list = 0\r\n    \r\n    for i in range(3):\r\n        s = list(map(str, input().split()))\r\n        if '?' in s:\r\n            stringval = i + 1\r\n            target_list = s\r\n            break\r\n    \r\n    if 'C' in target_list and 'B' in target_list and 'A' not in target_list:\r\n        answers.append('A')\r\n    if 'A' in target_list and 'C' in target_list and 'B' not in target_list:\r\n        answers.append('B')\r\n    if 'A' in target_list and 'B' in target_list and 'C' not in target_list:\r\n        answers.append('C')\r\n\r\nfor answer in answers:\r\n    print(answer)\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241701128",
            "author": "taliansky",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 28900,
            "submissionTime": 1705309560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241701021",
            "author": "taliansky",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 34700,
            "submissionTime": 1705309500
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    cnt = int(input())\r\n    a = list(map(int, input().split()))\r\n    el = 0\r\n    st = {0}\r\n    \r\n    for i in range(cnt):\r\n        if i%2 == 0:\r\n            el += a[i]\r\n        else:\r\n            el += (a[i] * (-1))\r\n        st.add(el)\r\n    if len(st) != cnt+1:\r\n        print('Yes')\r\n    else:\r\n        print('No')",
        "rejectedCode": "from collections import defaultdict\r\n \r\nfor _ in range(int(input())):\r\n    \r\n    cnt = int(input())\r\n    a = [int(i) for i in input().split()]\r\n \r\n    ps = [0] * (cnt+1)\r\n    task_count = defaultdict(int)\r\n    task_count[0] += 1\r\n    for i in range(cnt):\r\n        if i%2 != 0:\r\n            a[i]*=-1\r\n    for j in range(1,cnt+1):\r\n            ps[j] = a[j-1] + ps[j-1]\r\n            task_count[ps[j]] += 1\r\n    def func(task_count):\r\n        for key, value in task_count.items():\r\n            if value > 1:\r\n                return('Yes')\r\n        return('No')\r\n        \r\n    print(func(task_count))",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241703422",
            "author": "AK_15",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 32200,
            "submissionTime": 1705310820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240850433",
            "author": "AK_15",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 2700,
            "submissionTime": 1704718260
        },
        "acceptedCode": "import sys\r\nimport math\r\ninput = sys.stdin.readline\r\ndef inp():\r\n    return int(input())\r\ndef inlt():\r\n    return list(map(int,input().split()))\r\ndef invr():\r\n    return map(int,input().split())\r\n\r\ndef solve():\r\n    n = inp()\r\n    l = inlt()\r\n    s = sum(l)\r\n    try:\r\n        s = math.pow(s, 0.5).is_integer()\r\n        if s:\r\n\r\n        \r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n    except:\r\n        print(\"NO\")\r\n\r\n\r\ndef main():\r\n    for _ in range(int(input())):\r\n        solve()\r\n\r\nif __name__ == \"__main__\":\r\n    main()",
        "rejectedCode": "from collections import defaultdict\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    d = dict()\r\n    ans = 0\r\n    d[0] = 1\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            ans -= a[i]\r\n            d[ans] += 1\r\n        else:\r\n            ans += a[i]\r\n            d[ans] += 1\r\n        if d[ans] > 1:\r\n            print(\"YES\")\r\n            break\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241694536",
            "author": "DhruvG0858",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705306380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240483333",
            "author": "DhruvG0858",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704527820
        },
        "acceptedCode": "xx=int(input())\r\nfor i in range(0,xx):\r\n    x=input().split()\r\n    y=[int(i) for i in x]\r\n    \r\n    for j in y:\r\n        if y.count(j)==1:\r\n            print(j)",
        "rejectedCode": "x=input().split()\r\ny=[int(i) for i in x]\r\n\r\nfor j in y:\r\n    if y.count(j)==1:\r\n        print(j)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "10\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '10'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241672640",
            "author": "abrarfahim_inc",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 343,
            "memory": 20900,
            "submissionTime": 1705295340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241613711",
            "author": "abrarfahim_inc",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 2700,
            "submissionTime": 1705240680
        },
        "acceptedCode": "for i in range(int(input())):\r\n    var=int(input())\r\n    var2=input().split()\r\n    sum=0\r\n    for i in range (var):\r\n        sum+=int(var2[i])\r\n    if (sum**0.5)%1==0:\r\n        print('YES')\r\n    else: print('NO')",
        "rejectedCode": "for i in range(int(input())):\r\n    var=int(input())\r\n    var2=int(input().split())\r\n    summ=sum(var2)\r\n    if type(summ)==int:\r\n        print('YES')\r\n    else: print('NO')",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241666135",
            "author": "ekansh0.0",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 1400,
            "submissionTime": 1705292160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241665533",
            "author": "ekansh0.0",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 3400,
            "submissionTime": 1705291860
        },
        "acceptedCode": "a = int(input())\r\ncons = ['b','c','d']\r\nvow = ['a','e']\r\nfor i in range(a):\r\n    b = int(input())\r\n    c = input()\r\n    d = ''\r\n    k = 0\r\n    while b>3:\r\n        if (c[k+2] in cons) and (c[k+3] in cons):\r\n            d+=c[k:3+k]+'.'\r\n            b-=3\r\n            k+=3\r\n        else:\r\n            d+=c[k:2+k]+'.'\r\n            b-=2\r\n            k+=2\r\n    d+=c[k:]\r\n    print(d)\r\n\r\n    \r\n    \r\n            \r\n            \r\n            \r\n        \r\n",
        "rejectedCode": "a = int(input())\r\ncons = ['b','c','d']\r\nvow = ['a','e']\r\nfor i in range(a):\r\n    b = int(input())\r\n    c = input()\r\n    d = ''\r\n    while b>3:\r\n        if (c[2] in cons) and (c[3] in cons):\r\n            d+=c[:3]+'.'\r\n            b-=3\r\n            c = c[3:]\r\n        else:\r\n            d+=c[:2]+'.'\r\n            b-=2\r\n            c = c[2:]\r\n    d+=c\r\n    print(d)\r\n\r\n    \r\n    \r\n            \r\n            \r\n            \r\n        \r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "be.de.ba.ca.cad.ca.bab.cab.de.dac.ced.da.da.ceb.ba.ca.ca.ced.ba.ca.ce.ce.ce.da.ca.be.da.bad.ba.da.be.ceb.da.bab.ba.ba.ca.ca.ceb.ba.ba.bec.be.ba.bed.cac.be.ca.de.ded.de.beb.ba.dec.be.ba.dab.da.de.dad.ce.be.be.dab.cad.ce.ca.be.ba.ba.ba.de.da.ba.be.cab.de.de.de.ca.ca.ca.ca.bab.da.ce.ca.be.ca.dac.da.dad.cec.ce.ca.ca.ba.ca.dad.de.de.ce.ba.dec.ced.ba.bac.ce.ded.ce.de.deb.ba.cad.ce.ca.ca.de.be.da.ca.bed.deb.ba.ca.be.ce.be.de.be.ba.ba.ce.dad.bed.bac.ca.ba.be.dac.ca.ca.ca.bed.be.be.ce.da.dad.deb.bac.dac.da.ba.ce.de...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241657445",
            "author": "ahmmedahmd02",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 140,
            "memory": 4100,
            "submissionTime": 1705288080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241652201",
            "author": "ahmmedahmd02",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705285380
        },
        "acceptedCode": "t=int(input())\r\nv,c=\"ae\",\"bcd\"\r\nfor i in range(t):\r\n    n=int(input())\r\n    d=n-1\r\n    s=input()\r\n    e=\"\"\r\n    while d>=0:\r\n        if s[d] in v:\r\n            for j in range(2):\r\n                e += s[d-j]\r\n            e+=\".\"\r\n            d -=2\r\n        elif s[d] in c:\r\n            for i in range(3):\r\n                e +=s[d-i]\r\n            e+=\".\"\r\n            d -=3\r\n    b=list(e)\r\n    b.reverse()\r\n    del b[0]\r\n    print(\"\".join(b))",
        "rejectedCode": "def can_build_square(t, test_cases):\r\n    results = []\r\n    \r\n    for i in range(t):\r\n        n = test_cases[i][0]\r\n        squares_in_buckets = test_cases[i][1]\r\n        \r\n        total_squares = sum(squares_in_buckets)\r\n        \r\n        # Check if the total number of squares is even\r\n        # and each bucket has an even number of squares\r\n        if total_squares % 2 == 0 and all(x % 2 == 0 for x in squares_in_buckets):\r\n            results.append(\"YES\")\r\n        else:\r\n            results.append(\"NO\")\r\n    \r\n    return results\r\n\r\n# Input reading\r\nt = int(input())\r\ntest_cases = []\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    squares_in_buckets = list(map(int, input().split()))\r\n    test_cases.append((n, squares_in_buckets))\r\n\r\n# Output the results\r\nresults = can_build_square(t, test_cases)\r\nfor result in results:\r\n    print(result)\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\nYES\r\nNO\r\nNO\r\nYES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241640616",
            "author": "neha_g",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705279020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241389709",
            "author": "neha_g",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705123380
        },
        "acceptedCode": "from sys import stdin,stdout\r\ndef input(): return stdin.readline()\r\n \r\ndef solve():\r\n    a = []\r\n    for i in range(3):\r\n        a.extend(list(str(input()))[:3])\r\n    if (a.count('A')<3): print('A')\r\n    elif (a.count('B')<3): print('B')\r\n    else: print('C')\r\n \r\n \r\nfor _ in range(int(input())):\r\n    solve()",
        "rejectedCode": "import numpy as np\r\nfrom sys import stdin,stdout\r\ndef input(): return stdin.readline()\r\n\r\ndef solve():\r\n    a = []\r\n    for i in range(3):\r\n        a.append(list(str(input()))[:3])\r\n    a = list(np.concatenate(a))\r\n    if (a.count('A')<3): print('A')\r\n    elif (a.count('B')<3): print('B')\r\n    else: print('C')\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241611769",
            "author": "Cattycute_",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705239180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241611307",
            "author": "Cattycute_",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705238880
        },
        "acceptedCode": "t = int(input())\r\nfor x in range(0, t):\r\n    string1 = str(input())\r\n    string2 = str(input())\r\n    string3 = str(input())\r\n    a = 0\r\n    b = 0\r\n    c = 0\r\n    for k in range(0, 3):\r\n        if string1[k] == 'A':\r\n            a += 1\r\n        elif string1[k] == 'B':\r\n            b += 1\r\n        elif string1[k] == 'C':\r\n            c += 1\r\n        if string2[k] == 'A':\r\n            a += 1\r\n        elif string2[k] == 'B':\r\n            b += 1\r\n        elif string2[k] == 'C':\r\n            c += 1\r\n        if string3[k] == 'A':\r\n            a += 1\r\n        elif string3[k] == 'B':\r\n            b += 1\r\n        elif string3[k] == 'C':\r\n            c += 1\r\n    if a == 2:\r\n        print('A')\r\n    elif b == 2:\r\n        print('B')\r\n    elif c == 2:\r\n        print('C')",
        "rejectedCode": "t = int(input())\r\nfor x in range(0, t):\r\n    string1 = str(input())\r\n    string2 = str(input())\r\n    string3 = str(input())\r\n    a = 0\r\n    b = 0\r\n    c = 0\r\n    for k in range(0, 2):\r\n        if string1[k] == 'A':\r\n            a += 1\r\n        if string1[k] == 'B':\r\n            b += 1\r\n        if string1[k] == 'C':\r\n            c += 1\r\n        if string2[k] == 'A':\r\n            a += 1\r\n        if string2[k] == 'B':\r\n            b += 1\r\n        if string2[k] == 'C':\r\n            c += 1\r\n        if string3[k] == 'A':\r\n            a += 1\r\n        if string3[k] == 'B':\r\n            b += 1\r\n        if string3[k] == 'C':\r\n            c += 1\r\n    if a == 2:\r\n        print('A')\r\n    elif b == 2:\r\n        print('B')\r\n    elif c == 2:\r\n        print('C')",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "B\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'B'\r\n"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241613519",
            "author": "anandita.mukherjee",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705240500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241612714",
            "author": "anandita.mukherjee",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705239840
        },
        "acceptedCode": "#Getting input from the user\r\nn = int(input())\r\ncases = []\r\nfor i in range(n):\r\n    a, b, c = map(int,input().split())\r\n    cases.append((a, b, c))\r\n\r\n#Doing computation\r\nresults = []\r\nfor i in cases:\r\n    (a, b, c) = i\r\n    if a == b:\r\n        results.append(c)\r\n    elif a == c:\r\n        results.append(b)\r\n    else:\r\n        results.append(a)\r\n\r\n#Printing output\r\nfor i in results:\r\n    print(i)\r\n",
        "rejectedCode": "#Getting input from the user\r\nn = int(input(\"Enter the number of test cases: \"))\r\ncases = []\r\nfor i in range(n):\r\n    a,b,c = map(int,input(f\"Input the 3 digits for Case {i+1}, separated by spaces: \").split())\r\n    cases.append((a,b,c))\r\n\r\n#Doing computation\r\nresults = []\r\nfor i in cases:\r\n    (a,b,c) = i\r\n    if a == b:\r\n        results.append(c)\r\n    elif a == c:\r\n        results.append(b)\r\n    else:\r\n        results.append(a)\r\n\r\n#Printing output\r\nfor i in results:\r\n    print(i)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "Enter the number of test cases: Input the 3 digits for Case 1, separated by spaces: Input the 3 digits for Case 2, separated by spaces: Input the 3 digits for Case 3, separated by spaces: Input the 3 digits for Case 4, separated by spaces: Input the 3 digits for Case 5, separated by spaces: Input the 3 digits for Case 6, separated by spaces: Input the 3 digits for Case 7, separated by spaces: Input the 3 digits for Case 8, separated by spaces: Input the 3 digits for Case 9, separated by spaces: Input the 3...",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong output format Expected integer, but \"Enter\" found\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241608191",
            "author": "epicbird08",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705237020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241608103",
            "author": "epicbird08",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1705236960
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    string = input()\r\n    a = int(string[0])\r\n    b = int(string[2])\r\n    c = int(string[4])\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    string = input()\r\n    a = int(string[0])\r\n    b = int(string[2])\r\n    c = int(string[4])\r\n    if a == b:\r\n        print(c)\r\n    else if b == c:\r\n        print(a)\r\n    else:\r\n        print(b)\r\n",
        "failedTestCase": null,
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241600074",
            "author": "OsamaAlhyari",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 842,
            "memory": 9400,
            "submissionTime": 1705232520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241599573",
            "author": "OsamaAlhyari",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12600,
            "submissionTime": 1705232220
        },
        "acceptedCode": "testCases = int(input())\r\noutput = []\r\nV = {'a','e'}\r\nC = {'b','c','d'}\r\nfor i in range (testCases):\r\n    outputInCase = ''\r\n    n = int(input())\r\n    word = input()\r\n    j = 0\r\n    while j <= n - 4:\r\n        if word[j + 3] in V:\r\n            outputInCase = outputInCase + word[j] + word[j+1] + '.'\r\n            j += 2\r\n        else:\r\n            outputInCase = outputInCase + word[j] + word[j+1] + word[j+2] + '.'\r\n            j += 3\r\n    while j < n:\r\n        outputInCase += word[j]\r\n        j += 1        \r\n    output.append(outputInCase)\r\nfor k in output:\r\n    print(k)            \r\n",
        "rejectedCode": "testCases = int(input())\r\noutput = []\r\nV = {'a','e'}\r\nC = {'b','c','d'}\r\nfor i in range (testCases):\r\n    outputInCase = ''\r\n    n = int(input())\r\n    word = input()\r\n    j = 0\r\n    while j <= n - 4:\r\n        if word[j + 3] in V:\r\n            outputInCase = outputInCase + word[j] + word[j+1] + '.'\r\n            j += 2\r\n        else:\r\n            outputInCase = outputInCase + word[j] + word[j+1] + word[j+2] + '.'\r\n            j += 3\r\n    while j < n:\r\n        outputInCase += word[j]\r\n        j += 1        \r\n    output.append(outputInCase)\r\nfor k in output:\r\n    print(k)            \r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241584393",
            "author": "CF_Soumyajit",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 404,
            "memory": 29100,
            "submissionTime": 1705223640
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241526563",
            "author": "CF_Soumyajit",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 34100,
            "submissionTime": 1705189380
        },
        "acceptedCode": "from collections import *\r\nfrom functools import *\r\nfrom math import *\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    arr = sum(list(map(int, input().split())))\r\n    print(\"YES\" if ceil(sqrt(arr)) == floor(sqrt(arr)) else \"NO\")",
        "rejectedCode": "from itertools import accumulate\r\nfrom bisect import *\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n\r\n    odd, even, oddpref, evenpref = [], [], 0, 0\r\n    seen, res = set(), \"NO\"\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            oddpref += arr[i]\r\n            odd.append(oddpref)\r\n            even.append(evenpref)\r\n        else:\r\n            evenpref += arr[i]\r\n            even.append(evenpref)\r\n            odd.append(oddpref)\r\n        if odd[i] - even[i] in seen or odd[i] - even[i] == 0:\r\n            res = \"YES\"\r\n            break\r\n        seen.add(odd[i] - even[i])\r\n\r\n    #121212\r\n    print(res)\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241581424",
            "author": "barcis89",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 1000,
            "submissionTime": 1705222260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241025301",
            "author": "barcis89",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1200,
            "submissionTime": 1704857040
        },
        "acceptedCode": "# C - [b, c, d]\n# V - [a, e]\n#\n#\n# ba ce db ab\n# CVCV\n#\n# VC\n# CC\n# CV\n#\n# CV CV CV\n# CVC CV\n\n# CVC CV\n\ndef translateWinow(item):\n    result = \"\"\n    dict = {\"a\": \"V\", \"b\": \"C\", \"c\": \"C\", \"d\": \"C\", \"e\": \"V\"}\n\n    for char in item:\n        result += dict[char]\n    return result\n\nfor _ in range(int(input())):\n\n    count = int(input())\n    items = input()\n    i = 0\n    temp = \"\"\n    result = \"\"\n\n    # CV == ?\n\n\n    while i < len(items):\n        window = items[i : i + 2]\n        # translate window\n        translated = translateWinow(window)\n        translatedTemp = translateWinow(temp)\n        #print(translated)\n        if translated == \"CV\":\n            if translatedTemp == \"CV\":\n                result += temp + \".\"\n                temp = window\n                i += 2\n            elif translatedTemp == \"\":\n                temp = window\n                i += 2\n        elif translated == \"C\":\n                result += temp + window\n                temp = \"\"\n                i += 2\n        else:\n            result += temp + items[i] + \".\"\n            temp = \"\"\n            i += 1\n\n    if temp != \"\":\n        result += temp\n\n    print(result)\n\n\n\n\n\n\n",
        "rejectedCode": "import math\n\ndef binarySerach(target, maxItem):\n    left = 0\n    right = maxItem\n    result1 = False\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == target:\n            result1 = True\n            break\n        elif mid * mid < target:\n            left += 1\n        else:\n            right -= 1\n\n    print(\"YES\" if result1 == True else \"NO\")\n\n\nfor i in range(int(input())):\n    count = int(input())\n    items = list(map(int, input().split()))\n    result = sum(items)\n    binarySerach(result, int(math.sqrt(result)) + 1)\n\n\n\n",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "241575587",
            "author": "CherryCocoa",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 3821,
            "memory": 86300,
            "submissionTime": 1705219320
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240487230",
            "author": "CherryCocoa",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 32400,
            "submissionTime": 1704529920
        },
        "acceptedCode": "class segmentTree:\r\n    def __init__(self, n):\r\n        self.t = [0] * ((n << 1) - 1)\r\n        self.n = n\r\n    def build(self, a, v = 0, tl = 0, tr = None):\r\n        if tr == None:\r\n            tr = self.n - 1\r\n        if tl == tr:\r\n            self.t[v] = a[tl]\r\n        else:\r\n            tm = (tl + tr) >> 1\r\n            self.build(a, v + 1, tl, tm)\r\n            self.build(a, v + ((tm - tl + 1) << 1), tm + 1, tr)\r\n            self.t[v] = self.t[v + 1] + self.t[v + ((tm - tl + 1) << 1)]\r\n    def sum(self, l, r, v = 0, tl = 0, tr = None):\r\n        if tr == None:\r\n            tr = self.n - 1\r\n        if l > r:\r\n            return 0\r\n        if tl == l and tr == r:\r\n            return self.t[v]\r\n        tm = (tl + tr) >> 1\r\n        return (self.sum(l, min(tm, r), v + 1, tl, tm) +\r\n                self.sum(max(tm + 1, l), r, v + ((tm - tl + 1) << 1), tm + 1, tr))\r\n    def update(self, pos, new_val, v = 0, tl = 0, tr = None):\r\n        if tr == None:\r\n            tr = self.n - 1\r\n        if pos == tl and pos == tr:\r\n            self.t[v] = new_val\r\n        else:\r\n            tm = (tl + tr) >> 1\r\n            if pos <= tm:\r\n                self.update(pos, new_val, v + 1, tl, tm)\r\n            else:\r\n                self.update(pos, new_val, v + ((tm - tl + 1) << 1), tm + 1, tr)\r\n            self.t[v] = self.t[v + 1] + self.t[v + ((tm - tl + 1) << 1)]\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = []\r\n    b = []\r\n    for i in range(n):\r\n        c, d = map(int, input().split())\r\n        a.append([c, i])\r\n        b.append([d, i])\r\n    a.sort()\r\n    d = [0]*n\r\n    for i in range(n):\r\n        d[a[i][1]] = i\r\n    b.sort()\r\n    t = segmentTree(n)\r\n    result = 0\r\n    for i in range(n):\r\n        result += t.sum(d[b[i][1]], n-1)\r\n        t.update(d[b[i][1]], 1)\r\n    print(result)",
        "rejectedCode": "from math import *\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    sum_set = {}\r\n    n_sum = 0\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            n_sum += a[i]\r\n        else:\r\n            n_sum -= a[i]\r\n        if n_sum == 0 or n_sum in sum_set:\r\n            print('YES')\r\n            break\r\n        sum_set[n_sum] = True\r\n    else:\r\n        print('NO')\r\n        \r\n        ",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241571694",
            "author": "Georgy0713",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 249,
            "memory": 23000,
            "submissionTime": 1705217040
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241570404",
            "author": "Georgy0713",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 10800,
            "submissionTime": 1705216260
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    a=input()\r\n    s=[]\r\n    c='bcd'\r\n    v='ae'\r\n    k=0\r\n    for i in range(n):\r\n        if i>=1 and a[i] in c and a[i-1] in c :\r\n            s.append('.')\r\n            k+=1\r\n        if  i>=3 and a[i-3] in c and a[i-2] in v and a[i-1] in c and a[i] in v :\r\n            s.insert(i-1+k, '.')\r\n            k+=1\r\n        s.append(a[i])\r\n    print(*s, sep='')\r\n",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    a=input()\r\n    c='bcd'\r\n    v='ae'\r\n    b=''\r\n    for i in a:\r\n        if i in c:\r\n            b+='c'\r\n        else:\r\n            b+='v'\r\n    while 'cvcv' in b:\r\n        b=b.replace('cvcv','cv.cv')\r\n    while 'cc' in b:\r\n        b=b.replace('cc', 'c.c')\r\n    for i in range(len(b)):\r\n        if b[i]=='.':\r\n            a=a[:i]+'.'+a[i:]\r\n    print(a)\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241560918",
            "author": "DMM_0112",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1705210920
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241552642",
            "author": "DMM_0112",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 93,
            "memory": 2100,
            "submissionTime": 1705206360
        },
        "acceptedCode": "def sf(s, g):\r\n    if g == 0:\r\n        if s[g + 1] != 'A' and s[g + 2] != 'A':\r\n            return 'A'\r\n        elif s[g + 1] != 'B' and s[g + 2] != 'B':\r\n            return 'B'\r\n        elif s[g + 1] != 'C' and s[g + 2] != 'C':\r\n            return 'C'\r\n    elif g == 1:\r\n        if s[g + 1] != 'A' and s[g - 1] != 'A':\r\n            return 'A'\r\n        elif s[g + 1] != 'B' and s[g - 1] != 'B':\r\n            return 'B'\r\n        elif s[g + 1] != 'C' and s[g - 1] != 'C':\r\n            return 'C'\r\n    else:\r\n        if s[g - 1] != 'A' and s[g - 2] != 'A':\r\n            return 'A'\r\n        elif s[g - 1] != 'B' and s[g - 2] != 'B':\r\n            return 'B'\r\n        elif s[g - 1] != 'C' and s[g - 2] != 'C':\r\n            return 'C'\r\ndef ct(a, b, c):\r\n    for j in range(3):\r\n        if a[j] == '?':\r\n            return sf(a, j)\r\n        elif b[j] == '?':\r\n            return sf(b, j)\r\n        elif c[j] == '?':\r\n            return sf(c, j)\r\nt = int(input())\r\nfor i in range(t):\r\n    a = input()\r\n    b = input()\r\n    c = input()\r\n    print(ct(a, b, c))\r\n    \r\n",
        "rejectedCode": "t = int(input())\r\na, b, c = map(int, input().split())\r\nfor i in range(t):\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    elif b == c:\r\n        print(a)\r\n    a, b, c = map(int, input().split())\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241560035",
            "author": "jhparkkkk",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705210440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241559725",
            "author": "jhparkkkk",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705210260
        },
        "acceptedCode": "\r\ndef solve():\r\n    row=[]\r\n    a = input()\r\n    row.append(a)\r\n    b = input()\r\n    row.append(b)\r\n    c = input()\r\n    row.append(c)\r\n\r\n    res = []\r\n    for i in range(3):\r\n        pos = row[i].find('?')\r\n        if pos >= 0:\r\n            for j in range(3):\r\n                if pos != j:\r\n                    res.append(ord(row[i][j]))\r\n\r\n    res = (ord('A') + ord('B') + ord('C')) - (res[0] + res[1])\r\n    print(chr(res))\r\n\r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "rejectedCode": "\r\ndef solve():\r\n    row=[]\r\n    a = input()\r\n    row.append(a)\r\n    b = input()\r\n    row.append(b)\r\n    c = input()\r\n    row.append(c)\r\n\r\n    res = []\r\n    for i in range(3):\r\n        pos = row[i].find('?')\r\n        if pos > 0:\r\n            for j in range(3):\r\n                if pos != j:\r\n                    res.append(ord(row[i][j]))\r\n\r\n    res = (ord('A') + ord('B') + ord('C')) - (res[0] + res[1])\r\n    print(chr(res))\r\n\r\nfor _ in range(int(input())):\r\n    solve()",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nB\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 13,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241570241",
            "author": "Chiho",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 9900,
            "submissionTime": 1705216140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240489313",
            "author": "Chiho",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704530940
        },
        "acceptedCode": "import sys\r\n\r\ninput = sys.stdin.readline\r\n\r\nvowels = {'a', 'e'}\r\nconsonants = {'b', 'c', 'd'}\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    data = input().rstrip()\r\n\r\n    i = n - 1\r\n    ans = []\r\n    while i >= 0:\r\n        if data[i] in consonants:\r\n            ans.append(data[i - 2:i + 1])\r\n            i -= 3\r\n        else:\r\n            ans.append(data[i - 1:i + 1])\r\n            i -= 2\r\n\r\n    print('.'.join(reversed(ans)))",
        "rejectedCode": "import sys\r\n\r\ninput = sys.stdin.readline\r\n\r\nvowels = {'a', 'e'}\r\nconsonants = {'b', 'c', 'd'}\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    data = input().rstrip()\r\n    ans = \"\"\r\n\r\n    i = 0\r\n    while i < n:\r\n        if i + 3 < n - 1 and data[i + 2] in consonants and data[i + 3] in consonants:\r\n            ans += data[i:i + 3] + \".\"\r\n            i += 3\r\n        else:\r\n            ans += data[i:i + 2] + \".\"\r\n            i += 2\r\n\r\n    print(ans)\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.ba.b.\r\nba.ba.\r\ndad.de.ca.bed.da.d.\r\nda.c.\r\ndac.da.c.\r\nda.bab.ba.ba.bab.bab.ba.bab.ba.\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ba.ced.ba.b.'\r\n"
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241555081",
            "author": "balaji_0987",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 311,
            "memory": 11800,
            "submissionTime": 1705207680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241554388",
            "author": "balaji_0987",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 5300,
            "submissionTime": 1705207320
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(input())\r\n    v = {'a', 'e'}\r\n    i = 0\r\n    while i <= n - 3:\r\n        if a[i] in v and a[i + 2] in v:\r\n            a[i]=a[i]+\".\"\r\n        elif a[i] in v and a[i + 2] not in v:\r\n            a[i+1]=a[i+1]+'.'\r\n       \r\n        i += 1\r\n\r\n    print(*a,sep='')\r\n",
        "rejectedCode": "def x(o, index, e):\r\n    return o[:index] + [e] + o[index:]\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(input())\r\n    a += [\"k\", \"l\"]\r\n    c = {'b', 'c', 'd'}\r\n    v = {'a', 'e'}\r\n    i = 0\r\n    while i <= n - 2:\r\n        if a[i] in v and a[i + 2] in v:\r\n            a = x(a, i + 1, \".\")\r\n            n+=1\r\n        elif a[i] in v and a[i + 2] in c:\r\n            a = x(a, i + 2, \".\")\r\n            n+=1\r\n       \r\n        i += 1\r\n\r\n    print(\"\".join(a[:(len(a) - 2)]))\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241545089",
            "author": "Alibek_008",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705201800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241544931",
            "author": "Alibek_008",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 2700,
            "submissionTime": 1705201740
        },
        "acceptedCode": "t=int(input())\r\nfor  i in range(t):\r\n    a,b,c=map(int,input().split())\r\n    if(a==b):\r\n        print(c)\r\n    elif(c==b):\r\n        print(a)\r\n    else:\r\n        print(b)",
        "rejectedCode": "a,b,c=map(int,input().split())\r\nif(a==b):\r\n    print(c)\r\nelif(c==b):\r\n    print(a)\r\nelse:\r\n    print(b)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241528790",
            "author": "Minecraft_1.18",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705191540
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241526663",
            "author": "Minecraft_1.18",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1705189500
        },
        "acceptedCode": "t = int(input())\r\ndef helper(s):\r\n    if \"A\" not in s:\r\n        print(\"A\")\r\n    if \"B\" not in s:\r\n        print(\"B\")\r\n    if \"C\" not in s:\r\n        print(\"C\")\r\nfor i in range(t):\r\n    a = input()\r\n    b = input()\r\n    c = input()\r\n    if \"?\" in a:\r\n        helper(a)\r\n    elif \"?\" in b:\r\n        helper(b)\r\n    else:\r\n        helper(c)",
        "rejectedCode": "t = int(input())\r\ns = []\r\nfor i in range(t*3):\r\n    a = input()\r\n    if \"B\" and \"C\" or \"C\" and \"B\" in a:\r\n        s.append(\"A\")\r\n    if \"A\" and \"C\" or \"C\" and \"A\" in a:\r\n        s.append(\"B\")\r\n    if \"A\" and \"B\" or \"B\" and \"A\" in a:\r\n        s.append(\"C\")\r\nr = set(s)\r\nq = sorted(r)\r\nfor i in q:\r\n    print(*i)\r\n        ",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241534296",
            "author": "sardoruzoqov1110",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1705195440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241534038",
            "author": "sardoruzoqov1110",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705195320
        },
        "acceptedCode": "def foo (s):\r\n    if \"A\" not in s:\r\n        print (\"A\") \r\n    elif \"B\" not in s:\r\n        print (\"B\")\r\n    elif \"C\" not in s:\r\n        print (\"C\")\r\nt= int (input())\r\nfor i in range(t):\r\n    s1= input()\r\n    s2= input()\r\n    s3= input()\r\n\r\n    if \"?\" in s1:\r\n        foo(s1)\r\n    elif \"?\" in s2:\r\n        foo(s2)\r\n    elif \"?\" in s3:\r\n        foo(s3)",
        "rejectedCode": "def foo (s):\r\n    if \"A\" not in s:\r\n        print (\"A\") \r\n    elif \"B\" not in s:\r\n        print (\"B\")\r\n    elif \"C\" not in s:\r\n        print (\"C\")\r\nt= int (input())\r\nfor i in range(t):\r\n    s1= input()\r\n    s2= input()\r\n    s3= input()\r\n\r\n    if \"?\" in s1:\r\n        foo(s1)\r\n    elif \"?\" in s2:\r\n        foo(s2)\r\n    elif \"?\" in s2:\r\n        foo(s2)",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 7th words differ - expected: 'C', found: 'A'\r\n"
        },
        "errorLine": 18,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241536084",
            "author": "ProPY",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 421,
            "memory": 29700,
            "submissionTime": 1705196520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241529869",
            "author": "ProPY",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1705192380
        },
        "acceptedCode": "from math import sqrt\r\na = int(input())\r\nfor i in range(a):\r\n    k = int(input())\r\n    h = list(map(int, input().split()))\r\n    f = int(sqrt(sum(h)))\r\n    if  f * f == sum(h):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")",
        "rejectedCode": "a = int(input())\r\nfor i in range(a):\r\n    b = input()\r\n    c =input()\r\n    d = input()\r\nif 'A' not in b:\r\n    print('A')\r\nelif 'B' not in b:\r\n    print('B')\r\nelif 'C' not in b:\r\n    print('C')\r\nelse:\r\n    pass\r\nif 'A' not in c:\r\n    print('A')\r\nelif 'B' not in c:\r\n    print('B')\r\nelif 'C' not in c:\r\n    print('C')\r\nelse:\r\n    pass\r\nif 'A' not in d:\r\n    print('A')\r\nelif 'B' not in d:\r\n    print('B')\r\nelif 'C' not in d:\r\n    print('C')\r\nelse:\r\n    pass\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "C\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241487912",
            "author": "FrankYang0610",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 405,
            "memory": 7800,
            "submissionTime": 1705147560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241487262",
            "author": "FrankYang0610",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 3900,
            "submissionTime": 1705146780
        },
        "acceptedCode": "# LUOGU_RID: 142755316\nnum_of_words = int(input())\nfor _ in range(num_of_words):\n    length = int(input())\n    word = list(input())\n    separators = []\n    pointers = 0\n    for i in range(length):\n        if word[i] == 'a' or word[i] == 'e':\n            separators.append(i-1)\n    separators.pop(0)\n    separators_length = len(separators)\n    for i in range(length):\n        if pointers < separators_length and i == separators[pointers]:\n            print(\".\",end=\"\")\n            pointers += 1\n        print(word[i],end=\"\")\n    print(\"\\n\",end=\"\")\n\n",
        "rejectedCode": "num_of_words = int(input())\r\nfor _ in range(num_of_words):\r\n    length = int(input())\r\n    word = list(input())\r\n    word_with_separators = \"\"\r\n    iterator = 0\r\n    while iterator < len(word):\r\n        if word[iterator] == 'a' or word[iterator] == 'e':\r\n            word.insert(iterator - 1, \".\")\r\n            iterator += 1\r\n        iterator += 1\r\n        \r\n    if word[0] == \".\":\r\n        word = word[1:]\r\n    print(\"\".join(word))\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241519740",
            "author": "celestes",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 36100,
            "submissionTime": 1705180620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241395027",
            "author": "celestes",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 109,
            "memory": 100,
            "submissionTime": 1705125900
        },
        "acceptedCode": "# \u83b7\u53d6\u6d4b\u8bd5\u7528\u4f8b\u6570\u91cf\r\ntest_cases = int(input())\r\n# \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\r\nfor _ in range(test_cases):\r\n    # \u83b7\u53d6\u5217\u8868\u7684\u957f\u5ea6\r\n    list_length = int(input())\r\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u96c6\u5408\uff0c\u521d\u59cb\u503c\u4e3a0\r\n    unique_sums = {0}\r\n    # \u521d\u59cb\u7684\u603b\u548c\u4e3a0\r\n    current_sum = 0\r\n    # \u904d\u5386\u8f93\u5165\u7684\u5217\u8868\u5143\u7d20\r\n    for index, value in enumerate(map(int, input().split()), 1):\r\n        # \u5982\u679c\u7d22\u5f15\u662f\u5947\u6570\uff0c\u5219\u4ece\u5f53\u524d\u603b\u548c\u4e2d\u51cf\u53bb\u503c\uff1b\u5426\u5219\uff0c\u52a0\u4e0a\u503c\r\n        current_sum += -value if index % 2 else value\r\n        # \u5c06\u5f53\u524d\u603b\u548c\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\uff0c\u786e\u4fdd\u6bcf\u6b21\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u503c\r\n        unique_sums.add(current_sum)\r\n    # \u68c0\u67e5\u96c6\u5408\u7684\u5927\u5c0f\u662f\u5426\u5c0f\u4e8e\u6216\u7b49\u4e8e\u5217\u8868\u7684\u957f\u5ea6\uff0c\u5e76\u636e\u6b64\u6253\u5370\u7ed3\u679c\r\n    if len(unique_sums) <= list_length:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    sum_ = sum(a)\r\n    for j in range(1,max(a)*2):\r\n        if sum_ == j ** 2:\r\n            print('YES')\r\n            break\r\n        elif sum_ < j ** 2:\r\n            print('NO')\r\n            break",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [365th token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241426445",
            "author": "justirr",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705139220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241398351",
            "author": "justirr",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705127520
        },
        "acceptedCode": "n = int(input())\r\nfor i in range(n):\r\n    a, b, c = map(int, input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n",
        "rejectedCode": "n = int(input())\r\nfor i in range(n):\r\n    a, b, c = map(int, input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(c)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "2\r\n3\r\n6\r\n8\r\n0\r\n6\r\n8\r\n7\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '2'\r\n"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241494068",
            "author": "no_0n.wants",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 400,
            "submissionTime": 1705149900
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240811543",
            "author": "no_0n.wants",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 108,
            "memory": 100,
            "submissionTime": 1704700920
        },
        "acceptedCode": "n = int(input())\r\n\r\nfor _ in range(n):\r\n    k = int(input())\r\n    s = input()\r\n    c = [\"b\", \"c\", \"d\"]\r\n    v = [\"a\", \"e\"]\r\n    j = 0\r\n\r\n    for i in range(k - 3):\r\n        if s[i] in c and s[i + 1] in v and s[i + 2] in c and s[i + 3] in v:\r\n            print(s[i] + s[i + 1] + '.', end='')\r\n            i += 2\r\n            j += 2\r\n        elif s[i] in c and s[i + 1] in v and s[i + 2] in c and s[i + 3] in c:\r\n            print(s[i] + s[i + 1] + s[i + 2] + '.', end='')\r\n            i += 3\r\n            j += 3\r\n    print(s[j:])\r\n",
        "rejectedCode": "from math import  sqrt\r\n\r\n\r\nn = int(input())\r\n\r\nfor i in range(n):\r\n    k = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = sum(a)\r\n    qs = sqrt(s)\r\n    if qs * qs == s:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "241456578",
            "author": "is_zero_ach",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1653,
            "memory": 35400,
            "submissionTime": 1705141860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "241210511",
            "author": "is_zero_ach",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 5000,
            "memory": 35600,
            "submissionTime": 1704982980
        },
        "acceptedCode": "import functools\r\nimport sys\r\n# sys.setrecursionlimit(2000000)\r\nfrom collections import defaultdict\r\nimport collections\r\n#from sortedcontainers import SortedList\r\nimport math\r\nimport heapq\r\nfrom collections import deque\r\n \r\nimport sys\r\ninput = sys.stdin.readline\r\nimport bisect\r\nfrom bisect import bisect_left as lower_bound\r\nfrom bisect import bisect_right as upper_bound\r\n  \r\nclass FenwickTree:\r\n    def __init__(self, x):\r\n        bit = self.bit = list(x)\r\n        size = self.size = len(bit)\r\n        for i in range(size):\r\n            j = i | (i + 1)\r\n            if j < size:\r\n                bit[j] += bit[i]\r\n \r\n    def update(self, idx, x):\r\n        \"\"\"updates bit[idx] += x\"\"\"\r\n        while idx < self.size:\r\n            self.bit[idx] += x\r\n            idx |= idx + 1\r\n \r\n    def __call__(self, end):\r\n        \"\"\"calc sum(bit[:end])\"\"\"\r\n        x = 0\r\n        while end:\r\n            x += self.bit[end - 1]\r\n            end &= end - 1\r\n        return x\r\n \r\n    def find_kth(self, k):\r\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\r\n        idx = -1\r\n        for d in reversed(range(self.size.bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < self.size and self.bit[right_idx] <= k:\r\n                idx = right_idx\r\n                k -= self.bit[idx]\r\n        return idx + 1, k\r\n\r\nclass SortedList:\r\n    block_size = 700\r\n \r\n    def __init__(self, iterable=()):\r\n        self.macro = []\r\n        self.micros = [[]]\r\n        self.micro_size = [0]\r\n        self.fenwick = FenwickTree([0])\r\n        self.size = 0\r\n        for item in iterable:\r\n            self.insert(item)\r\n \r\n    def insert(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        j = upper_bound(self.micros[i], x)\r\n        self.micros[i].insert(j, x)\r\n        self.size += 1\r\n        self.micro_size[i] += 1\r\n        self.fenwick.update(i, 1)\r\n        if len(self.micros[i]) >= self.block_size:\r\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\r\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\r\n            self.fenwick = FenwickTree(self.micro_size)\r\n            self.macro.insert(i, self.micros[i + 1][0])\r\n \r\n    def pop(self, k=-1):\r\n        i, j = self._find_kth(k)\r\n        self.size -= 1\r\n        self.micro_size[i] -= 1\r\n        self.fenwick.update(i, -1)\r\n        return self.micros[i].pop(j)\r\n \r\n    def __getitem__(self, k):\r\n        i, j = self._find_kth(k)\r\n        return self.micros[i][j]\r\n \r\n    def count(self, x):\r\n        return self.upper_bound(x) - self.lower_bound(x)\r\n \r\n    def __contains__(self, x):\r\n        return self.count(x) > 0\r\n \r\n    def lower_bound(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\r\n \r\n    def upper_bound(self, x):\r\n        i = upper_bound(self.macro, x)\r\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\r\n \r\n    def _find_kth(self, k):\r\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\r\n \r\n    def __len__(self):\r\n        return self.size\r\n \r\n    def __iter__(self):\r\n        return (x for micro in self.micros for x in micro)\r\n \r\n    def __repr__(self):\r\n        return str(list(self))\r\n \r\ncountKit = int(input())\r\n \r\nfor _ in range(countKit):\r\n    peoples = []\r\n    se = SortedList()\r\n    countHandShake = 0\r\n    countPeoples = int(input())\r\n    for _ in range(countPeoples):\r\n        [a,b] = list(map(int, input().split()))\r\n        peoples.append([a,b])\r\n\r\n    peoples.sort(key=lambda x: x[0])\r\n \r\n    for people in peoples:\r\n        lt = se.lower_bound(people[1])\r\n        countHandShake += len(se) - lt\r\n        se.insert(people[1])\r\n    print(countHandShake)",
        "rejectedCode": "countKit = int(input())\r\n\r\nfor _ in range(countKit):\r\n    peoples = []\r\n    se = set()\r\n    countHandShake = 0\r\n    countPeoples = int(input())\r\n    for _ in range(countPeoples):\r\n        [a,b] = list(map(int, input().split()))\r\n        peoples.append([a,b])\r\n    #peoples.sort(key=lambda x: x[0])\r\n    peoples.sort(key=lambda x: x[0])\r\n\r\n    for people in peoples:\r\n        lt = 0\r\n        for j in se:\r\n            if j < people[1]:\r\n                lt += 1\r\n        countHandShake += len(se) - lt\r\n        se.add(people[1])\r\n    print(countHandShake)",
        "failedTestCase": {
            "input": "1\r\n200000\r\n647453678 930853853\r\n-586814073 570193412\r\n-490363662 281213000\r\n-703158044 591740767\r\n137659014 352608457\r\n-774601557 -390838254\r\n-867423209 -524087527\r\n-28391755 692355005\r\n-729209925 704738138\r\n-217098545 856705188\r\n-716155101 191142422\r\n-901655099 656094991\r\n384746555 694653351\r\n-605420601 -561339913\r\n811192007 826647575\r\n-377150013 354556959\r\n684345222 874905831\r\n-46479142 170684323\r\n-793019907 5395128\r\n-788095085 -445094138\r\n-380816261 893458206\r\n-31460295 62063481\r\n-501097580 -409603254\r\n...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241408271",
            "author": "mattsoll",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 139,
            "memory": 20200,
            "submissionTime": 1705132740
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241408116",
            "author": "mattsoll",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705132680
        },
        "acceptedCode": "t = int(input())\r\n\r\nans = []\r\n\r\ndef getRv(n):\r\n    a = int(n**0.5)\r\n    if a * a == n: \r\n        return True\r\n    else: \r\n        return False\r\n\r\ndef SuM(l):\r\n    sumi = 0\r\n    for k in range(len(l)):\r\n        sumi += int(l[k])\r\n\r\n    return sumi\r\n\r\ndef getAnswer(sumX):\r\n    if getRv(sumX):\r\n        return 'YES'\r\n    else:\r\n        return 'NO'\r\n\r\nfor i in range(t):\r\n    n = int(input())\r\n\r\n    sum0 = SuM(input().split())\r\n    ans.append(getAnswer(sum0))\r\n\r\nfor _ in range(len(ans)):\r\n    print(ans[_])\r\n\r\n    \r\n",
        "rejectedCode": "import math\r\n\r\nt = int(input())\r\n\r\nans = []\r\n\r\ndef getRv(n):\r\n    a = int(math.sqrt(n))\r\n    if a * a == n: \r\n        return False\r\n    else: \r\n        return False\r\n\r\ndef SuM(l):\r\n    sumi = 0\r\n    for k in range(len(l)):\r\n        sumi += int(l[k])\r\n\r\n    return sumi\r\n\r\ndef getAnswer(sumX):\r\n    if getRv(sumX):\r\n        return 'YES'\r\n    else:\r\n        return 'NO'\r\n\r\nfor i in range(t):\r\n    n = int(input())\r\n\r\n    sum0 = SuM(input().split())\r\n    ans.append(getAnswer(sum0))\r\n\r\nfor _ in range(len(ans)):\r\n    print(ans[_])\r\n\r\n    \r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241402392",
            "author": "mandapuram_akshitha",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 1400,
            "submissionTime": 1705129500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241402179",
            "author": "mandapuram_akshitha",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1705129380
        },
        "acceptedCode": "def is_latin_square(square):\r\n    letters=set('ABC')\r\n    for row in square:\r\n        if set(row) != letters:\r\n            return False\r\n    for col in range(3):\r\n        if {square[row][col] for row in range(3)} != letters:\r\n            return False\r\n    return True\r\n    \r\ndef find_missing_letter(square):\r\n    for letter in 'ABC':\r\n        for i in range(3):\r\n            for j in range(3):\r\n                if square[i][j] == '?':\r\n                    square[i][j] = letter\r\n                    if is_latin_square(square):\r\n                        return letter\r\n                    else:\r\n                        square[i][j]='?'\r\n    return None\r\n    \r\nt=int(input())\r\nfor _ in range(t):\r\n    square = [list(input()) for _ in range(3)]\r\n    missing_letter = find_missing_letter(square)\r\n    print(missing_letter)",
        "rejectedCode": "def is_latin_square(square):\r\n    letters=set('ABC')\r\n    for row in square:\r\n        if set(row) != letters:\r\n            return False\r\n    for col in range(3):\r\n        if {square[row][col] for row in range(3)} != letters:\r\n            return False\r\n    return True\r\n    \r\ndef find_missing_letter(square):\r\n    for letter in 'ABC':\r\n        for i in range(3):\r\n            for j in range(3):\r\n                if square[i][j] == '?':\r\n                    square[i][j] = letter\r\n                    if is_latin_square(square):\r\n                        return letter\r\n                    else:\r\n                        square[i][j]='?'\r\n    return None\r\n    \r\nt=int(input())\r\nfor _ in range(t):\r\n    square = [list(input() for _ in range(3)]\r\n    missing_letter = find_missing_letter(square)\r\n    print(missing_letter)",
        "failedTestCase": null,
        "errorLine": 25,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "241400591",
            "author": "meghanayadav",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 498,
            "memory": 600,
            "submissionTime": 1705128600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "241400262",
            "author": "meghanayadav",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705128480
        },
        "acceptedCode": "from heapq import heappush\r\nfrom heapq import heappop\r\nfrom math import inf\r\n \r\nt = int(input())\r\n \r\nfor _ in range(t):\r\n    n, m = map(int, input().split())\r\n    edges = [[] for _ in range(n + 1)]\r\n    for _ in range(m):\r\n        u, v, w = map(int, input().split())\r\n        edges[u].append([v, w])\r\n        edges[v].append([u, w])\r\n    slow = [0] + list(map(int, input().split()))\r\n    q = [[0, inf, 1]]\r\n    ms = {}\r\n    while q:\r\n        t, s, u = heappop(q)\r\n        if u == n:\r\n            print(t)\r\n            break\r\n        s = min(s, slow[u])\r\n        if u in ms and s >= ms[u]:\r\n            continue\r\n        ms[u] = s\r\n        for v, w in edges[u]:\r\n            heappush(q, [t + w * s, s, v])",
        "rejectedCode": "from heapq import heappush, heappop\r\n \r\ndef solve():\r\n    n,m=map(int,input().split())\r\n    dct=[[]for i in range(n)]\r\n    for i in range(m):\r\n        a,b,w=map(int,input().split())\r\n        dct[a-1].append([b-1,w])\r\n        dct[b - 1].append([a - 1, w])\r\n    A=list(map(int,input().split()))\r\n    h=[[0,0,A[0]]]\r\n    mp={}\r\n    while h:\r\n        t,p,c=heappop(h)\r\n        if p==n-1:\r\n            print(t)\r\n            return\r\n        if c>A[p]:\r\n            c=A[p]\r\n        if p in mp and mp[p]<=c:\r\n            continue\r\n        else:\r\n            mp[p]=c\r\n        for y,w in dct[p]:\r\n            heappush(h,[t+w*c,y,c])",
        "failedTestCase": {
            "input": "3\r\n5 5\r\n1 2 2\r\n3 2 1\r\n2 4 5\r\n2 5 7\r\n4 5 1\r\n5 2 1 3 3\r\n5 10\r\n1 2 5\r\n1 3 5\r\n1 4 4\r\n1 5 8\r\n2 3 6\r\n2 4 3\r\n2 5 2\r\n3 4 1\r\n3 5 8\r\n4 5 2\r\n7 2 8 4 1\r\n7 10\r\n3 2 8\r\n2 1 4\r\n2 5 7\r\n2 6 4\r\n7 1 2\r\n4 3 5\r\n6 4 2\r\n6 7 1\r\n6 7 4\r\n4 5 9\r\n7 6 5 4 3 2 1\r\n",
            "output": "",
            "expectedOutput": "19\r\n36\r\n14\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 3], but output contains 0 elements\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "241390352",
            "author": "Joris_Perrenet",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 592,
            "memory": 12700,
            "submissionTime": 1705123680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "241390042",
            "author": "Joris_Perrenet",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 62,
            "memory": 2400,
            "submissionTime": 1705123560
        },
        "acceptedCode": "from collections import defaultdict\nimport heapq\nimport sys\ninput = sys.stdin.readline\nMOD = 10**9 + 7\n\ndef read_array(factory):\n    return [factory(num) for num in input().strip().split()]\ndef print_array(arr):\n    print(\" \".join(map(str, arr)))\n\ndef solve(edges, s, n):\n    \"\"\"We need to travel from city 1 to n\"\"\"\n    conn = defaultdict(dict)\n    for u, v, w in edges:\n        conn[u][v] = min(conn[u].get(v, float('inf')), w)\n        conn[v][u] = min(conn[v].get(u, float('inf')), w)\n    # Store a heap of [(duration, city, bike), ...]\n    h = [(0, 1, float('inf'))]\n    best_bike = {}\n    while True:\n        duration, city, bike = heapq.heappop(h)\n        if city == n:\n            return duration\n        # From this city check out all other cities we can visit\n        bike = min(bike, s[city-1])\n        for destination, length in conn[city].items():\n            if city in best_bike and bike >= best_bike[city]: continue\n            heapq.heappush(h, (duration+length*bike, destination, bike))\n        best_bike[city] = bike\n        # print(h)\n\nif __name__ == \"__main__\":\n    # Read in input:\n    t = int(input())\n\n    # Call solution:\n    for _ in range(t):\n        n, m = read_array(int)\n        edges = []\n        for _ in range(m):\n            u, v, w = read_array(int)\n            edges.append((u, v, w))\n        s = read_array(int)\n        ans = solve(edges, s, n)\n        print(ans)\n\n",
        "rejectedCode": "from collections import defaultdict\nimport heapq\nimport sys\ninput = sys.stdin.readline\nMOD = 10**9 + 7\n\ndef read_array(factory):\n    return [factory(num) for num in input().strip().split()]\ndef print_array(arr):\n    print(\" \".join(map(str, arr)))\n\ndef solve(edges, s, n):\n    \"\"\"We need to travel from city 1 to n\"\"\"\n    conn = defaultdict(dict)\n    for u, v, w in edges:\n        conn[u][v] = min(conn[u].get(v, float('inf')), w)\n        conn[v][u] = min(conn[v].get(u, float('inf')), w)\n    # Store a heap of [(duration, city, bike), ...]\n    h = [(0, 1, float('inf'))]\n    seen = defaultdict(int)\n    while True:\n        duration, city, bike = heapq.heappop(h)\n        if city == n:\n            return duration\n        seen[city] += 1\n        # From this city check out all other cities we can visit\n        bike = min(bike, s[city-1])\n        for destination, length in conn[city].items():\n            if seen[destination] >= 2: continue\n            heapq.heappush(h, (duration+length*bike, destination, bike))\n        # print(h)\n\nif __name__ == \"__main__\":\n    # Read in input:\n    t = int(input())\n\n    # Call solution:\n    for _ in range(t):\n        n, m = read_array(int)\n        edges = []\n        for _ in range(m):\n            u, v, w = read_array(int)\n            edges.append((u, v, w))\n        s = read_array(int)\n        ans = solve(edges, s, n)\n        print(ans)\n\n",
        "failedTestCase": {
            "input": "100\r\n3 3\r\n3 2 8\r\n1 2 5\r\n1 3 9\r\n8 2 7\r\n5 4\r\n4 3 10\r\n1 5 8\r\n1 3 8\r\n2 5 6\r\n10 3 3 9 1\r\n5 4\r\n5 4 7\r\n1 5 5\r\n3 2 4\r\n1 2 1\r\n8 9 2 4 8\r\n2 5\r\n1 2 10\r\n2 1 8\r\n2 1 6\r\n1 2 6\r\n2 1 3\r\n4 2\r\n3 10\r\n3 2 4\r\n2 1 2\r\n3 2 1\r\n3 2 7\r\n2 1 7\r\n3 2 4\r\n3 1 6\r\n2 3 9\r\n3 1 4\r\n2 1 5\r\n9 4 7\r\n4 10\r\n3 4 7\r\n3 2 9\r\n2 1 8\r\n1 4 6\r\n1 3 1\r\n2 3 8\r\n4 3 5\r\n2 4 10\r\n3 1 8\r\n4 2 3\r\n4 5 6 4\r\n3 2\r\n3 1 8\r\n3 2 4\r\n6 9 1\r\n6 8\r\n6 4 1\r\n1 4 5\r\n5 2 9\r\n6 5 3\r\n3 2 8\r\n6 4 6\r\n4 6 3\r\n2 6 10\r\n7 3 7 5 2 4\r\n3 2\r\n3 2 7\r\n2 1 3\r\n3 8 7\r\n4 10\r\n1 2 4\r\n3 2 9\r\n3 4 1\r\n2 3 5\r\n1 3 3\r\n...",
            "output": "56\r\n80\r\n40\r\n12\r\n22\r\n24\r\n48\r\n40\r\n30\r\n24\r\n122\r\n20\r\n24\r\n3\r\n9\r\n20\r\n42\r\n21\r\n15\r\n2\r\n28\r\n102\r\n156\r\n90\r\n2\r\n5\r\n13\r\n28\r\n65\r\n102\r\n74\r\n7\r\n37\r\n20\r\n27\r\n18\r\n2\r\n13\r\n72\r\n2\r\n65\r\n6\r\n91\r\n26\r\n12\r\n2\r\n32\r\n32\r\n40\r\n126\r\n3\r\n6\r\n32\r\n4\r\n49\r\n7\r\n23\r\n9\r\n63\r\n20\r\n50\r\n45\r\n49\r\n7\r\n19\r\n33\r\n20\r\n7\r\n42\r\n38\r\n60\r\n20\r\n9\r\n36\r\n16\r\n6\r\n67\r\n6\r\n4\r\n3\r\n32\r\n2\r\n12\r\n1\r\n16\r\n24\r\n60\r\n39\r\n5\r\n10\r\n21\r\n39\r\n4\r\n30\r\n10\r\n9\r\n25\r\n60\r\n41\r\n90\r\n",
            "expectedOutput": "56\r\n80\r\n40\r\n12\r\n22\r\n24\r\n48\r\n40\r\n30\r\n24\r\n122\r\n20\r\n24\r\n3\r\n9\r\n20\r\n42\r\n21\r\n15\r\n2\r\n28\r\n102\r\n156\r\n90\r\n2\r\n5\r\n13\r\n28\r\n65\r\n91\r\n74\r\n7\r\n37\r\n20\r\n27\r\n18\r\n2\r\n13\r\n72\r\n2\r\n65\r\n6\r\n91\r\n26\r\n12\r\n2\r\n32\r\n32\r\n40\r\n126\r\n3\r\n6\r\n32\r\n4\r\n49\r\n7\r\n23\r\n9\r\n63\r\n20\r\n50\r\n45\r\n49\r\n7\r\n19\r\n33\r\n20\r\n7\r\n42\r\n38\r\n60\r\n20\r\n9\r\n36\r\n16\r\n6\r\n67\r\n6\r\n4\r\n3\r\n32\r\n2\r\n12\r\n1\r\n16\r\n24\r\n60\r\n39\r\n5\r\n10\r\n21\r\n39\r\n4\r\n30\r\n10\r\n9\r\n25\r\n60\r\n41\r\n90\r\n",
            "CheckerComment": "wrong answer 30th numbers differ - expected: '91', found: '102'\r\n"
        },
        "errorLine": 20,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241389402",
            "author": "germanjke",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 951,
            "memory": 18300,
            "submissionTime": 1705123260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241388513",
            "author": "germanjke",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 389,
            "memory": 6400,
            "submissionTime": 1705122840
        },
        "acceptedCode": "t = int(input())\r\n\r\n\r\ndef solve(arr):\r\n    s = sum(arr)\r\n    l, r = 1, 1e9\r\n    while l <= r:\r\n        mid = (l+r) // 2\r\n        if mid * mid == s:\r\n            return \"YES\"\r\n        elif mid * mid > s:\r\n            r = mid - 1\r\n        else:\r\n            l = mid + 1\r\n    return \"NO\"\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    arr = [int(x) for x in input().split()]\r\n    print(solve(arr))",
        "rejectedCode": "t = int(input())\r\n\r\n\r\ndef solve(arr):\r\n    s = sum(arr)\r\n    for i in range((s//2)+1):\r\n        if i*i == s:\r\n            return \"YES\"\r\n    return \"NO\"\r\n\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    arr = [int(x) for x in input().split()]\r\n    print(solve(arr))",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [24th token]\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241387899",
            "author": "Shivvv24122004123",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705122540
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241387469",
            "author": "Shivvv24122004123",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705122360
        },
        "acceptedCode": "t=int(input())\r\nans=list()\r\nwhile t>0:\r\n    t-=1\r\n    s1=input()\r\n    s2=input()\r\n    s3=input()\r\n    if \"?\" in s1:\r\n        if \"A\" not in s1:\r\n            ans.append('A')\r\n        elif \"B\" not in s1:\r\n            ans.append('B')\r\n        elif \"C\" not in s1:\r\n            ans.append('C')\r\n    elif \"?\" in s2:\r\n        if \"A\" not in s2:\r\n            ans.append('A')\r\n        elif \"B\" not in s2:\r\n            ans.append('B')\r\n        elif \"C\" not in s2:\r\n            ans.append('C')\r\n    elif \"?\" in s3:\r\n        if \"A\" not in s3:\r\n            ans.append('A')\r\n        elif \"B\" not in s3:\r\n            ans.append('B')\r\n        elif \"C\" not in s3:\r\n            ans.append('C')\r\nfor i in ans:\r\n    print(i)",
        "rejectedCode": "t=int(input())\r\nans=list()\r\nwhile t>0:\r\n    t-=1\r\n    s1=input()\r\n    s2=input()\r\n    s3=input()\r\n    if \"?\" in s1:\r\n        if \"A\" not in s1:\r\n            ans.append('A')\r\n        elif \"B\" not in s1:\r\n            ans.append('B')\r\n        elif \"C\" not in s1:\r\n            ans.append('C')\r\n    elif \"?\" in s2:\r\n        if \"A\" not in s2:\r\n            ans.append('A')\r\n        elif \"B\" not in s2:\r\n            ans.append('B')\r\n        elif \"C\" not in s2:\r\n            ans.append('C')\r\n    elif \"?\" in s3:\r\n        if \"A\" not in s1:\r\n            ans.append('A')\r\n        elif \"B\" not in s1:\r\n            ans.append('B')\r\n        elif \"C\" not in s1:\r\n            ans.append('C')\r\nfor i in ans:\r\n    print(i)",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 7th words differ - expected: 'C', found: 'A'\r\n"
        },
        "errorLine": 23,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241373463",
            "author": "druziyev",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705115820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241372956",
            "author": "druziyev",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705115520
        },
        "acceptedCode": "n = int(input())\r\n\r\nrows = []\r\nfor i in range(n):\r\n  rows.append(list(map(int, input().split())))\r\n\r\nfor row in rows:\r\n    if row[0] == row[1]:\r\n        print(row[2])\r\n    elif row[0] == row[2]:\r\n        print(row[1])\r\n    else:\r\n        print(row[0])",
        "rejectedCode": "a, b, c = map(int, input().split())\r\n\r\nif a == b:\r\n    print(c)\r\nelif a == c:\r\n    print(b)\r\nelse:\r\n    print(a)\r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241355097",
            "author": "robert_ora",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 28900,
            "submissionTime": 1705106460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241354864",
            "author": "robert_ora",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 28000,
            "submissionTime": 1705106280
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\n\r\ndef inlt():  # takes space separated integers; returns list of ints\r\n    return list(map(int, input().split()))\r\n\r\n\r\nfor i in range(int(input())):\r\n    length = int(input())\r\n    arr = inlt()\r\n    prev = {0}\r\n    tot = 0\r\n\r\n    for j in range(length):\r\n        if j % 2 == 0:\r\n            tot += arr[j]\r\n        else:\r\n            tot += arr[j] * -1\r\n        if tot not in prev:\r\n            prev.add(tot)\r\n        else:\r\n            print('YES')\r\n            break\r\n    else:\r\n        print('NO')\r\n",
        "rejectedCode": "from sys import stdin\r\n \r\nINF = float(\"inf\")\r\n \r\ninput = stdin.readline\r\ndef read_str(): return input().rstrip()\r\ndef read_int(): return int(input().rstrip())\r\ndef read_lst(): return list(map(int, input().rstrip().split()))\r\ndef read_map(): return map(int, input().rstrip().split())\r\ndef ok(b): print(\"YES\" if b else \"NO\")\r\n \r\n'''\r\n 1 3  2\r\n-1 3 -2\r\n-1 2  0\r\n \r\n1   2   11  4   1   5   1   2\r\n-1  2  -11  4  -1   5  -1   2\r\n-1  1  -10  -6  -7 -2  -3   1\r\n \r\n \r\n1   2   11  4   1   5   1   2\r\n1  -2   11 -4   1  -5   1  -2\r\n1  -1   10  6   7   2   3  -1\r\n'''\r\ndef solve():\r\n    n, a = read_int(), read_lst()\r\n \r\n    s = set()\r\n    curr = 0\r\n    for i in range(n):\r\n        if i % 2:\r\n            curr += a[i] * -1\r\n        else:\r\n            curr += a[i]\r\n        if curr == 0:\r\n            print(\"YES\")\r\n            return\r\n        if curr not in s:\r\n            s.add(curr)\r\n        else:\r\n            print(\"YES\")\r\n            return\r\n    print(\"NO\")\r\n \r\nif __name__ == \"__main__\":\r\n    for _ in range(read_int()):\r\n        solve()",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "241349385",
            "author": "lan246",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1138,
            "memory": 60500,
            "submissionTime": 1705101960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "241348981",
            "author": "lan246",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1705101540
        },
        "acceptedCode": "from __future__ import print_function\r\nimport sys, os\r\nfrom io import BytesIO, IOBase\r\n\r\nimport sys\r\nimport traceback\r\n\r\nfrom bisect import bisect_left, bisect_right, insort\r\nfrom itertools import chain, repeat, starmap\r\nfrom math import log\r\nfrom operator import add, eq, ne, gt, ge, lt, le, iadd\r\nfrom textwrap import dedent\r\n\r\n\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\ntry:\r\n    from collections.abc import Sequence, MutableSequence\r\nexcept ImportError:\r\n    from collections import Sequence, MutableSequence\r\n \r\nfrom functools import wraps\r\nfrom sys import hexversion\r\n \r\nif hexversion < 0x03000000:\r\n    from itertools import imap as map  # pylint: disable=redefined-builtin\r\n    from itertools import izip as zip  # pylint: disable=redefined-builtin\r\n    try:\r\n        from thread import get_ident\r\n    except ImportError:\r\n        print()\r\nelse:\r\n    from functools import reduce\r\n    try:\r\n        from _thread import get_ident\r\n    except ImportError:\r\n        print()\r\n \r\n \r\ndef recursive_repr(fillvalue='...'):\r\n    \"Decorator to make a repr function return fillvalue for a recursive call.\"\r\n    # pylint: disable=missing-docstring\r\n    # Copied from reprlib in Python 3\r\n    # https://hg.python.org/cpython/file/3.6/Lib/reprlib.py\r\n \r\n    def decorating_function(user_function):\r\n        repr_running = set()\r\n \r\n        @wraps(user_function)\r\n        def wrapper(self):\r\n            key = id(self), get_ident()\r\n            if key in repr_running:\r\n                return fillvalue\r\n            repr_running.add(key)\r\n            try:\r\n                result = user_function(self)\r\n            finally:\r\n                repr_running.discard(key)\r\n            return result\r\n \r\n        return wrapper\r\n \r\n    return decorating_function\r\n\r\n\r\nclass SortedList(MutableSequence):\r\n    DEFAULT_LOAD_FACTOR = 1000\r\n \r\n \r\n    def __init__(self, iterable=None, key=None):\r\n        \"\"\"Initialize sorted list instance.\r\n \r\n        Optional `iterable` argument provides an initial iterable of values to\r\n        initialize the sorted list.\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl = SortedList()\r\n        >>> sl\r\n        SortedList([])\r\n        >>> sl = SortedList([3, 1, 2, 5, 4])\r\n        >>> sl\r\n        SortedList([1, 2, 3, 4, 5])\r\n \r\n        :param iterable: initial values (optional)\r\n \r\n        \"\"\"\r\n        assert key is None\r\n        self._len = 0\r\n        self._load = self.DEFAULT_LOAD_FACTOR\r\n        self._lists = []\r\n        self._maxes = []\r\n        self._index = []\r\n        self._offset = 0\r\n \r\n        if iterable is not None:\r\n            self._update(iterable)\r\n \r\n \r\n \r\n \r\n \r\n    @property\r\n    def key(self):  # pylint: disable=useless-return\r\n        \"\"\"Function used to extract comparison key from values.\r\n \r\n        Sorted list compares values directly so the key function is none.\r\n \r\n        \"\"\"\r\n        return None\r\n \r\n \r\n    def _reset(self, load):\r\n        \"\"\"Reset sorted list load factor.\r\n \r\n        The `load` specifies the load-factor of the list. The default load\r\n        factor of 1000 works well for lists from tens to tens-of-millions of\r\n        values. Good practice is to use a value that is the cube root of the\r\n        list size. With billions of elements, the best load factor depends on\r\n        your usage. It's best to leave the load factor at the default until you\r\n        start benchmarking.\r\n \r\n        See :doc:`implementation` and :doc:`performance-scale` for more\r\n        information.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        :param int load: load-factor for sorted list sublists\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, [])\r\n        self._clear()\r\n        self._load = load\r\n        self._update(values)\r\n \r\n \r\n    def clear(self):\r\n        \"\"\"Remove all values from sorted list.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        \"\"\"\r\n        self._len = 0\r\n        del self._lists[:]\r\n        del self._maxes[:]\r\n        del self._index[:]\r\n        self._offset = 0\r\n \r\n    _clear = clear\r\n \r\n \r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted list.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList()\r\n        >>> sl.add(3)\r\n        >>> sl.add(1)\r\n        >>> sl.add(2)\r\n        >>> sl\r\n        SortedList([1, 2, 3])\r\n \r\n        :param value: value to add to sorted list\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n \r\n        if _maxes:\r\n            pos = bisect_right(_maxes, value)\r\n \r\n            if pos == len(_maxes):\r\n                pos -= 1\r\n                _lists[pos].append(value)\r\n                _maxes[pos] = value\r\n            else:\r\n                insort(_lists[pos], value)\r\n \r\n            self._expand(pos)\r\n        else:\r\n            _lists.append([value])\r\n            _maxes.append(value)\r\n \r\n        self._len += 1\r\n \r\n \r\n    def _expand(self, pos):\r\n        \"\"\"Split sublists with length greater than double the load-factor.\r\n \r\n        Updates the index when the sublist length is less than double the load\r\n        level. This requires incrementing the nodes in a traversal from the\r\n        leaf node to the root. For an example traversal see\r\n        ``SortedList._loc``.\r\n \r\n        \"\"\"\r\n        _load = self._load\r\n        _lists = self._lists\r\n        _index = self._index\r\n \r\n        if len(_lists[pos]) > (_load << 1):\r\n            _maxes = self._maxes\r\n \r\n            _lists_pos = _lists[pos]\r\n            half = _lists_pos[_load:]\r\n            del _lists_pos[_load:]\r\n            _maxes[pos] = _lists_pos[-1]\r\n \r\n            _lists.insert(pos + 1, half)\r\n            _maxes.insert(pos + 1, half[-1])\r\n \r\n            del _index[:]\r\n        else:\r\n            if _index:\r\n                child = self._offset + pos\r\n                while child:\r\n                    _index[child] += 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] += 1\r\n \r\n \r\n    def update(self, iterable):\r\n        \"\"\"Update sorted list by adding all values from `iterable`.\r\n \r\n        Runtime complexity: `O(k*log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList()\r\n        >>> sl.update([3, 1, 2])\r\n        >>> sl\r\n        SortedList([1, 2, 3])\r\n \r\n        :param iterable: iterable of values to add\r\n \r\n        \"\"\"\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n        values = sorted(iterable)\r\n \r\n        if _maxes:\r\n            if len(values) * 4 >= self._len:\r\n                _lists.append(values)\r\n                values = reduce(iadd, _lists, [])\r\n                values.sort()\r\n                self._clear()\r\n            else:\r\n                _add = self.add\r\n                for val in values:\r\n                    _add(val)\r\n                return\r\n \r\n        _load = self._load\r\n        _lists.extend(values[pos:(pos + _load)]\r\n                      for pos in range(0, len(values), _load))\r\n        _maxes.extend(sublist[-1] for sublist in _lists)\r\n        self._len = len(values)\r\n        del self._index[:]\r\n \r\n    _update = update\r\n \r\n \r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted list.\r\n \r\n        ``sl.__contains__(value)`` <==> ``value in sl``\r\n \r\n        Runtime complexity: `O(log(n))`\r\n \r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> 3 in sl\r\n        True\r\n \r\n        :param value: search for value in sorted list\r\n        :return: true if `value` in sorted list\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return False\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return False\r\n \r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n \r\n        return _lists[pos][idx] == value\r\n \r\n \r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted list if it is a member.\r\n \r\n        If `value` is not a member, do nothing.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> sl.discard(5)\r\n        >>> sl.discard(0)\r\n        >>> sl == [1, 2, 3, 4]\r\n        True\r\n \r\n        :param value: `value` to discard from sorted list\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return\r\n \r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n \r\n        if _lists[pos][idx] == value:\r\n            self._delete(pos, idx)\r\n \r\n \r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\r\n \r\n        If `value` is not a member, raise ValueError.\r\n \r\n        Runtime complexity: `O(log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList([1, 2, 3, 4, 5])\r\n        >>> sl.remove(5)\r\n        >>> sl == [1, 2, 3, 4]\r\n        True\r\n        >>> sl.remove(0)\r\n        Traceback (most recent call last):\r\n          ...\r\n        ValueError: 0 not in list\r\n \r\n        :param value: `value` to remove from sorted list\r\n        :raises ValueError: if `value` is not in sorted list\r\n \r\n        \"\"\"\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n \r\n        _lists = self._lists\r\n        idx = bisect_left(_lists[pos], value)\r\n \r\n        if _lists[pos][idx] == value:\r\n            self._delete(pos, idx)\r\n        else:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n \r\n \r\n    def _delete(self, pos, idx):\r\n        _lists = self._lists\r\n        _maxes = self._maxes\r\n        _index = self._index\r\n \r\n        _lists_pos = _lists[pos]\r\n \r\n        del _lists_pos[idx]\r\n        self._len -= 1\r\n \r\n        len_lists_pos = len(_lists_pos)\r\n \r\n        if len_lists_pos > (self._load >> 1):\r\n            _maxes[pos] = _lists_pos[-1]\r\n \r\n            if _index:\r\n                child = self._offset + pos\r\n                while child > 0:\r\n                    _index[child] -= 1\r\n                    child = (child - 1) >> 1\r\n                _index[0] -= 1\r\n        elif len(_lists) > 1:\r\n            if not pos:\r\n                pos += 1\r\n \r\n            prev = pos - 1\r\n            _lists[prev].extend(_lists[pos])\r\n            _maxes[prev] = _lists[prev][-1]\r\n \r\n            del _lists[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n \r\n            self._expand(prev)\r\n        elif len_lists_pos:\r\n            _maxes[pos] = _lists_pos[-1]\r\n        else:\r\n            del _lists[pos]\r\n            del _maxes[pos]\r\n            del _index[:]\r\n \r\n \r\n    def _loc(self, pos, idx):\r\n        if not pos:\r\n            return idx\r\n \r\n        _index = self._index\r\n \r\n        if not _index:\r\n            self._build_index()\r\n \r\n        total = 0\r\n \r\n        # Increment pos to point in the index to len(self._lists[pos]).\r\n \r\n        pos += self._offset\r\n \r\n        # Iterate until reaching the root of the index tree at pos = 0.\r\n \r\n        while pos:\r\n \r\n            # Right-child nodes are at odd indices. At such indices\r\n            # account the total below the left child node.\r\n \r\n            if not pos & 1:\r\n                total += _index[pos - 1]\r\n \r\n            # Advance pos to the parent node.\r\n \r\n            pos = (pos - 1) >> 1\r\n \r\n        return total + idx\r\n \r\n \r\n    def _pos(self, idx):\r\n        if idx < 0:\r\n            last_len = len(self._lists[-1])\r\n \r\n            if (-idx) <= last_len:\r\n                return len(self._lists) - 1, last_len + idx\r\n \r\n            idx += self._len\r\n \r\n            if idx < 0:\r\n                raise IndexError('list index out of range')\r\n        elif idx >= self._len:\r\n            raise IndexError('list index out of range')\r\n \r\n        if idx < len(self._lists[0]):\r\n            return 0, idx\r\n \r\n        _index = self._index\r\n \r\n        if not _index:\r\n            self._build_index()\r\n \r\n        pos = 0\r\n        child = 1\r\n        len_index = len(_index)\r\n \r\n        while child < len_index:\r\n            index_child = _index[child]\r\n \r\n            if idx < index_child:\r\n                pos = child\r\n            else:\r\n                idx -= index_child\r\n                pos = child + 1\r\n \r\n            child = (pos << 1) + 1\r\n \r\n        return (pos - self._offset, idx)\r\n \r\n \r\n    def _build_index(self):\r\n \r\n        row0 = list(map(len, self._lists))\r\n \r\n        if len(row0) == 1:\r\n            self._index[:] = row0\r\n            self._offset = 0\r\n            return\r\n \r\n        head = iter(row0)\r\n        tail = iter(head)\r\n        row1 = list(starmap(add, zip(head, tail)))\r\n \r\n        if len(row0) & 1:\r\n            row1.append(row0[-1])\r\n \r\n        if len(row1) == 1:\r\n            self._index[:] = row1 + row0\r\n            self._offset = 1\r\n            return\r\n \r\n        size = 2 ** (int(log(len(row1) - 1, 2)) + 1)\r\n        row1.extend(repeat(0, size - len(row1)))\r\n        tree = [row0, row1]\r\n \r\n        while len(tree[-1]) > 1:\r\n            head = iter(tree[-1])\r\n            tail = iter(head)\r\n            row = list(starmap(add, zip(head, tail)))\r\n            tree.append(row)\r\n \r\n        reduce(iadd, reversed(tree), self._index)\r\n        self._offset = size * 2 - 1\r\n \r\n \r\n    def __delitem__(self, index):\r\n        if isinstance(index, slice):\r\n            start, stop, step = index.indices(self._len)\r\n \r\n            if step == 1 and start < stop:\r\n                if start == 0 and stop == self._len:\r\n                    return self._clear()\r\n                elif self._len <= 8 * (stop - start):\r\n                    values = self._getitem(slice(None, start))\r\n                    if stop < self._len:\r\n                        values += self._getitem(slice(stop, None))\r\n                    self._clear()\r\n                    return self._update(values)\r\n \r\n            indices = range(start, stop, step)\r\n \r\n            # Delete items from greatest index to least so\r\n            # that the indices remain valid throughout iteration.\r\n \r\n            if step > 0:\r\n                indices = reversed(indices)\r\n \r\n            _pos, _delete = self._pos, self._delete\r\n \r\n            for index in indices:\r\n                pos, idx = _pos(index)\r\n                _delete(pos, idx)\r\n        else:\r\n            pos, idx = self._pos(index)\r\n            self._delete(pos, idx)\r\n \r\n \r\n    def __getitem__(self, index):\r\n        _lists = self._lists\r\n \r\n        if isinstance(index, slice):\r\n            start, stop, step = index.indices(self._len)\r\n \r\n            if step == 1 and start < stop:\r\n                # Whole slice optimization: start to stop slices the whole\r\n                # sorted list.\r\n \r\n                if start == 0 and stop == self._len:\r\n                    return reduce(iadd, self._lists, [])\r\n \r\n                start_pos, start_idx = self._pos(start)\r\n                start_list = _lists[start_pos]\r\n                stop_idx = start_idx + stop - start\r\n \r\n                # Small slice optimization: start index and stop index are\r\n                # within the start list.\r\n \r\n                if len(start_list) >= stop_idx:\r\n                    return start_list[start_idx:stop_idx]\r\n \r\n                if stop == self._len:\r\n                    stop_pos = len(_lists) - 1\r\n                    stop_idx = len(_lists[stop_pos])\r\n                else:\r\n                    stop_pos, stop_idx = self._pos(stop)\r\n \r\n                prefix = _lists[start_pos][start_idx:]\r\n                middle = _lists[(start_pos + 1):stop_pos]\r\n                result = reduce(iadd, middle, prefix)\r\n                result += _lists[stop_pos][:stop_idx]\r\n \r\n                return result\r\n \r\n            if step == -1 and start > stop:\r\n                result = self._getitem(slice(stop + 1, start + 1))\r\n                result.reverse()\r\n                return result\r\n \r\n            # Return a list because a negative step could\r\n            # reverse the order of the items and this could\r\n            # be the desired behavior.\r\n \r\n            indices = range(start, stop, step)\r\n            return list(self._getitem(index) for index in indices)\r\n        else:\r\n            if self._len:\r\n                if index == 0:\r\n                    return _lists[0][0]\r\n                elif index == -1:\r\n                    return _lists[-1][-1]\r\n            else:\r\n                raise IndexError('list index out of range')\r\n \r\n            if 0 <= index < len(_lists[0]):\r\n                return _lists[0][index]\r\n \r\n            len_last = len(_lists[-1])\r\n \r\n            if -len_last < index < 0:\r\n                return _lists[-1][len_last + index]\r\n \r\n            pos, idx = self._pos(index)\r\n            return _lists[pos][idx]\r\n \r\n    _getitem = __getitem__\r\n \r\n \r\n \r\n \r\n    def __iter__(self):\r\n        return chain.from_iterable(self._lists)\r\n \r\n \r\n    def __reversed__(self):\r\n \r\n        return chain.from_iterable(map(reversed, reversed(self._lists)))\r\n \r\n \r\n    def reverse(self):\r\n \r\n        raise NotImplementedError('use ``reversed(sl)`` instead')\r\n \r\n \r\n    def islice(self, start=None, stop=None, reverse=False):\r\n \r\n        _len = self._len\r\n \r\n        if not _len:\r\n            return iter(())\r\n \r\n        start, stop, _ = slice(start, stop).indices(self._len)\r\n \r\n        if start >= stop:\r\n            return iter(())\r\n \r\n        _pos = self._pos\r\n \r\n        min_pos, min_idx = _pos(start)\r\n \r\n        if stop == _len:\r\n            max_pos = len(self._lists) - 1\r\n            max_idx = len(self._lists[-1])\r\n        else:\r\n            max_pos, max_idx = _pos(stop)\r\n \r\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\r\n \r\n \r\n    def _islice(self, min_pos, min_idx, max_pos, max_idx, reverse):\r\n \r\n        _lists = self._lists\r\n \r\n        if min_pos > max_pos:\r\n            return iter(())\r\n \r\n        if min_pos == max_pos:\r\n            if reverse:\r\n                indices = reversed(range(min_idx, max_idx))\r\n                return map(_lists[min_pos].__getitem__, indices)\r\n \r\n            indices = range(min_idx, max_idx)\r\n            return map(_lists[min_pos].__getitem__, indices)\r\n \r\n        next_pos = min_pos + 1\r\n \r\n        if next_pos == max_pos:\r\n            if reverse:\r\n                min_indices = range(min_idx, len(_lists[min_pos]))\r\n                max_indices = range(max_idx)\r\n                return chain(\r\n                    map(_lists[max_pos].__getitem__, reversed(max_indices)),\r\n                    map(_lists[min_pos].__getitem__, reversed(min_indices)),\r\n                )\r\n \r\n            min_indices = range(min_idx, len(_lists[min_pos]))\r\n            max_indices = range(max_idx)\r\n            return chain(\r\n                map(_lists[min_pos].__getitem__, min_indices),\r\n                map(_lists[max_pos].__getitem__, max_indices),\r\n            )\r\n \r\n        if reverse:\r\n            min_indices = range(min_idx, len(_lists[min_pos]))\r\n            sublist_indices = range(next_pos, max_pos)\r\n            sublists = map(_lists.__getitem__, reversed(sublist_indices))\r\n            max_indices = range(max_idx)\r\n            return chain(\r\n                map(_lists[max_pos].__getitem__, reversed(max_indices)),\r\n                chain.from_iterable(map(reversed, sublists)),\r\n                map(_lists[min_pos].__getitem__, reversed(min_indices)),\r\n            )\r\n \r\n        min_indices = range(min_idx, len(_lists[min_pos]))\r\n        sublist_indices = range(next_pos, max_pos)\r\n        sublists = map(_lists.__getitem__, sublist_indices)\r\n        max_indices = range(max_idx)\r\n        return chain(\r\n            map(_lists[min_pos].__getitem__, min_indices),\r\n            chain.from_iterable(sublists),\r\n            map(_lists[max_pos].__getitem__, max_indices),\r\n        )\r\n \r\n \r\n    def irange(self, minimum=None, maximum=None, inclusive=(True, True),\r\n               reverse=False):\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return iter(())\r\n \r\n        _lists = self._lists\r\n \r\n        # Calculate the minimum (pos, idx) pair. By default this location\r\n        # will be inclusive in our calculation.\r\n \r\n        if minimum is None:\r\n            min_pos = 0\r\n            min_idx = 0\r\n        else:\r\n            if inclusive[0]:\r\n                min_pos = bisect_left(_maxes, minimum)\r\n \r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n \r\n                min_idx = bisect_left(_lists[min_pos], minimum)\r\n            else:\r\n                min_pos = bisect_right(_maxes, minimum)\r\n \r\n                if min_pos == len(_maxes):\r\n                    return iter(())\r\n \r\n                min_idx = bisect_right(_lists[min_pos], minimum)\r\n \r\n        # Calculate the maximum (pos, idx) pair. By default this location\r\n        # will be exclusive in our calculation.\r\n \r\n        if maximum is None:\r\n            max_pos = len(_maxes) - 1\r\n            max_idx = len(_lists[max_pos])\r\n        else:\r\n            if inclusive[1]:\r\n                max_pos = bisect_right(_maxes, maximum)\r\n \r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_lists[max_pos])\r\n                else:\r\n                    max_idx = bisect_right(_lists[max_pos], maximum)\r\n            else:\r\n                max_pos = bisect_left(_maxes, maximum)\r\n \r\n                if max_pos == len(_maxes):\r\n                    max_pos -= 1\r\n                    max_idx = len(_lists[max_pos])\r\n                else:\r\n                    max_idx = bisect_left(_lists[max_pos], maximum)\r\n \r\n        return self._islice(min_pos, min_idx, max_pos, max_idx, reverse)\r\n \r\n \r\n    def __len__(self):\r\n \r\n        return self._len\r\n \r\n \r\n    def bisect_left(self, value):\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return 0\r\n \r\n        pos = bisect_left(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return self._len\r\n \r\n        idx = bisect_left(self._lists[pos], value)\r\n        return self._loc(pos, idx)\r\n \r\n \r\n    def bisect_right(self, value):\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return 0\r\n \r\n        pos = bisect_right(_maxes, value)\r\n \r\n        if pos == len(_maxes):\r\n            return self._len\r\n \r\n        idx = bisect_right(self._lists[pos], value)\r\n        return self._loc(pos, idx)\r\n \r\n    bisect = bisect_right\r\n    _bisect_right = bisect_right\r\n \r\n \r\n    def count(self, value):\r\n        _maxes = self._maxes\r\n \r\n        if not _maxes:\r\n            return 0\r\n \r\n        pos_left = bisect_left(_maxes, value)\r\n \r\n        if pos_left == len(_maxes):\r\n            return 0\r\n \r\n        _lists = self._lists\r\n        idx_left = bisect_left(_lists[pos_left], value)\r\n        pos_right = bisect_right(_maxes, value)\r\n \r\n        if pos_right == len(_maxes):\r\n            return self._len - self._loc(pos_left, idx_left)\r\n \r\n        idx_right = bisect_right(_lists[pos_right], value)\r\n \r\n        if pos_left == pos_right:\r\n            return idx_right - idx_left\r\n \r\n        right = self._loc(pos_right, idx_right)\r\n        left = self._loc(pos_left, idx_left)\r\n        return right - left\r\n \r\n \r\n    def copy(self):\r\n        return self.__class__(self)\r\n \r\n    __copy__ = copy\r\n \r\n \r\n    def append(self, value):\r\n \r\n        raise NotImplementedError('use ``sl.add(value)`` instead')\r\n \r\n \r\n    def extend(self, values):\r\n \r\n        raise NotImplementedError('use ``sl.update(values)`` instead')\r\n \r\n \r\n    def insert(self, index, value):\r\n \r\n        raise NotImplementedError('use ``sl.add(value)`` instead')\r\n \r\n \r\n    def pop(self, index=-1):\r\n \r\n        if not self._len:\r\n            raise IndexError('pop index out of range')\r\n \r\n        _lists = self._lists\r\n \r\n        if index == 0:\r\n            val = _lists[0][0]\r\n            self._delete(0, 0)\r\n            return val\r\n \r\n        if index == -1:\r\n            pos = len(_lists) - 1\r\n            loc = len(_lists[pos]) - 1\r\n            val = _lists[pos][loc]\r\n            self._delete(pos, loc)\r\n            return val\r\n \r\n        if 0 <= index < len(_lists[0]):\r\n            val = _lists[0][index]\r\n            self._delete(0, index)\r\n            return val\r\n \r\n        len_last = len(_lists[-1])\r\n \r\n        if -len_last < index < 0:\r\n            pos = len(_lists) - 1\r\n            loc = len_last + index\r\n            val = _lists[pos][loc]\r\n            self._delete(pos, loc)\r\n            return val\r\n \r\n        pos, idx = self._pos(index)\r\n        val = _lists[pos][idx]\r\n        self._delete(pos, idx)\r\n        return val\r\n \r\n \r\n    def index(self, value, start=None, stop=None):\r\n \r\n        _len = self._len\r\n \r\n        if not _len:\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n \r\n        if start is None:\r\n            start = 0\r\n        if start < 0:\r\n            start += _len\r\n        if start < 0:\r\n            start = 0\r\n \r\n        if stop is None:\r\n            stop = _len\r\n        if stop < 0:\r\n            stop += _len\r\n        if stop > _len:\r\n            stop = _len\r\n \r\n        if stop <= start:\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n \r\n        _maxes = self._maxes\r\n        pos_left = bisect_left(_maxes, value)\r\n \r\n        if pos_left == len(_maxes):\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n \r\n        _lists = self._lists\r\n        idx_left = bisect_left(_lists[pos_left], value)\r\n \r\n        if _lists[pos_left][idx_left] != value:\r\n            raise ValueError('{0!r} is not in list'.format(value))\r\n \r\n        stop -= 1\r\n        left = self._loc(pos_left, idx_left)\r\n \r\n        if start <= left:\r\n            if left <= stop:\r\n                return left\r\n        else:\r\n            right = self._bisect_right(value) - 1\r\n \r\n            if start <= right:\r\n                return start\r\n \r\n        raise ValueError('{0!r} is not in list'.format(value))\r\n \r\n \r\n    def __add__(self, other):\r\n \r\n        values = reduce(iadd, self._lists, [])\r\n        values.extend(other)\r\n        return self.__class__(values)\r\n \r\n    __radd__ = __add__\r\n \r\n \r\n    def __iadd__(self, other):\r\n        \"\"\"Update sorted list with values from `other`.\r\n \r\n        ``sl.__iadd__(other)`` <==> ``sl += other``\r\n \r\n        Values in `other` do not need to be in sorted order.\r\n \r\n        Runtime complexity: `O(k*log(n))` -- approximate.\r\n \r\n        >>> sl = SortedList('bat')\r\n        >>> sl += 'cat'\r\n        >>> sl\r\n        SortedList(['a', 'a', 'b', 'c', 't', 't'])\r\n \r\n        :param other: other iterable\r\n        :return: existing sorted list\r\n \r\n        \"\"\"\r\n        self._update(other)\r\n        return self\r\n \r\n \r\n    def __mul__(self, num):\r\n        \"\"\"Return new sorted list with `num` shallow copies of values.\r\n \r\n        ``sl.__mul__(num)`` <==> ``sl * num``\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl = SortedList('abc')\r\n        >>> sl * 3\r\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\r\n \r\n        :param int num: count of shallow copies\r\n        :return: new sorted list\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, []) * num\r\n        return self.__class__(values)\r\n \r\n    __rmul__ = __mul__\r\n \r\n \r\n    def __imul__(self, num):\r\n        \"\"\"Update the sorted list with `num` shallow copies of values.\r\n \r\n        ``sl.__imul__(num)`` <==> ``sl *= num``\r\n \r\n        Runtime complexity: `O(n*log(n))`\r\n \r\n        >>> sl = SortedList('abc')\r\n        >>> sl *= 3\r\n        >>> sl\r\n        SortedList(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c'])\r\n \r\n        :param int num: count of shallow copies\r\n        :return: existing sorted list\r\n \r\n        \"\"\"\r\n        values = reduce(iadd, self._lists, []) * num\r\n        self._clear()\r\n        self._update(values)\r\n        return self\r\n    def __setitem__(self, index, value):\r\n        \"\"\"Raise not-implemented error.\r\n \r\n        ``sl.__setitem__(index, value)`` <==> ``sl[index] = value``\r\n \r\n        :raises NotImplementedError: use ``del sl[index]`` and\r\n            ``sl.add(value)`` instead\r\n \r\n        \"\"\"\r\n        message = 'use ``del sl[index]`` and ``sl.add(value)`` instead'\r\n        raise NotImplementedError(message)\r\n \r\n    def __make_cmp(seq_op, symbol, doc):\r\n        \"Make comparator method.\"\r\n        def comparer(self, other):\r\n            \"Compare method for sorted list and sequence.\"\r\n            if not isinstance(other, Sequence):\r\n                return NotImplemented\r\n \r\n            self_len = self._len\r\n            len_other = len(other)\r\n \r\n            if self_len != len_other:\r\n                if seq_op is eq:\r\n                    return False\r\n                if seq_op is ne:\r\n                    return True\r\n \r\n            for alpha, beta in zip(self, other):\r\n                if alpha != beta:\r\n                    return seq_op(alpha, beta)\r\n \r\n            return seq_op(self_len, len_other)\r\n \r\n        seq_op_name = seq_op.__name__\r\n        comparer.__name__ = '__{0}__'.format(seq_op_name)\r\n        doc_str = \"\"\"Return true if and only if sorted list is {0} `other`.\r\n \r\n        ``sl.__{1}__(other)`` <==> ``sl {2} other``\r\n \r\n        Comparisons use lexicographical order as with sequences.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        :param other: `other` sequence\r\n        :return: true if sorted list is {0} `other`\r\n \r\n        \"\"\"\r\n        comparer.__doc__ = dedent(doc_str.format(doc, seq_op_name, symbol))\r\n        return comparer\r\n \r\n \r\n    __eq__ = __make_cmp(eq, '==', 'equal to')\r\n    __ne__ = __make_cmp(ne, '!=', 'not equal to')\r\n    __lt__ = __make_cmp(lt, '<', 'less than')\r\n    __gt__ = __make_cmp(gt, '>', 'greater than')\r\n    __le__ = __make_cmp(le, '<=', 'less than or equal to')\r\n    __ge__ = __make_cmp(ge, '>=', 'greater than or equal to')\r\n    __make_cmp = staticmethod(__make_cmp)\r\n \r\n \r\n    def __reduce__(self):\r\n        values = reduce(iadd, self._lists, [])\r\n        return (type(self), (values,))\r\n \r\n \r\n    @recursive_repr()\r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted list.\r\n \r\n        ``sl.__repr__()`` <==> ``repr(sl)``\r\n \r\n        :return: string representation\r\n \r\n        \"\"\"\r\n        return '{0}({1!r})'.format(type(self).__name__, list(self))\r\n \r\n \r\n    def _check(self):\r\n        \"\"\"Check invariants of sorted list.\r\n \r\n        Runtime complexity: `O(n)`\r\n \r\n        \"\"\"\r\n        try:\r\n            assert self._load >= 4\r\n            assert len(self._maxes) == len(self._lists)\r\n            assert self._len == sum(len(sublist) for sublist in self._lists)\r\n \r\n            # Check all sublists are sorted.\r\n \r\n            for sublist in self._lists:\r\n                for pos in range(1, len(sublist)):\r\n                    assert sublist[pos - 1] <= sublist[pos]\r\n \r\n            # Check beginning/end of sublists are sorted.\r\n \r\n            for pos in range(1, len(self._lists)):\r\n                assert self._lists[pos - 1][-1] <= self._lists[pos][0]\r\n \r\n            # Check _maxes index is the last value of each sublist.\r\n \r\n            for pos in range(len(self._maxes)):\r\n                assert self._maxes[pos] == self._lists[pos][-1]\r\n \r\n            # Check sublist lengths are less than double load-factor.\r\n \r\n            double = self._load << 1\r\n            assert all(len(sublist) <= double for sublist in self._lists)\r\n \r\n            # Check sublist lengths are greater than half load-factor for all\r\n            # but the last sublist.\r\n \r\n            half = self._load >> 1\r\n            for pos in range(0, len(self._lists) - 1):\r\n                assert len(self._lists[pos]) >= half\r\n \r\n            if self._index:\r\n                assert self._len == self._index[0]\r\n                assert len(self._index) == self._offset + len(self._lists)\r\n \r\n                # Check index leaf nodes equal length of sublists.\r\n \r\n                for pos in range(len(self._lists)):\r\n                    leaf = self._index[self._offset + pos]\r\n                    assert leaf == len(self._lists[pos])\r\n \r\n                # Check index branch nodes are the sum of their children.\r\n \r\n                for pos in range(self._offset):\r\n                    child = (pos << 1) + 1\r\n                    if child >= len(self._index):\r\n                        assert self._index[pos] == 0\r\n                    elif child + 1 == len(self._index):\r\n                        assert self._index[pos] == self._index[child]\r\n                    else:\r\n                        child_sum = self._index[child] + self._index[child + 1]\r\n                        assert child_sum == self._index[pos]\r\n        except:\r\n            traceback.print_exc(file=sys.stdout)\r\n            print('len', self._len)\r\n            print('load', self._load)\r\n            print('offset', self._offset)\r\n            print('len_index', len(self._index))\r\n            print('index', self._index)\r\n            print('len_maxes', len(self._maxes))\r\n            print('maxes', self._maxes)\r\n            print('len_lists', len(self._lists))\r\n            print('lists', self._lists)\r\n            raise\r\n\r\n\r\ndef solve() -> None:\r\n    n = int(input())\r\n    pairs = sorted((list(map(int, input().split())) for _ in range(n)), key=lambda x: x[1])\r\n    res = 0\r\n    starts = SortedList()\r\n    for a, _ in pairs:\r\n        res += len(starts) - starts.bisect_left(a)\r\n        starts.add(a)\r\n    print(res)\r\n\r\n\r\ndef main() -> None:\r\n    t = int(input())\r\n    for _ in range(t):\r\n        solve()\r\n\r\n\r\nmain()\r\n",
        "rejectedCode": "import sys, os\r\nfrom io import BytesIO, IOBase\r\nfrom sortedcontainers import SortedList\r\n\r\ndef solve() -> None:\r\n    n = int(input())\r\n    pairs = sorted(map(int, input().split())) for _ in range(n), key=lambda x: x[1])\r\n    res = 0\r\n    starts = SortedList()\r\n    for a, _ in pairs:\r\n        res += len(starts) - starts.bisect_left(a)\r\n        starts.add(a)\r\n    print(res)\r\n\r\n\r\ndef main() -> None:\r\n    t = int(input())\r\n    for _ in range(t):\r\n        solve()\r\n\r\n\r\nmain()\r\n\r\n\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241348486",
            "author": "kapranav21",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705101000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241348435",
            "author": "kapranav21",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705100940
        },
        "acceptedCode": "# Function to find the odd one out in each test case\ndef find_odd_one_out(a, b, c):\n    if a == b:\n        return c\n    elif a == c:\n        return b\n    else:\n        return a\n\n# Number of test cases\nt = int(input())\n\n# Iterate through each test case\nfor _ in range(t):\n    # Input for each test case\n    a, b, c = map(int, input().split())\n\n    # Find and print the odd one out\n    result = find_odd_one_out(a, b, c)\n    print(result)\n",
        "rejectedCode": "def odd_one(a, b, c):\n    if a == b:\n        print(c) \n    if b == c:\n        print(a)\n    print(b)\n    \n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10], but output contains 0 elements\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241338942",
            "author": "hiro1729",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 390,
            "memory": 30900,
            "submissionTime": 1705084860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241338914",
            "author": "hiro1729",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 1,
            "runTime": 1000,
            "memory": 212500,
            "submissionTime": 1705084800
        },
        "acceptedCode": "from math import isqrt\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = sum(a)\r\n    print(\"YES\" if isqrt(s) ** 2 == s else \"NO\")",
        "rejectedCode": "sqrs = set([i * i for i in range(14300000)])\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    print(\"YES\" if s in sqrs else \"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241333102",
            "author": "Taqaddusshafi",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705075140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241332992",
            "author": "Taqaddusshafi",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705075020
        },
        "acceptedCode": "t = int(input())\r\n\r\nwhile t > 0:\r\n    a, b, c = input().split()\r\n\r\n\r\n    a = int(a)\r\n    b = int(b)\r\n    c = int(c)\r\n\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n\r\n    t -= 1\r\n",
        "rejectedCode": "t = int(input())\r\n\r\nwhile t > 0:\r\n    a = input()\r\n    b = input()\r\n    c = input()\r\n\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n\r\n    t -= 1\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1 2 2\r\n7 8 8\r\n2 8 2\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241332456",
            "author": "0901antony",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 170,
            "memory": 26200,
            "submissionTime": 1705074420
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241332380",
            "author": "0901antony",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 93,
            "memory": 100,
            "submissionTime": 1705074360
        },
        "acceptedCode": "n = int(input())\r\n\r\ni = 0\r\nwhile i<n:\r\n    m = int(input())\r\n    k = sum(list(map(int, input().split())))\r\n    if (k ** 0.5) % 1 == 0: print(\"YES\")\r\n    else: print(\"NO\")\r\n    i+=1",
        "rejectedCode": "n = int(input())\r\ni = 0\r\nwhile i<n:\r\n    k = sum(list(map(int, input().split())))\r\n    if (k ** 0.5) % 1 == 0: print(\"YES\")\r\n    else: print(\"NO\")\r\n    i+=1",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [8th token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241296562",
            "author": "souravkp2005",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 140,
            "memory": 1000,
            "submissionTime": 1705053420
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241235254",
            "author": "souravkp2005",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1705018800
        },
        "acceptedCode": "v = 'ae'\r\nc = 'bcd'\r\nfor j in range(int(input())):\r\n    x=input()\r\n    word=input()\r\n    opt=''\r\n    i=0\r\n    while (i<len(word)-3):\r\n        if( word[i] in c and word[i+1]in v and word[i+2]in c and word[i+3]in c):\r\n            opt+=word[i]+word[i+1]+word[i+2]+'.'\r\n            i+=2\r\n        elif( word[i] in c and word[i+1]in v and word[i+2]in c and word[i+3]in v):\r\n            opt+=word[i]+word[i+1]+'.'\r\n            i+=2\r\n        \r\n        else:\r\n            i+=1\r\n    if(len(word)<4):\r\n        print(word)\r\n    else:\r\n        print(opt+word[len(word)-(len(word)+opt.count(\".\")-len(opt)):])",
        "rejectedCode": "v = 'ae'\r\nc = 'bcd'\r\nfor j in range(int(input())):\r\n    x=input()\r\n    word=input()\r\n    opt=''\r\n    i=0\r\n    while (i<len(word)-2):\r\n        if( word[i] in c and word[i+1]in v and word[i+2]in c and word[i+3]in c):\r\n            opt+=word[i]+word[i+1]+word[i+2]+'.'\r\n            i+=2\r\n        elif( word[i] in c and word[i+1]in v and word[i+2]in c and word[i+3]in v):\r\n            opt+=word[i]+word[i+1]+'.'\r\n            i+=2\r\n        \r\n        else:\r\n            i+=1\r\n    print(opt+word[len(word)-2:])",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241289820",
            "author": "nightprogrammern1",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 300,
            "submissionTime": 1705050180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241260485",
            "author": "nightprogrammern1",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1705034160
        },
        "acceptedCode": "from collections import defaultdict\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    arr = list(map(int, input().split()))\r\n    d = defaultdict(int)\r\n    for i in range(len(arr)):\r\n        d[arr[i]] += 1\r\n    for key in d.keys():\r\n        if d[key] == 1:\r\n            print(key)",
        "rejectedCode": "t = int(input())\n\nfor _ in range(t):\n\tfirst = input()\n\tsecond = input()\n\tthird = input()\n\t\n\tfirst_sum = 0\n\tsecond_sum = 0\n\tthird_sum = 0\n\t\n\ttotal_sum = ord('A') + ord('B') + ord('C')\n\t\n\tfor i in range(3):\n\t\tif first[i] in 'ABC':\n\t\t\tfirst_sum += ord(first[i])\n\t\tif second[i] in 'ABC':\n\t\t\tsecond_sum += ord(second[i])\n\t\tif third[i] in 'ABC':\n\t\t    third_sum += ord(third[i])\n\t\n\tif first_sum != total_sum:\n\t\tprint(chr(total_sum - first_sum))\n\tif second_sum != total_sum:\n\t\tprint(chr(total_sum - second_sum))\n\tif third_sum != total_sum:\n\t\tprint(ord(total_sim - second_sum))",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "241271945",
            "author": "Hendawy44165",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 343,
            "memory": 600,
            "submissionTime": 1705040820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "241271609",
            "author": "Hendawy44165",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 8,
            "runTime": 4000,
            "memory": 72500,
            "submissionTime": 1705040640
        },
        "acceptedCode": "from heapq import heappush, heappop\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n, m = map(int, input().split())\r\n        dct = [[] for _ in range(n)]\r\n        for _ in range(m):\r\n            u, v, w = map(int, input().split())\r\n            dct[u - 1].append((v - 1, w))\r\n            dct[v - 1].append((u - 1, w))\r\n        s = list(map(int, input().split()))\r\n        h = [(0, 0, s[0])]\r\n        mp = {}\r\n        while h:\r\n            t, p, c = heappop(h)\r\n            if p == n - 1:\r\n                print(t)\r\n                break\r\n            if c > s[p]:\r\n                c = s[p]\r\n            if p in mp and mp[p] <= c:\r\n                continue\r\n            else:\r\n                mp[p] = c\r\n            for v, w in dct[p]:\r\n                heappush(h, (t + w * c, v, c))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "from heapq import heappush, heappop\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n, m = map(int, input().split())\r\n        dct = [[] for _ in range(n)]\r\n        for _ in range(m):\r\n            u, v, w = map(int, input().split())\r\n            dct[u - 1].append((v - 1, w))\r\n            dct[v - 1].append((u - 1, w))\r\n        s = list(map(int, input().split()))\r\n        h = [(0, 0, s[0])]\r\n        mp = {}\r\n        while h:\r\n            t, p, c = heappop(h)\r\n            if p == n - 1:\r\n                print(t)\r\n                break\r\n            if c > s[p]:\r\n                c = s[p]\r\n            if p in mp and mp[p] == c:\r\n                continue\r\n            else:\r\n                mp[p] = c\r\n            for v, w in dct[p]:\r\n                heappush(h, (t + w * c, v, c))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "failedTestCase": {
            "input": "25\r\n12 12\r\n1 9 77025\r\n11 7 74037\r\n2 12 33177\r\n12 5 2744\r\n5 8 38755\r\n7 1 21779\r\n6 11 14397\r\n4 8 76458\r\n3 10 28552\r\n3 6 384\r\n4 10 16985\r\n6 1 87814\r\n474 835 532 843 455 247 34 962 749 265 266 394\r\n4 3\r\n1 4 50371\r\n4 3 59316\r\n2 1 27348\r\n869 589 781 49\r\n17 16\r\n3 9 21353\r\n13 12 36056\r\n11 9 6870\r\n17 16 82012\r\n15 13 59388\r\n6 1 92033\r\n10 17 18077\r\n15 7 74833\r\n6 8 90201\r\n10 5 1373\r\n14 2 88020\r\n8 2 1795\r\n4 7 566\r\n12 5 84718\r\n3 7 80466\r\n1 11 70243\r\n666 473 233 569 585 759 63 991 364 613 181 847 310 980 899 881 368\r\n60 ...",
            "output": "18901854\r\n43772399\r\n83744582\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 22,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241271741",
            "author": "anuj_m",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705040700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241271510",
            "author": "anuj_m",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1705040580
        },
        "acceptedCode": "n = int(input())\r\nL = []\r\nfor i in range(n):\r\n    matrix = []\r\n    for i in range(3):\r\n        p = input()\r\n        matrix.append(p)\r\n    L.append(matrix)\r\ndef find(a):\r\n    for j in range(3):\r\n        if (\"?\" in a[j]) :\r\n            for i  in \"ABC\" :\r\n                if i in a[j] :\r\n                    continue\r\n                else :\r\n                    print(i)\r\nfor i in range(n):\r\n    find(L[i])\r\n",
        "rejectedCode": "'''n = int(input())\r\nA = []\r\nB = []\r\nC = []\r\nfor i in range(n):\r\n    a,b,c = map(int , input().split())\r\n    A.append(a)\r\n    B.append(b)\r\n    C.append(c)\r\nfor p in range(n):\r\n    if A[p] == B[p] :\r\n        print(C[p])\r\n    elif A[p] == C[p] :\r\n        print(B[p])\r\n    elif B[p] == C[p] :\r\n        print(A[p])\r\n'''\r\nn = int(input())\r\nq = \"\"\r\ns = \"ABC\"\r\nL = []\r\nfor i in range(n):\r\n    matrix = []\r\n    for i in range(3):\r\n        p = input()\r\n        matrix.append(p)\r\n    L.append(matrix)\r\nprint(L)\r\n\r\ndef find(a):\r\n    for j in range(3):\r\n        if (\"?\" in a[j]) :\r\n            for i  in \"ABC\" :\r\n                if i in a[j] :\r\n                    continue\r\n                else :\r\n                    print(i)\r\nfor i in range(n):\r\n    find(L[i])\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "[['ABC', 'C?B', 'BCA'], ['BCA', 'CA?', 'ABC'], ['?AB', 'BCA', 'ABC']]\r\nA\r\nB\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: '[['ABC','\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241268299",
            "author": "Remi380",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 342,
            "memory": 23700,
            "submissionTime": 1705038660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241268196",
            "author": "Remi380",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 61,
            "memory": 3100,
            "submissionTime": 1705038600
        },
        "acceptedCode": "\r\n\r\nt = int(input())\r\n\r\nfor toto in range(t) :\r\n    n = int(input())\r\n    line = input().split(\" \")\r\n    no_flag = True\r\n    total = 0\r\n    my_dict = [0]\r\n    for i in range(n):\r\n        num = int(line[i])\r\n        if (i%2 == 0):\r\n            total += num\r\n        else :\r\n            total -= num\r\n        my_dict.append(total)\r\n    my_dict.sort()\r\n    for i in range(n):\r\n        if my_dict[i] == my_dict[i+1]:\r\n            print(\"Yes\")\r\n            no_flag = False\r\n            break\r\n    if no_flag : \r\n        print(\"nO\")",
        "rejectedCode": "\r\n\r\nt = int(input())\r\n\r\nfor toto in range(t) :\r\n    n = int(input())\r\n    line = input().split(\" \")\r\n    no_flag = True\r\n    total = 0\r\n    my_dict [0]\r\n    for i in range(n):\r\n        num = int(line[i])\r\n        if (i%2 == 0):\r\n            total += num\r\n        else :\r\n            total -= num\r\n        my_dict.append(total)\r\n    my_dict.sort()\r\n    for i in range(n):\r\n        if my_dict[i] == my_dict[i+1]:\r\n            print(\"Yes\")\r\n            no_flag = True\r\n            break\r\n    if no_flag : \r\n        print(\"nO\")",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241234885",
            "author": "minm",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 20700,
            "submissionTime": 1705018500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239894435",
            "author": "minm",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704100920
        },
        "acceptedCode": "gs = {'a', 'e'}\r\n\r\ndef check(s):\r\n    res = []\r\n    j = len(s) - 1\r\n    while j >= 0:\r\n        if s[j] in gs:\r\n            res.append(s[j])\r\n            res.append(s[j-1])\r\n            res.append('.')\r\n            j -= 2\r\n        else:\r\n            res.append(s[j])\r\n            res.append(s[j-1])\r\n            res.append(s[j-2])\r\n            res.append('.')\r\n            j -= 3\r\n    del res[-1]\r\n    return ''.join(res[::-1])       \r\n        \r\n\r\nfor _ in range(int(input())):\r\n    input()\r\n    print(check(input()))",
        "rejectedCode": "# https://codeforces.com/contest/1915/problem/B\r\n\r\nfor _ in range(int(input())):\r\n    for _ in range(3):\r\n        s = {'A', 'B', 'C', '?'}\r\n        w = input()\r\n        for item in w:\r\n            s.remove(item)\r\n        if '?' not in s:\r\n            print(s.pop())\r\n            break",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241242743",
            "author": "Umeke-1",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 30000,
            "submissionTime": 1705023840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241160551",
            "author": "Umeke-1",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704957600
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a = int(input())\r\n    b = list(map(int,input().split()))\r\n    s = 0\r\n    for i in range(a):\r\n        s+=b[i]\r\n        \r\n    if (int(s**0.5))**2 == (s**0.5)**2:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "for i in range(int(input())):\r\n    a = input()\r\n    b =input()\r\n    c = input()\r\n    r= [0, 0, 0]\r\n    res=\"ABC\"\r\n    t=0\r\n    for i in range(3):\r\n        if a[i] ==\"A\":\r\n            r[0]+=1\r\n        elif a[i] ==\"B\":\r\n            r[1]+=1\r\n        elif a[i] ==\"C\":\r\n            r[2]+=1\r\n        else:\r\n            t=1\r\n    if t==1:\r\n        print(res[r.index(0)])",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "C\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241236618",
            "author": "kolyalegenda",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 25400,
            "submissionTime": 1705019880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241236539",
            "author": "kolyalegenda",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1705019820
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s = list(input())\r\n    for i in range(2, n):\r\n        if s[i] in \"ae\":\r\n            s[i - 1] = \".\" + s[i-1]\r\n    print(*s,sep='')\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s = list(input())\r\n    for i in range(2, n):\r\n        if s[i] in \"ae\":\r\n            s[i - 1] = \".\" + s[i-1]\r\nprint(*s,sep='')\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "da.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'da.bab.ba.ba.bab.bab.ba.bab.ba'\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241204610",
            "author": "DarkNight47Rises",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 9600,
            "submissionTime": 1704979080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241204135",
            "author": "DarkNight47Rises",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1600,
            "submissionTime": 1704978780
        },
        "acceptedCode": "cases = int(input())\r\nfor i in range(cases):\r\n    sze = int(input())\r\n    s = input()\r\n    startIndx = sze - 1\r\n    ans = []\r\n    #output = ''\r\n    while startIndx >= 0:\r\n        first = s[startIndx]\r\n        second = s[startIndx - 1] if startIndx - 1 >= 0 else ''\r\n        third = s[startIndx - 2] if startIndx - 2 >= 0 else ''\r\n        if(first == 'a' or first == 'e'):\r\n            temp = second + first\r\n            ans.append(temp)\r\n            #output = temp + '.' + output if output else temp\r\n            startIndx -= 2\r\n        else:\r\n            temp = third + second + first\r\n            ans.append(temp)\r\n            #output = temp + '.' + output if output else temp\r\n            startIndx -= 3\r\n    print('.'.join(reversed(ans)))",
        "rejectedCode": "cases = int(input())\r\nfor i in range(cases):\r\n    sze = int(input())\r\n    s = input()\r\n    startIndx = sze - 1\r\n    ans = []\r\n    output = ''\r\n    while startIndx >= 0:\r\n        first = s[startIndx]\r\n        second = s[startIndx - 1] if startIndx - 1 >= 0 else ''\r\n        third = s[startIndx - 2] if startIndx - 2 >= 0 else ''\r\n        if(first == 'a' or first == 'e'):\r\n            temp = second + first\r\n            #ans.append(temp)\r\n            output = temp + '.' + output if output else temp\r\n            startIndx -= 2\r\n        else:\r\n            temp = third + second + first\r\n            #ans.append(temp)\r\n            output = temp + '.' + output if output else temp\r\n            startIndx -= 3\r\n    print(output)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "be.de.ba.ca.cad.ca.bab.cab.de.dac.ced.da.da.ceb.ba.ca.ca.ced.ba.ca.ce.ce.ce.da.ca.be.da.bad.ba.da.be.ceb.da.bab.ba.ba.ca.ca.ceb.ba.ba.bec.be.ba.bed.cac.be.ca.de.ded.de.beb.ba.dec.be.ba.dab.da.de.dad.ce.be.be.dab.cad.ce.ca.be.ba.ba.ba.de.da.ba.be.cab.de.de.de.ca.ca.ca.ca.bab.da.ce.ca.be.ca.dac.da.dad.cec.ce.ca.ca.ba.ca.dad.de.de.ce.ba.dec.ced.ba.bac.ce.ded.ce.de.deb.ba.cad.ce.ca.ca.de.be.da.ca.bed.deb.ba.ca.be.ce.be.de.be.ba.ba.ce.dad.bed.bac.ca.ba.be.dac.ca.ca.ca.bed.be.be.ce.da.dad.deb.bac.dac.da.ba.ce.de...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241204334",
            "author": "SpitsynAK",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 25800,
            "submissionTime": 1704978900
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241203192",
            "author": "SpitsynAK",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704978300
        },
        "acceptedCode": "for i in range(int(input())):\r\n    q, e = int(input()), sum([int(i) for i in input().split()])\r\n    print('YES' if e**(0.5)==int(e**(0.5)) else 'NO')",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    a, b, c = input(), input(), input()\r\n    p = a+b+c\r\n    aq, bq, cq = p.count('A'), p.count('B'), p.count('C')\r\n    if aq!=3:\r\n        print('A')\r\n    elif bq!=3:\r\n        print('B')\r\n    else:\r\n        print('C')",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "A\r\nA\r\nA\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241192055",
            "author": "Navya005",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 1700,
            "submissionTime": 1704972960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241191834",
            "author": "Navya005",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704972900
        },
        "acceptedCode": "S_R=int(input())\r\nG_N={'ba','be','ca','ce','da','de'}\r\nfor i in range(S_R):\r\n\tM_N=int(input())\r\n\tF=input()\r\n\t_RES=''\r\n\tfor j in range(len(F)):\r\n\t\tif F[j:j+2] in G_N:\r\n\t\t\t_RES+=\".\"\r\n\t\t_RES+=F[j]\r\n\tprint(_RES[1::])",
        "rejectedCode": "S_R=int(input())\r\nG_N={'ba','be','ca','ce','da','de'}\r\nfor i in range(S_R):\r\n\tM_N=int(input())\r\n\tF=input()\r\n\tans=''\r\n\tfor j in range(len(F)):\r\n\t\tif F[j:j+2] in G_N:\r\n\t\t\t_RES+=\".\"\r\n\t\t_RES+=F[j]\r\n\tprint(_RES[1::])",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241191662",
            "author": "KuchuGopi",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 28900,
            "submissionTime": 1704972840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241191542",
            "author": "KuchuGopi",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33200,
            "submissionTime": 1704972780
        },
        "acceptedCode": "def solve():\r\n    n = int(input())\r\n    vec = list(map(int, input().split()))\r\n    seen_sums = set()\r\n    sum_val = 0\r\n    ans = 0\r\n    seen_sums.add(0)\r\n    \r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            sum_val += vec[i]\r\n        else:\r\n            sum_val -= vec[i]\r\n        \r\n        if sum_val in seen_sums:\r\n            ans = 1\r\n        else:\r\n            seen_sums.add(sum_val)\r\n    \r\n    if ans:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    for _ in range(t):\r\n        solve()\r\n",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    vec = list(map(int, input().split()))\r\n    mp ={}\r\n    sum_val = 0\r\n    ans = 0\r\n    mp[0] = 1\r\n    \r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            sum_val += vec[i]\r\n        else:\r\n            sum_val -= vec[i]\r\n        \r\n        if sum_val in mp:\r\n            ans = 1\r\n        else:\r\n            mp[sum_val] = 1\r\n    \r\n    if ans:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    for _ in range(t):\r\n        solve()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241181222",
            "author": "Profess0r10",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 8400,
            "submissionTime": 1704967860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241177956",
            "author": "Profess0r10",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 10800,
            "submissionTime": 1704966300
        },
        "acceptedCode": "def solve():\r\n    n = int(input())\r\n    word = input().strip()\r\n    syllables = []\r\n\r\n    i = n - 1\r\n    while i >= 0:\r\n        if word[i] == 'a' or word[i] == 'e':\r\n            x = 2\r\n        else:\r\n            x = 3\r\n\r\n        syllables.append(word[i - x + 1:i + 1])\r\n        i -= x\r\n\r\n    syllable_str = '.'.join(reversed(syllables))\r\n    print(syllable_str)\r\n\r\nif __name__ == \"__main__\":\r\n    tt = int(input())\r\n    for _ in range(tt):\r\n        solve()\r\n",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    word = input().strip()\r\n    syllables = []\r\n\r\n    while word:\r\n        if word[-1] == 'a' or word[-1] == 'e':\r\n            x = 2\r\n        else:\r\n            x = 3\r\n\r\n        syllables.append(word[-x:])\r\n        word = word[:-x]\r\n\r\n    syllable_str = '.'.join(reversed(syllables))\r\n    print(syllable_str)\r\n\r\nif __name__ == \"__main__\":\r\n    tt = int(input())\r\n    for _ in range(tt):\r\n        solve()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "241176953",
            "author": "EndlessVitality",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 2261,
            "memory": 46500,
            "submissionTime": 1704965820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "241164682",
            "author": "EndlessVitality",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 34,
            "runTime": 4000,
            "memory": 40900,
            "submissionTime": 1704959940
        },
        "acceptedCode": "import heapq\r\nimport sys\r\nfrom math import inf\r\ninput=lambda:sys.stdin.readline().strip()\r\nt=int(input())\r\nfor i in range(t):\r\n    n,m=list(map(int,input().split()))\r\n    g=[[] for _ in range(n)]\r\n    for i in range(m):\r\n        u,v,w=list(map(int,input().split()))\r\n        u=u-1\r\n        v=v-1\r\n        g[u].append((v,w))\r\n        g[v].append((u,w))\r\n    s=list(map(int,input().split()))\r\n    dis=[[inf]*1001 for _ in range(n)]\r\n    vis=[[False]*1001 for _ in range(n)]\r\n    dis[0][s[0]]=0\r\n    q=[(0,0,s[0])]\r\n    while q:\r\n        _,u,k=heapq.heappop(q)\r\n        if vis[u][k] or dis[u][k]==inf:continue\r\n        vis[u][k]=True\r\n        for (v,w) in g[u]:\r\n            c=min(s[v],k)\r\n            if dis[v][c] > dis[u][k] + w * k:\r\n                dis[v][c] = dis[u][k] + w * k\r\n                heapq.heappush(q, (dis[v][c], v, c))\r\n    ans=inf\r\n    for k in range(1,1001):\r\n        ans=min(ans,dis[n-1][k])\r\n    print(ans)",
        "rejectedCode": "import heapq\r\nfrom math import inf\r\nt=int(input())\r\nfor i in range(t):\r\n    n,m=list(map(int,input().split()))\r\n    g=[[inf]*n for _ in range(n)]\r\n    for i in range(m):\r\n        u,v,w=list(map(int,input().split()))\r\n        u=u-1\r\n        v=v-1\r\n        g[u][v]=min(w,g[u][v])\r\n        g[v][u]=min(w,g[v][u])\r\n    s=list(map(int,input().split()))\r\n    dis=[[inf]*1001 for _ in range(n)]\r\n    vis=[[False]*1001 for _ in range(n)]\r\n    dis[0][s[0]]=0\r\n    q=[(0,0,s[0])]\r\n    while q:\r\n        _,u,k=heapq.heappop(q)\r\n        if vis[u][k] or dis[u][k]==inf:continue\r\n        vis[u][k]=True\r\n        for v,w in enumerate(g[u]):\r\n            c=min(s[v],k)\r\n            if dis[v][c] > dis[u][k] + w * k:\r\n                dis[v][c] = dis[u][k] + w * k\r\n                heapq.heappush(q, (dis[v][c], v, c))\r\n    ans=inf\r\n    for k in range(1,1001):\r\n        ans=min(ans,dis[n-1][k])\r\n    print(ans)",
        "failedTestCase": {
            "input": "1\r\n751 1000\r\n1 2 1\r\n1 3 1\r\n2 4 1\r\n3 4 1\r\n4 5 1\r\n4 6 1\r\n5 7 1\r\n6 7 1\r\n7 8 1\r\n7 9 1\r\n8 10 1\r\n9 10 1\r\n10 11 1\r\n10 12 1\r\n11 13 1\r\n12 13 1\r\n13 14 1\r\n13 15 1\r\n14 16 1\r\n15 16 1\r\n16 17 1\r\n16 18 1\r\n17 19 1\r\n18 19 1\r\n19 20 1\r\n19 21 1\r\n20 22 1\r\n21 22 1\r\n22 23 1\r\n22 24 1\r\n23 25 1\r\n24 25 1\r\n25 26 1\r\n25 27 1\r\n26 28 1\r\n27 28 1\r\n28 29 1\r\n28 30 1\r\n29 31 1\r\n30 31 1\r\n31 32 1\r\n31 33 1\r\n32 34 1\r\n33 34 1\r\n34 35 1\r\n34 36 1\r\n35 37 1\r\n36 37 1\r\n37 38 1\r\n37 39 1\r\n38 40 1\r\n39 40 1\r\n40 41 1\r\n40 42 1\r\n41 43 1\r\n42 43 1\r\n43 44 1\r\n43 45 1...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241125924",
            "author": "mironbay",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704936480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241125793",
            "author": "mironbay",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704936420
        },
        "acceptedCode": "n = int(input())\r\nfor i in range(n):\r\n    a, b, c = map(int, input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    elif b == c:\r\n        print(a)",
        "rejectedCode": "a, b, c = map(int, input().split())\nif a == b:\n    print(c)\nelif a == c:\n    print(b)\nelif b == c:\n    print(a)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241072072",
            "author": "sabb1r",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 5700,
            "submissionTime": 1704882480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241070218",
            "author": "sabb1r",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 3900,
            "submissionTime": 1704881340
        },
        "acceptedCode": "numberTest = int(input())\n\nconsonants = {'b', 'c', 'd'}\nvowels = {'a', 'e'}\n\n\nfor i in range(numberTest):\n    worldLength = int(input())\n    word = input()\n    wordList = []\n\n    vowelCounter = 0\n    consonantCounter = 0\n\n    for ind, val in enumerate(word):\n        if val in consonants:\n            consonantCounter += 1\n\n            if consonantCounter == 3:\n                wordList.append('.')\n                consonantCounter = 1\n                vowelCounter = 0\n\n            wordList.append(val)\n\n        else:\n            vowelCounter += 1\n\n            if vowelCounter == 2:\n                wordList.insert(-1,'.')\n                vowelCounter = 1\n                consonantCounter = 1\n\n            wordList.append(val)\n\n    print(''.join(wordList))\n\n\n",
        "rejectedCode": "numberTest = int(input())\n\nconsonants = {'b', 'c', 'd'}\nvowels = {'a', 'e'}\n\n\nfor i in range(numberTest):\n    worldLength = int(input())\n    word = input()\n    wordList = list(word)\n\n    vowelCounter = 0\n    consonantCounter = 0\n    dotInserted = 0\n\n    for ind, val in enumerate(word):\n        if val in consonants:\n            consonantCounter += 1\n\n            if consonantCounter == 3:\n                wordList.insert(ind + dotInserted, '.')\n                consonantCounter = 1\n                vowelCounter = 0\n                dotInserted += 1\n\n        else:\n            vowelCounter += 1\n            if vowelCounter == 2:\n                wordList.insert(ind + dotInserted - 1, '.')\n                vowelCounter = 1\n                consonantCounter = 1\n                dotInserted += 1\n\n    print(''.join(wordList))\n\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241149475",
            "author": "barvay",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 28600,
            "submissionTime": 1704950700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241149407",
            "author": "barvay",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704950640
        },
        "acceptedCode": "from sys import stdin\r\n\r\nINF = float(\"inf\")\r\n\r\ninput = stdin.readline\r\ndef read_str(): return input().rstrip()\r\ndef read_int(): return int(input().rstrip())\r\ndef read_lst(): return list(map(int, input().rstrip().split()))\r\ndef read_map(): return map(int, input().rstrip().split())\r\ndef ok(b): print(\"YES\" if b else \"NO\")\r\n\r\n'''\r\n 1 3  2\r\n-1 3 -2\r\n-1 2  0\r\n\r\n1   2   11  4   1   5   1   2\r\n-1  2  -11  4  -1   5  -1   2\r\n-1  1  -10  -6  -7 -2  -3   1\r\n\r\n\r\n1   2   11  4   1   5   1   2\r\n1  -2   11 -4   1  -5   1  -2\r\n1  -1   10  6   7   2   3  -1\r\n'''\r\ndef solve():\r\n    n, a = read_int(), read_lst()\r\n\r\n    s = set()\r\n    curr = 0\r\n    for i in range(n):\r\n        if i % 2:\r\n            curr += a[i] * -1\r\n        else:\r\n            curr += a[i]\r\n        if curr == 0:\r\n            print(\"YES\")\r\n            return\r\n        if curr not in s:\r\n            s.add(curr)\r\n        else:\r\n            print(\"YES\")\r\n            return\r\n    print(\"NO\")\r\n\r\nif __name__ == \"__main__\":\r\n    for _ in range(read_int()):\r\n        solve()\r\n",
        "rejectedCode": "from sys import stdin\r\n\r\nINF = float(\"inf\")\r\n\r\ninput = stdin.readline\r\ndef read_str(): return input().rstrip()\r\ndef read_int(): return int(input().rstrip())\r\ndef read_lst(): return list(map(int, input().rstrip().split()))\r\ndef read_map(): return map(int, input().rstrip().split())\r\ndef ok(b): print(\"YES\" if b else \"NO\")\r\n\r\n'''\r\n 1 3  2\r\n-1 3 -2\r\n-1 2  0\r\n\r\n1   2   11  4   1   5   1   2\r\n-1  2  -11  4  -1   5  -1   2\r\n-1  1  -10  -6  -7 -2  -3   1\r\n\r\n\r\n1   2   11  4   1   5   1   2\r\n1  -2   11 -4   1  -5   1  -2\r\n1  -1   10  6   7   2   3  -1\r\n'''\r\ndef solve():\r\n    n, a = read_int(), read_lst()\r\n\r\n    s = set()\r\n    curr = 0\r\n    for i in range(n):\r\n        if i % 2:\r\n            curr += a[i] * -1\r\n        else:\r\n            curr += a[i]\r\n        print(curr)\r\n        if curr == 0:\r\n            print(\"YES\")\r\n            return\r\n        if curr not in s:\r\n            s.add(curr)\r\n        else:\r\n            print(\"YES\")\r\n            return\r\n    print(\"NO\")\r\n\r\nif __name__ == \"__main__\":\r\n    for _ in range(read_int()):\r\n        solve()\r\n",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "1\r\n-2\r\n0\r\nYES\r\n1\r\n0\r\nYES\r\n1\r\n-5\r\n4\r\n-4\r\n51\r\n48\r\n62\r\n60\r\n67\r\n65\r\nNO\r\n1\r\n-1\r\n10\r\n6\r\n7\r\n2\r\n3\r\n1\r\nYES\r\n2\r\n-4\r\n-3\r\n-8\r\n-1\r\n-9\r\nNO\r\n2\r\n-3\r\n7\r\n3\r\n7\r\nYES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong output format YES or NO expected, but 1 found [1st token]\r\n"
        },
        "errorLine": 36,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241132042",
            "author": "sams.csebu",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704940560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241130023",
            "author": "sams.csebu",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704939240
        },
        "acceptedCode": "tc = int(input())\r\nfor _ in range(tc):\r\n  a, b, c=input().split()\r\n  if a==b:\r\n    print(c)\r\n  elif b==c:\r\n    print(a)\r\n  elif a==c:\r\n    print(b)",
        "rejectedCode": "testCase=input()\r\nfor i in (1,testCase):\r\n  a=input()\r\n  b=input()\r\n  c=input()\r\n  if a==b:\r\n    print(c)\r\n  elif b==c:\r\n    print(a)\r\n  elif a==c:\r\n    print(b)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10], but output contains 0 elements\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241130538",
            "author": "miny_genie",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26200,
            "submissionTime": 1704939540
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241130328",
            "author": "miny_genie",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704939420
        },
        "acceptedCode": "import math\r\n \r\nfor _ in range(int(input())):\r\n    _ = int(input())\r\n    sqaures = list(map(int, input().split()))\r\n    \r\n    answer = math.sqrt(sum(sqaures)).is_integer()\r\n    print(\"YES\") if answer else print(\"NO\")",
        "rejectedCode": "import math\r\n\r\nfor _ in range(int(input())):\r\n    _ = int(input())\r\n    sqaures = list(map(int, input().split()))\r\n    \r\n    answer = math.sqrt(sum(sqaures)).is_integer()\r\n    print(answer)",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "True\r\nTrue\r\nFalse\r\nTrue\r\nFalse\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong output format YES or NO expected, but TRUE found [1st token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241106130",
            "author": "Sid364",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 29100,
            "submissionTime": 1704911280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241106053",
            "author": "Sid364",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 29000,
            "submissionTime": 1704911100
        },
        "acceptedCode": "import sys\nimport math\nimport bisect\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\nfrom itertools import accumulate\n \n# sys.setrecursionlimit(100000000)\ninput = sys.stdin.readline\n \ninp    =lambda: int(input())\nstrng  =lambda: input().strip()\njn     =lambda x,l: x.join(map(str,l))\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\n \nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\n \nflush  =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr  =lambda x: stdout.write(str(x))\n \nmod=1000000007\n \ndef inlt():\n    return(list(map(int,input().split())))\n \n \nt = inp()\n \nfor _ in range(t):\n    n = inp()\n    a = inlt()\n    \n    cumsum = 0\n    m = set()\n    flag = False\n    for ind in range(0, len(a)):\n        if ind % 2 == 0:\n            a[ind] = -a[ind]\n        cumsum += a[ind]\n        if cumsum in m:\n            flag=True\n            break\n        if cumsum == 0:\n            flag=True\n            break\n        m.add(cumsum)\n    if flag: print(\"YES\")\n    else: print(\"NO\")",
        "rejectedCode": "import sys\nimport math\nimport bisect\nfrom sys import stdin,stdout\nfrom math import gcd,floor,sqrt,log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl,bisect_right as br\nfrom itertools import accumulate\n\n# sys.setrecursionlimit(100000000)\ninput = sys.stdin.readline\n\ninp    =lambda: int(input())\nstrng  =lambda: input().strip()\njn     =lambda x,l: x.join(map(str,l))\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\n\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\n\nflush  =lambda: stdout.flush()\nstdstr =lambda: stdin.readline()\nstdint =lambda: int(stdin.readline())\nstdpr  =lambda x: stdout.write(str(x))\n\nmod=1000000007\n\ndef inlt():\n    return(list(map(int,input().split())))\n\n\nt = inp()\nm = set()\n\nfor _ in range(t):\n    n = inp()\n    a = inlt()\n    \n    cumsum = 0\n    m = set([0])\n    for ind, x in enumerate(a):\n        cumsum += x if ind & 1 else -x\n        \n        if cumsum in m:\n            print(\"YES\")\n            break\n        m.add(cumsum)\n    else:\n        print(\"NO\")\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241106084",
            "author": "pseudonam",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 31000,
            "submissionTime": 1704911160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "241106025",
            "author": "pseudonam",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 405,
            "memory": 10200,
            "submissionTime": 1704911040
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    for i in range(0, n, 2):\r\n        a[i] *= -1\r\n    pref = [0, a[0]]\r\n    for i in range(1, n):\r\n        pref.append(pref[-1] + a[i])\r\n    pref.sort()\r\n    for i in range(n):\r\n        if pref[i] == pref[i+1]:\r\n            print (\"YES\")\r\n            break \r\n    else:\r\n        print (\"NO\")",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    for i in range(0, n, 2):\r\n        a[i] *= -1\r\n    pref = [0, a[0]]\r\n    for i in range(1, n):\r\n        pref.append(pref[-1] + a[i])\r\n    pref.sort()\r\n    for i in range(n-1):\r\n        if pref[i] == pref[i+1]:\r\n            print (\"YES\")\r\n            break \r\n    else:\r\n        print (\"NO\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [3rd token]\r\n"
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241083301",
            "author": "coolcoding123",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704889140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241083010",
            "author": "coolcoding123",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704888960
        },
        "acceptedCode": "tests = int(input())\r\nfor i in range(tests):\r\n    arr = list(map(int, input().split()))\r\n    for i in range(3):\r\n        if i == 0:\r\n            if arr[i] != arr[i+1] and arr[i] != arr[i+2] :\r\n                print(arr[i])\r\n        if i == 1:\r\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1] :\r\n                print(arr[i])\r\n        if i == 2:\r\n            if arr[i] != arr[i-1] and arr[i] != arr[i-2] :\r\n                print(arr[i])",
        "rejectedCode": "arr = list(map(int, input().split()))\r\nfor i in range(3):\r\n    if i == 0:\r\n        if arr[i] != arr[i+1] and arr[i] != arr[i+2] :\r\n            print(arr[i])\r\n    if i == 1:\r\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1] :\r\n            print(arr[i])\r\n    if i == 2:\r\n        if arr[i] != arr[i-1] and arr[i] != arr[i-2] :\r\n            print(arr[i])\r\n        \r\n        \r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241069228",
            "author": "Arsenalahm",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 265,
            "memory": 700,
            "submissionTime": 1704880680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241068508",
            "author": "Arsenalahm",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704880260
        },
        "acceptedCode": "import sys\ninput = sys.stdin.readline\n\ntestcases = int(input())\n\nfor i in range(testcases):\n    n = input()\n    line = input().strip()\n    # b, c, d -> C\n    # a, e -> V\n    # CV or CVC\n    head = 0\n\n    while True:\n        if len(line) - head == 2 or len(line) - head == 3:\n            sys.stdout.write(str(line[head:]) + \"\\n\")\n            break\n        sys.stdout.write(str(line[head]))\n        sys.stdout.write(str(line[head + 1]))\n        if line[head + 3] == 'b' or line[head + 3] == 'c' or line[head + 3] == 'd':\n            sys.stdout.write(str(line[head + 2]))\n            sys.stdout.write(str('.'))\n            head += 3\n        else:\n            sys.stdout.write(str('.'))\n            head += 2",
        "rejectedCode": "import sys\ninput = sys.stdin.readline\n\ntestcases = int(input())\n\nfor i in range(testcases):\n    n = input()\n    line = input().strip()\n    # b, c, d -> C\n    # a, e -> V\n    # CV or CVC\n    temp = line\n    head = 0\n\n    while len(temp) > 0:\n        if len(temp) == 2 or len(temp) == 3:\n            sys.stdout.write(str(temp) + \"\\n\")\n            break\n        sys.stdout.write(str(temp[0]))\n        sys.stdout.write(str(temp[1]))\n        if temp[3] == 'b' or temp[3] == 'c' or temp[3] == 'd':\n            sys.stdout.write(str(temp[2]))\n            sys.stdout.write(str('.'))\n            head += 3\n            temp = line[head:]\n        else:\n            sys.stdout.write(str('.'))\n            sys.stdout.write(str(temp[2]))\n            sys.stdout.write(str(temp[3]))\n            sys.stdout.write(str('.'))\n            head += 4\n            temp = line[head:]\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ce.dba.b",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 12,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241070246",
            "author": "tndlsc45",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704881340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "241070082",
            "author": "tndlsc45",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704881220
        },
        "acceptedCode": "n = input()\r\nn = int(n)\r\nfor i in range (n) :\r\n    number = input()\r\n    n1,n2,n3 = number.split(\" \")\r\n    if(int(n1) == int(n2))  :\r\n        print(n3)\r\n    elif(int(n1) == int(n3)) :\r\n        print(n2)\r\n    else :\r\n        print(n1)",
        "rejectedCode": "n = input()\r\nn = int(n)\r\nfor i in range (n) :\r\n    number = input()\r\n    n1,n2,n3 = number.split(\" \")\r\n    if(int(n1) == int(n2))  :\r\n        print(n3)\r\n    elif(int(n2) == int(n3)) :\r\n        print(n1)\r\n\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n6\r\n7\r\n5\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '6'\r\n"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241059580",
            "author": "minuano",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 19500,
            "submissionTime": 1704875700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241059414",
            "author": "minuano",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704875640
        },
        "acceptedCode": "for i in range(int(input())):\r\n    f = int(input())\r\n    c = 'bcd'\r\n    v = 'ae'\r\n    s = list(input())\r\n    s.reverse()\r\n    d = 0\r\n    a = []\r\n    while d < f:\r\n        if s[d] in c:\r\n            x = s[2 + d] + s[d + 1] + s[d]\r\n            a.append(x) \r\n            d += 3\r\n        elif s[d] in v:\r\n            x = s[d + 1] + s[d]\r\n            a.append(x)\r\n            d += 2\r\n    a.reverse()\r\n    a = '.'.join(a)\r\n    print(a)\r\n    ",
        "rejectedCode": "for i in range(int(input())):\r\n    f = int(input())\r\n    c = 'bcd'\r\n    v = 'ae'\r\n    s = list(input())\r\n    s.reverse()\r\n    d = 0\r\n    a = []\r\n    while d < f:\r\n        if s[d] in c:\r\n            x = s[d] + s[d + 1] + s[d + 2]\r\n            a.append(x) \r\n            d += 3\r\n        elif s[d] in v:\r\n            x = s[d] + s[d + 1]\r\n            a.append(x)\r\n            d += 2\r\n    a.reverse()\r\n    a = '.'.join(a)\r\n    print(a)\r\n    ",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ab.dec.bab\r\nab.ab\r\ndad.ed.ac.deb.dad\r\ncad\r\ncad.cad\r\nad.bab.ab.ab.bab.bab.ab.bab.ab\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ab.dec.bab'\r\n"
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241064167",
            "author": "0m.abh1",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 10100,
            "submissionTime": 1704877980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "241060995",
            "author": "0m.abh1",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 5300,
            "submissionTime": 1704876420
        },
        "acceptedCode": "import re\r\nfor s in [*open(0)][2::2]:print(re.sub('(?!^)(.(a|e))',r'.\\1',s))",
        "rejectedCode": "testnum=int(input())\r\nfor cases in range(testnum):\r\n    length=int(input())\r\n    word=(input())\r\n    word=word[::-1]\r\n    consonants=['b','c','d']\r\n    vowels=['a','e']\r\n    a=[*word]\r\n    b=[]\r\n    i=0\r\n    while i==0:\r\n        try:\r\n            if a[i] in vowels:\r\n                a=a[:(i+2)]+['.']+a[(i+2):]\r\n                b.append(''.join(a[0:3]))\r\n                del a[0:3]\r\n            elif a[i] in consonants:\r\n                a=a[:(i+3)]+['.']+a[(i+3):]\r\n                b.append(''.join(a[0:4]))\r\n                del a[0:4]\r\n        except IndexError:\r\n            break        \r\n    newarray=''.join(b)\r\n    c=newarray[::-1]\r\n    print(c[1:])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240490320",
            "author": "Shiva_008",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 0,
            "submissionTime": 1704531480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240025304",
            "author": "Shiva_008",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704198900
        },
        "acceptedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    a, b, c = map(int, input().split())\r\n\r\n    # Use XOR to find the value that occurs exactly once\r\n    result = a ^ b ^ c\r\n\r\n    print(result)\r\n",
        "rejectedCode": "def can_find_subarray(n, a):\r\n    prefix_sum = [0] * (n + 1)\r\n\r\n    for i in range(1, n + 1):\r\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\r\n\r\n    for i in range(1, n + 1):\r\n        for j in range(i + 1, n + 1):\r\n            if (j - i) % 2 == 0 and prefix_sum[j] - prefix_sum[i - 1] == prefix_sum[i - 1]:\r\n                return True\r\n            elif (j - i) % 2 == 1 and prefix_sum[j] - prefix_sum[i - 1] == prefix_sum[i - 1] - a[i - 1]:\r\n                return True\r\n\r\n    return False\r\n\r\n# Input the number of test cases\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    glasses = list(map(int, input().split()))\r\n\r\n    if can_find_subarray(n, glasses):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "NO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241042591",
            "author": "denakifev",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 20300,
            "submissionTime": 1704866400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241041989",
            "author": "denakifev",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704866100
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    s = sum(map(int, input().split()))\r\n    if int(s ** 0.5) == s**0.5:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n            \r\n\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    s1 = input()\r\n    s2 = input()\r\n    s3 = input()\r\n    for ch in \"ABC\":\r\n        if not ch in s1:\r\n            print(ch)\r\n            exit(0)\r\n        if not ch in s2:\r\n            print(ch)\r\n            exit(0)\r\n        if not ch in s3:\r\n            print(ch)\r\n            exit(0)\r\n\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241003390",
            "author": "_Arz_",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 300,
            "submissionTime": 1704842280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "241003311",
            "author": "_Arz_",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704842160
        },
        "acceptedCode": "from collections import Counter\r\n\r\ndef solve(li):\r\n    count = Counter(li)\r\n\r\n    for key, value in count.items():\r\n        if value == 2:\r\n            print(key)\r\n            break\r\n\r\ndef main():\r\n    for t in range(int(input())):\r\n        k = []\r\n        for _ in range(3):\r\n            f = input()\r\n            k.extend(f)\r\n\r\n        solve(k)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "def solve(li):\r\n    count = {'A': 0, 'B': 0, 'C': 0}\r\n\r\n    for ch in li:\r\n        count[ch] += 1\r\n\r\n    for key, value in count.items():\r\n        if value == 2:\r\n            print(key)\r\n            break\r\n\r\ndef main():\r\n    for t in range(int(input())):\r\n        k = []\r\n        for _ in range(3):\r\n            f = input()\r\n            k.extend(f)\r\n\r\n        solve(k)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240993954",
            "author": "J-K",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 26200,
            "submissionTime": 1704827820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240992715",
            "author": "J-K",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 100,
            "submissionTime": 1704824580
        },
        "acceptedCode": "import math\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    totalSum = 0\r\n    n = int(input())\r\n    x = list(map(int, input().split()))\r\n    totalSum += sum(x)\r\n\r\n    #print(\"Total sum : \",totalSum)\r\n    \r\n    sqr = int(math.sqrt(totalSum))\r\n    #print(\"Sqr : \",sqr)\r\n\r\n\r\n    if (sqr * sqr) == totalSum:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "import math\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    totalSum = 0\r\n    n = int(input())\r\n    x = list(map(int, input().split()))\r\n    totalSum += sum(x)\r\n\r\n    #print(\"Total sum : \",totalSum)\r\n\r\n    if totalSum == 1:\r\n        print(\"NO\")\r\n        continue\r\n    \r\n    sqr = int(math.sqrt(totalSum))\r\n    #print(\"Sqr : \",sqr)\r\n\r\n\r\n    if sqr ** 2 == totalSum:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [24th token]\r\n"
        },
        "errorLine": 12,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241007667",
            "author": "nastyazolota",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1704845880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "241007536",
            "author": "nastyazolota",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 342,
            "memory": 9300,
            "submissionTime": 1704845760
        },
        "acceptedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    x = sum(a)\r\n    if int(x**0.5)**2 == x:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    x = sum(a)\r\n    if (x**0.5)**2 == x:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240981372",
            "author": "rodyahmed",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 11800,
            "submissionTime": 1704810120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240967947",
            "author": "rodyahmed",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704802860
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    _=input()\r\n    v=['a','e']\r\n    h=list(input())\r\n    for i in range(2,len(h)):\r\n        if h[i] in v:\r\n            h[i-1]='.'+h[i-1]\r\n    print(*h,sep='')",
        "rejectedCode": "import math as m\r\nfor j in range(int(input())):\r\n    n = input()\r\n    a = sum(list(map(int,input().split())))\r\n    print('YES' if isinstance(m.sqrt(a), int) else 'NO')",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240980342",
            "author": "1g0r",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 374,
            "memory": 27500,
            "submissionTime": 1704809460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240946642",
            "author": "1g0r",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704792960
        },
        "acceptedCode": "a = int(input())\ng = []\nfor i in range(a):\n    b = int(input())\n    c = list(map(int,input().split()))\n    if (sum(c)**0.5 % 1 == 0):\n        g.append(\"YES\")\n    else:\n        g.append(\"NO\")\nfor i in range(a):\n    print(g[i])",
        "rejectedCode": "a = int(input())\nj=[]\nfor i in range(a):\n    b,c,d = map(int,input().split())\n    if (b==c):\n        j.append(d)\n    if (b==d):\n        j.append(c)\n    else:\n        j.append(b)\nfor i in range(a):\n    print(j[i])",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n5\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 4th numbers differ - expected: '7', found: '5'\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240955249",
            "author": "smrw",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 3041,
            "memory": 44800,
            "submissionTime": 1704796980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240954170",
            "author": "smrw",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 2800,
            "submissionTime": 1704796500
        },
        "acceptedCode": "# from math import log2, ceil\r\n# from collections import defaultdict\r\n# from sortedcontainers import SortedList\r\n\r\n\r\n###################################################################################################################\r\nfrom bisect import bisect_left as lower_bound\r\nfrom bisect import bisect_right as upper_bound\r\n\r\nclass FenwickTree:\r\n    def __init__(self, x):\r\n        bit = self.bit = list(x)\r\n        size = self.size = len(bit)\r\n        for i in range(size):\r\n            j = i | (i + 1)\r\n            if j < size:\r\n                bit[j] += bit[i]\r\n\r\n    def update(self, idx, x):\r\n        \"\"\"updates bit[idx] += x\"\"\"\r\n        while idx < self.size:\r\n            self.bit[idx] += x\r\n            idx |= idx + 1\r\n\r\n    def __call__(self, end):\r\n        \"\"\"calc sum(bit[:end])\"\"\"\r\n        x = 0\r\n        while end:\r\n            x += self.bit[end - 1]\r\n            end &= end - 1\r\n        return x\r\n\r\n    def find_kth(self, k):\r\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\r\n        idx = -1\r\n        for d in reversed(range(self.size.bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < self.size and self.bit[right_idx] <= k:\r\n                idx = right_idx\r\n                k -= self.bit[idx]\r\n        return idx + 1, k\r\n\r\n\r\nclass SortedList:\r\n    block_size = 700\r\n\r\n    def __init__(self, iterable=()):\r\n        self.macro = []\r\n        self.micros = [[]]\r\n        self.micro_size = [0]\r\n        self.fenwick = FenwickTree([0])\r\n        self.size = 0\r\n        for item in iterable:\r\n            self.insert(item)\r\n\r\n    def insert(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        j = upper_bound(self.micros[i], x)\r\n        self.micros[i].insert(j, x)\r\n        self.size += 1\r\n        self.micro_size[i] += 1\r\n        self.fenwick.update(i, 1)\r\n        if len(self.micros[i]) >= self.block_size:\r\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\r\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\r\n            self.fenwick = FenwickTree(self.micro_size)\r\n            self.macro.insert(i, self.micros[i + 1][0])\r\n\r\n    def pop(self, k=-1):\r\n        i, j = self._find_kth(k)\r\n        self.size -= 1\r\n        self.micro_size[i] -= 1\r\n        self.fenwick.update(i, -1)\r\n        return self.micros[i].pop(j)\r\n\r\n    def __getitem__(self, k):\r\n        i, j = self._find_kth(k)\r\n        return self.micros[i][j]\r\n\r\n    def count(self, x):\r\n        return self.upper_bound(x) - self.lower_bound(x)\r\n\r\n    def __contains__(self, x):\r\n        return self.count(x) > 0\r\n\r\n    def lower_bound(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\r\n\r\n    def upper_bound(self, x):\r\n        i = upper_bound(self.macro, x)\r\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\r\n\r\n    def _find_kth(self, k):\r\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\r\n\r\n    def __len__(self):\r\n        return self.size\r\n\r\n    def __iter__(self):\r\n        return (x for micro in self.micros for x in micro)\r\n\r\n    def __repr__(self):\r\n        return str(list(self))\r\n    \r\n\r\n\r\n###################################################################################################################\r\n\r\n\r\n\r\n\r\n# MOD = int(1e9 + 7)\r\n\r\nalice, bob = [[\"Alice\"]], [[\"Bob\"]]\r\nyes, no = [['Yes']], [['No']]\r\n\r\n\r\ndef binary_search(arr, target):\r\n    low, high = 0, len(arr) - 1\r\n\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        mid_value = arr[mid]\r\n\r\n        if mid_value == target:\r\n            return mid  # Found the target, return its index\r\n        elif mid_value < target:\r\n            low = mid + 1  # Discard the left half\r\n        else:\r\n            high = mid - 1  # Discard the right half\r\n\r\n    return -1\r\n\r\n\r\ndef solve():\r\n    n = int(input())\r\n    # k, a, b = map(int, input().split())\r\n    # s = input()\r\n    # k = int(input())\r\n    # a = list(map(int, input().split()))\r\n    # b = list(map(int, input().split()))\r\n    a = [tuple(map(int, input().split())) for _ in range(n)]\r\n\r\n    a.sort()\r\n    b = SortedList([x[1] for x in a])\r\n\r\n    ans = 0\r\n    for i in range(n):\r\n        idx = binary_search(b, a[i][1])\r\n        ans += idx\r\n        b.pop(idx)\r\n    \r\n\r\n    return [[ans]]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# anss = [solve() for _ in range(1)]\r\nanss = [solve() for _ in range(int(input()))]\r\nfor ans in anss:\r\n    for line in ans:\r\n        print(*line)",
        "rejectedCode": "# from math import log2, ceil\r\n# from collections import defaultdict\r\nfrom sortedcontainers import SortedList\r\n\r\n\r\n# MOD = int(1e9 + 7)\r\n\r\nalice, bob = [[\"Alice\"]], [[\"Bob\"]]\r\nyes, no = [['Yes']], [['No']]\r\n\r\n\r\ndef binary_search(arr, target):\r\n    low, high = 0, len(arr) - 1\r\n\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        mid_value = arr[mid]\r\n\r\n        if mid_value == target:\r\n            return mid  # Found the target, return its index\r\n        elif mid_value < target:\r\n            low = mid + 1  # Discard the left half\r\n        else:\r\n            high = mid - 1  # Discard the right half\r\n\r\n    return -1\r\n\r\n\r\ndef solve():\r\n    n = int(input())\r\n    # k, a, b = map(int, input().split())\r\n    # s = input()\r\n    # k = int(input())\r\n    # a = list(map(int, input().split()))\r\n    # b = list(map(int, input().split()))\r\n    a = [tuple(map(int, input().split())) for _ in range(n)]\r\n\r\n    a.sort()\r\n    b = SortedList([x[1] for x in a])\r\n\r\n    ans = 0\r\n    for i in range(n):\r\n        idx = binary_search(b, a[i][1])\r\n        ans += idx\r\n        b.pop(idx)\r\n    \r\n\r\n    return [[ans]]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# anss = [solve() for _ in range(1)]\r\nanss = [solve() for _ in range(int(input()))]\r\nfor ans in anss:\r\n    for line in ans:\r\n        print(*line)",
        "failedTestCase": {
            "input": "5\r\n2\r\n2 3\r\n1 4\r\n6\r\n2 6\r\n3 9\r\n4 5\r\n1 8\r\n7 10\r\n-2 100\r\n4\r\n-10 10\r\n-5 5\r\n-12 12\r\n-13 13\r\n5\r\n-4 9\r\n-2 5\r\n3 4\r\n6 7\r\n8 10\r\n4\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240918491",
            "author": "horrlod",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 436,
            "memory": 44600,
            "submissionTime": 1704777840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240918007",
            "author": "horrlod",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 45700,
            "submissionTime": 1704777540
        },
        "acceptedCode": "from collections import defaultdict,Counter,deque\nimport math\nimport bisect\nfrom itertools import accumulate, product\nfrom math import ceil, log,gcd\nfrom functools import lru_cache\nfrom sys import stdin, stdout\nimport time\nimport atexit\nimport io\nimport sys\nimport string\nimport heapq\nimport copy\nimport random\nimport bisect\n \ndef primes(n):\n    if n<=2:\n        return []\n    sieve=[True]*(n+1)\n    for x in range(3,int(n**0.5)+1,2):\n        for y in range(3,(n//x)+1,2):\n            sieve[(x*y)]=False\n         \n    return [2]+[i for i in range(3,n,2) if sieve[i]]\n \n \n \ndef write(*args, **kwargs):\n    sep = kwargs.get('sep', ' ')\n    end = kwargs.get('end', '\\n')\n    stdout.write(sep.join(str(a) for a in args) + end)\n \ndef read():\n    return stdin.readline().rstrip()\n \n \ndef primes_rwh(n):\n    \"\"\" Returns  a list of primes < n \"\"\"\n    sieve = [True] * n\n    for i in range(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i*i-1)//(2*i)+1)\n    return [2] + [i for i in range(3,n,2) if sieve[i]]\n \n \ndef prime_factors(n):\n    i = 2\n    factors = []\n    d = defaultdict(lambda:0)\n    for i in primes_rwh(int(n**0.5+1)):\n        while  n % i == 0:\n                n //= i\n                factors.append(i)\n                d[i]+=1\n    if n > 1:\n        factors.append(n)\n        d[n]+=1\n    return factors,d\n \n \n    \ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n \ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\n    \ndef lcm(x, y):\n   lcm = (x*y)//math.gcd(x,y)\n   return lcm    \n    \n    \n# def bitsoncount(i):\n#     assert 0 <= i < 0x100000000\n#     i = i - ((i >> 1) & 0x55555555)\n#     i = (i & 0x33333333) + ((i >> 2) & 0x33333333)\n#     return (((i + (i >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24   \ndef bitsoncount(x): \n      b=0\n      while(x > 0):\n          x &= x - 1   \n          b+=1\n      return b\ndef prime_factors_s(n):\n    i = 2\n    factors =set()\n    d = defaultdict(lambda:0)\n    for i in primes_rwh(int(n**0.5+1)):\n        while  n % i == 0:\n                n //= i\n                factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n    \nfrom bisect import    bisect_right \n \n \ndef pollard_rho(n):\n    \"\"\"returns a random factor of n\"\"\"\n    if n & 1 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n \n    s = ((n - 1) & (1 - n)).bit_length() - 1\n    d = n >> s\n    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:\n        p = pow(a, d, n)\n        if p == 1 or p == n - 1 or a % n == 0:\n            continue\n        for _ in range(s):\n            prev = p\n            p = (p * p) % n\n            if p == 1:\n                return math.gcd(prev - 1, n)\n            if p == n - 1:\n                break\n        else:\n            for i in range(2, n):\n                x, y = i, (i * i + 1) % n\n                f = math.gcd(abs(x - y), n)\n                while f == 1:\n                    x, y = (x * x + 1) % n, (y * y + 1) % n\n                    y = (y * y + 1) % n\n                    f = math.gcd(abs(x - y), n)\n                if f != n:\n                    return f\n    return n    \n \ndef memodict(f):\n    \"\"\"memoization decorator for a function taking a single argument\"\"\"\n    class memodict(dict):\n        def __missing__(self, key):\n            ret = self[key] = f(key)\n            return ret\n \n    return memodict().__getitem__\n \n@memodict\ndef prime_factors_r(n):\n    \"\"\"returns a Counter of the prime factorization of n\"\"\"\n    if n <= 1:\n        return Counter()\n    f = pollard_rho(n)\n    return Counter([n]) if f == n else prime_factors_r(f) + prime_factors_r(n // f)\n \ndef multiply(a, b):\n     \n    # Creating an auxiliary matrix\n    # to store elements of the\n    # multiplication matrix\n    mul = [[0 for x in range(2)]\n              for y in range(2)];\n    for i in range(2):\n        for j in range(2):\n            for k in range(2):\n                mul[i][j] += a[i][k] * b[k][j];\n            mul[i][j] %= (10**9+7 )   \n    return mul\n \n \ndef power(F, n):\n    # print(n)\n    # Multiply it with initial values i.e\n    # with F(0) = 0, F(1) = 1, F(2) = 1\n    if (n == 1):\n        return F\n \n    F_ = power(F, int(n // 2));\n \n    F_ = multiply(F_, F_);\n \n    if (n % 2 != 0):\n        F_ = multiply(F_, F);\n \n    # Multiply it with initial values i.e\n    # with F(0) = 0, F(1) = 1, F(2) = 1\n    return F_ ;\n \n \nfrom bisect import bisect_left as lower_bound\nfrom bisect import bisect_right as upper_bound\n \n \nclass FenwickTree:\n    def __init__(self, x):\n        bit = self.bit = list(x)\n        size = self.size = len(bit)\n        for i in range(size):\n            j = i | (i + 1)\n            if j < size:\n                bit[j] += bit[i]\n \n    def update(self, idx, x):\n        \"\"\"updates bit[idx] += x\"\"\"\n        while idx < self.size:\n            self.bit[idx] += x\n            idx |= idx + 1\n \n    def __call__(self, end):\n        \"\"\"calc sum(bit[:end])\"\"\"\n        x = 0\n        while end:\n            x += self.bit[end - 1]\n            end &= end - 1\n        return x\n \n    def find_kth(self, k):\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\n        idx = -1\n        for d in reversed(range(self.size.bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < self.size and self.bit[right_idx] <= k:\n                idx = right_idx\n                k -= self.bit[idx]\n        return idx + 1, k\n \n \nclass SortedList:\n    block_size = 700\n \n    def __init__(self, iterable=()):\n        self.macro = []\n        self.micros = [[]]\n        self.micro_size = [0]\n        self.fenwick = FenwickTree([0])\n        self.size = 0\n        for item in iterable:\n            self.insert(item)\n \n    def insert(self, x):\n        i = lower_bound(self.macro, x)\n        j = upper_bound(self.micros[i], x)\n        self.micros[i].insert(j, x)\n        self.size += 1\n        self.micro_size[i] += 1\n        self.fenwick.update(i, 1)\n        if len(self.micros[i]) >= self.block_size:\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\n            self.fenwick = FenwickTree(self.micro_size)\n            self.macro.insert(i, self.micros[i + 1][0])\n \n    def pop(self, k=-1):\n        i, j = self._find_kth(k)\n        self.size -= 1\n        self.micro_size[i] -= 1\n        self.fenwick.update(i, -1)\n        return self.micros[i].pop(j)\n \n    def __getitem__(self, k):\n        i, j = self._find_kth(k)\n        return self.micros[i][j]\n \n    def count(self, x):\n        return self.upper_bound(x) - self.lower_bound(x)\n \n    def __contains__(self, x):\n        return self.count(x) > 0\n \n    def lower_bound(self, x):\n        i = lower_bound(self.macro, x)\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\n \n    def upper_bound(self, x):\n        i = upper_bound(self.macro, x)\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\n \n    def _find_kth(self, k):\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\n \n    def __len__(self):\n        return self.size\n \n    def __iter__(self):\n        return (x for micro in self.micros for x in micro)\n \n    def __repr__(self):\n        return str(list(self))\ndef calc_primes(n):\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n            73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\n            179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\n            283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\n            419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\n            547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659,\n            661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\n            811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,\n            947, 953, 967, 971, 977, 983, 991, 997]\np = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n            73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\n            179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\n            283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\n            419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\n            547 ]\n\np = calc_primes(1000)\n\n \n@lru_cache(None)\ndef factorize(n):\n    factorization = set()\n    for d in p:\n        if d * d > n:\n            break\n        while n % d == 0:\n            factorization.add(d)\n            n //= d\n    if n > 1:\n        factorization.add(n)\n    return sorted(factorization)\n \n \n@lru_cache(None)\ndef factorize_full(n):\n    factorization = set([1])\n    for d in p:\n        if d * d > n:\n            break\n        c = 1\n        while n % d == 0:\n            factorization.add(d**c)\n            n //= d\n            c+=1\n    if n > 1:\n        factorization.add(n)\n    return sorted(factorization)\n\n@lru_cache(None)\ndef factorize_full_a(n):\n    factorization = [1]\n    factorization2 = []\n    if n > 1:\n        factorization2.append(n)\n    for d in range(2,int(n**0.5+10)):\n        if d * d > n:\n            break\n        if n % d == 0:\n            factorization.append(d)\n            if n//d!=d:\n                factorization2.append(n//d)\n            \n                \n    return factorization + factorization2[::-1]\n \ndef z(s):\n    n = len(s)\n    ret = [0] * n\n    l = 1\n    ll = 0\n    r = 0\n    while l < len(s):\n        # print(l,ll,r,ret)\n        if l < r:\n            ret[l] = min(ret[l-ll],r-l)\n        \n        i = ret[l]\n        # print(l,s[l:],i)    \n        while l+i < len(s) and s[i] == s[l+i]:\n            ret[l] +=1\n            \n            i +=1\n        if ret[l] >0:\n            if l+i-1 > r:\n                ll = l\n                r = max(r,l+i-1)        \n        l+=1\n    return ret\n \n# def primes(n):\n#     if n<=2:\n#         return []\n#     sieve=[set() for i in range(n+1)]\n#     for x in p:\n#         for y in range(1,(n//x)+1,1):\n#             sieve[(x*y)].add(x)\n#             # sieve[(x*y)].add(n//x)\n#     return [*map(list,sieve)]\n \ndef powm(x, n, m):\n    if (n ==0):\n        return 1\n    elif (n==1):\n        return x%m\n \n    t = powm(x,n//2,m)\n    t = t * t\n    \n    if (n%2==1):\n        t *= x\n    \n    t%=m\n    if (t <0):\n        t +=m\n    return t\n \n \n \ndef z(s):\n    n = len(s)\n    ret = [0] * n\n    l = 1\n    ll = 0\n    r = 0\n    while l < len(s):\n        # print(l,ll,r,ret)\n        if l < r:\n            ret[l] = min(ret[l-ll],r-l)\n        \n        i = ret[l]\n        # print(l,s[l:],i)    \n        while l+i < len(s) and s[i] == s[l+i]:\n            ret[l] +=1\n            \n            i +=1\n        if ret[l] >0:\n            if l+i-1 > r:\n                ll = l\n                r = max(r,l+i-1)        \n        l+=1\n    return ret\n \nimport random as rd\nclass SET():\n    def init(self):\n        self.R = rd.randint(1<<30, 1<<60)\n        self.S = set()\n \n    def IN(self,x):\n        if x^self.R in self.S:\n            return True\n        else:\n            return False\n \n    def add(self, x):\n        self.S.add(self.R^x)\n \n    def erase(self,x):\n        if self.IN(x):\n            self.S.remove(self.R^x)\n \n# total = int(read())\n# n,k = [*map(int, read().split(' '))]\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n \ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\n    \nfrom hashlib import sha256\n \n#Li Chao\nclass Node:\n    def __init__(self):\n        self.k=0\n        self.t = 10**18\n        self.L, self.R=-10**18,10**18+5\n        self.left = None\n        self.right = None\n        \ndef UpdateHelper(curr, k_new, t_new):\n    f = lambda x,k,t: k*x+t\n    \n    \n\n    m = curr.L + (curr.R-curr.L) // 2+1\n    # print(curr.L,curr.R, m)\n    lef = f(curr.L,curr.k,curr.t) > f(curr.L,k_new,t_new)\n    mid = f(m,curr.k,curr.t) > f(m,k_new,t_new)\n    \n    if mid :\n        tmp = k_new, t_new\n        k_new, t_new = curr.k,curr.t\n        curr.k,curr.t = tmp\n        \n    if curr.R == curr.L:\n        return \n \n    # If the index is in the left subtree\n    if (lef != mid) :\n \n        # Create a new node if the left\n        # subtree is None\n        if (curr.left == None):\n            curr.left = Node()\n            curr.left.L = curr.L\n            curr.left.R = m-1\n            curr.left.k = k_new\n            curr.left.t = t_new\n            \n            \n            \n        # Recursively call the function\n        # for the left subtree\n        else:\n            # print(curr.left.L, curr.left.R)\n            UpdateHelper(curr.left, k_new, t_new)\n     \n \n    # If the index is in the right subtree\n    else :\n \n        # Create a new node if the right\n        # subtree is None\n        if (curr.right == None):\n            curr.right = Node()\n            curr.right.L = m\n            curr.right.R = curr.R\n            curr.right.k = k_new\n            curr.right.t = t_new\n            \n \n        # Recursively call the function\n        # for the right subtree\n        else:\n            # print(curr.right.L, curr.right.R)\n            UpdateHelper(curr.right, k_new, t_new)\n     \n\n    return\n \n \n# Function to find the sum of the\n# values given by the range\ndef queryHelper(curr, x):\n \n    # Return 0 if the root is None\n    if (curr == None):\n        return 10**18\n\n    m = curr.L + (curr.R-curr.L) // 2+1\n    if curr.R == curr.L:\n        return curr.k*x + curr.t\n    elif (x < m):\n        return min(curr.k*x + curr.t, queryHelper(curr.left,x))\n    else:\n        return min(curr.k*x + curr.t, queryHelper(curr.right,x))\n    \n\n \ndef pow( x,  n, m):\n    if (n ==0):\n        return 1;\n    elif (n==1):\n        return x%m;\n \n    t = pow(x,n//2,m);\n    t = t * t;\n    \n    if (n%2==1):\n        t *= x;\n    \n    t%=m;\n    if (t <0):\n        t +=m;\n    return t;\nimport itertools\nfrom functools import reduce\n\n\n@lru_cache(None)\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n \n# n,x = [*map(int, read().split(' '))]\n \n# s =  [*map(int, read().split(' '))]\n# f =  [*map(int, read().split(' '))]\n \n \n \n# a = [0, 1, 19, 271, 3439, 40951, 468559, 5217031, 56953279, 612579511, 6513215599, 68618940391, 717570463519, 7458134171671, 77123207545039, 794108867905351, 8146979811148159, 83322818300333431, 849905364703000879, 8649148282327007911, 87842334540943071199]\n         \n# def c4(n):\n#     if (n < 4):\n#         return 0\n#     d = int(math.log10(n))\n#     p = math.ceil(10**d)\n#     msb = n // p\n#     if (msb == 4):\n#         return (msb) * a[d] + (n % p) + 1\n#     if (msb > 4):\n#         return ((msb - 1) * a[d] + p +\n#                  c4(n % p))\n#     return (msb) * a[d] + c4(n % p)\n \n        \n \n# def f(x):\n#     return x - c4(x)\n \n# \n \n \n# total = int(read())\n# total = 1000\ntotal = 1\n \nmod = 998244353\n# mod = 1000000007\npow2 = [1]\nipow2 = [1] \nfor i in range(1,500007):\n    pow2.append((pow2[-1]*2)%mod  )\n\n# t = pow(2,mod-2,mod)\n# for i in range(1,10**7+10):\n#     ipow2.append((ipow2[-1]* t )%mod  )\n# pow3 = [1]\n \n# for i in range(1,10**7+10):\n#     pow3.append((pow3[-1]*3)%mod  )\n    \n# pow4m = [1]\n \n# mlt = pow(4, mod-2,mod)\n   \n# for i in range(1,10**7+10):\n#     pow4m.append((pow4m[-1]*mlt)%mod  )\n \n# pow34 = [1]\n \n# mlt = (3*pow(4, mod-2,mod))%mod\n   \n# for i in range(1,10**7+10):\n#     pow34.append((pow34[-1]*mlt)%mod  )\n \n\n# fct = [1]\n# for i in range(1,200007):\n#     fct+= [(fct[-1] * i)%mod]\n\n\n\n\n# import numpy as np \n# total = 1000000 \n# p = primes_rwh(100007)\n# s = set(p)\n\n# efficient factorization\n\n# lim = 10**5 + 10\n# mod = 10**9 + 7\n# primefac = [1]*lim\n# for i in range(2, lim):\n#     if primefac[i] == 1:\n#         for j in range(i, lim, i): primefac[j] = i\n\n# n,m =  [*map(int, read().split(' '))] \n# x =  [*map(int, read().split(' '))] \n\n# x = [95, 143, 58 ,119, 69]\n\n# p = primes_rwh(10**7+10)\n# dmax = [0] * (10**7+10)\n# g = x[0]    \n# import numpy as np\n\ntotal = int(read())\n# dp = [[0] * 9 for i in range(2)]\n# total = 100000000\n# total, s = [*map(int, read().split(' '))]\n\n\nfor _ in range(total):  \n    # s = read()\n    # n = len(s)\n    # n,m = [*map(int, read().split(' '))]\n    n = int(read())\n    # b = int(read())\n    # s = list(read())\n    # x,y,z = [*map(int, read().split(' '))]\n    a = [*map(int, read().split(' '))]\n    # b = [*map(int, read().split(' '))]\n    # c = [*map(int, read().split(' '))]\n    # n,k = 10,100\n    # x=[5, 3, 0 ,4 ,2 ,1, 6, 9, 10, 8]\n    # x = [*map(int, list(read()))]\n    # x = [*map(int, read().split(' '))]\n    # n,p,l,t = [8, 120, 10, 20]\n    # a = [2, -4, -6]\n    # n = 3\n    # n = 4\n    # for n in range(1,500):\n    # l,r,p = 1,14,2    \n    # s = list('2001000')\n    # s = '011'\n    # a = [2, 1]\n    \n    # n = 300000\n    # a = [*range(1,1+n)]\n    # n = 6\n    # a = [3, 2, 4, 2, 5, 5]\n    # b = [9, 4, 7, 9, 2, 5 ]\n    # a = [4,1,3,2]\n    \n    # a = [2, 8, 2, 6, 4]\n    \n    # a = [1,1,0,1,1]\n    # n = 6\n    # s = list('bacedbab')\n    # n = len(s)\n    R = rd.randint(1<<30, 1<<60)\n    s = set([R])\n\n    g = False\n    f =  [0,0]\n    \n    for i in range(n):\n        f[i%2] += a[i]\n        if ( f[1]-f[0])^R in s:\n            g =True\n            break\n        s.add((f[1]-f[0])^R)\n    if g:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n        ",
        "rejectedCode": "from collections import defaultdict,Counter,deque\nimport math\nimport bisect\nfrom itertools import accumulate, product\nfrom math import ceil, log,gcd\nfrom functools import lru_cache\nfrom sys import stdin, stdout\nimport time\nimport atexit\nimport io\nimport sys\nimport string\nimport heapq\nimport copy\nimport random\nimport bisect\n \ndef primes(n):\n    if n<=2:\n        return []\n    sieve=[True]*(n+1)\n    for x in range(3,int(n**0.5)+1,2):\n        for y in range(3,(n//x)+1,2):\n            sieve[(x*y)]=False\n         \n    return [2]+[i for i in range(3,n,2) if sieve[i]]\n \n \n \ndef write(*args, **kwargs):\n    sep = kwargs.get('sep', ' ')\n    end = kwargs.get('end', '\\n')\n    stdout.write(sep.join(str(a) for a in args) + end)\n \ndef read():\n    return stdin.readline().rstrip()\n \n \ndef primes_rwh(n):\n    \"\"\" Returns  a list of primes < n \"\"\"\n    sieve = [True] * n\n    for i in range(3,int(n**0.5)+1,2):\n        if sieve[i]:\n            sieve[i*i::2*i]=[False]*((n-i*i-1)//(2*i)+1)\n    return [2] + [i for i in range(3,n,2) if sieve[i]]\n \n \ndef prime_factors(n):\n    i = 2\n    factors = []\n    d = defaultdict(lambda:0)\n    for i in primes_rwh(int(n**0.5+1)):\n        while  n % i == 0:\n                n //= i\n                factors.append(i)\n                d[i]+=1\n    if n > 1:\n        factors.append(n)\n        d[n]+=1\n    return factors,d\n \n \n    \ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n \ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\n    \ndef lcm(x, y):\n   lcm = (x*y)//math.gcd(x,y)\n   return lcm    \n    \n    \n# def bitsoncount(i):\n#     assert 0 <= i < 0x100000000\n#     i = i - ((i >> 1) & 0x55555555)\n#     i = (i & 0x33333333) + ((i >> 2) & 0x33333333)\n#     return (((i + (i >> 4) & 0xF0F0F0F) * 0x1010101) & 0xffffffff) >> 24   \ndef bitsoncount(x): \n      b=0\n      while(x > 0):\n          x &= x - 1   \n          b+=1\n      return b\ndef prime_factors_s(n):\n    i = 2\n    factors =set()\n    d = defaultdict(lambda:0)\n    for i in primes_rwh(int(n**0.5+1)):\n        while  n % i == 0:\n                n //= i\n                factors.add(i)\n    if n > 1:\n        factors.add(n)\n    return factors\n    \nfrom bisect import    bisect_right \n \n \ndef pollard_rho(n):\n    \"\"\"returns a random factor of n\"\"\"\n    if n & 1 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n \n    s = ((n - 1) & (1 - n)).bit_length() - 1\n    d = n >> s\n    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:\n        p = pow(a, d, n)\n        if p == 1 or p == n - 1 or a % n == 0:\n            continue\n        for _ in range(s):\n            prev = p\n            p = (p * p) % n\n            if p == 1:\n                return math.gcd(prev - 1, n)\n            if p == n - 1:\n                break\n        else:\n            for i in range(2, n):\n                x, y = i, (i * i + 1) % n\n                f = math.gcd(abs(x - y), n)\n                while f == 1:\n                    x, y = (x * x + 1) % n, (y * y + 1) % n\n                    y = (y * y + 1) % n\n                    f = math.gcd(abs(x - y), n)\n                if f != n:\n                    return f\n    return n    \n \ndef memodict(f):\n    \"\"\"memoization decorator for a function taking a single argument\"\"\"\n    class memodict(dict):\n        def __missing__(self, key):\n            ret = self[key] = f(key)\n            return ret\n \n    return memodict().__getitem__\n \n@memodict\ndef prime_factors_r(n):\n    \"\"\"returns a Counter of the prime factorization of n\"\"\"\n    if n <= 1:\n        return Counter()\n    f = pollard_rho(n)\n    return Counter([n]) if f == n else prime_factors_r(f) + prime_factors_r(n // f)\n \ndef multiply(a, b):\n     \n    # Creating an auxiliary matrix\n    # to store elements of the\n    # multiplication matrix\n    mul = [[0 for x in range(2)]\n              for y in range(2)];\n    for i in range(2):\n        for j in range(2):\n            for k in range(2):\n                mul[i][j] += a[i][k] * b[k][j];\n            mul[i][j] %= (10**9+7 )   \n    return mul\n \n \ndef power(F, n):\n    # print(n)\n    # Multiply it with initial values i.e\n    # with F(0) = 0, F(1) = 1, F(2) = 1\n    if (n == 1):\n        return F\n \n    F_ = power(F, int(n // 2));\n \n    F_ = multiply(F_, F_);\n \n    if (n % 2 != 0):\n        F_ = multiply(F_, F);\n \n    # Multiply it with initial values i.e\n    # with F(0) = 0, F(1) = 1, F(2) = 1\n    return F_ ;\n \n \nfrom bisect import bisect_left as lower_bound\nfrom bisect import bisect_right as upper_bound\n \n \nclass FenwickTree:\n    def __init__(self, x):\n        bit = self.bit = list(x)\n        size = self.size = len(bit)\n        for i in range(size):\n            j = i | (i + 1)\n            if j < size:\n                bit[j] += bit[i]\n \n    def update(self, idx, x):\n        \"\"\"updates bit[idx] += x\"\"\"\n        while idx < self.size:\n            self.bit[idx] += x\n            idx |= idx + 1\n \n    def __call__(self, end):\n        \"\"\"calc sum(bit[:end])\"\"\"\n        x = 0\n        while end:\n            x += self.bit[end - 1]\n            end &= end - 1\n        return x\n \n    def find_kth(self, k):\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\n        idx = -1\n        for d in reversed(range(self.size.bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < self.size and self.bit[right_idx] <= k:\n                idx = right_idx\n                k -= self.bit[idx]\n        return idx + 1, k\n \n \nclass SortedList:\n    block_size = 700\n \n    def __init__(self, iterable=()):\n        self.macro = []\n        self.micros = [[]]\n        self.micro_size = [0]\n        self.fenwick = FenwickTree([0])\n        self.size = 0\n        for item in iterable:\n            self.insert(item)\n \n    def insert(self, x):\n        i = lower_bound(self.macro, x)\n        j = upper_bound(self.micros[i], x)\n        self.micros[i].insert(j, x)\n        self.size += 1\n        self.micro_size[i] += 1\n        self.fenwick.update(i, 1)\n        if len(self.micros[i]) >= self.block_size:\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\n            self.fenwick = FenwickTree(self.micro_size)\n            self.macro.insert(i, self.micros[i + 1][0])\n \n    def pop(self, k=-1):\n        i, j = self._find_kth(k)\n        self.size -= 1\n        self.micro_size[i] -= 1\n        self.fenwick.update(i, -1)\n        return self.micros[i].pop(j)\n \n    def __getitem__(self, k):\n        i, j = self._find_kth(k)\n        return self.micros[i][j]\n \n    def count(self, x):\n        return self.upper_bound(x) - self.lower_bound(x)\n \n    def __contains__(self, x):\n        return self.count(x) > 0\n \n    def lower_bound(self, x):\n        i = lower_bound(self.macro, x)\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\n \n    def upper_bound(self, x):\n        i = upper_bound(self.macro, x)\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\n \n    def _find_kth(self, k):\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\n \n    def __len__(self):\n        return self.size\n \n    def __iter__(self):\n        return (x for micro in self.micros for x in micro)\n \n    def __repr__(self):\n        return str(list(self))\ndef calc_primes(n):\n    return [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n            73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\n            179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\n            283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\n            419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\n            547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659,\n            661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\n            811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941,\n            947, 953, 967, 971, 977, 983, 991, 997]\np = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n            73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173,\n            179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\n            283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409,\n            419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\n            547 ]\n\np = calc_primes(1000)\n\n \n@lru_cache(None)\ndef factorize(n):\n    factorization = set()\n    for d in p:\n        if d * d > n:\n            break\n        while n % d == 0:\n            factorization.add(d)\n            n //= d\n    if n > 1:\n        factorization.add(n)\n    return sorted(factorization)\n \n \n@lru_cache(None)\ndef factorize_full(n):\n    factorization = set([1])\n    for d in p:\n        if d * d > n:\n            break\n        c = 1\n        while n % d == 0:\n            factorization.add(d**c)\n            n //= d\n            c+=1\n    if n > 1:\n        factorization.add(n)\n    return sorted(factorization)\n\n@lru_cache(None)\ndef factorize_full_a(n):\n    factorization = [1]\n    factorization2 = []\n    if n > 1:\n        factorization2.append(n)\n    for d in range(2,int(n**0.5+10)):\n        if d * d > n:\n            break\n        if n % d == 0:\n            factorization.append(d)\n            if n//d!=d:\n                factorization2.append(n//d)\n            \n                \n    return factorization + factorization2[::-1]\n \ndef z(s):\n    n = len(s)\n    ret = [0] * n\n    l = 1\n    ll = 0\n    r = 0\n    while l < len(s):\n        # print(l,ll,r,ret)\n        if l < r:\n            ret[l] = min(ret[l-ll],r-l)\n        \n        i = ret[l]\n        # print(l,s[l:],i)    \n        while l+i < len(s) and s[i] == s[l+i]:\n            ret[l] +=1\n            \n            i +=1\n        if ret[l] >0:\n            if l+i-1 > r:\n                ll = l\n                r = max(r,l+i-1)        \n        l+=1\n    return ret\n \n# def primes(n):\n#     if n<=2:\n#         return []\n#     sieve=[set() for i in range(n+1)]\n#     for x in p:\n#         for y in range(1,(n//x)+1,1):\n#             sieve[(x*y)].add(x)\n#             # sieve[(x*y)].add(n//x)\n#     return [*map(list,sieve)]\n \ndef powm(x, n, m):\n    if (n ==0):\n        return 1\n    elif (n==1):\n        return x%m\n \n    t = powm(x,n//2,m)\n    t = t * t\n    \n    if (n%2==1):\n        t *= x\n    \n    t%=m\n    if (t <0):\n        t +=m\n    return t\n \n \n \ndef z(s):\n    n = len(s)\n    ret = [0] * n\n    l = 1\n    ll = 0\n    r = 0\n    while l < len(s):\n        # print(l,ll,r,ret)\n        if l < r:\n            ret[l] = min(ret[l-ll],r-l)\n        \n        i = ret[l]\n        # print(l,s[l:],i)    \n        while l+i < len(s) and s[i] == s[l+i]:\n            ret[l] +=1\n            \n            i +=1\n        if ret[l] >0:\n            if l+i-1 > r:\n                ll = l\n                r = max(r,l+i-1)        \n        l+=1\n    return ret\n \nimport random as rd\nclass SET():\n    def init(self):\n        self.R = rd.randint(1<<30, 1<<60)\n        self.S = set()\n \n    def IN(self,x):\n        if x^self.R in self.S:\n            return True\n        else:\n            return False\n \n    def add(self, x):\n        self.S.add(self.R^x)\n \n    def erase(self,x):\n        if self.IN(x):\n            self.S.remove(self.R^x)\n \n# total = int(read())\n# n,k = [*map(int, read().split(' '))]\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - (b // a) * y, y)\n \ndef modinv(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\n    \nfrom hashlib import sha256\n \n#Li Chao\nclass Node:\n    def __init__(self):\n        self.k=0\n        self.t = 10**18\n        self.L, self.R=-10**18,10**18+5\n        self.left = None\n        self.right = None\n        \ndef UpdateHelper(curr, k_new, t_new):\n    f = lambda x,k,t: k*x+t\n    \n    \n\n    m = curr.L + (curr.R-curr.L) // 2+1\n    # print(curr.L,curr.R, m)\n    lef = f(curr.L,curr.k,curr.t) > f(curr.L,k_new,t_new)\n    mid = f(m,curr.k,curr.t) > f(m,k_new,t_new)\n    \n    if mid :\n        tmp = k_new, t_new\n        k_new, t_new = curr.k,curr.t\n        curr.k,curr.t = tmp\n        \n    if curr.R == curr.L:\n        return \n \n    # If the index is in the left subtree\n    if (lef != mid) :\n \n        # Create a new node if the left\n        # subtree is None\n        if (curr.left == None):\n            curr.left = Node()\n            curr.left.L = curr.L\n            curr.left.R = m-1\n            curr.left.k = k_new\n            curr.left.t = t_new\n            \n            \n            \n        # Recursively call the function\n        # for the left subtree\n        else:\n            # print(curr.left.L, curr.left.R)\n            UpdateHelper(curr.left, k_new, t_new)\n     \n \n    # If the index is in the right subtree\n    else :\n \n        # Create a new node if the right\n        # subtree is None\n        if (curr.right == None):\n            curr.right = Node()\n            curr.right.L = m\n            curr.right.R = curr.R\n            curr.right.k = k_new\n            curr.right.t = t_new\n            \n \n        # Recursively call the function\n        # for the right subtree\n        else:\n            # print(curr.right.L, curr.right.R)\n            UpdateHelper(curr.right, k_new, t_new)\n     \n\n    return\n \n \n# Function to find the sum of the\n# values given by the range\ndef queryHelper(curr, x):\n \n    # Return 0 if the root is None\n    if (curr == None):\n        return 10**18\n\n    m = curr.L + (curr.R-curr.L) // 2+1\n    if curr.R == curr.L:\n        return curr.k*x + curr.t\n    elif (x < m):\n        return min(curr.k*x + curr.t, queryHelper(curr.left,x))\n    else:\n        return min(curr.k*x + curr.t, queryHelper(curr.right,x))\n    \n\n \ndef pow( x,  n, m):\n    if (n ==0):\n        return 1;\n    elif (n==1):\n        return x%m;\n \n    t = pow(x,n//2,m);\n    t = t * t;\n    \n    if (n%2==1):\n        t *= x;\n    \n    t%=m;\n    if (t <0):\n        t +=m;\n    return t;\nimport itertools\nfrom functools import reduce\n\n\n@lru_cache(None)\ndef factors(n):    \n    return set(reduce(list.__add__, \n                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\n \n# n,x = [*map(int, read().split(' '))]\n \n# s =  [*map(int, read().split(' '))]\n# f =  [*map(int, read().split(' '))]\n \n \n \n# a = [0, 1, 19, 271, 3439, 40951, 468559, 5217031, 56953279, 612579511, 6513215599, 68618940391, 717570463519, 7458134171671, 77123207545039, 794108867905351, 8146979811148159, 83322818300333431, 849905364703000879, 8649148282327007911, 87842334540943071199]\n         \n# def c4(n):\n#     if (n < 4):\n#         return 0\n#     d = int(math.log10(n))\n#     p = math.ceil(10**d)\n#     msb = n // p\n#     if (msb == 4):\n#         return (msb) * a[d] + (n % p) + 1\n#     if (msb > 4):\n#         return ((msb - 1) * a[d] + p +\n#                  c4(n % p))\n#     return (msb) * a[d] + c4(n % p)\n \n        \n \n# def f(x):\n#     return x - c4(x)\n \n# \n \n \n# total = int(read())\n# total = 1000\ntotal = 1\n \nmod = 998244353\n# mod = 1000000007\npow2 = [1]\nipow2 = [1] \nfor i in range(1,500007):\n    pow2.append((pow2[-1]*2)%mod  )\n\n# t = pow(2,mod-2,mod)\n# for i in range(1,10**7+10):\n#     ipow2.append((ipow2[-1]* t )%mod  )\n# pow3 = [1]\n \n# for i in range(1,10**7+10):\n#     pow3.append((pow3[-1]*3)%mod  )\n    \n# pow4m = [1]\n \n# mlt = pow(4, mod-2,mod)\n   \n# for i in range(1,10**7+10):\n#     pow4m.append((pow4m[-1]*mlt)%mod  )\n \n# pow34 = [1]\n \n# mlt = (3*pow(4, mod-2,mod))%mod\n   \n# for i in range(1,10**7+10):\n#     pow34.append((pow34[-1]*mlt)%mod  )\n \n\n# fct = [1]\n# for i in range(1,200007):\n#     fct+= [(fct[-1] * i)%mod]\n\n\n\n\n# import numpy as np \n# total = 1000000 \n# p = primes_rwh(100007)\n# s = set(p)\n\n# efficient factorization\n\n# lim = 10**5 + 10\n# mod = 10**9 + 7\n# primefac = [1]*lim\n# for i in range(2, lim):\n#     if primefac[i] == 1:\n#         for j in range(i, lim, i): primefac[j] = i\n\n# n,m =  [*map(int, read().split(' '))] \n# x =  [*map(int, read().split(' '))] \n\n# x = [95, 143, 58 ,119, 69]\n\n# p = primes_rwh(10**7+10)\n# dmax = [0] * (10**7+10)\n# g = x[0]    \n# import numpy as np\n\ntotal = int(read())\n# dp = [[0] * 9 for i in range(2)]\n# total = 100000000\n# total, s = [*map(int, read().split(' '))]\n\n\nfor _ in range(total):  \n    # s = read()\n    # n = len(s)\n    # n,m = [*map(int, read().split(' '))]\n    n = int(read())\n    # b = int(read())\n    # s = list(read())\n    # x,y,z = [*map(int, read().split(' '))]\n    a = [*map(int, read().split(' '))]\n    # b = [*map(int, read().split(' '))]\n    # c = [*map(int, read().split(' '))]\n    # n,k = 10,100\n    # x=[5, 3, 0 ,4 ,2 ,1, 6, 9, 10, 8]\n    # x = [*map(int, list(read()))]\n    # x = [*map(int, read().split(' '))]\n    # n,p,l,t = [8, 120, 10, 20]\n    # a = [2, -4, -6]\n    # n = 3\n    # n = 4\n    # for n in range(1,500):\n    # l,r,p = 1,14,2    \n    # s = list('2001000')\n    # s = '011'\n    # a = [2, 1]\n    \n    # n = 300000\n    # a = [*range(1,1+n)]\n    # n = 6\n    # a = [3, 2, 4, 2, 5, 5]\n    # b = [9, 4, 7, 9, 2, 5 ]\n    # a = [4,1,3,2]\n    \n    # a = [2, 8, 2, 6, 4]\n    \n    # a = [1,1,0,1,1]\n    # n = 6\n    # s = list('bacedbab')\n    # n = len(s)\n   \n    s = set([0])\n\n    g = False\n    f =  [0,0]\n    \n    for i in range(n):\n        f[i%2] += a[i]\n        if f[1]-f[0] in s:\n            g =True\n            break\n        s.add(f[1]-f[0])\n    if g:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n        ",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 724,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240929587",
            "author": "irlenp",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 23800,
            "submissionTime": 1704784440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240929541",
            "author": "irlenp",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704784380
        },
        "acceptedCode": "a = int(input())\r\nfor i in range(a):\r\n    s = int(input())\r\n    f = map(int, input().split())\r\n    k = sum(f)\r\n    print(\"YES\" * (int(k ** 0.5) * int(k ** 0.5) == k) + \"NO\" * ((int(k ** 0.5) * int(k ** 0.5) != k)))\r\n",
        "rejectedCode": "a = int(input())\r\nfor i in range(a):\r\n    s = int(input())\r\n    f = map(int, input().split())\r\n    k = sum(f)\r\n    print(\"YES\" * (int(k ** 0.5) * int(k ** 0.5) == k) + \"NO\" * ((int(k ** 0.5) * int(k ** 0.5) != k))\r\n",
        "failedTestCase": null,
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240928622",
            "author": "kvss",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704783900
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240928291",
            "author": "kvss",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704783720
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    for i in range(3):\r\n        s=input()\r\n        if 'A' not in s:\r\n            print('A')\r\n        if 'B' not in s:\r\n            print('B')\r\n        if 'C' not in s:\r\n            print('C')\r\n",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    x=[]\r\n    s='ABC'\r\n    for i in range(t):\r\n        a,b,c=map(str,input().split())\r\n        x.append([a,b,c])\r\n    for i in range(t):\r\n        if 'A' not in x[i]:\r\n            print('A')\r\n        if 'B' not in x[i]:\r\n            print('B')\r\n        if 'C' not in x[i]:\r\n            print('C')\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240986303",
            "author": "skshitij269",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 8800,
            "submissionTime": 1704814440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240985437",
            "author": "skshitij269",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704813540
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    s=list(input())\r\n    for i in range(2,n):\r\n        if s[i] in \"ae\":\r\n            s[i-1]='.'+s[i-1]\r\n    print(\"\".join(s))",
        "rejectedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    square = [input().strip() for _ in range(3)]\r\n\r\n    row_mask = [0, 0, 0]\r\n    col_mask = [0, 0, 0]\r\n\r\n    # Calculate row and column bitmasks\r\n    for i in range(3):\r\n        for j in range(3):\r\n            if square[i][j] == 'A':\r\n                row_mask[i] |= (1 << j)\r\n                col_mask[j] |= (1 << i)\r\n            elif square[i][j] == 'B':\r\n                row_mask[i] |= (2 << j)\r\n                col_mask[j] |= (2 << i)\r\n            elif square[i][j] == 'C':\r\n                row_mask[i] |= (3 << j)\r\n                col_mask[j] |= (3 << i)\r\n\r\n    # Check rows\r\n    for i in range(3):\r\n        if row_mask[i] == 3 or row_mask[i] == 6:\r\n            print('A')\r\n            break\r\n        elif row_mask[i] == 5 or row_mask[i] == 1:\r\n            print('B')\r\n            break\r\n        elif row_mask[i] == 2 or row_mask[i] == 4:\r\n            print('C')\r\n            break\r\n\r\n    # Check columns\r\n    else:\r\n        for j in range(3):\r\n            if col_mask[j] == 3 or col_mask[j] == 6:\r\n                print('A')\r\n                break\r\n            elif col_mask[j] == 5 or col_mask[j] == 1:\r\n                print('B')\r\n                break\r\n            elif col_mask[j] == 2 or col_mask[j] == 4:\r\n                print('C')\r\n                break\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240931647",
            "author": "Paras2856",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 608,
            "memory": 18200,
            "submissionTime": 1704785520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240931497",
            "author": "Paras2856",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1704785460
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    summ=sum(l)**0.5\r\n    if summ-int(summ)==0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    summ=sum(l)\r\n    if summ**0.5-int(summ)==0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240890179",
            "author": "varun9901",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 29600,
            "submissionTime": 1704762660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240890068",
            "author": "varun9901",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704762600
        },
        "acceptedCode": "for s in[*open(0)][2::2]:\r\n a=[0];i=1\r\n for x in s.split():a+=a[-1]+int(x)*i,;i=-i\r\n print('YNEOS'[len(a)==len({*a})::2])",
        "rejectedCode": "for s in[*open(0)][2::2]\r\n a=[0];i=1\r\n for x in s.split():a+=a[-1]+int(x)*i,;i=-i\r\n print('YNEOS'[len(a)==len({*a})::2])",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240931272",
            "author": "sapandeep31",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 373,
            "memory": 32800,
            "submissionTime": 1704785340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240930128",
            "author": "sapandeep31",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 2,
            "runTime": 1000,
            "memory": 8400,
            "submissionTime": 1704784740
        },
        "acceptedCode": "def pakkasq(a):\r\n    b=int(a**0.5)\r\n    return a==b**2\r\n\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int, input().split()))\r\n    \r\n    if pakkasq(sum(a)):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")     ",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int, input().split()))\r\n    flag=0\r\n    \r\n    for i in range(200000):\r\n        if i*i==sum(a):\r\n            flag=1\r\n            break\r\n        else:\r\n            continue\r\n    if flag==1:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")        ",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240847473",
            "author": "ers0704",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 8800,
            "submissionTime": 1704716940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240847316",
            "author": "ers0704",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704716880
        },
        "acceptedCode": "C={'b','c','d'}\r\nt = int(input())\r\nfor i in range(t):\r\n   n = int(input())\r\n   s=input()\r\n   d=[]\r\n   j=0\r\n   while j+3<n:\r\n      if s[j] in C and s[j+3] in C:\r\n         d.append(s[j:j+3])\r\n         j+=3\r\n      else:\r\n         d.append(s[j:j+2])\r\n         j+=2\r\n   d.append(s[j:])\r\n   print('.'.join(d))",
        "rejectedCode": "C={'b','c','d'}\r\nt = int(input())\r\nfor i in range(t):\r\n   n = int(input())\r\n   s=input()\r\n   d=[]\r\n   j=0\r\n   while j<n:\r\n      if s[j] in C and s[j+3] in C:\r\n         d.append(s[j:j+3])\r\n         j+=3\r\n      else:\r\n         d.append(s[j:j+2])\r\n         j+=2\r\n   d.append(s[j:])\r\n   print('.'.join(d))\r\n          ",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240848052",
            "author": "rafitboo",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1704717180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240847297",
            "author": "rafitboo",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704716820
        },
        "acceptedCode": "num=int(input())\r\nfor i in range(num):\r\n    val=list(map(int,input().split(\" \")))\r\n    if val[0]!=val[1] and val[0]!=val[2]:\r\n        print(val[0])\r\n    elif val[1]!=val[0] and val[1]!=val[2]:\r\n        print(val[1])\r\n    elif val[2]!=val[0] and val[2]!=val[1]:\r\n        print(val[2])",
        "rejectedCode": "num=int(input(\"num: \"))\r\nfor i in range(num):\r\n    val=list(map(int,input().split(\" \")))\r\n    if val[0]!=val[1] and val[0]!=val[2]:\r\n        print(val[0])\r\n    elif val[1]!=val[0] and val[1]!=val[2]:\r\n        print(val[1])\r\n    elif val[2]!=val[0] and val[2]!=val[1]:\r\n        print(val[2])",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "num: 1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong output format Expected integer, but \"num:\" found\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240865575",
            "author": "SaiGanesh-Coder",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 26200,
            "submissionTime": 1704728400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240845008",
            "author": "SaiGanesh-Coder",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704715920
        },
        "acceptedCode": "import math\r\ndef main():\r\n    t=int(input())\r\n    \r\n    for _ in range(t):\r\n        n=int(input())\r\n        squares = list(map(int, input().split()))\r\n        finalAns = int(math.sqrt(sum(squares)))\r\n        if finalAns*finalAns == sum(squares):\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n\r\nif __name__ == \"__main__\":\r\n    main()",
        "rejectedCode": "n = int(input())\r\n\r\nwhile n:\r\n    len = int(input())\r\n    sum=0\r\n    list = [int(i) for i in input().split()]\r\n    for i in list:\r\n        sum+=i\r\n    square = int(math.sqrt(sum))\r\n    if square*square == sum:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    n-=1",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240797482",
            "author": "Devarshi_19",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 280,
            "memory": 28500,
            "submissionTime": 1704694500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240797373",
            "author": "Devarshi_19",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704694440
        },
        "acceptedCode": "t=int(input())\r\n\r\nwhile t>0:\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    o=0\r\n    e=0\r\n    s=set()\r\n    k=0\r\n    m=0\r\n    a=0\r\n    for i in range(n):\r\n        if i%2==0:\r\n            o=o+l[i] \r\n        else:\r\n            e=e+l[i] \r\n        d=o-e \r\n        if i>=2:\r\n            if i%2==0:\r\n                m=m+l[a]\r\n            else:\r\n                m=m-l[a]\r\n            s.add(m)\r\n            a=a+1\r\n        if d==0:\r\n            k=1 \r\n            break \r\n        else:\r\n            if d in s:\r\n                k=1 \r\n                break\r\n    #print(o,e)        \r\n    if k==1:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    t=t-1    \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n        ",
        "rejectedCode": "t=int(input())\r\n\r\nwhile t>0:\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    o=0\r\n    e=0\r\n    s=set()\r\n    k=0\r\n    m=0\r\n    a=0\r\n    for i in range(n):\r\n        if i%2==0:\r\n            o=o+l[i] \r\n        else:\r\n            e=e+l[i] \r\n        d=o-e \r\n        if i>=2:\r\n            if i%2==0:\r\n                m=m+l[a]\r\n            else:\r\n                m=m-l[a]\r\n            s.add(m)\r\n            a=a+1\r\n        if d==0:\r\n            k=1 \r\n            break \r\n        else:\r\n            if d in s:\r\n                k=1 \r\n                break\r\n    print(o,e)        \r\n    if k==1:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    t=t-1    \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n        ",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "3 3\r\nYES\r\n1 1\r\nYES\r\n86 21\r\nNO\r\n14 13\r\nYES\r\n10 19\r\nNO\r\n16 9\r\nYES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong output format YES or NO expected, but 3 found [1st token]\r\n"
        },
        "errorLine": 32,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240832396",
            "author": "Faiz-ur-Rehman_",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 26200,
            "submissionTime": 1704710280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240832134",
            "author": "Faiz-ur-Rehman_",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704710160
        },
        "acceptedCode": "import math\r\n \r\ndef checker(c):\r\n    res = math.sqrt(c)\r\n    if math.ceil(res) == res:\r\n        return True\r\n    else:\r\n        return False\r\n \r\ndef solve():\r\n    n = int(input())\r\n    ls = list(map(int,input().split()))\r\n    count = sum(ls)\r\n \r\n    ans = checker(count)\r\n    if ans:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n \r\n \r\nt = int(input())\r\nwhile t > 0:\r\n    solve()\r\n    t -= 1\r\n    ",
        "rejectedCode": "import math\r\n \r\ndef checker(c):\r\n    res = math.sqrt(c)\r\n    if math.ceil(res) == res:\r\n        return True\r\n    else:\r\n        return False\r\n \r\ndef solve():\r\n    n = int(input())\r\n    ls = [int(input()) for _ in range(n)]\r\n    count = sum(ls)\r\n \r\n    ans = checker(count)\r\n    if ans:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n \r\ndef main():\r\n    t = int(input())\r\n    while t > 0:\r\n        solve()\r\n        t -= 1\r\nif __name__ == \"__main__\":\r\n    main()",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "YES\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 12,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240811168",
            "author": "deepika_ch",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 26200,
            "submissionTime": 1704700800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240810460",
            "author": "deepika_ch",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704700560
        },
        "acceptedCode": "import math\r\nt=int(input())\r\nwhile t>0:\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    m=math.sqrt(sum(l))\r\n    k=int(m)\r\n    if m==k:\r\n        print(\"yes\")\r\n    else:\r\n        print(\"No\")\r\n    t=t-1",
        "rejectedCode": "import math\r\nt=int(input())\r\nwhile t>0:\r\n    n=int(input())\r\n    l=list(map(int,input().split())\r\n    m=math.sqrt(sum(l))\r\n    k=int(m)\r\n    if m==k:\r\n        print(\"yes\")\r\n    else:\r\n        print(\"No\")\r\n    t=t-1",
        "failedTestCase": null,
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240795778",
            "author": "davidus",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 14600,
            "submissionTime": 1704693480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240793646",
            "author": "davidus",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12800,
            "submissionTime": 1704692220
        },
        "acceptedCode": "# import sys\n# input=sys.stdin.readline\n\ntt = int(input())\n\nfor _ in range(tt):\n    n = int(input())\n    s = input().strip()\n    out = []\n    last=n-1\n    while last>0:\n        if(s[last] in 'bcd'):\n            out.append(s[last-2:last+1])\n            last-=3\n        else:\n            out.append(s[last-1:last+1])\n            last-=2\n    print(*out[::-1], sep='.')",
        "rejectedCode": "tt = int(input())\n\nfor _ in range(tt):\n    n = int(input())\n    s = str(input())\n    out = []\n    last=n-1\n    while last>0:\n        if(s[last] in ['b', 'c', 'd']):\n            out = [s[last-2:last+1]] + out\n            last-=3\n        else:\n            out = [s[last-1:last+1]] + out\n            last-=2\n    print(*out, sep='.')",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240789588",
            "author": "adi33",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704689760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240788473",
            "author": "adi33",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704689220
        },
        "acceptedCode": "\r\n\"\"\" def take_input():\r\n    num1= int(input())\r\n    num2= int(input())\r\n    num3= int(input())\r\n    return num1,num2,num3 \"\"\"\r\n\"\"\" def compare_three_nums(num1,num2,num3):\r\n    if num1==num2:\r\n        ans= num3 \r\n    else:\r\n        if num2==num3:\r\n            ans= num1\r\n        else:\r\n            if num1==num3:\r\n                ans=num2\r\n    return ans \"\"\"\r\n\r\nnumber_of_iterations=int(input())\r\nans=0   \r\nfor i in range(number_of_iterations):\r\n    num=input()\r\n    num=num.replace(' ','')\r\n    num1= num[0]\r\n    num2= num[1]\r\n    num3= num[2]  \r\n    if num1==num2:\r\n        ans= num3 \r\n    else:\r\n        if num2==num3:\r\n            ans= num1\r\n        else:\r\n            if num1==num3:\r\n                ans=num2\r\n    print(ans)\r\n    \r\n",
        "rejectedCode": "number_of_iterations=int(input())\r\nans=0\r\n\"\"\" def take_input():\r\n    num1= int(input())\r\n    num2= int(input())\r\n    num3= int(input())\r\n    return num1,num2,num3 \"\"\"\r\n\"\"\" def compare_three_nums(num1,num2,num3):\r\n    if num1==num2:\r\n        ans= num3 \r\n    else:\r\n        if num2==num3:\r\n            ans= num1\r\n        else:\r\n            if num1==num3:\r\n                ans=num2\r\n    return ans \"\"\"\r\n    \r\n    \r\nfor i in range(number_of_iterations):\r\n    num1= int(input())\r\n    num2= int(input())\r\n    num3= int(input())\r\n    if num1==num2:\r\n        ans= num3 \r\n    else:\r\n        if num2==num3:\r\n            ans= num1\r\n        else:\r\n            if num1==num3:\r\n                ans=num2\r\n    print(ans)\r\n    \r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240789472",
            "author": "Harshx",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704689760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240788871",
            "author": "Harshx",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704689460
        },
        "acceptedCode": "n = int(input())\r\nl=[]\r\n\r\nfor i in range(0,n):\r\n    x,y,z =input().split(' ')\r\n    if x==y:\r\n        l.append(z)\r\n    elif x==z:\r\n        l.append(y)\r\n    else:\r\n        l.append(x)\r\n\r\nfor i in l:\r\n    print(i)\r\n",
        "rejectedCode": "n = int(input())\r\n\r\n\r\nfor i in range(0,n):\r\n    x=int(input())\r\n    y=int(input())\r\n    z=int(input())\r\n    if x==y:\r\n        print(z)\r\n    elif x==z:\r\n        print(y)\r\n    else:\r\n        print(x)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240787512",
            "author": "Aadityaa1",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704688740
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240787446",
            "author": "Aadityaa1",
            "lang": "Python 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704688680
        },
        "acceptedCode": "n = int(input())\r\n\r\nfor i in range(n):\r\n    a,b,c = input().split()\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "rejectedCode": "n = int(input())\r\n\r\nfor i in range(n):\r\n    a,b,c = input().split()\r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240784794",
            "author": "M4qa1",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 26200,
            "submissionTime": 1704687180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240784358",
            "author": "M4qa1",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704686940
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    cem=0\r\n    for i in range(n):\r\n        cem+=a[i]\r\n    k=int(cem**(1/2))\r\n    if k**2!=cem:\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")\r\n",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    a=input()\r\n    b=input()\r\n    c=input()\r\n    asay=0\r\n    bsay=0\r\n    csay=0\r\n    for i in range(3):\r\n        if a[i]==\"A\":\r\n            asay+=1\r\n        if a[i]==\"B\":\r\n            bsay+=1\r\n        if a[i]==\"C\":\r\n            csay+=1\r\n        if b[i]==\"A\":\r\n            asay+=1\r\n        if b[i]==\"B\":\r\n            bsay+=1\r\n        if b[i]==\"C\":\r\n            csay+=1\r\n        if b[i]==\"A\":\r\n            asay+=1\r\n        if b[i]==\"B\":\r\n            bsay+=1\r\n        if b[i]==\"C\":\r\n            csay+=1\r\n    if asay!=3:\r\n        print(\"A\")\r\n    elif bsay!=3:\r\n        print(\"B\")\r\n    else:\r\n        print(\"C\")\r\n",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nC\r\nC\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nC\r\nC\r\nC\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nC\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nC\r\nC\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nC\r\nC\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nC\r\nC\r\nC\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nC\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nC\r\nC\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nC\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nC\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nC\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nC\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 8th words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240782334",
            "author": "cdg0228",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 28900,
            "submissionTime": 1704685800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240781910",
            "author": "cdg0228",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 31000,
            "submissionTime": 1704685560
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    nums = list(map(int,input().split()))\r\n    vis = {0}\r\n    tmp = 0\r\n    for i in range(n):\r\n        if i%2!=0:\r\n            nums[i] = -nums[i]\r\n        tmp += nums[i]\r\n        if tmp in vis:\r\n            print(\"YES\")\r\n            break\r\n        vis.add(tmp)\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "import sys\r\ninput = sys.stdin.readline\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    nums = list(map(int,input().split()))\r\n    vis = {0}\r\n    tmp = 0\r\n\r\n    for i in range(n):\r\n        if i%2==0:\r\n            nums[i] = -nums[i]\r\n        tmp += nums[i]\r\n        if tmp in vis:\r\n            print(\"YES\")\r\n            break\r\n        vis.add(tmp)\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240791653",
            "author": "manohar_baddam",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26200,
            "submissionTime": 1704690960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240791514",
            "author": "manohar_baddam",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 3,
            "runTime": 124,
            "memory": 2800,
            "submissionTime": 1704690900
        },
        "acceptedCode": "T = int(input())\r\n \r\nfor t in range(T):\r\n    n = int(input())\r\n    nums= list(map(int,input().split()))\r\n    sum_nums = sum(nums)\r\n    s_n= str((sum_nums**0.5))\r\n    if len(s_n) <= 10:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "T = int(input())\r\n\r\nfor t in range(T):\r\n    n = int(input())\r\n    nums= list(map(int,input().split()))\r\n    sum_nums = sum(nums)\r\n    s_n= str((sum_nums**0.5))\r\n    if len(s_n) <= 5:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240759669",
            "author": "hofung614",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 404,
            "memory": 29500,
            "submissionTime": 1704668340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240757611",
            "author": "hofung614",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 32800,
            "submissionTime": 1704664980
        },
        "acceptedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    k = list(map(int,input().split()))\r\n    prefix_sum = [0]\r\n    for j in range(n):\r\n        prefix_sum += [prefix_sum[-1]+k[j]*(-1)**j]\r\n    prefix_sum.sort()\r\n    for i in range(n):\r\n        if prefix_sum[i] == prefix_sum[i+1]:\r\n            print(\"YES\")\r\n            break\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    k = list(map(int,input().split()))\r\n    prefix_sum = [0]\r\n    for j in range(n):\r\n        prefix_sum.append(prefix_sum[-1]+k[j]*(-1)**j)\r\n    print([\"YES\",\"NO\"][len(prefix_sum) == len(set(prefix_sum))])",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240745416",
            "author": "siddiqur_rahman",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 10300,
            "submissionTime": 1704642840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240744782",
            "author": "siddiqur_rahman",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12100,
            "submissionTime": 1704642180
        },
        "acceptedCode": "t = int(input())\r\n\r\nvowel = ['a', 'e']\r\nconsonant = ['b', 'c', 'd']\r\nfor _ in range(t):\r\n    n = int(input())\r\n    str = input()\r\n\r\n    ans = []\r\n    i = n-1\r\n    while i >= 0:\r\n        if str[i] in consonant:\r\n            ans.append(str[i-2:i+1])\r\n            i -= 3\r\n        else:\r\n            ans.append(str[i-1:i+1])\r\n            i -= 2\r\n    print(\".\".join(ans[::-1]))",
        "rejectedCode": "t = int(input())\r\n\r\nvowel = ['a', 'e']\r\nconsonant = ['b', 'c', 'd']\r\nfor _ in range(t):\r\n    n = int(input())\r\n    str = input()\r\n\r\n    ans = ''\r\n    i = n-1\r\n    while i >= 0:\r\n        if str[i] in consonant:\r\n            ans += str[i]\r\n            i -= 1\r\n            ans += str[i]\r\n            i -= 1\r\n            ans += str[i]\r\n            if i != 0:\r\n                ans += '.'\r\n        else:\r\n            ans += str[i]\r\n            i -= 1\r\n            ans += str[i]\r\n            if i != 0:\r\n                ans += '.'\r\n\r\n        i -= 1\r\n    \r\n    res = ''.join(reversed(ans))\r\n    print(res)       ",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240753709",
            "author": "Fahim_Anin",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1704658320
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240753524",
            "author": "Fahim_Anin",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 700,
            "submissionTime": 1704657900
        },
        "acceptedCode": "import math\r\n\r\nd = int(input())\r\n\r\nwhile d > 0:\r\n    n = int(input())\r\n    a = list(map(int, input().strip().split()))\r\n    \r\n    b = sum(a)\r\n    sqrt_b = int(math.sqrt(b))\r\n    \r\n    if sqrt_b ** 2 == b:\r\n        print(\"yes\")\r\n    else:\r\n        print(\"no\")\r\n\r\n    d -= 1\r\n",
        "rejectedCode": "d=int(input())\r\n\r\nwhile d>0:\r\n    n=int(input())\r\n    a = list(map(int, input().strip().split()))\r\n    b=sum(a)\r\n    c=1\r\n    flag=0\r\n    while c<=b:\r\n        if c**2 == b:\r\n            flag=0\r\n            break\r\n        else:\r\n            flag+=1\r\n            \r\n        \r\n        c+=1 \r\n    if flag ==0:\r\n        print(\"yes\")\r\n    else:\r\n        print(\"no\")    \r\n    d-=1\r\n    \r\n",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "yes\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240749971",
            "author": "Scriptmagnum",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704649860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240162754",
            "author": "Scriptmagnum",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704304920
        },
        "acceptedCode": "for s in [*open(0)][1::1]:\r\n    z=list(map(int,s.split()))\r\n    l=sorted(z,key=lambda x:z.count(x))\r\n    print(l[0])",
        "rejectedCode": "n=int(input())\r\nl=list(map(int,input().split()))\r\nprint(['NO','YES'][(sum(l)**0.5).is_integer()])\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "YES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 5], but output contains 1 elements\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240738875",
            "author": "_Zeenath",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704636960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240738055",
            "author": "_Zeenath",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704636360
        },
        "acceptedCode": "n=int(input())\r\ndef isthere(f):\r\n    if \"A\" in f and \"B\" in f:\r\n        print(\"C\")\r\n    elif \"B\" in f and \"C\" in f:\r\n        print(\"A\")\r\n    else:\r\n        print(\"B\")\r\nfor _ in range(n):\r\n    f=input()\r\n    s=input()\r\n    t=input()\r\n    if \"?\" in f:\r\n        isthere(f)\r\n    elif \"?\" in s:\r\n        isthere(s)\r\n    else:\r\n        isthere(t) \r\n   ",
        "rejectedCode": "n=int(input())\r\nfor i in range(n):\r\n    f=input()\r\n    s=input()\r\n    t=input()\r\n    if \"?\" in f:\r\n        if \"a\" in f and \"b\" in f:\r\n            print(\"c\")\r\n        elif \"b\" in f and \"c\" in f:\r\n            print(\"a\")\r\n        else:\r\n            print(\"b\")\r\n    elif \"?\" in s:\r\n        if \"a\" in s and \"b\" in s:\r\n            print(\"c\")\r\n        elif \"b\" in s and \"c\" in s:\r\n            print(\"a\")\r\n        else:\r\n            print(\"b\")\r\n    else:\r\n        if \"a\" in t and \"b\" in t:\r\n            print(\"c\")\r\n        elif \"b\" in t and \"c\" in t:\r\n            print(\"a\")\r\n        else:\r\n            print(\"b\")",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "b\r\nb\r\nb\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'b'\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240736131",
            "author": "shashi_iitd",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 20200,
            "submissionTime": 1704634980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240733152",
            "author": "shashi_iitd",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704633180
        },
        "acceptedCode": "i=int(input())\r\nk=0\r\nfor k in range(i):\r\n    j=int(input())\r\n    l=0\r\n    s=0\r\n    ls = map(int,input().split())\r\n    for m in ls:\r\n        s+=m\r\n    q=int(s**0.5)\r\n    if (q*q==s):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "i=int(input())\r\nk=0\r\nfor k in range(i):\r\n        j=int(input())\r\n        l=0\r\n        s=0\r\n        for l in range(j):\r\n            p=int(input())\r\n            s=p+s\r\n            l=l+1\r\n        q=int(s**0.5)\r\n        if (s==(q*q)):\r\n                    print(\"YES\")\r\n        else:\r\n                    print(\"NO\")     \r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "YES\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240731087",
            "author": "Narukame_Kenji",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 30400,
            "submissionTime": 1704632100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240730464",
            "author": "Narukame_Kenji",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 33300,
            "submissionTime": 1704631740
        },
        "acceptedCode": "import io,os\r\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\r\nfrom collections import Counter \r\ndef check(n,lst):\r\n  c=0\r\n  d=[]\r\n  for i in range(n):\r\n    if i%2==1:\r\n      c+=lst[i]\r\n    else:\r\n      c-=lst[i]\r\n    if c==0:\r\n      return \"YES\"\r\n    d.append(c)\r\n  d.sort()\r\n  for i in range(len(d)-1):\r\n    if d[i+1]==d[i]:\r\n      return \"YES\"\r\n  return \"NO\"\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\nfor i in range(int(input())):\r\n  n=int(input())\r\n  lst=list(map(int,input().split()))\r\n  print(check(n,lst))",
        "rejectedCode": "import io,os\r\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\r\nfrom collections import Counter \r\ndef check(n,lst):\r\n  c=0\r\n  d=[]\r\n  for i in range(n):\r\n    if i%2==1:\r\n      c+=lst[i]\r\n    else:\r\n      c-=lst[i]\r\n    if c==0:\r\n      return \"YES\"\r\n    d.append(c)\r\n  a= Counter(d)\r\n  for e in a:\r\n    if a[e]>1:\r\n      return \"YES\"\r\n  return \"NO\"\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\nfor i in range(int(input())):\r\n  n=int(input())\r\n  lst=list(map(int,input().split()))\r\n  print(check(n,lst))",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 15,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240654605",
            "author": "v_meenakshi",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704595740
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240653920",
            "author": "v_meenakshi",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704595320
        },
        "acceptedCode": "def odd(a,b,c):\r\n    if a==b:\r\n        print(c)\r\n    elif a==c:\r\n        print(b)\r\n    elif b==c:\r\n        print(a)\r\nn= int(input())\r\nfor _ in range(n):\r\n    a,b,c=map(int,input().split())\r\n    odd(a,b,c)",
        "rejectedCode": "def odd(a,b,c):\r\n    if a==b:\r\n        print(c)\r\n    elif b==c:\r\n        print(a)\r\n    elif(a==c:\r\n        print(b)\r\nn= int(input())\r\nfor _ in range(n):\r\n    a,b,c=map(int,input().split())\r\n    odd(a,b,c)",
        "failedTestCase": null,
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "240722336",
            "author": "quocdat.le.insacvl",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1200,
            "memory": 40900,
            "submissionTime": 1704627660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240712681",
            "author": "quocdat.le.insacvl",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704622440
        },
        "acceptedCode": "import sys\r\nfrom builtins import pow\r\nfrom heapq import heappush as pu, heappop as po \r\n\r\nsys.setrecursionlimit(100000000)\r\n\r\nip    = lambda: input()\r\ninp    = lambda: int(input())\r\nstrng  = lambda: input().strip()\r\njn     = lambda x,l: x.join(map(str,l))\r\nstrl   = lambda: list(input().strip())\r\nmul    = lambda: map(int,input().strip().split())\r\nmulf   = lambda: map(float,input().strip().split())\r\nseq    = lambda: list(map(int,input().strip().split()))\r\n\r\nmod=1000000007\r\ninf=1e18\r\n\r\nfor t in range(1, int(input())+1):\r\n    n, m = mul()\r\n    adj = [[] for _ in range(n)]\r\n    for _ in range(m):\r\n        u,v,w = mul()\r\n        u -= 1; v -= 1;\r\n        adj[u].append((v,w));\r\n        adj[v].append((u,w));\r\n    s = seq()\r\n\r\n    dist = [[inf]*1001 for _ in range(n)]\r\n    dist[0][s[0]] = 0\r\n\r\n    vis = [[False] * 1001 for _ in range(n)]\r\n\r\n    pq = []\r\n    pu(pq, (0, 0, s[0]));\r\n    while len(pq) > 0:\r\n        _, u, k = po(pq)\r\n        if vis[u][k] or dist[u][k] == inf: continue\r\n        vis[u][k] = True\r\n        # print(u, '...')\r\n        for v, w in adj[u]:\r\n            c = min(s[v], k);\r\n            if dist[v][c] > dist[u][k] + w*k :\r\n                dist[v][c] = dist[u][k] + w*k\r\n                pu(pq, (dist[v][c], v, c));\r\n\r\n    ans = inf;\r\n    for k in range(1, 1001):\r\n        ans = min(ans, dist[n-1][k]);\r\n    print(ans);\r\n",
        "rejectedCode": "import sys\r\nfrom builtins import pow\r\n\r\nfrom sortedcontainers import SortedList\r\n\r\nsys.setrecursionlimit(100000000)\r\n\r\nip    = lambda: input()\r\ninp    = lambda: int(input())\r\nstrng  = lambda: input().strip()\r\njn     = lambda x,l: x.join(map(str,l))\r\nstrl   = lambda: list(input().strip())\r\nmul    = lambda: map(int,input().strip().split())\r\nmulf   = lambda: map(float,input().strip().split())\r\nseq    = lambda: list(map(int,input().strip().split()))\r\n\r\nmod=1000000007\r\n\r\nfor t in range(1, int(input())+1):\r\n    print(1)\r\n    pass\r\n",
        "failedTestCase": {
            "input": "5\r\n2\r\n2 3\r\n1 4\r\n6\r\n2 6\r\n3 9\r\n4 5\r\n1 8\r\n7 10\r\n-2 100\r\n4\r\n-10 10\r\n-5 5\r\n-12 12\r\n-13 13\r\n5\r\n-4 9\r\n-2 5\r\n3 4\r\n6 7\r\n8 10\r\n4\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240710648",
            "author": "eunsoo0607",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 33200,
            "submissionTime": 1704621360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240710085",
            "author": "eunsoo0607",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 28500,
            "submissionTime": 1704621120
        },
        "acceptedCode": "import sys\r\nimport time\r\ninput = sys.stdin.readline\r\nT = int(time.time() * 1000)\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    l = input().split()\r\n    a = 0\r\n    s = {(0, T)}\r\n    for i in range(n):\r\n        if i % 2:\r\n            a -= int(l[i])\r\n            s.add((a, T))\r\n        else:\r\n            a += int(l[i])\r\n            s.add((a, T))\r\n    sys.stdout.write(\"YES\\n\" if len(s) < n+1 else \"NO\\n\")",
        "rejectedCode": "import sys\r\ninput = sys.stdin.readline\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    l = input().split()\r\n    a = 0\r\n    s = {0}\r\n    for i in range(n):\r\n        if i % 2:\r\n            a -= int(l[i])\r\n            s.add(a)\r\n        else:\r\n            a += int(l[i])\r\n            s.add(a)\r\n    sys.stdout.write(\"YES\\n\" if len(s) < n+1 else \"NO\\n\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240705598",
            "author": "motsuni04",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 32500,
            "submissionTime": 1704618900
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240705318",
            "author": "motsuni04",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 45500,
            "submissionTime": 1704618720
        },
        "acceptedCode": "import time\r\nimport random\r\nimport sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nints = lambda: map(int, input().split())\r\nrand = random.randint(1, 100000)\r\n\r\nT = int(time.time() * 1000)\r\n\r\nfor case in range(int(input())):\r\n    n = int(input())\r\n    a = [i * (1 if idx % 2 else -1) for idx, i in enumerate(ints())]\r\n\r\n    pf = 0\r\n    s = set()\r\n    for i in range(n):\r\n        pf += a[i]\r\n        k = (pf, T)\r\n        if pf == 0 or k in s:\r\n            print('YES')\r\n            break\r\n        s.add(k)\r\n    else:\r\n        print('NO')\r\n",
        "rejectedCode": "import random\r\nimport sys\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nints = lambda: map(int, input().split())\r\nrand = random.randint(1, 100000)\r\n\r\nclass randInt(int):\r\n    def __hash__(self) -> int:\r\n        return super().__hash__() ^ rand\r\n\r\nfor case in range(int(input())):\r\n    n = int(input())\r\n    a = [randInt(i * (1 if idx % 2 else -1)) for idx, i in enumerate(ints())]\r\n\r\n    pf = 0\r\n    s = set()\r\n    for i in range(n):\r\n        pf += a[i]\r\n        if pf == 0 or pf in s:\r\n            print('YES')\r\n            break\r\n        s.add(pf)\r\n    else:\r\n        print('NO')\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240702607",
            "author": "POZHILAN_7",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 9700,
            "submissionTime": 1704617460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240702082",
            "author": "POZHILAN_7",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 11700,
            "submissionTime": 1704617220
        },
        "acceptedCode": "def lang(n,s):\r\n    i=0\r\n    while i<n-3:\r\n        if s[i+3] ==\"a\" or  s[i+3] ==\"e\":\r\n            print(s[i:i+2:]+\".\",end=\"\")\r\n            i+=2\r\n        else:\r\n            print(s[i:i+3:]+\".\",end=\"\")\r\n            i+=3\r\n    if n-i==3:\r\n        print(s[-3]+s[-2]+s[-1])\r\n    else:\r\n        print(s[-2]+s[-1])\r\n            \r\nfor i in range(int(input())):\r\n    lang(int(input()),input())\r\n            \r\n        ",
        "rejectedCode": "def lang(n,s):\r\n    i=0\r\n    ans=\"\"\r\n    while i<n-3:\r\n        if s[i+3] ==\"a\" or  s[i+3] ==\"e\":\r\n            ans+=s[i:i+2:]+\".\"\r\n            i+=2\r\n        else:\r\n            ans+=s[i:i+3:]+\".\"\r\n            i+=3\r\n    if n-i==3:\r\n        ans+=s[-3]+s[-2]+s[-1]\r\n    else:\r\n        ans+=s[-2]+s[-1]\r\n    print(ans)        \r\n            \r\nfor i in range(int(input())):\r\n    lang(int(input()),input())\r\n            \r\n        ",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240700876",
            "author": "shatviksweta7",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704616680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240700795",
            "author": "shatviksweta7",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704616620
        },
        "acceptedCode": "test = int(input())\r\nwhile test!=0:\r\n    test -=1 \r\n    x = input()\r\n    y = input()\r\n    z = input() \r\n    \r\n    if \"?\" in x:\r\n        if \"A\" not in x:\r\n            print(\"A\")\r\n        elif \"B\" not in x:\r\n            print(\"B\")\r\n        else: \r\n            print(\"C\")\r\n    elif \"?\" in y:\r\n        if \"A\" not in y:\r\n            print(\"A\")\r\n        elif \"B\" not in y:\r\n            print(\"B\")\r\n        else: \r\n            print(\"C\")\r\n            \r\n    else:\r\n        if \"A\" not in z:\r\n            print(\"A\")\r\n        elif \"B\" not in z:\r\n            print(\"B\")\r\n        else: \r\n            print(\"C\")\r\n        \r\n        ",
        "rejectedCode": "test = int(input())\r\nwhile test!=0:\r\n    test -=1 \r\n    x = input()\r\n    y = input()\r\n    z = input() \r\n    \r\n    if \"?\" in x:\r\n        if \"A\" not in x:\r\n            print(\"A\")\r\n        elif \"B\" not in x:\r\n            print(\"B\")\r\n        else: \"C\" not in x:\r\n            print(\"C\")\r\n    elif \"?\" in y:\r\n        if \"A\" not in y:\r\n            print(\"A\")\r\n        elif \"B\" not in y:\r\n            print(\"B\")\r\n        else: \"C\" not in y:\r\n            print(\"C\")\r\n            \r\n    else:\r\n        if \"A\" not in z:\r\n            print(\"A\")\r\n        elif \"B\" not in z:\r\n            print(\"B\")\r\n        else: \"C\" not in z:\r\n            print(\"C\")\r\n        \r\n        ",
        "failedTestCase": null,
        "errorLine": 13,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240683303",
            "author": "blackprince",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 300,
            "submissionTime": 1704608460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240672234",
            "author": "blackprince",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704602640
        },
        "acceptedCode": "from collections import Counter\r\n\r\nt=int(input())\r\n\r\nfor _ in range(t):\r\n    arr=list(map(int,input().split()))\r\n    hashmap=Counter(arr)\r\n    \r\n    for key,value in hashmap.items():\r\n        if(value==1):\r\n            print(key)",
        "rejectedCode": "def find_replaced_letter(matrix):\r\n    hashmap = {'A': 0, 'B': 0, 'C': 0}\r\n\r\n    # Count occurrences in rows\r\n    for row in matrix:\r\n        for letter in row:\r\n            if letter != '?':\r\n                hashmap[letter] += 1\r\n\r\n    # Find the missing letter\r\n    for key, value in hashmap.items():\r\n        if value == 0:\r\n            return key\r\n\r\nt = int(input(\"Enter the number of test cases: \"))\r\n\r\nfor _ in range(t):\r\n    matrix = [input().strip() for _ in range(3)]\r\n    for i in range(len(matrix)):\r\n        for j in range(len(matrix[0])):\r\n            if matrix[i][j] == '?':\r\n                result = find_replaced_letter(matrix[i])\r\n                print(result)\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "Enter the number of test cases: A\r\nB\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'Enter'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240692702",
            "author": "rui_codeforces",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 1300,
            "submissionTime": 1704613080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240689479",
            "author": "rui_codeforces",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704611520
        },
        "acceptedCode": "def odd_one_out(nums):\r\n    nums_unique = set(nums)\r\n    nums_sum = sum(nums)\r\n    unique_sum = sum(nums_unique)\r\n    return 2 * unique_sum - nums_sum\r\n    \r\ndef main():\r\n    num_entries = int(input())\r\n    for num in range(num_entries):\r\n        nums = input().split()\r\n        nums = [int(num) for num in nums]\r\n        \r\n        print(odd_one_out(nums))\r\n\r\nmain()",
        "rejectedCode": "def odd_one_out(nums):\r\n    even = [num for num in nums  if num % 2 == 0]\r\n    odd = [num for num in nums  if num % 2 == 1]\r\n    \r\n    return even[0] if len(even) == 1 else odd[0]\r\n    \r\ndef main():\r\n    num_entries = int(input())\r\n    for num in range(num_entries):\r\n        nums = input().split()\r\n        nums = [int(num) for num in nums]\r\n        \r\n        print(odd_one_out(nums))",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10], but output contains 0 elements\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240686239",
            "author": "denis_avr",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 295,
            "memory": 29500,
            "submissionTime": 1704609900
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240512074",
            "author": "denis_avr",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 5000,
            "memory": 18200,
            "submissionTime": 1704534300
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    l = [0]\r\n    stroka = input().split()\r\n    k = 1\r\n    tr = True\r\n    for h in range(n):\r\n        l.append(int(stroka[h])*k+l[h])\r\n        k *= -1\r\n    l.sort()\r\n    k = 1\r\n    while tr and k < len(l):\r\n        if l[k] == l[k-1]:\r\n            tr = False\r\n        else:\r\n            k += 1\r\n    if tr:\r\n        print('NO')\r\n    else:\r\n        print('YES')",
        "rejectedCode": "t = int(input())\r\n\r\nfor i in range(t):\r\n    sp = []  # \u043e\u0442\u043a\u0443\u0434\u0430\r\n    sp2 = []  # \u043a\u0443\u0434\u0430\r\n    n = int(input())\r\n    for j in range(n):\r\n        stroka = input().split()\r\n        sp.append(int(stroka[0]))\r\n        sp2.append(int(stroka[1]))\r\n\r\n    c = 0\r\n    for k in range(len(sp)):\r\n        for g in range(len(sp)):\r\n            if k != g:\r\n                if sp[k] < sp[g] and sp2[k] > sp2[g]:\r\n                    c += 1\r\n\r\n    print(c)",
        "failedTestCase": {
            "input": "1\r\n200000\r\n647453678 930853853\r\n-586814073 570193412\r\n-490363662 281213000\r\n-703158044 591740767\r\n137659014 352608457\r\n-774601557 -390838254\r\n-867423209 -524087527\r\n-28391755 692355005\r\n-729209925 704738138\r\n-217098545 856705188\r\n-716155101 191142422\r\n-901655099 656094991\r\n384746555 694653351\r\n-605420601 -561339913\r\n811192007 826647575\r\n-377150013 354556959\r\n684345222 874905831\r\n-46479142 170684323\r\n-793019907 5395128\r\n-788095085 -445094138\r\n-380816261 893458206\r\n-31460295 62063481\r\n-501097580 -409603254\r\n...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240685702",
            "author": "rahidiIbayramli09",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704609660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240685667",
            "author": "rahidiIbayramli09",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704609600
        },
        "acceptedCode": "for i in range(0,int(input())):\r\n    a,b,c = map(int,input().split())\r\n    print((a^b^c))",
        "rejectedCode": "for i in range(0,int(input()):\r\n    a,b,c = map(int,input().split())\r\n    print((a^b^c))",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240671710",
            "author": "yassu_05",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1704602400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240671609",
            "author": "yassu_05",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1704602340
        },
        "acceptedCode": "n=int(input())\r\nfor i in range(n):\r\n    a,b,c=map(int,input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif b==c:\r\n        print(a)\r\n    elif c==a:\r\n        print(b)",
        "rejectedCode": "n=int(input())\r\nfor i in range(n):\r\n    a,b,c=map(int,input().split())\r\n    if a == b:\r\n        print(c)\r\n    if b==c:\r\n        print(a)\r\n    else:\r\n        print(b)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n5\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 4th numbers differ - expected: '7', found: '5'\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240669325",
            "author": "AntonKorch",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 38900,
            "submissionTime": 1704601080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240668376",
            "author": "AntonKorch",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 11300,
            "submissionTime": 1704600540
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    glas = 'ae'\r\n    s = input()\r\n    if n == 1:\r\n        print(s)\r\n        continue\r\n    res = [s[0]]\r\n    for i in range(1, n-1):\r\n        if s[i] not in glas and s[i+1] in glas:\r\n            res += '.'\r\n        res.append(s[i])\r\n    res.append(s[n-1])\r\n \r\n    print (*res, sep=\"\")",
        "rejectedCode": "for _ in range (int(input())):\r\n    n = int(input())\r\n    s = input().strip()\r\n    res = \"\"\r\n    check_idx = n\r\n\r\n    for i in range (n-1, 0, -1):\r\n        if i <= check_idx:\r\n            if s[i] == \"a\" or s[i] == \"e\":\r\n                check_idx = i-2\r\n                res += \".\"\r\n                res += s[i]\r\n            else:\r\n                check_idx = i-3\r\n                res += \".\"\r\n                res += s[i]\r\n        else:\r\n            res += s[i]\r\n    res += s[0]\r\n    res = res[::-1]\r\n    print (res[:-1])\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240787994",
            "author": "sai66",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704688980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240787913",
            "author": "sai66",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704688920
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    a,b,c = list(map(int,input().split()))\r\n    if a == b :\r\n        print(c)\r\n    elif b == c :\r\n        print(a)\r\n    else:\r\n        print(b)\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    a,b,c = list(map(int,input().split()))\r\n    if a == b \r\n        print(c)\r\n    elif b == c :\r\n        print(a)\r\n    else:\r\n        print(c)\r\n",
        "failedTestCase": null,
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240653338",
            "author": "preethisomu05",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704595020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240652867",
            "author": "preethisomu05",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704594720
        },
        "acceptedCode": "t=int(input())\r\nfor i in range (t):\r\n    a,b,c=map(int,input().split())\r\n    if(a==b):\r\n        print(c)\r\n    elif(b==c):\r\n        print(a)\r\n    else:\r\n        print(b)",
        "rejectedCode": "t=int(input())\r\nfor i in range (t):\r\n    a,b,c=map(int,input().split())\r\n    if(a==b):\r\n        print(c)\r\n    else if(b==c):\r\n        print(a)\r\n    else:\r\n        print(b)",
        "failedTestCase": null,
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240654157",
            "author": "Dunghun111",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 311,
            "memory": 26300,
            "submissionTime": 1704595500
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240653889",
            "author": "Dunghun111",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Memory limit exceeded on test 3",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 262100,
            "submissionTime": 1704595320
        },
        "acceptedCode": "n = int(input())\r\nresult = []\r\nsqareLi = [-1]\r\n\r\nfor i in range(n):\r\n    lenTest = int(input())\r\n    x = [*map(int, input().split())]\r\n\r\n    if sum(x) ** 0.5 != round(sum(x) ** 0.5):\r\n        result.append('NO')\r\n        continue\r\n\r\n    else:\r\n        result.append('YES')\r\n        continue\r\n\r\nfor i in result:\r\n    print(i)",
        "rejectedCode": "def sqauredSieve(n):\r\n    sieve = [0] * n\r\n    for i in range(1, int(n ** 0.5) + 1):\r\n        sieve[(i * i) - 1] = 1\r\n    return [i + 1 for i in range(n) if sieve[i] == 1]\r\n\r\nn = int(input())\r\nresult = []\r\nsqareLi = [-1]\r\n\r\nfor i in range(n):\r\n    lenTest = int(input())\r\n    x = [*map(int, input().split())]\r\n\r\n    if sum(x) > max(sqareLi):\r\n        sqareLi = sqauredSieve(sum(x))\r\n\r\n    if sum(x) not in sqareLi:\r\n        result.append('NO')\r\n        continue\r\n\r\n    else:\r\n        result.append('YES')\r\n        continue\r\n\r\nfor i in result:\r\n    print(i)",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240669043",
            "author": "yakisolo",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 483,
            "memory": 39300,
            "submissionTime": 1704600960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240668948",
            "author": "yakisolo",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 1700,
            "submissionTime": 1704600900
        },
        "acceptedCode": "\r\nimport re\r\nimport functools\r\nimport random\r\nimport sys\r\nimport os\r\nimport math\r\nfrom collections import Counter, defaultdict, deque\r\nfrom functools import lru_cache, reduce, cmp_to_key\r\nfrom itertools import accumulate, combinations, permutations\r\nfrom heapq import nsmallest, nlargest, heappushpop, heapify, heappop, heappush\r\nfrom io import BytesIO, IOBase\r\nfrom copy import deepcopy\r\nimport threading\r\nfrom typing import *\r\nfrom operator import add, xor, mul, ior, iand, itemgetter\r\nimport bisect\r\nfrom string import ascii_lowercase, ascii_uppercase\r\n \r\ndef I():\r\n    return input()\r\n \r\ndef II():\r\n    return int(input())\r\n \r\ndef MII():\r\n    return map(int, input().split())\r\n \r\ndef LI():\r\n    return list(input().split())\r\n \r\ndef LMII():\r\n    return list(map(int, input().split()))\r\n\r\n \r\ndef GMI():\r\n    return map(lambda x: int(x) - 1, input().split())\r\n \r\ndef LGMI():\r\n    return list(map(lambda x: int(x) - 1, input().split()))\r\n \r\n    \r\n# check if a number is prime\r\ndef isPrime(x: int) -> bool:\r\n   d = 2\r\n   while d * d <= x:\r\n       if x % d == 0:\r\n           return False\r\n       d += 1\r\n   return True\r\n   \r\n# returns prime factorization of a number\r\ndef Primefactorization(n: int) -> list[int]:\r\n    factorization = []\r\n    d = 2\r\n\r\n    while d * d <= n:\r\n        while n % d == 0:\r\n            factorization.append(d)\r\n            n //= d\r\n        d += 1\r\n    if n > 1:\r\n    \t  factorization.append(n)\r\n  \r\n    return factorization\r\n\r\n\r\n\r\nfor _ in range(II()):\r\n    n = II()\r\n    arr = LMII()\r\n\r\n    prefix = [0]\r\n    \r\n    flag  = 1\r\n\r\n    rand = random.randint(0, 100)\r\n    \r\n    for i in range(n):\r\n        if i%2 == 1:\r\n            prefix.append(prefix[-1]-arr[i])\r\n\r\n        else:\r\n            prefix.append(prefix[-1]+arr[i])\r\n        \r\n\r\n    un = set()\r\n    for  u in prefix:\r\n        un.add(u^rand)\r\n    if len(un) <= n:print(\"YES\")\r\n    else:print(\"NO\")",
        "rejectedCode": "\r\nimport re\r\nimport functools\r\nimport random\r\nimport sys\r\nimport os\r\nimport math\r\nfrom collections import Counter, defaultdict, deque\r\nfrom functools import lru_cache, reduce, cmp_to_key\r\nfrom itertools import accumulate, combinations, permutations\r\nfrom heapq import nsmallest, nlargest, heappushpop, heapify, heappop, heappush\r\nfrom io import BytesIO, IOBase\r\nfrom copy import deepcopy\r\nimport threading\r\nfrom typing import *\r\nfrom operator import add, xor, mul, ior, iand, itemgetter\r\nimport bisect\r\nfrom string import ascii_lowercase, ascii_uppercase\r\n \r\ndef I():\r\n    return input()\r\n \r\ndef II():\r\n    return int(input())\r\n \r\ndef MII():\r\n    return map(int, input().split())\r\n \r\ndef LI():\r\n    return list(input().split())\r\n \r\ndef LMII():\r\n    return list(map(int, input().split()))\r\n\r\n \r\ndef GMI():\r\n    return map(lambda x: int(x) - 1, input().split())\r\n \r\ndef LGMI():\r\n    return list(map(lambda x: int(x) - 1, input().split()))\r\n \r\n    \r\n# check if a number is prime\r\ndef isPrime(x: int) -> bool:\r\n   d = 2\r\n   while d * d <= x:\r\n       if x % d == 0:\r\n           return False\r\n       d += 1\r\n   return True\r\n   \r\n# returns prime factorization of a number\r\ndef Primefactorization(n: int) -> list[int]:\r\n    factorization = []\r\n    d = 2\r\n\r\n    while d * d <= n:\r\n        while n % d == 0:\r\n            factorization.append(d)\r\n            n //= d\r\n        d += 1\r\n    if n > 1:\r\n    \t  factorization.append(n)\r\n  \r\n    return factorization\r\n\r\n\r\n\r\nfor _ in range(II()):\r\n    n = II()\r\n    arr = LMII()\r\n\r\n    prefix = [0]\r\n    \r\n    flag  = 1\r\n\r\n    rand = random.randint(0, 100)\r\n    \r\n    for i in range(n):\r\n        if i%2 == 1:\r\n            prefix.append(prefix[-1]-arr[i])\r\n\r\n        else:\r\n            prefix.append(prefix[-1]+arr[i])\r\n        \r\n\r\n    un = set()\r\n    for  u in prefix:\r\n        un.add(u^rand)\r\n    if len(un) <= n:print(\"YES\")\r\n    else:print(\"NO\")",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240657866",
            "author": "Faiz_Muhtasim",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704597780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240416744",
            "author": "Faiz_Muhtasim",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704481860
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n  num = input()\r\n  l1 = num.split(\" \")\r\n  l2 = []\r\n  for i in l1:\r\n    l2.append(int(i))\r\n  x = l2[0]\r\n  y = l2[1]\r\n  z = l2[2]\r\n  if x == y:\r\n    print(z)\r\n  elif x == z:\r\n    print(y)\r\n  else:\r\n    print(x)",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n  l1 = input()\r\n  l2 = input()\r\n  l3 = input()\r\n\r\n  if \"?\" in l1:\r\n    if \"A\" and \"B\" in l1:\r\n      print(\"C\")\r\n    elif \"A\" and \"C\" in l1:\r\n      print(\"B\")\r\n    else:\r\n      print(\"A\")\r\n    \r\n  if \"?\" in l2:\r\n    if \"A\" and \"B\" in l2:\r\n      print(\"C\")\r\n    elif \"A\" and \"C\" in l2:\r\n      print(\"B\")\r\n    else:\r\n      print(\"A\")\r\n\r\n  if \"?\" in l3:\r\n    if \"A\" and \"B\" in l3:\r\n      print(\"C\")\r\n    elif \"A\" and \"C\" in l3:\r\n      print(\"B\")\r\n    else:\r\n      print(\"A\")",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "C\r\nB\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240618002",
            "author": "lefteryx",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1902,
            "memory": 33200,
            "submissionTime": 1704556260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240616674",
            "author": "lefteryx",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 61,
            "memory": 3800,
            "submissionTime": 1704555000
        },
        "acceptedCode": "from bisect import bisect_left as lower_bound\r\nfrom bisect import bisect_right as upper_bound\r\n \r\n \r\nclass FenwickTree:\r\n    def __init__(self, x):\r\n        bit = self.bit = list(x)\r\n        size = self.size = len(bit)\r\n        for i in range(size):\r\n            j = i | (i + 1)\r\n            if j < size:\r\n                bit[j] += bit[i]\r\n \r\n    def update(self, idx, x):\r\n        \"\"\"updates bit[idx] += x\"\"\"\r\n        while idx < self.size:\r\n            self.bit[idx] += x\r\n            idx |= idx + 1\r\n \r\n    def __call__(self, end):\r\n        \"\"\"calc sum(bit[:end])\"\"\"\r\n        x = 0\r\n        while end:\r\n            x += self.bit[end - 1]\r\n            end &= end - 1\r\n        return x\r\n \r\n    def find_kth(self, k):\r\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\r\n        idx = -1\r\n        for d in reversed(range(self.size.bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < self.size and self.bit[right_idx] <= k:\r\n                idx = right_idx\r\n                k -= self.bit[idx]\r\n        return idx + 1, k\r\n \r\n \r\nclass SortedList:\r\n    block_size = 700\r\n \r\n    def __init__(self, iterable=()):\r\n        self.macro = []\r\n        self.micros = [[]]\r\n        self.micro_size = [0]\r\n        self.fenwick = FenwickTree([0])\r\n        self.size = 0\r\n        for item in iterable:\r\n            self.add(item)\r\n \r\n    def add(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        j = upper_bound(self.micros[i], x)\r\n        self.micros[i].insert(j, x)\r\n        self.size += 1\r\n        self.micro_size[i] += 1\r\n        self.fenwick.update(i, 1)\r\n        if len(self.micros[i]) >= self.block_size:\r\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\r\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\r\n            self.fenwick = FenwickTree(self.micro_size)\r\n            self.macro.insert(i, self.micros[i + 1][0])\r\n \r\n    def pop(self, k=-1):\r\n        i, j = self._find_kth(k)\r\n        self.size -= 1\r\n        self.micro_size[i] -= 1\r\n        self.fenwick.update(i, -1)\r\n        return self.micros[i].pop(j)\r\n \r\n    def __getitem__(self, k):\r\n        i, j = self._find_kth(k)\r\n        return self.micros[i][j]\r\n \r\n    def count(self, x):\r\n        return self.br(x) - self.bl(x)\r\n \r\n    def __contains__(self, x):\r\n        return self.count(x) > 0\r\n \r\n    def bl(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\r\n \r\n    def br(self, x):\r\n        i = br(self.macro, x)\r\n        return self.fenwick(i) + br(self.micros[i], x)\r\n \r\n    def _find_kth(self, k):\r\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\r\n \r\n    def __len__(self):\r\n        return self.size\r\n \r\n    def __iter__(self):\r\n        return (x for micro in self.micros for x in micro)\r\n \r\n    def __repr__(self):\r\n        return str(list(self))\r\n\r\n\r\ndef solve():\r\n    n = int(input())\r\n    arr = []\r\n\r\n    for i in range(n):\r\n        a, b = map(int, input().split())\r\n        arr.append((a, b))\r\n    arr.sort(key=lambda x: x[0])\r\n\r\n    spair = SortedList()\r\n    insert_idx = []\r\n\r\n    for i in range(n-1, -1, -1):\r\n        insert_idx.append(spair.bl((arr[i][1], i)))\r\n        spair.add((arr[i][1], i))\r\n\r\n    print(sum(insert_idx))\r\n\r\nT = int(input())\r\nfor i in range(T):\r\n    solve()\r\n",
        "rejectedCode": "from bisect import bisect_left as lower_bound\r\nfrom bisect import bisect_right as upper_bound\r\n\r\n\r\nclass FenwickTree:\r\n    def __init__(self, x):\r\n        bit = self.bit = list(x)\r\n        size = self.size = len(bit)\r\n        for i in range(size):\r\n            j = i | (i + 1)\r\n            if j < size:\r\n                bit[j] += bit[i]\r\n\r\n    def update(self, idx, x):\r\n        \"\"\"updates bit[idx] += x\"\"\"\r\n        while idx < self.size:\r\n            self.bit[idx] += x\r\n            idx |= idx + 1\r\n\r\n    def __call__(self, end):\r\n        \"\"\"calc sum(bit[:end])\"\"\"\r\n        x = 0\r\n        while end:\r\n            x += self.bit[end - 1]\r\n            end &= end - 1\r\n        return x\r\n\r\n    def find_kth(self, k):\r\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\r\n        idx = -1\r\n        for d in reversed(range(self.size.bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < self.size and self.bit[right_idx] <= k:\r\n                idx = right_idx\r\n                k -= self.bit[idx]\r\n        return idx + 1, k\r\n\r\n\r\nclass SortedList:\r\n    block_size = 700\r\n\r\n    def __init__(self, iterable=()):\r\n        self.macro = []\r\n        self.micros = [[]]\r\n        self.micro_size = [0]\r\n        self.fenwick = FenwickTree([0])\r\n        self.size = 0\r\n        for item in iterable:\r\n            self.insert(item)\r\n\r\n    def insert(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        j = upper_bound(self.micros[i], x)\r\n        self.micros[i].insert(j, x)\r\n        self.size += 1\r\n        self.micro_size[i] += 1\r\n        self.fenwick.update(i, 1)\r\n        if len(self.micros[i]) >= self.block_size:\r\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\r\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\r\n            self.fenwick = FenwickTree(self.micro_size)\r\n            self.macro.insert(i, self.micros[i + 1][0])\r\n\r\n    def pop(self, k=-1):\r\n        i, j = self._find_kth(k)\r\n        self.size -= 1\r\n        self.micro_size[i] -= 1\r\n        self.fenwick.update(i, -1)\r\n        return self.micros[i].pop(j)\r\n\r\n    def __getitem__(self, k):\r\n        i, j = self._find_kth(k)\r\n        return self.micros[i][j]\r\n\r\n    def count(self, x):\r\n        return self.upper_bound(x) - self.lower_bound(x)\r\n\r\n    def __contains__(self, x):\r\n        return self.count(x) > 0\r\n\r\n    def lower_bound(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\r\n\r\n    def upper_bound(self, x):\r\n        i = upper_bound(self.macro, x)\r\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\r\n\r\n    def _find_kth(self, k):\r\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\r\n\r\n    def __len__(self):\r\n        return self.size\r\n\r\n    def __iter__(self):\r\n        return (x for micro in self.micros for x in micro)\r\n\r\n    def __repr__(self):\r\n        return str(list(self))\r\n\r\n\r\ndef solve():\r\n    n = int(input())\r\n    arr = []\r\n\r\n    for i in range(n):\r\n        a, b = map(int, input().split())\r\n        arr.append((a, b))\r\n    arr.sort(key=lambda x: x[0])\r\n\r\n    spair = SortedList()\r\n    insert_idx = []\r\n\r\n    for i in range(n-1, -1, -1):\r\n        insert_idx.append(spair.bisect_left((arr[i][1], i)))\r\n        spair.add((arr[i][1], i))\r\n\r\n    print(sum(insert_idx))\r\n\r\nT = int(input())\r\nfor i in range(T):\r\n    solve()\r\n",
        "failedTestCase": {
            "input": "5\r\n2\r\n2 3\r\n1 4\r\n6\r\n2 6\r\n3 9\r\n4 5\r\n1 8\r\n7 10\r\n-2 100\r\n4\r\n-10 10\r\n-5 5\r\n-12 12\r\n-13 13\r\n5\r\n-4 9\r\n-2 5\r\n3 4\r\n6 7\r\n8 10\r\n4\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240420778",
            "author": "FireIce7072",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1704489660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240420753",
            "author": "FireIce7072",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1704489600
        },
        "acceptedCode": "cases = int(input())\r\n\r\nfor i in range(cases):\r\n    col = 0\r\n    row = 0\r\n    square = [[0, 0, 0],\r\n              [0, 0, 0],\r\n              [0, 0, 0]]\r\n    for j in range(3):\r\n        lets = list(input())\r\n        for k in range(3):\r\n            square[j][k] = lets[k]\r\n            if lets[k] == '?':\r\n                col = k\r\n\r\n    col_vals = [square[x][col] for x in range(3)]\r\n    # print(col_vals)\r\n\r\n    col_vals.remove(\"?\")\r\n\r\n    actual_values = set(col_vals)\r\n    # print(actual_values)\r\n    values = set(['A', 'B', 'C'])\r\n    print(list(values.difference(actual_values))[0])\r\n\r\n    \r\n\r\n\r\n",
        "rejectedCode": "cases = int(input())\r\n\r\nfor i in range(cases):\r\n    col = 0\r\n    row = 0\r\n    square = [[0, 0, 0],\r\n              [0, 0, 0],\r\n              [0, 0, 0]]\r\n    for j in range(3):\r\n        lets = list(input())\r\n        for k in range(3):\r\n            square[j][k] = lets[k]\r\n            if lets[k] == '?':\r\n                col = k\r\n\r\n    col_vals = [square[x][col] for x in range(3)]\r\n    # print(col_vals)\r\n\r\n    col_vals.remove(\"?\")\r\n\r\n    actual_values = set(col_vals)\r\n    # print(actual_values)\r\n    values = set(['A', 'B', 'C'])\r\n    print(values.difference(actual_values))\r\n\r\n    \r\n\r\n\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "{'A'}\r\n{'B'}\r\n{'C'}\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: '{'A'}'\r\n"
        },
        "errorLine": 24,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240635318",
            "author": "1000101AKA69",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 22600,
            "submissionTime": 1704582660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240318704",
            "author": "1000101AKA69",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 20500,
            "submissionTime": 1704419280
        },
        "acceptedCode": "def i():\r\n    return input()\r\n\r\ndef ii():\r\n    return int(input())\r\n\r\ndef mii():\r\n    return map(int, input().split())\r\n\r\ndef li():\r\n    return list(input().split())\r\n\r\ndef lii():\r\n    return list(map(int, input().split()))\r\n\r\ndef gmi():\r\n    return map(lambda x: int(x) - 1, input().split())\r\n\r\ndef lgmi():\r\n    return list(map(lambda x: int(x) - 1, input().split()))\r\nimport math\r\n\r\ndef is_perfect_square(num):\r\n    \"\"\"\r\n    Check if a number is a perfect square.\r\n    \"\"\"\r\n    # If the square root is an integer, then it's a perfect square\r\n    sqrt_num = int(math.sqrt(num))\r\n    return sqrt_num**2 == num\r\n\r\nfor _ in range(ii()):\r\n    a=ii()\r\n    arr=mii()\r\n    arr=sum(arr)\r\n    if(is_perfect_square(arr)):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")    ",
        "rejectedCode": "import math as m\r\n\r\n# def insert_char(stringing, char, position):\r\n#   # Convert the stringing to a list of characters.\r\n#   stringing_list = list(stringing)\r\n\r\n#   # Insert the character at the specified position.\r\n#   stringing_list.insert(position, char)\r\n\r\n#   # Join the list back into a stringing.\r\n#   new_stringing = ''.join(stringing_list)\r\n\r\n#   return new_stringing\r\n\r\n\r\ndef check_c(char):\r\n    if char == 'c' or char == 'b' or char == 'd':\r\n        return True\r\n    else:\r\n        return False\r\n    \r\ndef check_v(char):\r\n    if char == 'a' or char=='e':\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r\nfor _ in range(int(input())):    \r\n        \r\n   \r\n\r\n    a=int(input())\r\n    string=input()\r\n    list=[]\r\n\r\n\r\n    for i in range(1,len(string)-1):\r\n        \r\n        if check_v(string[i]) and check_c(string[i-1]):\r\n            list.append(string[i-1:i+1])\r\n        elif check_c(string[i]) and check_c(string[i+1]):\r\n            list[len(list)-1]+=string[i]\r\n            new=list[len(list)-1]\r\n            new=new[0:2]+new[2:]\r\n            list[len(list)-1]=new\r\n        # print(list)\r\n\r\n\r\n    if check_c(string[-1]) and check_v(string[-2]):\r\n                list[len(list)-1]+=string[-1]\r\n                new=list[len(list)-1]\r\n                new=new[0:2]+new[2:]\r\n                list[len(list)-1]=new\r\n    elif check_c(string[-2]) and check_v(string[-1]):\r\n            list.append(string[-2:])\r\n        \r\n    newstr=\"\"\r\n    for i in range(0,len(list)):\r\n        newstr+=list[i]+\".\"\r\n    newstr=newstr[:-1]\r\n\r\n    print(newstr)\r\n            \r\n        \r\n  \r\n   \r\n                          \r\n                \r\n               \r\n            \r\n            \r\n\r\n            \r\n            \r\n             \r\n        ",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240611810",
            "author": "namit-jain",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 29400,
            "submissionTime": 1704551040
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240611581",
            "author": "namit-jain",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 18300,
            "submissionTime": 1704550920
        },
        "acceptedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    l = [int(i) for i in input().split()]\r\n    p = [0]\r\n    s = 0\r\n    b = 0\r\n    for i in range(n):\r\n        if i%2:\r\n            s-=l[i]\r\n        else:\r\n            s+=l[i]\r\n        p.append(s)\r\n    p.sort()\r\n    for i in range(n):\r\n        if p[i] == p[i+1]:\r\n            print(\"YES\")\r\n            b = 1\r\n            break\r\n    if not b:\r\n        print(\"NO\")\r\n        ",
        "rejectedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    l = [int(i) for i in input().split()]\r\n    p = [0]\r\n    s = 0\r\n    b = 0\r\n    for i in range(n):\r\n        if i%2:\r\n            s-=l[i]\r\n        else:\r\n            s+=l[i]\r\n        p.append(s)\r\n    for i in range(n-1):\r\n        if p[i] in p[i+1:]:\r\n            print(\"YES\")\r\n            b = 1\r\n            break\r\n    if not b:\r\n        print(\"NO\")\r\n        ",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 13,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240624003",
            "author": "milia11",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 2464,
            "memory": 58400,
            "submissionTime": 1704564960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240549106",
            "author": "milia11",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 5000,
            "memory": 33600,
            "submissionTime": 1704536460
        },
        "acceptedCode": "def rint(): return int(input())\r\ndef rlist(): return list(map(int, input().split()))\r\n\r\ndef Q(i):\r\n    r = 0\r\n    j = i\r\n    while i > 0:\r\n        r += t[i]\r\n        i -= (i & -i)\r\n    while j <= n:\r\n        t[j] += 1\r\n        j += (j & -j)\r\n    return r\r\n\r\n\r\nfor _ in range(rint()):\r\n    people = []\r\n    n = rint()\r\n    ans = 0\r\n\r\n    people = [[*rlist()]for _ in range(n)]\r\n    people.sort()\r\n\r\n    t = {}\r\n    d = []\r\n    for a, b in sorted(people, key=lambda a: a[1]): t[b]=len(t)+1\r\n    for a, b in people:\r\n        d.append(t[b])\r\n    d += [0]\r\n    d.reverse()\r\n    t = [0]*(n+1)\r\n    for i in range(1, n+1):\r\n        ans += Q(d[i])\r\n    print(ans)",
        "rejectedCode": "def rint(): return int(input())\r\ndef rlist(): return list(map(int, input().split()))\r\n\r\n\r\n# \u0432\u0435\u0440\u043d\u043e, \u043d\u043e \u0434\u043e\u043b\u0433\u043e\r\nfor _ in range(rint()):\r\n    people = []\r\n    n = rint()\r\n    ans = 0\r\n    for i in range(n):\r\n\r\n        word = rlist()\r\n        people.append((word[1] - word[0], word[0], word[1]))\r\n\r\n    # people.sort()\r\n    for i in range(n):\r\n        for t in range(n):\r\n            if people[i][1] <= people[t][2] <= people[i][2] and people[t][0] < people[i][0] and people[t][1] > people[i][1]:\r\n                ans += 1\r\n    print(ans)\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n647453678 930853853\r\n-586814073 570193412\r\n-490363662 281213000\r\n-703158044 591740767\r\n137659014 352608457\r\n-774601557 -390838254\r\n-867423209 -524087527\r\n-28391755 692355005\r\n-729209925 704738138\r\n-217098545 856705188\r\n-716155101 191142422\r\n-901655099 656094991\r\n384746555 694653351\r\n-605420601 -561339913\r\n811192007 826647575\r\n-377150013 354556959\r\n684345222 874905831\r\n-46479142 170684323\r\n-793019907 5395128\r\n-788095085 -445094138\r\n-380816261 893458206\r\n-31460295 62063481\r\n-501097580 -409603254\r\n...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240608023",
            "author": "PythonEnthusiast",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704548580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240428922",
            "author": "PythonEnthusiast",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704499260
        },
        "acceptedCode": "snum = int(input())\r\nsquares = []\r\n#for i in range(snum):\r\n#    squares.append(input())\r\ndef getLetter(letters):\r\n    if letters[0] != 'A' and letters [1] != 'A':\r\n        return 'A'\r\n    if letters[0] != 'B' and letters [1] != 'B':\r\n        return 'B'\r\n    if letters[0] != 'C' and letters [1] != 'C':\r\n        return 'C'\r\ndef getMissing(square,loc):\r\n#    square.replace('\\n','')\r\n    lets = []\r\n#    for i in range(len(square)):\r\n#        if square[i-1] == '?':\r\n#            loc = i-1\r\n#            #left\r\n    if loc == 0:\r\n        lets.append(square[loc+1])\r\n        lets.append(square[loc+2])\r\n        return getLetter(lets)\r\n        #mid\r\n    elif loc == 1:\r\n        lets.append(square[loc-1])\r\n        lets.append(square[loc+1])\r\n        return getLetter(lets)\r\n        #right\r\n    elif loc == 2:\r\n        lets.append(square[loc-1])\r\n        lets.append(square[loc-2])\r\n        return getLetter(lets)\r\ndef main():\r\n    answer = []\r\n    finSquares = []\r\n    for i in range(snum):\r\n        finSquares.append('')\r\n    out = ''\r\n    for i in range(snum*3):\r\n        #e = '\\n'.join(iter(input, ''))\r\n        e=input()\r\n        squares.append(e)\r\n    #for j in range(len(finSquares)):\r\n    #    for i in range(len(squares)):\r\n    #        finSquares[j]+=squares[i]    \r\n        \r\n    #for square in finSquares:\r\n    #    out += str(getMissing(square))\r\n\r\n    for square in squares:\r\n        if '?' in square:\r\n            loc = square.index('?')\r\n            answer.append(getMissing(square,loc))\r\n    out = '\\n'.join(answer) \r\n    print(out)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n        \r\n",
        "rejectedCode": "snum = int(input())\r\nsquares = []\r\n#for i in range(snum):\r\n#    squares.append(input())\r\ndef getLetter(letters):\r\n    if letters[0] != 'A' and letters [1] != 'A':\r\n        return 'A'\r\n    if letters[0] != 'B' and letters [1] != 'B':\r\n        return 'B'\r\n    if letters[0] != 'C' and letters [1] != 'C':\r\n        return 'C'\r\ndef getMissing(square):\r\n    square.replace('\\n','')\r\n    lets = []\r\n    for i in range(len(square)):\r\n        if square[i-1] == '?':\r\n            loc = i-1\r\n            #left\r\n            if loc == 0 or loc == 3 or loc == 6:\r\n                lets.append(square[loc+1])\r\n                lets.append(square[loc+2])\r\n                return getLetter(lets)\r\n            #mid\r\n            elif loc == 1 or loc == 4 or loc == 7:\r\n                lets.append(square[loc-1])\r\n                lets.append(square[loc+1])\r\n                return getLetter(lets)\r\n            #right\r\n            elif loc == 2 or loc == 5 or loc == 8:\r\n                lets.append(square[loc-1])\r\n                lets.append(square[loc-2])\r\n                return getLetter(lets)\r\ndef main():\r\n    out = ''\r\n    for i in range(snum):\r\n        e=input()\r\n        squares.append(e)\r\n        \r\n    for square in squares:\r\n        out += str(getMissing(square))\r\n    print(out)\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n        \r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "NoneANone\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'NoneANone'\r\n"
        },
        "errorLine": 12,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240600031",
            "author": "omkar25",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 26200,
            "submissionTime": 1704544800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240599051",
            "author": "omkar25",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704543540
        },
        "acceptedCode": "x  =  int(input())\r\nfor i in range(x):\r\n  y  =  int(input())\r\n  for i in range(1):\r\n    arr = list(map(int, input().rstrip().rsplit()))\r\n    root = int(sum(arr) ** 0.5)\r\n    if root**2==sum(arr):\r\n      print(\"YES\")\r\n    else:\r\n      print(\"NO\")\r\n",
        "rejectedCode": "x  =  int(input())\r\n\r\nfor i in range(x):\r\n  y  =  int(input())\r\n  for i in range(1):\r\n    arr = list(map(int, input().rstrip().rsplit()))\r\n    if math.sqrt(sum(arr)) == sum(arr)**0.5:\r\n      print(\"YES\")\r\n    else:\r\n      print(\"NO\")\r\n    ",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240592074",
            "author": "nikitha09",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704541740
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240590649",
            "author": "nikitha09",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704541500
        },
        "acceptedCode": "t = int(input())\r\nfor i in range (t):\r\n    s = input()\r\n    for char in s:\r\n        if s.count(char) == 1:\r\n            print(char)",
        "rejectedCode": "t = int(input())\r\nfor i in range (t):\r\n    s = input()\r\n    for char in set(s):\r\n        print(char)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n2\r\n \r\n4\r\n \r\n3\r\n6\r\n \r\n5\r\n8\r\n7\r\n \r\n \r\n9\r\n0\r\n \r\n3\r\n6\r\n8\r\n2\r\n \r\n7\r\n \r\n5\r\n7\r\n \r\n5\r\n7\r\n \r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '2'\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240580364",
            "author": "ArTyyOm",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 452,
            "memory": 29600,
            "submissionTime": 1704539940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240578794",
            "author": "ArTyyOm",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1704539760
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    p = list(map(int, input().split()))\r\n    \r\n    var = sum(p) ** 0.5\r\n    \r\n    if round(var) == var:\r\n        print(\"YES\")\r\n        \r\n    else:\r\n        print(\"NO\")\r\n        \r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    a = []\r\n    for i in range(3):\r\n        line = input().split()\r\n        for j in range(3):\r\n            a.append(line[j])\r\n            \r\n    print(a)\r\n    \r\n    if a.count(\"A\") != 3:\r\n        print(\"A\")\r\n        \r\n    if a.count(\"B\") != 3:\r\n        print(\"B\")\r\n        \r\n    if a.count(\"C\") != 3:\r\n        print(\"C\")\r\n        \r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240577170",
            "author": "pratyush483",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704539520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240576173",
            "author": "pratyush483",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704539400
        },
        "acceptedCode": "x = int(input())\nfor i in range(0,x):\n    a,b,c= map(int,input().split())\n    if a == b:\n        print(c)\n    if b == c:\n        print(a)\n    if c == a:\n        print(b)",
        "rejectedCode": "x = int(input())\nfor i in range(0,x):\n    a,b,c= map(int,input().split())\nif a == b:\n    print(c)\nif b == c:\n    print(a)\nif c == a:\n    print(b)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '7'\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239618258",
            "author": "Ryuu7",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 1700,
            "submissionTime": 1703926980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239616738",
            "author": "Ryuu7",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1703926140
        },
        "acceptedCode": "def solve(s):\r\n    no = len(s)\r\n    i = 0\r\n    res = ''\r\n    v = ['a','e']\r\n    c = ['b', 'c', 'd']\r\n    while i<no:\r\n        if no-i == 2:\r\n            res += '.'\r\n            res += s[i:i+2]\r\n            i+=2\r\n        elif no-i == 3:\r\n            res += '.'\r\n            res += s[i:i+3]\r\n            i+=3\r\n        else:\r\n            if s[i+3] in v:\r\n                res += '.'\r\n                res += s[i:i+2]\r\n                i+=2\r\n            else:\r\n                res += '.'\r\n                res += s[i:i+3]\r\n                i+=3\r\n    print(res[1:])       \r\n\r\ntr = int(input())\r\nfor i in range(tr):\r\n    a = int(input())\r\n    r1 = input()\r\n    solve(r1)",
        "rejectedCode": "def solve(s):\r\n    no = len(s)\r\n    i = 0\r\n    res = ''\r\n    v = ['a','e']\r\n    c = ['b', 'c', 'd']\r\n    while i<=no:\r\n        if no-i == 2:\r\n            res += '.'\r\n            res += s[i:i+2]\r\n            i+=2\r\n        elif no-i == 3:\r\n            res += '.'\r\n            res += s[i:i+3]\r\n            i+=3\r\n        else:\r\n            if s[i+3] in v:\r\n                res += '.'\r\n                res += s[i:i+2]\r\n                i+=2\r\n            else:\r\n                res += '.'\r\n                res += s[i:i+3]\r\n                i+=3\r\n    print(res[1:])       \r\n\r\ntr = int(input())\r\nfor i in range(tr):\r\n    a = int(input())\r\n    r1 = input()\r\n    solve(r1)",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240489749",
            "author": "Mohamed_A_Yousef",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 92700,
            "submissionTime": 1704531180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240489682",
            "author": "Mohamed_A_Yousef",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 61,
            "memory": 65700,
            "submissionTime": 1704531120
        },
        "acceptedCode": "#    Author : Mohamed Yousef \r\n#    Date   : 2024-01-06\r\nimport sys,math,bisect,collections,itertools,heapq\r\nfrom itertools  import accumulate ,combinations ,permutations,chain\r\nfrom collections import defaultdict,deque,Counter\r\nsys.setrecursionlimit(50000) #To increase Recursion depth in py\r\ndef mvalues():return map(int,sys.stdin.readline().split())\r\ndef lvalues():return list(map(int,sys.stdin.readline().split()))\r\ndef svalues():return sys.stdin.readline().strip()\r\ndef test():return int(sys.stdin.readline())\r\n\r\ndef solve():\r\n    n = test()\r\n    l = lvalues()\r\n    save = [0]\r\n    cnt = 0\r\n    \r\n    for i in range(n):\r\n        if  (i & 1): l[i] *= -1\r\n        cnt += l[i]\r\n        save.append(cnt)\r\n    save.sort()\r\n    for i in range(1, n + 1):\r\n        if i == 0 or save[i] == save[i - 1]:\r\n            return \"YES\"\r\n    return \"NO\"\r\n\r\n\r\nfor _ in range(test()):\r\n    print(solve())    \r\n",
        "rejectedCode": "#    Author : Mohamed Yousef \r\n#    Date   : 2024-01-06\r\nimport sys,math,bisect,collections,itertools,heapq\r\nfrom itertools  import accumulate ,combinations ,permutations,chain\r\nfrom collections import defaultdict,deque,Counter\r\nsys.setrecursionlimit(50000) #To increase Recursion depth in py\r\ndef mvalues():return map(int,sys.stdin.readline().split())\r\ndef lvalues():return list(map(int,sys.stdin.readline().split()))\r\ndef svalues():return sys.stdin.readline().strip()\r\ndef test():return int(sys.stdin.readline())\r\n\r\ndef solve():\r\n    n = test()\r\n    l = lvalues()\r\n    save = [0]\r\n    cnt = 0\r\n    \r\n    for i in range(n):\r\n        if  (i & 1): l[i] *= -1\r\n        cnt += l[i]\r\n        save.append(cnt)\r\n    save.sort()\r\n    for i in range(1, n + 1):\r\n        if i == 0 or save[i] == save[i - 1]:\r\n            return \"YES\"\r\n    return \"NO\"\r\n\r\n\r\nfor _ in range(test()):\r\n    print(solve())    \r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240484740",
            "author": "MrL",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 8800,
            "submissionTime": 1704528600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240484481",
            "author": "MrL",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704528420
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    num = input()\r\n    _str = input()\r\n    s = []\r\n    for j in range(1,len(_str)):\r\n        if _str[j] in 'ae':\r\n            if j == len(_str)-1:\r\n                s.append(_str[j-1]+_str[j])\r\n            elif j == len(_str) - 2:\r\n                s.append(_str[j-1]+_str[j]+_str[j+1])\r\n            elif _str[j-1] in 'bcd' and _str[j+1] in 'bcd' and _str[j+2] in 'bcd':\r\n                s.append(_str[j-1]+_str[j]+_str[j+1])\r\n            else:\r\n                s.append(_str[j-1]+_str[j])\r\n    print(\".\".join(s))",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    num = input()\r\n    _str = input()\r\n    s = []\r\n    for j in range(1,len(_str)):\r\n        if _str[j] in 'ae':\r\n            if j == len(_str)-2:\r\n                s.append(_str[j-1]+_str[j])\r\n            elif j == len(_str) - 3:\r\n                s.append(_str[j-1]+_str[j]+_str[j+1])\r\n            elif _str[j-1] in 'bcd' and _str[j+1] in 'bcd' and _str[j+2] in 'bcd':\r\n                s.append(_str[j-1]+_str[j]+_str[j+1])\r\n            else:\r\n                s.append(_str[j-1]+_str[j])\r\n    print(\".\".join(s))",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.ba\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 8,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240487650",
            "author": "jsesok",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 11400,
            "submissionTime": 1704530160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240487045",
            "author": "jsesok",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 6500,
            "submissionTime": 1704529800
        },
        "acceptedCode": "f = int(input())\r\nfor j in range(f):\r\n    a = int(input())\r\n    e = input()\r\n    b = []\r\n    c = 0\r\n    Q = []\r\n    i = a - 1\r\n    while i > 0:\r\n        if e[i] in 'ae':\r\n            d = e[i - 1: i + 1]\r\n            i -= 2\r\n            b.append(d)\r\n        else:\r\n            d = e[i - 2: i + 1]\r\n            i -= 3\r\n            b.append(d)\r\n    for i in range(len(b) - 1, -1, -1):\r\n        Q.append(b[i])\r\n    print(*Q, sep=\".\")\r\n\r\n",
        "rejectedCode": "f = int(input())\r\nfor j in range(f):\r\n    a = int(input())\r\n    e = input()\r\n    b = []\r\n    c = 0\r\n    i = a - 1\r\n    while i > 0:\r\n        if e[i] in 'ae':\r\n            d = e[i - 1: i + 1]\r\n            i -= 2\r\n            b.insert(0, d)\r\n        else:\r\n            d = e[i - 2: i + 1]\r\n            i -= 3\r\n            b.insert(0, d)\r\n    print(*b, sep=\".\")\r\n\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240483500",
            "author": "thePhysicist",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 295,
            "memory": 13400,
            "submissionTime": 1704527880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240482418",
            "author": "thePhysicist",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 17900,
            "submissionTime": 1704527400
        },
        "acceptedCode": "\n\nimport os\nimport sys\nfrom typing import List\n\nif os.getenv(\"ONLINE_JUDGE\") is not None:\n    # For getting input from input.txt file\n    sys.stdin = open('input.txt', 'r')\n\n    # Printing the Output to output.txt file\n    sys.stdout = open('output.txt', 'w')\n\n\ndef solve(s: str):\n    n = len(s)\n    i = 0\n    while i + 3 < n:\n        if s[i+3] == 'a' or s[i+3] == 'e':\n            # CV\n            print(s[i:i+2], end=\"\")\n            i += 2\n        else:\n            # CVC\n            print(s[i:i+3], end=\"\")\n            i += 3\n        print('.', end=\"\")\n    print(s[i:])\n\n\ntotalCases = int(input())\n\nwhile totalCases > 0:\n    n = int(input())\n    string = input()\n    solve(string)\n    totalCases -= 1\n",
        "rejectedCode": "\n\nimport os\nimport sys\nfrom typing import List\n\nif os.getenv(\"ONLINE_JUDGE\") is not None:\n    # For getting input from input.txt file\n    sys.stdin = open('input.txt', 'r')\n\n    # Printing the Output to output.txt file\n    sys.stdout = open('output.txt', 'w')\n\n\ndef is_vowel(c: str):\n    return c in 'aeiou'\n\n\ndef solve(s: str):\n    ans = \"\"\n    n = len(s)\n    i = 0\n    while i + 3 < n:\n        if is_vowel(s[i+3]):\n            # CV\n            ans += s[i:i+2] + '.'\n            i += 2\n        else:\n            # CVC\n            ans += s[i:i+3] + '.'\n            i += 3\n\n    ans += s[i:]\n    return ans\n\n\ntotalCases = int(input())\n\nwhile totalCases > 0:\n    n = int(input())\n    string = input()\n    print(solve(string))\n    totalCases -= 1\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 13,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240476878",
            "author": "youknowwho05",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 34000,
            "submissionTime": 1704524160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240476271",
            "author": "youknowwho05",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 22000,
            "submissionTime": 1704523860
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    input_str = input()\r\n    a = [int(x) for x in input_str.split()]\r\n    s=0\r\n    x=[0]\r\n    for i in range(n):\r\n        if i%2==0:\r\n            s+=a[i]\r\n        else:\r\n            s-=a[i]\r\n        x.append(s)\r\n    \r\n    x_set = set()\r\n    has_duplicates = any(val in x_set or x_set.add(val) for val in x)\r\n    \r\n    if has_duplicates:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    input_str = input()\r\n    input_list = input_str.split()\r\n    a = [int(x) for x in input_list]\r\n    s=0\r\n    x=[0]\r\n    for i in range(n):\r\n        if i%2==0:\r\n            s+=a[i]\r\n        else:\r\n            s-=a[i]\r\n        x.append(s)\r\n    x1=[]\r\n    t=0\r\n    for i in range(n+1):\r\n        if x[i] in x1:\r\n            t+=1\r\n        else:\r\n            x1.append(x[i])\r\n    if t>0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240457511",
            "author": "Austin_5",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 436,
            "memory": 30500,
            "submissionTime": 1704514440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240457459",
            "author": "Austin_5",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 1,
            "runTime": 1000,
            "memory": 1300,
            "submissionTime": 1704514380
        },
        "acceptedCode": "for _ in range(int(input())):  \r\n    \r\n    n = int(input())\r\n    a=list(map(int,input().split()))\r\n    d =  [0]\r\n \r\n    for i in range(n):\r\n        if i%2==0:\r\n            d.append(d[-1]+a[i])\r\n        else:\r\n            d.append(d[-1]-a[i])\r\n \r\n    \r\n    d.sort()\r\n    i = 0\r\n    ans = False\r\n    while i<n:\r\n        if d[i]==d[i+1]:\r\n            print(\"YES\")\r\n            ans = True\r\n            break\r\n        i+=1\r\n    if ans == False:\r\n        print(\"NO\")\r\n            ",
        "rejectedCode": "for _ in range(int(input())):  \r\n    \r\n    n = int(input())\r\n    a=list(map(int,input().split()))\r\n    d =  [0]\r\n \r\n    for i in range(n):\r\n        if i%2==0:\r\n            d.append(d[-1]+a[i])\r\n        else:\r\n            d.append(d[-1]-a[i])\r\n \r\n    \r\n    d.sort()\r\n    i = 0\r\n    ans = False\r\n    while i<n:\r\n        if d[i]==d[i+1]:\r\n            print(\"YES\")\r\n            ans = True\r\n            break\r\n    if ans == False:\r\n        print(\"NO\")\r\n            ",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 22,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240472193",
            "author": "uma_6850",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 28900,
            "submissionTime": 1704521700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240470618",
            "author": "uma_6850",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33200,
            "submissionTime": 1704520860
        },
        "acceptedCode": "t = int(input())\n\nans = []\n\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n\n    for i in range(n):\n        if (i&1) == True:\n            arr[i] = (-1*arr[i])\n    \n    S = set()\n    pre = 0\n    S.add(pre)\n    Flag = False\n    for i in range(n):\n        pre = pre + arr[i]\n        if pre not in S:\n            S.add(pre)\n        else:\n            Flag = True\n            ans.append(\"yes\")\n            break\n\n    if Flag == False:\n        ans.append(\"No\")\n    t = t - 1\n\nfor i in range(len(ans)):\n    print(ans[i])",
        "rejectedCode": "t = int(input())\n\nans = []\n\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n\n    for i in range(n):\n        if (i&1) == True:\n            arr[i] = (-1*arr[i])\n    \n    dict = {}\n    pre = 0\n    dict[pre] = 1\n    Flag = False\n    for i in range(n):\n        pre = pre + arr[i]\n        if pre not in dict:\n            dict[pre] = 1\n        else:\n            Flag = True\n            ans.append(\"yes\")\n            break\n\n    if Flag == False:\n        ans.append(\"No\")\n    t = t - 1\n\nfor i in range(len(ans)):\n    print(ans[i])",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 13,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240467240",
            "author": "KrishBhimani",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704519120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240467078",
            "author": "KrishBhimani",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704519000
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a=0\r\n    b=0\r\n    c=0\r\n    for j in range(3):\r\n        str=input()\r\n        a+=str.count('A')\r\n        b+=str.count('B')\r\n        c+=str.count('C')\r\n    if(a==2):\r\n        print('A')\r\n    elif(b==2):\r\n        print('B')\r\n    else:\r\n        print('C')\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    a=0\r\n    b=0\r\n    c=0\r\n    for j in range(3):\r\n        str=input()\r\n        a+=str.count('A')\r\n        b+=str.count('B')\r\n        c+=str.count('C')\r\n    if(a==2):\r\n        print('A')\r\n    if(b==2):\r\n        print('B')\r\n    else:\r\n        print('C')\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nC\r\nB\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'C'\r\n"
        },
        "errorLine": 12,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240461796",
            "author": "benzos",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 28900,
            "submissionTime": 1704516480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240459843",
            "author": "benzos",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 28200,
            "submissionTime": 1704515520
        },
        "acceptedCode": "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n\n    can = False\n    s = nums[0]\n    sums = {0}\n    for i in range(1, n):\n        sums.add(s)\n        s = s-nums[i] if i & 1 else s+nums[i]\n        if s in sums:\n            can = True\n            break\n\n    if can:\n        print('yes')\n    else:\n        print('no')",
        "rejectedCode": "for i in range(int(input())):\n    n = int(input())\n    nums = map(int, input().split())\n\n    can = False\n    s = next(nums)\n    sums = {0: None}\n    for i in range(1, n):\n        sums[s] = None\n        next_num = next(nums)\n        s += -next_num if i & 1 else next_num\n        if s in sums:\n            can = True\n            break\n\n    if can:\n        print('yes')\n    else:\n        print('no')",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240461529",
            "author": "bhavilpanjwani06",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704516360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240458413",
            "author": "bhavilpanjwani06",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704514860
        },
        "acceptedCode": "def odd():\r\n    if int(x[0]) == int(x[1]):\r\n        return x[2]\r\n    if int(x[0]) == int(x[2]):\r\n        return x[1]\r\n    if int(x[1]) == int(x[2]):\r\n        return x[0]\r\n\r\nn = input(\"\")\r\nfor i in range(int(n)):\r\n    x = input(\"\").split()\r\n    print(odd())",
        "rejectedCode": "def missing_letter():\r\n    m = x.count(\"A\") + y.count(\"A\") + z.count(\"A\")\r\n    n = x.count(\"B\") + y.count(\"B\") + z.count(\"B\")\r\n    l = x.count(\"C\") + y.count(\"C\") + z.count(\"C\")\r\n    # f = x.count(\"?\")\r\n    # g = y.count(\"?\")\r\n    # h = z.count(\"?\")\r\n    if m==2:\r\n        if x.index(\"B\") != y.index(\"B\") != z.index(\"B\") and x.index(\"C\") != y.index(\"C\") != z.index(\"C\"):\r\n            # if f == 1:\r\n            #     x(\"?\") == \"A\"\r\n            # if g == 1:\r\n            #     y(\"?\") == \"A\"\r\n            # if h == 1:\r\n            #     z(\"?\") == \"A\"\r\n            return \"A\"\r\n        else:\r\n            return \"Invalid Latin Square\"\r\n    if n==2:\r\n        if x.index(\"A\") != y.index(\"A\") != z.index(\"A\") and x.index(\"C\") != y.index(\"C\") != z.index(\"C\"):\r\n            # if f == 1:\r\n            #     x(\"?\") == \"B\"\r\n            # if g == 1:\r\n            #     y(\"?\") == \"B\"\r\n            # if h == 1:\r\n            #     z(\"?\") == \"B\"\r\n            return \"B\"\r\n        else:\r\n            return \"Invalid Latin Square\"\r\n    if l==2:\r\n        if x.index(\"B\") != y.index(\"B\") != z.index(\"B\") and x.index(\"A\") != y.index(\"A\") != z.index(\"A\"):\r\n            # if f == 1:\r\n            #     x(\"?\") == \"C\"\r\n            # if g == 1:\r\n            #     y(\"?\") == \"C\"\r\n            # if h == 1:\r\n            #     z(\"?\") == \"C\"\r\n            return \"C\"\r\n        else:\r\n            return \"Invalid Latin Square\"\r\n    # The commented part is for printing the whole Latin Square including the missing part.\r\n\r\nn = input(\"\")\r\nx = []\r\ny = []\r\nz = []\r\nfor i in range(int(n)):\r\n    p = input(\"\").upper()\r\n    for i in p:\r\n        x.append(i)\r\n        print(x)\r\n    q = input(\"\").upper()\r\n    for i in q:\r\n        y.append(i)\r\n    r = input(\"\").upper()\r\n    for i in r:\r\n        z.append(i)\r\n    print(missing_letter())\r\n    x.clear()\r\n    y.clear()\r\n    z.clear()",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "['A']\r\n['A', 'B']\r\n['A', 'B', 'C']\r\nA\r\n['B']\r\n['B', 'C']\r\n['B', 'C', 'A']\r\nB\r\n['?']\r\n['?', 'A']\r\n['?', 'A', 'B']\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: '['A']'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240459364",
            "author": "JarifMustafiz",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 170,
            "memory": 10000,
            "submissionTime": 1704515340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240417357",
            "author": "JarifMustafiz",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12200,
            "submissionTime": 1704483240
        },
        "acceptedCode": "n1=int(input())\r\nfor i in range(n1):\r\n    n=int(input())\r\n    str1=input()\r\n\r\n    j=0\r\n    k=2\r\n    while k<=n-2:\r\n        if str1[k+1]==\"b\" or str1[k+1]==\"c\" or str1[k+1]==\"d\":\r\n            print(str1[j:k+1]+\".\",end=\"\")\r\n            j=k+1\r\n            k+=3\r\n        else:\r\n            print(str1[j:k]+\".\",end=\"\")\r\n            j=k\r\n            k+=2\r\n\r\n    print(str1[j:n])",
        "rejectedCode": "n1=int(input())\r\nfor j in range(n1):\r\n    n=int(input())\r\n    str1=input()\r\n\r\n    str2=\"\"\r\n    str3=str1[0]\r\n    for j in range(1,n-1):\r\n        if (str1[j]==\"b\" or str1[j]==\"c\" or str1[j]==\"d\") and (str1[j+1]==\"a\" or str1[j+1]==\"e\"):\r\n            str3 += str2 + \".\"\r\n            str2 = str1[j]\r\n        else:\r\n            str2+=str1[j]\r\n\r\n    str3+=str2+str1[n-1]\r\n    print(str3)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240456687",
            "author": "wyzkeyy",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 217,
            "memory": 28000,
            "submissionTime": 1704514080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240456426",
            "author": "wyzkeyy",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 77,
            "memory": 100,
            "submissionTime": 1704513960
        },
        "acceptedCode": "def solve():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    a = [a[i] if i % 2 == 0 else -a[i] for i in range(n)]\r\n    s = [0]\r\n    for ai in a:\r\n        s.append(s[-1] + ai)\r\n    s.sort()\r\n    l = -1e18\r\n    for si in s:\r\n        if si == l:\r\n            print(\"YES\")\r\n            return\r\n        else:\r\n            l = si\r\n    print(\"NO\")\r\n\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    solve()\r\n",
        "rejectedCode": "def solve():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    a = [a[i] if i % 2 == 0 else -a[i] for i in range(n)]\r\n    s = [0]\r\n    flag = 0\r\n    for ai in a:\r\n        s.append(s[-1] + ai)\r\n    s.sort()\r\n    l = 0\r\n    for si in s:\r\n        if si == l:\r\n            print(\"YES\")\r\n            return\r\n        else:\r\n            l = si\r\n    print(\"NO\")\r\n\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    solve()\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected NO, found YES [5th token]\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240456409",
            "author": "div9",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 11400,
            "submissionTime": 1704513960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240455744",
            "author": "div9",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 3,
            "runTime": 218,
            "memory": 257100,
            "submissionTime": 1704513600
        },
        "acceptedCode": "from collections import deque\n\n\ndef isValidWord(word) -> bool:\n    vowels = set(\"ae\")\n    consonants = set(\"bcd\")\n    isword1 = len(word) == 2 and word[0] in consonants and word[1] in vowels\n    isword2 = (\n        len(word) == 3\n        and word[0] in consonants\n        and word[1] in vowels\n        and word[2] in consonants\n    )\n    # print(\n    #     f\"word = {word}, isword1 = {isword1}, \"\n    #     f\"isword2 = {isword2}, \"\n    #     f\"result = {isword1 or isword2}\"\n    # )\n    return isword1 or isword2\n\n\ndef splitIntoValidWords(bigword: str) -> str:\n    if 2 <= len(bigword) <= 3 and isValidWord(bigword):\n        return bigword\n    word1 = bigword[:2]\n    word2 = bigword[:3]\n    if isValidWord(word1):\n        remaining = splitIntoValidWords(bigword[2:])\n        if remaining != \"WRONG\":\n            return word1 + \".\" + remaining\n        else:\n            if isValidWord(word2):\n                remaining = splitIntoValidWords(bigword[3:])\n                if remaining != \"WRONG\":\n                    return word2 + \".\" + remaining\n    return \"WRONG\"\n\n\ndef splitIntoValidWords2(bigword: str) -> str:\n    \"\"\"\n    we know that bigword can be split successfully.\n    a valid word is either CV or CVC\n    go from right to left.\n    if last char is V, then it must be CV\n    if last char is C, then it must be CVC\n    keep getting the word from the right recursively\n    \"\"\"\n    words = deque()\n    i = len(bigword) - 1\n    while i >= 0:\n        if bigword[i] in \"ae\":\n            words.appendleft(bigword[i - 1 : i + 1])\n            i -= 2\n        else:\n            words.appendleft(bigword[i - 2 : i + 1])\n            i -= 3\n    return \".\".join(words)\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        strlen = int(input())\n        s = input().strip()\n        assert len(s) == strlen\n        result = splitIntoValidWords2(s)\n        # print(f\"s = {s}\")\n        print(result)\n",
        "rejectedCode": "import gc\n\n\ndef isValidWord(word) -> bool:\n    vowels = set(\"ae\")\n    consonants = set(\"bcd\")\n    isword1 = len(word) == 2 and word[0] in consonants and word[1] in vowels\n    isword2 = (\n        len(word) == 3\n        and word[0] in consonants\n        and word[1] in vowels\n        and word[2] in consonants\n    )\n    # print(\n    #     f\"word = {word}, isword1 = {isword1}, \"\n    #     f\"isword2 = {isword2}, \"\n    #     f\"result = {isword1 or isword2}\"\n    # )\n    return isword1 or isword2\n\n\ndef splitIntoValidWords(bigword: str) -> str:\n    if 2 <= len(bigword) <= 3 and isValidWord(bigword):\n        return bigword\n    word1 = bigword[:2]\n    word2 = bigword[:3]\n    if isValidWord(word1):\n        remaining = splitIntoValidWords(bigword[2:])\n        if remaining != \"WRONG\":\n            return word1 + \".\" + remaining\n        else:\n            if isValidWord(word2):\n                remaining = splitIntoValidWords(bigword[3:])\n                if remaining != \"WRONG\":\n                    return word2 + \".\" + remaining\n    return \"WRONG\"\n\n\ndef splitIntoValidWords2(bigword: str) -> str:\n    \"\"\"\n    we know that bigword can be split successfully.\n    a valid word is either CV or CVC\n    go from right to left.\n    if last char is V, then it must be CV\n    if last char is C, then it must be CVC\n    keep getting the word from the right recursively\n    \"\"\"\n    if 2 <= len(bigword) <= 3:\n        return bigword\n    if bigword[-1] in \"ae\":\n        return splitIntoValidWords2(bigword[:-2]) + \".\" + bigword[-2:]\n    else:\n        return splitIntoValidWords2(bigword[:-3]) + \".\" + bigword[-3:]\n\n\nif __name__ == \"__main__\":\n    t = int(input())\n    for _ in range(t):\n        strlen = int(input())\n        s = input().strip()\n        assert len(s) == strlen\n        result = splitIntoValidWords2(s)\n        # print(f\"s = {s}\")\n        print(result)\n        gc.collect()\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240455506",
            "author": "srihita",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 300,
            "submissionTime": 1704513480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240447679",
            "author": "srihita",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704509700
        },
        "acceptedCode": "from collections import Counter\r\nn=int(input())\r\nfor i in range(n):\r\n    l=list(map(int,input().split()))\r\n    l=Counter(l)\r\n    for i,k in l.items():\r\n        if k==1:\r\n            print(i)\r\n\r\n",
        "rejectedCode": "import math\r\nn=int(input())\r\nfor i in range(n):\r\n    t=int(input())\r\n    for j in range(t):\r\n        q=list(map(int,input().split()))\r\n        summ=sum(q)\r\n        sr=int(math.sqrt(summ))\r\n        if sr*sr==summ:\r\n            print('YES')\r\n        else:\r\n            print('NO')",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "YES\r\nYES\r\nNO\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240451699",
            "author": "SilveryZz",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26800,
            "submissionTime": 1704511680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240451485",
            "author": "SilveryZz",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 8000,
            "submissionTime": 1704511620
        },
        "acceptedCode": "from collections import Counter\r\nimport math \r\nimport sys\r\n\r\nio = lambda: sys.stdin.readline().strip()\r\niar = lambda:list(map(int,io().split()))\r\n\r\ndef main():\r\n    n=int(io())\r\n    arr=iar()\r\n    tmp=int(math.sqrt(sum(arr)))\r\n    print(\"Yes\" if tmp*tmp==sum(arr) else \"No\")\r\n    \r\n\r\nif __name__ == \"__main__\":\r\n    t = int(io())\r\n    for test in range(t):\r\n        main()\r\n",
        "rejectedCode": "from collections import Counter\r\nimport math \r\nimport sys\r\n\r\nio = lambda: sys.stdin.readline().strip()\r\niar = lambda:list(map(int,io().split()))\r\n\r\ndef main():\r\n    n=int(io())\r\n    arr=iar()\r\n    tmp=math.sqrt(sum(arr))\r\n    print(\"Yes\" if tmp*tmp==sum(arr) else \"No\")\r\n    \r\n\r\nif __name__ == \"__main__\":\r\n    t = int(io())\r\n    for test in range(t):\r\n        main()\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "Yes\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240451441",
            "author": "daomanhdungtvt",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704511560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240325613",
            "author": "daomanhdungtvt",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704423120
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    a,b,c=map(int,input().split())\r\n    if a==b:\r\n        print(c)\r\n    else:\r\n        if a==c:\r\n            print(b)\r\n        else:\r\n            print(a)",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    a1=list(map(str,input().split()))\r\n    a2=list(map(str,input().split()))\r\n    a3=list(map(str,input().split()))\r\n    if \"?\" in a1:\r\n        if \"A\" not in a1:\r\n            print(\"A\")\r\n        elif \"B\" not in a1:\r\n            print(\"B\")\r\n        elif \"C\" not in a1:\r\n            print(\"C\")\r\n    elif \"?\" in a2:\r\n        if \"A\" not in a2:\r\n            print(\"A\")\r\n        elif \"B\" not in a2:\r\n            print(\"B\")\r\n        elif \"C\" not in a2:\r\n            print(\"C\")\r\n    elif \"?\" in a3:\r\n        if \"A\" not in a3:\r\n            print(\"A\")\r\n        elif \"B\" not in a3:\r\n            print(\"B\")\r\n        elif \"C\" not in a3:\r\n            print(\"C\")",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240448803",
            "author": "Yasin3074",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 8800,
            "submissionTime": 1704510240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240441002",
            "author": "Yasin3074",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704506340
        },
        "acceptedCode": "def solve(s):\r\n    C=['b','c','d']\r\n    V=['a','e']\r\n    n=len(s)-1\r\n    d=[]\r\n    re=''\r\n    index=n\r\n    while True:\r\n        if(s[index] in C):\r\n            re+=s[index-2]+s[index-1]+s[index]\r\n            d.append(re)\r\n            index-=3\r\n            if(index<=0):break\r\n            re=''\r\n        else:\r\n            re+=s[index-1]+s[index]\r\n            d.append(re)\r\n            re=''\r\n            index-=2\r\n            if(index<=0):break\r\n    n2=len(d)\r\n    s2=''\r\n    for i in range(n2-1,-1,-1):\r\n        if(i==0):s2+=d[i]\r\n        else:s2+=d[i]+'.'\r\n    return s2\r\n    \r\nd=[]\r\nt=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    s=input()\r\n    d.append(solve(s))\r\n    \r\nfor i in d:print(i)",
        "rejectedCode": "def issquare(d):\r\n    l=1\r\n    r=10**9\r\n    while(l<=r):\r\n        m=(r-l)//2\r\n        if(m*m==sum(d)):return True\r\n        elif(m*m>sum(d)):r=mid-1\r\n        else:r=mid+1\r\n    return False\r\n    \r\n    \r\nt=int(input())\r\nd=[]\r\nfor i in range(t):\r\n    n=int(input())\r\n    d2=list(map(int,input().split()))\r\n    if(issquare(d2)):d.append('YES')\r\n    else:d.append('NO')\r\n    \r\nfor i in d:print(i)",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240444617",
            "author": "dream_synopsis",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704508140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240437628",
            "author": "dream_synopsis",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704504660
        },
        "acceptedCode": "t = 3*int(input())\r\nwhile(t>0):\r\n    t = t - 1\r\n    abc = input()\r\n    if abc.count('A')!= 1:\r\n        print('A')\r\n        \r\n    elif abc.count('B')!= 1:\r\n        print('B')\r\n        \r\n    elif abc.count('C') !=1:\r\n        print('C')\r\n        \r\n    else:\r\n        pass\r\n",
        "rejectedCode": "t = int(input())\r\nwhile(t>0):\r\n    t=t-1\r\n    n = int(input())\r\n    b = list(map(int,input().split()))\r\n    if sum(i for i in b[1::2]) == sum(i for i in b[0::2]):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "YES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [4th token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240446557",
            "author": "daolong",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704509100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240446444",
            "author": "daolong",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Memory limit exceeded on test 1",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 262100,
            "submissionTime": 1704509040
        },
        "acceptedCode": "import sys\r\n\r\nsys.setrecursionlimit(100000000)\r\n\r\ninp = lambda: int(input())\r\nstrng = lambda: input().strip()\r\njn = lambda x, l: x.join(map(str, l))\r\nstrl = lambda: list(input().strip())\r\nmul = lambda: map(int, input().strip().split())\r\nmulf = lambda: map(float, input().strip().split())\r\nseq = lambda: list(map(int, input().strip().split()))\r\n\r\nflush = lambda: sys.stdout.flush()\r\nstdstr = lambda: sys.stdin.readline()\r\nstdint = lambda: int(sys.stdin.readline())\r\nstdpr = lambda x: sys.stdout.write(str(x))\r\nstdsp = lambda: print(\"\",end=\"\\n\")\r\n\r\nmod = 1000000007\r\n\r\ndef solve():\r\n    a, b, c = seq()\r\n    res = a ^ b ^ c\r\n    flush()\r\n    stdpr(res)\r\n    stdsp()\r\n    \r\n\r\nt = stdint()\r\n\r\nwhile t > 0:\r\n    solve()\r\n    t -= 1\r\n\r\n    \r\n",
        "rejectedCode": "import sys\r\n\r\nsys.setrecursionlimit(100000000)\r\n\r\ninp = lambda: int(input())\r\nstrng = lambda: input().strip()\r\njn = lambda x, l: x.join(map(str, l))\r\nstrl = lambda: list(input().strip())\r\nmul = lambda: map(int, input().strip().split())\r\nmulf = lambda: map(float, input().strip().split())\r\nseq = lambda: list(map(int, input().strip().split()))\r\n\r\nflush = lambda: sys.stdout.flush()\r\nstdstr = lambda: sys.stdin.readline()\r\nstdint = lambda: int(sys.stdin.readline())\r\nstdpr = lambda x: sys.stdout.write(str(x))\r\nstdsp = lambda: print(\"\",end=\"\\n\")\r\n\r\nmod = 1000000007\r\n\r\ndef solve():\r\n    a, b, c = seq()\r\n    res = a ^ b ^ c\r\n    flush()\r\n    stdpr(res)\r\n    stdsp()\r\n\r\nt = stdint()\r\n\r\nwhile t > 0:\r\n    solve()\r\n    t -= 1\r\n\r\n    \r\n",
        "failedTestCase": null,
        "errorLine": 27,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240485880",
            "author": "Manasa_2004",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 78,
            "memory": 8800,
            "submissionTime": 1704529200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240201566",
            "author": "Manasa_2004",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704338160
        },
        "acceptedCode": "for iteration in range(int(input())):\r\n    length = int(input())\r\n    string_input = input()\r\n    result = []\r\n    index = 0\r\n    while index + 3 < length:\r\n        if string_input[index+3] in \"bcd\":\r\n            result.append(string_input[index:index+3])\r\n            index += 3\r\n        else:\r\n            result.append(string_input[index:index+2])\r\n            index += 2\r\n    result.append(string_input[index:])\r\n    print(\".\".join(result))\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    mn=int(input())\r\n    s=list(input())\r\n    for i in range(2,mn):\r\n        if s[i] in \"ae\":\r\n            s[i-1]='.'+s[i-1]\r\n    print(\"\".join(s)",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240437465",
            "author": "darkphoenix4",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 139,
            "memory": 900,
            "submissionTime": 1704504600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240437233",
            "author": "darkphoenix4",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704504480
        },
        "acceptedCode": "t=int(input())\r\nfor k in range(t):\r\n    n=int(input())\r\n    s=input()\r\n    vowel='ae'\r\n    consonant='bcd'\r\n    a=0\r\n    news=''\r\n    for i in range(0,n,1):\r\n        if a>n-5:\r\n            if a==n-2:\r\n                news+=s[a:a+2]\r\n                a+=2\r\n                break\r\n            elif a==n-3:\r\n                news+=s[a:a+3]\r\n                a+=3\r\n                break\r\n            elif a==n-4:\r\n                news+=s[n-4:n-2]+'.'+s[n-2:]\r\n                break\r\n            elif n==4:\r\n                news=s[0:2]+'.'+s[2:n]\r\n                break\r\n        elif s[a] in consonant and s[a+1] in vowel and s[a+2] in consonant and s[a+3] in consonant:\r\n            news+=s[a:a+3]+'.'\r\n            a+=3\r\n        elif s[a] in consonant and s[a+1] in vowel:\r\n            news+=s[a:a+2]+'.'\r\n            a+=2\r\n    print(news)",
        "rejectedCode": "t=int(input())\r\nfor k in range(t):\r\n    n=int(input())\r\n    s=input()\r\n    vowel='ae'\r\n    consonant='bcd'\r\n    a=0\r\n    news=''\r\n    for i in range(0,n,1):\r\n        if a>n-5:\r\n            if a==n-2:\r\n                news+=s[a:a+2]\r\n                a+=2\r\n                break\r\n            elif a==n-3:\r\n                news+=s[a:a+3]\r\n                a+=3\r\n                break\r\n            elif a==n-4:\r\n                news+=s[n-4:n-2]+'.'+s[n-2:]\r\n            elif n==4:\r\n                news=s[0:2]+'.'+s[2:n]\r\n        elif s[a] in consonant and s[a+1] in vowel and s[a+2] in consonant and s[a+3] in consonant:\r\n            news+=s[a:a+3]+'.'\r\n            a+=3\r\n        elif s[a] in consonant and s[a+1] in vowel:\r\n            news+=s[a:a+2]+'.'\r\n            a+=2\r\n    print(news)",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.bab\r\nba.baba.baba.baba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'ba.ba', found: 'ba.baba.baba.baba.ba'\r\n"
        },
        "errorLine": 21,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240414386",
            "author": "WaifuSlayer",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 6400,
            "submissionTime": 1704476820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240253775",
            "author": "WaifuSlayer",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704365820
        },
        "acceptedCode": "import sys\ninput = sys.stdin.readline\noutput = sys.stdout.write # must be string\n# sys.stdout.write(str(n) + \"\\n\")\n# sys.stdout.write(\" \".join(map(str,list)) + \"\\n\")\n\nvow = {'a', 'e'}\ncon = {'b', 'c', 'd'}\n\ndef code():\n    n = int(input())\n    str = input()[:-1]\n    ans = []\n    i = n - 1\n    while i >= 0:\n        c = str[i]\n        if c in vow: # CV\n            ans.append(str[i-1:i+1])\n            i -= 2\n        else: # CVC\n            ans.append(str[i-2:i+1])\n            i -= 3\n\n    ans.reverse() \n    print(\".\".join(ans))\n\n\nt = int(input())\nfor _ in range(t):\n    code()\n\n\"\"\"\nCVC\nCV\nCVCV\n\"\"\"\n",
        "rejectedCode": "\n#include <iostream>\n#include <stdio.h>\n#include <string.h>\nusing namespace std;\n\nvoid code() {\n    int a, b, c;\n    cin >> a >> b >> c;\n    cout << (a ^ b ^ c) << endl; \n}\n\nint main() {\n    int tc; cin >> tc;\n    for (int t = 0; t < tc; t++) {\n        code();\n    }\n}",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240397076",
            "author": "adityash2611",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 249,
            "memory": 26200,
            "submissionTime": 1704460800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240395891",
            "author": "adityash2611",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704460140
        },
        "acceptedCode": "import math\r\n\r\nt = int(input())\r\nfor i in range(t):\r\n    n = input()\r\n    a = list(map(int,input().split()))\r\n    sum = 0\r\n    for j in a:\r\n        sum+=j\r\n    s = math.sqrt(sum)\r\n    if s%1 == 0:\r\n        print(\"yes\")\r\n    else:\r\n        print(\"no\")",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    r1 = list(input())\r\n    r2 = list(input())\r\n    r3 = list(input())\r\n    if \"?\" in r1:\r\n        j = r1.index(\"?\")\r\n        if \"B\" in r1 and \"C\" in r1:\r\n            print(\"A\")\r\n        elif \"A\" in r1 and \"C\" in r1:\r\n            print(\"B\")\r\n        elif \"B\" in r1 and \"A\" in r1:\r\n            print(\"C\")",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "C\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: 'C'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240395989",
            "author": "ushaswini_nukala",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 1100,
            "submissionTime": 1704460200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240395775",
            "author": "ushaswini_nukala",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 92,
            "memory": 2100,
            "submissionTime": 1704460140
        },
        "acceptedCode": "n=int(input())\r\nfor i in range(n):\r\n    a = list(map(int,input().split()))\r\n    for i in a:\r\n        if(a.count(i)==1):\r\n            print(i)",
        "rejectedCode": "n = int(int,input().split())\r\nfor i in range(n):\r\n    a = list(map(int,input().split()))\r\n    for i in a:\r\n        if(a.count(i)==1):\r\n            print(i)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240026201",
            "author": "snehal_139",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704199380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240026064",
            "author": "snehal_139",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704199320
        },
        "acceptedCode": "T = int(input())\r\nfor t in range(T):\r\n    letter = ['A' , 'B' , 'C']\r\n    listA = list(input())\r\n    listB = list(input())\r\n    listC = list(input())\r\n    if '?' in listA:\r\n        for l in letter:\r\n            if l not in listA:\r\n                print(l)\r\n                break\r\n    elif '?' in listB:\r\n        for l in letter:\r\n            if l not in listB:\r\n                print(l)\r\n                break\r\n    else:\r\n        for l in letter:\r\n            if l not in listC:\r\n                print(l)\r\n                break",
        "rejectedCode": "T = int(input())\r\nfor t in range(T):\r\n    letter = ['A' , 'B' , 'C']\r\n    listA = input().split(\" \")\r\n    listB = input().split(\" \")\r\n    listC = input().split(\" \")\r\n    if '?' in listA:\r\n        for l in letter:\r\n            if l not in listA:\r\n                print(l)\r\n                break\r\n    elif '?' in listB:\r\n        for l in letter:\r\n            if l not in listB:\r\n                print(l)\r\n                break\r\n    else:\r\n        for l in letter:\r\n            if l not in listC:\r\n                print(l)\r\n                break",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 2nd words differ - expected: 'B', found: 'A'\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240388689",
            "author": "Aaquib07",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 17000,
            "submissionTime": 1704456780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240264697",
            "author": "Aaquib07",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704371040
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    word = list(input())\r\n\r\n    for i in range(2, n):\r\n        if word[i] in 'ae':\r\n            word[i - 1] = '.' + word[i - 1]\r\n    print(''.join(word))",
        "rejectedCode": "for _ in range(int(input()):\r\n    a, b, c = map(int, input().split())\r\n    if a == b:\r\n        print(c)\r\n    elif a == c:\r\n        print(b)\r\n    elif b == c:\r\n        print(a)",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240381702",
            "author": "__NeverGiveUp__",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 343,
            "memory": 800,
            "submissionTime": 1704453360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240272973",
            "author": "__NeverGiveUp__",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704375060
        },
        "acceptedCode": "test_cases = int(input())\r\nwhile test_cases > 0:\r\n    test_cases -= 1\r\n    n = int(input())\r\n    letter = input()\r\n    i = 0\r\n    while i < len(letter):\r\n        if i + 3 >= len(letter):\r\n            print(letter[i:])\r\n            i += 3\r\n        else:\r\n            if letter[i + 3] not in [\"a\", \"e\"]:\r\n                print(letter[i], end=\"\")\r\n                print(letter[i + 1], end=\"\")\r\n                print(letter[i + 2], end=\"\")\r\n                i += 3\r\n            else:\r\n                print(letter[i], end=\"\")\r\n                print(letter[i + 1], end=\"\")\r\n\r\n                i += 2\r\n            print(\".\", end=\"\")\r\n",
        "rejectedCode": "import math\r\n\r\n\r\ndef is_constant(c: chr):\r\n    return c in [\"b\", \"c\", \"d\"]\r\n\r\n\r\ntest_cases = int(input())\r\nwhile test_cases:\r\n    test_cases -= 1\r\n    n = int(input())\r\n    letter = input()\r\n    leen = 1\r\n    print(letter[0], end=\"\")\r\n    for i in range(1, len(letter)):\r\n        if (is_constant(letter[i]) and is_constant(letter[i - 1])) or leen == 3:\r\n            print(\".\", end=\"\")\r\n            leen = 0\r\n        print(letter[i], end=\"\")\r\n        leen += 1\r\n    print(\"\")\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "bac.ed.bab\r\nbab.a\r\ndad.dec.abe.d.dad\r\ndac\r\ndac.dac\r\ndab.ab.bab.aba.b.bab.bab.ab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'bac.ed.bab'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240384266",
            "author": "Gurugubelli_Anil",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 249,
            "memory": 31600,
            "submissionTime": 1704454560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240384072",
            "author": "Gurugubelli_Anil",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704454500
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int,input().split()))\r\n    A = [0]\r\n    for i in range(n):\r\n        A.append(A[-1]+(-1)**i*l[i])\r\n    \r\n    if len({*A})!=len(A):\r\n        res='YES'\r\n    else:\r\n        res='NO'\r\n    print(res)",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int,input().split()))\r\n    A = [0]\r\n    for i in range(n):\r\n        A.append(p[-1]+(-1)**i*l[i])\r\n    \r\n    if len({*A})!=len(A):\r\n        res='YES'\r\n    else:\r\n        res='NO'\r\n    print(res)",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240383926",
            "author": "Khozhaev",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704454380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240383428",
            "author": "Khozhaev",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2700,
            "submissionTime": 1704454200
        },
        "acceptedCode": "T = int(input())\r\nfor i in range(T):\r\n    a, b, c = map(int, input().split())\r\n    print(a^b^c)\r\n",
        "rejectedCode": "T = int(input())\r\nfor i in range(T):\r\n    a, b, c = map(int, input())\r\n    print(a^b^c)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240379888",
            "author": "Sai_durga5",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704452580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240379726",
            "author": "Sai_durga5",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704452460
        },
        "acceptedCode": "n = int(input())\r\nfor i in range(n):\r\n    a = list(map(int,input().split()))\r\n    for i in a:\r\n        if(a.count(i)==1):\r\n            print(i)\r\n",
        "rejectedCode": "n = int(input())\r\nfor i in range(n):\r\n    a = list(map(int,input().split())\r\n    for i in a:\r\n        if(a.count(i)==1):\r\n            print(i)\r\n",
        "failedTestCase": null,
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240379130",
            "author": "kathojumanoj",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 25300,
            "submissionTime": 1704452220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240378992",
            "author": "kathojumanoj",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704452160
        },
        "acceptedCode": "import math\r\nt=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    t=sum(a)\r\n    r=math.sqrt(t)\r\n    if (t%r)==0.0:\r\n        # print(t%r)\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "import math\r\nt=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    t=sum(a)\r\n    r=math.sqrt(t)\r\n    if (t%r)==0.0:\r\n        print(t%r)\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "0.0\r\nYES\r\n0.0\r\nYES\r\nNO\r\n0.0\r\nYES\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong output format YES or NO expected, but 0.0 found [1st token]\r\n"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240378616",
            "author": "Lalakich",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 139,
            "memory": 26000,
            "submissionTime": 1704451980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240375083",
            "author": "Lalakich",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 100,
            "submissionTime": 1704450300
        },
        "acceptedCode": "n = int(input())\r\nres = []\r\nfor i in range(n):\r\n    vedra = int(input())\r\n    kvadr = sum(list(map(int, input().split())))\r\n    if int(kvadr**0.5)**2 == kvadr:\r\n        res.append('YES')\r\n    else:\r\n        res.append('NO')\r\nprint(*res, sep='\\n')\r\n",
        "rejectedCode": "from collections import Counter\r\nn = int(input())\r\nres = []\r\nfor i in range(n):\r\n    a = list(map(int, input().split()))\r\n    c = Counter(a)\r\n    for val in c:\r\n        res.append(val)\r\n        break\r\nfor el in res:\r\n    print(el)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n4\r\n5\r\n7\r\n9\r\n3\r\n2\r\n5\r\n7\r\n5\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '4'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240380277",
            "author": "Dmitriy_Bukharev",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 265,
            "memory": 40700,
            "submissionTime": 1704452760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240380226",
            "author": "Dmitriy_Bukharev",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33600,
            "submissionTime": 1704452700
        },
        "acceptedCode": "import io,os\r\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    vals = list(map(int, input().split()))\r\n    pe = [0]*n\r\n    po = [0]*n\r\n    pe[0] = vals[0]\r\n    for i in range(1, n):\r\n        pe[i] = pe[i-1]\r\n        po[i] = po[i-1]\r\n        if i%2==0: pe[i] += vals[i]\r\n        else: po[i] += vals[i]\r\n    d = set([0])\r\n    for i in range(n):\r\n        diff = pe[i]-po[i]\r\n        if diff in d: \r\n            print(\"YES\")\r\n            break\r\n        d.add(diff)\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "import io,os\r\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    vals = list(map(int, input().split()))\r\n    pe = [0]*n\r\n    po = [0]*n\r\n    pe[0] = vals[0]\r\n    for i in range(1, n):\r\n        pe[i] = pe[i-1]\r\n        po[i] = po[i-1]\r\n        if i%2==0: pe[i] += vals[i]\r\n        else: po[i] += vals[i]\r\n    d = set([0])\r\n    for i in range(n):\r\n        diff = pe[i]-po[i]\r\n        if diff in d: \r\n            print(\"YES\")\r\n            break\r\n        d.add(diff)\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240377194",
            "author": "harithachandana",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 26200,
            "submissionTime": 1704451260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240376942",
            "author": "harithachandana",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704451140
        },
        "acceptedCode": "import math\r\n\r\nn = int(input())\r\nfor _ in range(n):\r\n    a = int(input())\r\n    l = [i for i in map(int, input().split())]\r\n    s = sum(l)\r\n    val = int(math.sqrt(s))\r\n    if val * val == s:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "n = int(input())\r\nfor i in range(n):\r\n    a = int(input())\r\n    l = []\r\n    for i in range(a):\r\n        c = int(input())\r\n        l.append(c)\r\n    s = sum(l)\r\n    val = int(math.sqrt(s))\r\n    if(val*val==s):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240254356",
            "author": "yuki_53",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 170,
            "memory": 20200,
            "submissionTime": 1704366120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240253832",
            "author": "yuki_53",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 109,
            "memory": 0,
            "submissionTime": 1704365880
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = input()\r\n    val = sum(map(int, input().split()))\r\n    if int(val**0.5) == val**0.5:\r\n        print('yes')\r\n    else:\r\n        print('no')",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = input()\r\n    val = sum(map(int, input().split()))\r\n    if (val**0.5)**2 == val:\r\n        print('yes')\r\n    else:\r\n        print('no')",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "yes\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nn...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240363651",
            "author": "Bleedingballs",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 7300,
            "submissionTime": 1704444780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240363449",
            "author": "Bleedingballs",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704444720
        },
        "acceptedCode": "import math\r\n# function to check sqrt\r\ndef checkSqrt(number):\r\n    root = math.sqrt(number)\r\n    if int(root) * int(root) == number: return True\r\n    return False\r\n\r\n# Main program\r\nnum_test_cases = int(input())\r\nv = \"ae\"\r\nfor _ in range(num_test_cases):\r\n    length = int(input()) - 1\r\n    word = input()\r\n    answer = []\r\n    while length > 0:\r\n        if word[length] in v:\r\n            answer.append(word[length-1:length+1])\r\n            length-=2\r\n        else:\r\n            answer.append(word[length-2:length+1])\r\n            length-=3\r\n    \r\n    print(\".\".join(answer[::-1]))\r\n\r\n\r\n\r\n",
        "rejectedCode": "import math\r\n# function to check sqrt\r\ndef checkSqrt(number):\r\n    root = math.sqrt(number)\r\n    if int(root) * int(root) == number: return True\r\n    return False\r\n\r\n# Main program\r\nnum_test_cases = int(input())\r\nv = \"ae\"\r\nfor _ in range(num_test_cases):\r\n    length = int(input()) - 1\r\n    word = input()\r\n    answer = []\r\n    while length > 0:\r\n        if word[length] in v:\r\n            answer.append(word[length-1:length+1])\r\n            length-=2\r\n        else:\r\n            answer.append(word[length-2:length+1])\r\n            length-=3\r\nprint(\".\".join(answer[::-1]))\r\n\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "da.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'da.bab.ba.ba.bab.bab.ba.bab.ba'\r\n"
        },
        "errorLine": 22,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240236814",
            "author": "Tejasri_26",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 561,
            "memory": 18300,
            "submissionTime": 1704357660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240235906",
            "author": "Tejasri_26",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704357300
        },
        "acceptedCode": "import math\r\nt=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    s=sum(l)\r\n    t=math.sqrt(s)\r\n    if(t.is_integer()):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")",
        "rejectedCode": "import math\r\nt=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    r=list(map(int,input().split())\r\n    s=sum(r)\r\n    t=math.sqrt(s)\r\n    if(t.is_integer()):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")",
        "failedTestCase": null,
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240341815",
            "author": "shaheryar_tak",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 390,
            "memory": 29800,
            "submissionTime": 1704433020
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240341230",
            "author": "shaheryar_tak",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704432660
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    \r\n    n=int(input())\r\n    arr=list(map(int,input().split()))\r\n    s=sum(arr)\r\n    a=s**(0.5)\r\n    if int(a)*int(a)==s:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"No\")\r\n            \r\n        \r\n        \r\n    ",
        "rejectedCode": "for _ in range(int(input())):\r\n    r=[]\r\n    for i in range(3):\r\n        s=input()\r\n        if '?' in s:\r\n            if \"A\" not in s:\r\n                print(\"A\")\r\n            elif \"B\" not in s:\r\n                print(\"B\")\r\n            else:\r\n                print(\"C\")\r\n            break\r\n        \r\n        \r\n    ",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240338740",
            "author": "Sacheth_Koushik",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 28100,
            "submissionTime": 1704431100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240338563",
            "author": "Sacheth_Koushik",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33300,
            "submissionTime": 1704430980
        },
        "acceptedCode": "import sys\r\nimport os\r\n\r\nif (os.path.exists('input.txt')):\r\n    sys.stdin = open(\"input.txt\", \"r\")\r\n    sys.stdout = open(\"output.txt\", \"w\")\r\n\r\n\r\ndef strin(): return sys.stdin.readline().strip()\r\ndef arrin(): return list(map(int, sys.stdin.readline().split()))\r\ndef intin(): return int(sys.stdin.readline())\r\n\r\n\r\n#########################START######################\r\ndef solve():\r\n    n = intin()\r\n    a = arrin()\r\n    l = {0}\r\n    s = 0\r\n    m = 1\r\n    for x in a:\r\n        s += x * m\r\n        m = -m\r\n        l.add(s)\r\n    print(\"Yes\" if len(l) <= n else \"NO\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# t = 1\r\nt = intin()\r\nfor i in range(t):\r\n    solve()",
        "rejectedCode": "from collections import defaultdict\r\nimport sys\r\nimport os\r\n\r\nif (os.path.exists('input.txt')):\r\n    sys.stdin = open(\"input.txt\", \"r\")\r\n    sys.stdout = open(\"output.txt\", \"w\")\r\n\r\n\r\ndef strin(): return sys.stdin.readline().strip()\r\ndef arrin(): return list(map(int, sys.stdin.readline().split()))\r\ndef intin(): return int(sys.stdin.readline())\r\n\r\n\r\n#########################START######################\r\ndef solve():\r\n    n = intin()\r\n    a = arrin()\r\n    d = defaultdict(int)\r\n    d[0] = 1\r\n    sum = 0\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n           sum += a[i]\r\n        else:\r\n            sum -= a[i]\r\n        if d[sum] == 1:\r\n            print(\"YES\")\r\n            return\r\n        else:\r\n            d[sum] = 1\r\n    print(\"NO\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# t = 1\r\nt = intin()\r\nfor i in range(t):\r\n    solve()",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240312865",
            "author": "nikur_i",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 8700,
            "submissionTime": 1704417120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240309167",
            "author": "nikur_i",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 38800,
            "submissionTime": 1704415680
        },
        "acceptedCode": "\r\nr = int(input())\r\nfor _ in range(r):\r\n    p=\".\"\r\n    otv=[]\r\n    k = int(input())\r\n    n = input()\r\n    j = 1\r\n    n = \" \" + n + \" \" * 9\r\n    for _ in range(len(n) ):\r\n\r\n        if n[j + 3] == \"b\" or n[j + 3] == \"c\" or n[j + 3] == \"d\":\r\n            otv.append(n[j:j+3])\r\n            j += 3\r\n\r\n        elif n[j + 3] == \"a\" or n[j + 3] == \"e\":\r\n            otv.append(n[j:j+2])\r\n            j += 2\r\n\r\n        else:\r\n            otv.append(n[j:k+1])\r\n            break\r\n    otv=p.join(otv)\r\n    print(otv)",
        "rejectedCode": "\r\nr = int(input())\r\nfor _ in range(r):\r\n    p=\"\"\r\n    k = int(input())\r\n    n = input()\r\n    j = 1\r\n    n = [\" \"] + list(n) + [\" \"] * 9\r\n    for _ in range(len(n) // 3):\r\n        if n[j + 3] == \"b\" or n[j + 3] == \"c\" or n[j + 3] == \"d\":\r\n            n = n[:j + 3] + [\".\"] + n[j+3:]\r\n            j += 4\r\n\r\n        elif n[j + 3] == \"a\" or n[j + 3] == \"e\":\r\n            n = n[:j + 2] + [\".\"] + n[j+2:]\r\n            j += 3\r\n\r\n        else:\r\n            break\r\n    for i in n:\r\n        if i != \" \" :\r\n            p+=i\r\n    print(p)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240326524",
            "author": "Nikita2121",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 10300,
            "submissionTime": 1704423720
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240325831",
            "author": "Nikita2121",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704423240
        },
        "acceptedCode": "C = [\"b\",\"d\",\"e\"]\nV = [\"a\",\"e\"]\nm = int(input())\n\n\nfor _ in range(m):\n  list1 = []\n  i = 0\n  n = int(input())\n  string = input()\n  string = string[::-1]\n  while i <len(string):\n\n      if string[i] in V:\n        list1.append(string[i:i+2][::-1])\n        i = i+2\n      else:\n        list1.append(string[i:i+3][::-1])\n        i = i+3\n\n\n  list1.reverse()\n  print(\".\".join(list1))\n",
        "rejectedCode": "C = [\"b\", \"d\", \"e\"]\nV = [\"a\", \"e\"]\n\nm = int(input())\n\nfor _ in range(m):\n    result_parts = []  # Use a list to store intermediate substrings\n    i = 0\n    n = int(input())\n    string = input()\n    string = string[::-1]\n\n    while i < len(string):\n        if string[i] in V:\n            result_parts.append(string[i:i + 2] + \".\")\n            i += 2\n        else:\n            result_parts.append(string[i:i + 3] + \".\")\n            i += 3\n\n    # Join the list of substrings and reverse the final result\n    result = ''.join(result_parts[::-1])\n\n    print(result[:-1])",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ab.dec.bab\r\nab.ab\r\ndad.ed.ac.deb.dad\r\ncad\r\ncad.cad\r\nad.bab.ab.ab.bab.bab.ab.bab.ab\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ab.dec.bab'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240312054",
            "author": "Lost_at_school",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1704416820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240311868",
            "author": "Lost_at_school",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1704416760
        },
        "acceptedCode": "import math\r\nfor i in range(0,int(input())):\r\n    lst= list(map(int,input().split()))\r\n    if lst.count(lst[0]) == 1: print(lst[0])\r\n    elif lst.count(lst[1]) == 1: print(lst[1])\r\n    else: print(lst[2])\r\n",
        "rejectedCode": "import math\r\nimport numpy as np\r\nfor i in range(0,int(input())):\r\n    lst= list(map(int,input().split()))\r\n    if lst.count(lst[0]) == 1: print(lst[0])\r\n    elif lst.count(lst[1]) == 1: print(lst[1])\r\n    else: print(lst[2])\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240283677",
            "author": "Vaibhav_2808",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704383700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240282957",
            "author": "Vaibhav_2808",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704382860
        },
        "acceptedCode": "for _ in range (int(input())):\r\n    a,b,c=map(int,input().split())\r\n    if a==b:\r\n        print(c)\r\n    elif b==c:\r\n        print(a)\r\n    elif a==c:\r\n        print(b)\r\n        ",
        "rejectedCode": "def odd_out() :\r\n    a=int(input('Enter a'))\r\n    b=int(input('Enter b'))\r\n    c=int(input('Enter c'))\r\n    \r\n    if a==b :\r\n        return c\r\n    if a==c :\r\n        return b\r\n    if b==c :\r\n        return a\r\n\r\nprint(odd_out())\r\n\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "Enter aEnter b",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240283511",
            "author": "ItzDEXX",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 25300,
            "submissionTime": 1704383520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240283456",
            "author": "ItzDEXX",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704383460
        },
        "acceptedCode": "import math\r\n\r\nn=int(input())\r\nfor i in range(n):\r\n    x=int(input())\r\n    t=list(map(int,input().split()))\r\n    j=0\r\n    for l in range(x):\r\n        j+=t[l]\r\n    \r\n    h=(math.sqrt(j))\r\n    if h-int(h)==0:\r\n        print('YES')\r\n    else:\r\n        print('NO')    ",
        "rejectedCode": "import math\r\n\r\nn=int(input())\r\nfor i in range(n):\r\n    x=int(input())\r\n    t=list(map(int,input().split()))\r\n    print(t)\r\n    j=0\r\n    for l in range(x):\r\n        j+=t[l]\r\n    \r\n    h=(math.sqrt(j))\r\n    if h-int(h)==0:\r\n        print('YES')\r\n    else:\r\n        print('NO')    ",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "[9]\r\nYES\r\n[14, 2]\r\nYES\r\n[1, 2, 3, 4, 5, 6, 7]\r\nNO\r\n[1, 3, 5, 7, 9, 11]\r\nYES\r\n[2, 2, 2, 2]\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong output format YES or NO expected, but [9] found [1st token]\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240282545",
            "author": "Mazen_80",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 24400,
            "submissionTime": 1704382440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240281897",
            "author": "Mazen_80",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 3,
            "runTime": 326,
            "memory": 9100,
            "submissionTime": 1704381780
        },
        "acceptedCode": "from math import sqrt\r\nt = int(input())\r\nfor _ in range(t):\r\n    num_of_buckets = int(input())\r\n    the_sum_of_buckets = sum(list(map(int,input().split(\" \"))))\r\n    string_version = str(sqrt(the_sum_of_buckets))\r\n    if (len(string_version[string_version.find(\".\"):]) == 2):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "from math import sqrt\r\nt = int(input())\r\nfor _ in range(t):\r\n    num_of_buckets = int(input())\r\n    the_sum_of_buckets = sum(list(map(int,input().split(\" \"))))\r\n    if (len(str(sqrt(the_sum_of_buckets))) == 3):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239937407",
            "author": "OussemaMensi",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26200,
            "submissionTime": 1704136140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239936435",
            "author": "OussemaMensi",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704133560
        },
        "acceptedCode": "import math\r\n\r\ndef hasDecimalPart(number):\r\n    return number != math.floor(number)\r\n\r\nnbre_case = int(input())\r\n\r\nfor _ in range(nbre_case):\r\n    n = int(input())\r\n    number_list = list(map(int, input().split()))\r\n    somme = sum(number_list)\r\n\r\n    if hasDecimalPart(math.sqrt(somme)):\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")\r\n",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n  a, b, c = map(int, input().split())\r\n  result = (a + b + c) - 2 * min(a, b, c)\r\n  print(result)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "3\r\n5\r\n6\r\n9\r\n18\r\n6\r\n8\r\n9\r\n9\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '3'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240272999",
            "author": "tanishqmandhane2005",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704375060
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239917509",
            "author": "tanishqmandhane2005",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704113880
        },
        "acceptedCode": "t=int(input())\r\ndef check(s):\r\n    if \"A\" not in s:\r\n        print(\"A\")\r\n    elif \"B\" not in s:\r\n        print(\"B\")\r\n    else:\r\n        print(\"C\")\r\nfor _ in range(t):\r\n    a = input()\r\n    b=input()\r\n    c=input()\r\n    if \"?\" in a:\r\n        check(a)\r\n    elif \"?\" in b:\r\n        check(b)\r\n    else:\r\n        check(c)\r\n        ",
        "rejectedCode": "#include <iostream>\n#include <string>\nusing namespace std;\nint main() {\n    int t;\n    cin >> t;\n\n    for (int testCase = 0; testCase < t; ++testCase) {\n        int n;\n        cin >> n;\n\n        string code;\n         cin>>code;\n\n        int i = 0;\n       string a = \"\";\n\n        while (n - 1 - i > 2) {\n            if (code[i + 3] == 'b' || code[i + 3] == 'c' || code[i + 3] == 'd') {\n                a += code.substr(i, 3) + \".\";\n                i += 3;\n            } else {\n                a += code.substr(i, 2) + \".\";\n                i += 2;\n            }\n        }\n\n        a += code.substr(i);\n        cout << a <<endl;\n    }\n\n    return 0;\n}\n\n\t\t\n                                            \n",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240228755",
            "author": "logong",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 26600,
            "submissionTime": 1704353880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240225338",
            "author": "logong",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 200,
            "submissionTime": 1704352140
        },
        "acceptedCode": "import functools\r\nimport math\r\nimport sys\r\n\r\n\r\ndef get_input():\r\n    input = sys.stdin.readline()\r\n\r\n    lines = [line.strip()\r\n             for line in input]\r\n    print(lines)\r\n    return lines\r\n\r\n\r\n############ ---- Input Functions ---- ############\r\ndef inp():\r\n    return int(input())\r\n\r\n\r\ndef inlt():\r\n    return list(map(int, input().split()))\r\n\r\n\r\ndef insr():\r\n    s = input()\r\n    return list(s[:len(s) - 1])\r\n\r\n\r\ndef invr():\r\n    return map(int, input().split())\r\n\r\n\r\nif __name__ == '__main__':\r\n    n = inp()\r\n    for i in range(n):\r\n        p = inp()\r\n        line = inlt()\r\n        if math.sqrt(sum(line)).is_integer():\r\n            print(\"YES\")\r\n        else:\r\n            print(\"NO\")\r\n",
        "rejectedCode": "import functools\r\n\r\n\r\ndef get_input():\r\n    with open('a.input', 'r') as f:\r\n        lines = [line.strip()\r\n                 for line in f.readlines()[1:]]\r\n    return lines\r\n\r\n\r\nif __name__ == '__main__':\r\n    for line in get_input():\r\n        line = [int(x) for x in line.split()]\r\n        result = functools.reduce(lambda x, y: x ^ y, line)\r\n\r\n        print(result)\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240249378",
            "author": "PoolWerx",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704363660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240249176",
            "author": "PoolWerx",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704363540
        },
        "acceptedCode": "for i in range(int(input())):\r\n    ans = ''\r\n    for x in range(3):\r\n        a = list(input())\r\n        if '?' in a:\r\n            if 'A' in a and 'B' in a:\r\n                ans = 'C'\r\n            elif 'A' in a and 'C' in a:\r\n                ans = 'B'\r\n            else:\r\n                ans = 'A'\r\n    print(ans)\r\n",
        "rejectedCode": "for i in range(int(input())):\r\n    while True:\r\n        a = list(input())\r\n        if '?' in a:\r\n            if 'A' in a and 'B' in a:\r\n                print('C')\r\n            if 'A' in a and 'C' in a:\r\n                print('B')\r\n            else:\r\n                print('A')\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nB\r\nC\r\nA\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240249190",
            "author": "pukpukpon",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 28200,
            "submissionTime": 1704363540
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240249079",
            "author": "pukpukpon",
            "lang": "PyPy 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704363480
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    f = False\r\n    s=set({0})\r\n    su=0\r\n    for i in range(n):\r\n        if i%2 == 0:\r\n            su += a[i]\r\n        else:\r\n            su -= a[i]\r\n        if su in s:\r\n            f = True\r\n        else:\r\n            s.add(su)\r\n    if f == True:\r\n        print('Yes')\r\n    else:\r\n        print('No')",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    f = False\r\n    s=set({0})\r\n    su=0\r\n    for i in range(n):\r\n        if i%2 == 0:\r\n            su += a[i]\r\n        else:\r\n            su -= a[i]\r\n        if su in s:\r\n            f = True\r\n        else:\r\n            s.add(su)\r\n    if f == True:\r\n        print('Yes')\r\n    else:\r\n        print('No')",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240234296",
            "author": "muminurfahim",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 78,
            "memory": 6500,
            "submissionTime": 1704356580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240220471",
            "author": "muminurfahim",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704349380
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    a = []\r\n    i = 0\r\n    while i < n - 3:\r\n        if s[i + 3] in 'bcd':\r\n            a.append(s[i:i + 3])\r\n            i += 3\r\n        else:\r\n            a.append(s[i:i + 2])\r\n            i += 2\r\n    a.append(s[i:])\r\n    print('.'.join(a))\r\n",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    a = input().split()\r\n    a = (int(v) for v in a)\r\n    print(a[0] ^ a[1] ^ a[2])\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "240231813",
            "author": "Mathdude123",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1294,
            "memory": 89300,
            "submissionTime": 1704355440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "240216096",
            "author": "Mathdude123",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704346800
        },
        "acceptedCode": "import heapq\r\n\r\nclass Node:\r\n    def __init__(self, id, slowness, dist):\r\n        self.id = id\r\n        self.dist = dist\r\n        self.slowness = slowness\r\n    def __lt__(self, other):\r\n        return self.dist < other.dist\r\n\r\nt = int(input())\r\nfor __ in range(t):\r\n    n, m = [int(_) for _ in input().split(' ')]\r\n\r\n    graph = {}\r\n\r\n    for _ in range(m):\r\n        u, v, w = [int(_) for _ in input().split(' ')]\r\n        if u not in graph:\r\n            graph[u] = [(v, w)]\r\n        else:\r\n            graph[u].append((v, w))\r\n\r\n        if v not in graph:\r\n            graph[v] = [(u, w)]\r\n        else:\r\n            graph[v].append((u, w))\r\n\r\n    slowness = [int(_) for _ in input().split(' ')]\r\n\r\n    queue = [Node(1, slowness[0], 0)]\r\n    visited = set()\r\n    distsOf = {}\r\n\r\n    while len(queue) != 0:\r\n        node = heapq.heappop(queue)\r\n        \r\n        if (node.id, node.slowness) in visited:\r\n            continue\r\n        \r\n        if node.id not in distsOf:\r\n            distsOf[node.id] = {}\r\n\r\n        distsOf[node.id][node.slowness] = node.dist\r\n        visited.add((node.id, node.slowness))\r\n\r\n        for neighbor in graph[node.id]:\r\n            nextSlowness = min(node.slowness, slowness[neighbor[0] - 1])\r\n            \r\n            if (neighbor[0], nextSlowness) in visited or \\\r\n                distsOf.get(neighbor[0], {}).get(nextSlowness, float('inf')) \\\r\n                    <= node.dist + node.slowness * neighbor[1]:\r\n                continue\r\n\r\n            heapq.heappush(queue, Node(neighbor[0], nextSlowness, node.dist + node.slowness * neighbor[1]))\r\n    \r\n    answer = float('inf')\r\n    for _, value in distsOf[n].items():\r\n        answer = min(answer, value)\r\n\r\n    #print(\"->\", end=\"\")\r\n    print(answer)",
        "rejectedCode": "import heapq\r\n\r\nclass Pair:\r\n    def __init__(self, id, dist):\r\n        self.id = id\r\n        self.dist = dist\r\n    def __lt__(self, other):\r\n        return self.dist < other.dist\r\n    def toString(self):\r\n        return f\"id: {self.id}, dist: {self.dist}\"\r\n\r\nt = int(input())\r\nfor __ in range(t):\r\n    n, m = [int(_) for _ in input().split(' ')]\r\n\r\n    graph = {}\r\n\r\n    for _ in range(m):\r\n        u, v, w = [int(_) for _ in input().split(' ')]\r\n        if u not in graph:\r\n            graph[u] = [Pair(v, w)]\r\n        else:\r\n            graph[u].append(Pair(v, w))\r\n\r\n        if v not in graph:\r\n            graph[v] = [Pair(u, w)]\r\n        else:\r\n            graph[v].append(Pair(u, w))\r\n\r\n    slowness = [int(_) for _ in input().split(' ')]\r\n\r\n    queue = [Pair(1, 0)]\r\n    dists = [0] * (n + 1)\r\n    visited = set()\r\n\r\n    while len(queue) != 0:\r\n        p = heapq.heappop(queue)\r\n\r\n        if p.id in visited:\r\n            continue\r\n\r\n        dists[p.id] = p.dist\r\n        visited.add(p.id)\r\n\r\n        for neighbor in graph[p.id]:\r\n            if neighbor.id in visited:\r\n                continue\r\n            \r\n            dist = slowness[p.id - 1] * neighbor.dist\r\n            heapq.heappush(queue, Pair(neighbor.id, p.dist + dist))\r\n\r\n    #print(\"->\", end=\"\")\r\n    print(dists[n])",
        "failedTestCase": {
            "input": "3\r\n5 5\r\n1 2 2\r\n3 2 1\r\n2 4 5\r\n2 5 7\r\n4 5 1\r\n5 2 1 3 3\r\n5 10\r\n1 2 5\r\n1 3 5\r\n1 4 4\r\n1 5 8\r\n2 3 6\r\n2 4 3\r\n2 5 2\r\n3 4 1\r\n3 5 8\r\n4 5 2\r\n7 2 8 4 1\r\n7 10\r\n3 2 8\r\n2 1 4\r\n2 5 7\r\n2 6 4\r\n7 1 2\r\n4 3 5\r\n6 4 2\r\n6 7 1\r\n6 7 4\r\n4 5 9\r\n7 6 5 4 3 2 1\r\n",
            "output": "23\r\n36\r\n14\r\n",
            "expectedOutput": "19\r\n36\r\n14\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '19', found: '23'\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240228644",
            "author": "tnowakow",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 39400,
            "submissionTime": 1704353820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240228509",
            "author": "tnowakow",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 32400,
            "submissionTime": 1704353760
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    for x in range(n):\r\n        if x%2:\r\n            a[x] = -a[x]\r\n    s_d = {'0': True}\r\n    s = 0\r\n    out = False\r\n    for x in a:\r\n        s += x\r\n        ss = str(s)\r\n        if ss in s_d:\r\n            out = True\r\n            break\r\n        s_d[ss] = True\r\n    if out:\r\n        print('YES')\r\n        continue\r\n    print('NO')\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    for x in range(n):\r\n        if x%2:\r\n            a[x] = -a[x]\r\n    s_d = {0: True}\r\n    s = 0\r\n    out = False\r\n    for x in a:\r\n        s += x\r\n        if s in s_d:\r\n            out = True\r\n            break\r\n        s_d[s] = True\r\n    if out:\r\n        print('YES')\r\n        continue\r\n    print('NO')\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240224863",
            "author": "z3r0c1ph3r",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 28100,
            "submissionTime": 1704351900
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240224703",
            "author": "z3r0c1ph3r",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 2,
            "runTime": 62,
            "memory": 2800,
            "submissionTime": 1704351780
        },
        "acceptedCode": "class Found(Exception): pass\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input(\"\").split()]\n    # if n==1:\n    #     print(\"NO\")\n    #     continue\n    a.append(12987189)\n    s = 0\n    b={0,}\n    try:\n        for i in range(0,n,2):\n            s+=a[i]\n            # print(s, i, b)\n            if s in b:\n                print(\"YES\")\n                raise Found\n            b.add(s)\n\n            s-=a[i+1]\n            # print(s, i, b)\n            if s in b:\n                print(\"YES\")\n                raise Found\n            b.add(s)\n        print(\"NO\")\n    except Found:\n        continue",
        "rejectedCode": "class Found(Exception): pass\n\nfor _ in range(int(input())):\n    n = int(input())\n    if n==1:\n        print(\"NO\")\n        continue\n    a = [int(i) for i in input(\"\").split()]\n    s = 0\n    b={0,}\n    try:\n        for i in range(0,n,2):\n            s+=a[i]\n            # print(s, i, b)\n            if s in b:\n                print(\"YES\")\n                raise Found\n            b.add(s)\n\n            s-=a[i+1]\n            # print(s, i, b)\n            if s in b:\n                print(\"YES\")\n                raise Found\n            b.add(s)\n        print(\"NO\")\n    except Found:\n        continue",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240224957",
            "author": "Anav_Agrawal",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 28400,
            "submissionTime": 1704351960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240223991",
            "author": "Anav_Agrawal",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 32400,
            "submissionTime": 1704351420
        },
        "acceptedCode": "# for _ in range(int(input())):\r\n#     n = int(input())\r\n#     cups = list(map(int,input().split()))\r\n#     # Bruteforce\r\n#     found = False\r\n#     for l in range(n) :\r\n#         sum_even = 0\r\n#         sum_odd = 0\r\n#         for r in range(l,n) :\r\n#             if (r%2 == 0) :\r\n#                 sum_odd += cups[r]\r\n#             else :\r\n#                 sum_even += cups[r]\r\n#             if sum_even==sum_odd :\r\n#                 found = True\r\n#                 break\r\n#         if found :\r\n#             break\r\n\r\n#     if found:\r\n#         print(\"YES\")\r\n#     else :\r\n#         print(\"NO\")\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    found = False\r\n    cups = list(map(int,input().split()))\r\n\r\n    prefix_sum = {0}\r\n    running_sum = 0\r\n\r\n    cups.append(9999999)\r\n\r\n    for i in range(0,n,2):\r\n        cups[i] *= -1\r\n        running_sum += cups[i]\r\n        if running_sum in prefix_sum :\r\n            found = True\r\n            print(\"YES\")\r\n            break\r\n        prefix_sum.add(running_sum)\r\n\r\n        running_sum += cups[i+1]\r\n        if running_sum in prefix_sum :\r\n            print(\"YES\")\r\n            found = True\r\n            break\r\n        prefix_sum.add(running_sum)\r\n    if not found :\r\n        print(\"NO\")",
        "rejectedCode": "# for _ in range(int(input())):\r\n#     n = int(input())\r\n#     cups = list(map(int,input().split()))\r\n#     # Bruteforce\r\n#     found = False\r\n#     for l in range(n) :\r\n#         sum_even = 0\r\n#         sum_odd = 0\r\n#         for r in range(l,n) :\r\n#             if (r%2 == 0) :\r\n#                 sum_odd += cups[r]\r\n#             else :\r\n#                 sum_even += cups[r]\r\n#             if sum_even==sum_odd :\r\n#                 found = True\r\n#                 break\r\n#         if found :\r\n#             break\r\n\r\n#     if found:\r\n#         print(\"YES\")\r\n#     else :\r\n#         print(\"NO\")\r\n\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    found = False\r\n    cups = list(map(int,input().split()))\r\n\r\n    prefix_sum = {0}\r\n    running_sum = 0\r\n\r\n    cups.append(9999999)\r\n\r\n    for i in range(0,n,2):\r\n        cups[i] *= -1\r\n        running_sum += cups[i]\r\n        if running_sum in prefix_sum :\r\n            found = True\r\n            print(\"YES\")\r\n            break\r\n        prefix_sum.add(running_sum)\r\n\r\n        running_sum += cups[i+1]\r\n        if running_sum in prefix_sum :\r\n            print(\"YES\")\r\n            found = True\r\n            break\r\n        prefix_sum.add(running_sum)\r\n    if not found :\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240222338",
            "author": "atambek07",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 249,
            "memory": 26000,
            "submissionTime": 1704350400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240220654",
            "author": "atambek07",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 109,
            "memory": 0,
            "submissionTime": 1704349500
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = sum(a)\r\n    l, r = 1, s\r\n    while l < r:\r\n        mid = (l+r)//2\r\n        if mid * mid >= s:\r\n            r = mid\r\n        else:\r\n            l = mid+1\r\n    if l*l == s:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "from math import sqrt\r\nn = int(input())\r\nfor _ in range(n):\r\n    a = int(input())\r\n    b = list(map(int, input().split()))\r\n    c = sum(b)\r\n    d = sqrt(c)\r\n    if d * d == c:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240221648",
            "author": "Spring1111",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1704350040
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240220796",
            "author": "Spring1111",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 62,
            "memory": 2700,
            "submissionTime": 1704349560
        },
        "acceptedCode": "for i in range(int(input())):\r\n    for j in range(3):\r\n        s = input()\r\n        if('?' in s):\r\n            print('A' if 'A' not in s else 'B' if 'B' not in s else 'C')",
        "rejectedCode": "for _ in range(int(input())):\r\n    a, b, c = map(int, input().split)\r\n    print(a ^ b ^ c)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240214665",
            "author": "tlsgusrb314",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 561,
            "memory": 33400,
            "submissionTime": 1704345960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240213103",
            "author": "tlsgusrb314",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704345000
        },
        "acceptedCode": "import sys\r\nfrom collections import deque,defaultdict\r\nfrom math import gcd,sqrt\r\nfrom heapq import heappush,heappop,heapify\r\n\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nMIS = lambda: map(int, input().split())\r\nLMIS = lambda: list(MIS())\r\nmod2=998244353\r\nss=\"UDLR\"\r\ndx,dy=(0,0,-1,1),(1,-1,0,0)\r\ntrie = [0,dict()]\r\n# \ubb38\uc790\uc5f4\uc744 Trie\uc5d0 \uc0bd\uc785\ud558\ub294 \ud568\uc218\r\n_input = lambda: sys.stdin.buffer.readline().strip().decode()\r\n#print('?', l, m, flush=True)\r\n#print('!', l, flush=True)\r\nfrom bisect import bisect_left as lower_bound\r\nfrom bisect import bisect_right as upper_bound\r\n\r\n\r\n\r\nclass FenwickTree:\r\n    def __init__(self, x):\r\n        \"\"\"transform list into BIT\"\"\"\r\n        self.bit = x\r\n        for i in range(len(x)):\r\n            j = i | (i + 1)\r\n            if j < len(x):\r\n                x[j] += x[i]\r\n\r\n    def update(self, idx, x):\r\n        \"\"\"updates bit[idx] += x\"\"\"\r\n        while idx < len(self.bit):\r\n            self.bit[idx] += x\r\n            idx |= idx + 1\r\n\r\n    def query(self, end):\r\n        \"\"\"calc sum(bit[:end])\"\"\"\r\n        x = 0\r\n        while end:\r\n            x += self.bit[end - 1]\r\n            end &= end - 1\r\n        return x\r\n\r\n    def findkth(self, k):\r\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\r\n        idx = -1\r\n        for d in reversed(range(len(self.bit).bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < len(self.bit) and k >= self.bit[right_idx]:\r\n                idx = right_idx\r\n                k -= self.bit[idx]\r\n        return idx + 1\r\n\r\n\r\n    def _find_kth(self, k):\r\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\r\n\r\n    def __len__(self):\r\n        return self.size\r\n\r\n    def __iter__(self):\r\n        return (x for micro in self.micros for x in micro)\r\n\r\n    def __repr__(self):\r\n        return str(list(self))\r\n\r\n\r\n\r\nclass SortedList:\r\n    block_size = 700\r\n\r\n    def __init__(self, iterable=()):\r\n        self.macro = []\r\n        self.micros = [[]]\r\n        self.micro_size = [0]\r\n        self.fenwick = FenwickTree([0])\r\n        self.size = 0\r\n        for item in iterable:\r\n            self.insert(item)\r\n\r\n    def insert(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        j = upper_bound(self.micros[i], x)\r\n        self.micros[i].insert(j, x)\r\n        self.size += 1\r\n        self.micro_size[i] += 1\r\n        self.fenwick.update(i, 1)\r\n        if len(self.micros[i]) >= self.block_size:\r\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\r\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\r\n            self.fenwick = FenwickTree(self.micro_size)\r\n            self.macro.insert(i, self.micros[i + 1][0])\r\n\r\n    def pop(self, k=-1):\r\n        i, j = self._find_kth(k)\r\n        self.size -= 1\r\n        self.micro_size[i] -= 1\r\n        self.fenwick.update(i, -1)\r\n        return self.micros[i].pop(j)\r\n\r\n    def __getitem__(self, k):\r\n        i, j = self._find_kth(k)\r\n        return self.micros[i][j]\r\n\r\n    def count(self, x):\r\n        return self.upper_bound(x) - self.lower_bound(x)\r\n\r\n    def __contains__(self, x):\r\n        return self.count(x) > 0\r\n\r\n    def lower_bound(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\r\n\r\n    def upper_bound(self, x):\r\n        i = upper_bound(self.macro, x)\r\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\r\nclass SegmentTree:\r\n    def __init__(self, data, default=0, func=max):\r\n        \"\"\"initialize the segment tree with data\"\"\"\r\n        self._default = default\r\n        self._func = func\r\n        self._len = len(data)\r\n        self._size = _size = 1 << (self._len - 1).bit_length()\r\n\r\n        self.data = [default] * (2 * _size)\r\n        self.data[_size:_size + self._len] = data\r\n        for i in reversed(range(_size)):\r\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\r\n\r\n    def __delitem__(self, idx):\r\n        self[idx] = self._default\r\n\r\n    def __getitem__(self, idx):\r\n        return self.data[idx + self._size]\r\n\r\n    def __setitem__(self, idx, value):\r\n        idx += self._size\r\n        self.data[idx] = value\r\n        idx >>= 1\r\n        while idx:\r\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\r\n            idx >>= 1\r\n\r\n    def __len__(self):\r\n        return self._len\r\n\r\n    def query(self, start, stop):\r\n        \"\"\"func of data[start, stop)\"\"\"\r\n        start += self._size\r\n        stop += self._size\r\n\r\n        res_left = res_right = self._default\r\n        while start < stop:\r\n            if start & 1:\r\n                res_left = self._func(res_left, self.data[start])\r\n                start += 1\r\n            if stop & 1:\r\n                stop -= 1\r\n                res_right = self._func(self.data[stop], res_right)\r\n            start >>= 1\r\n            stop >>= 1\r\n\r\n        return self._func(res_left, res_right)\r\n\r\n    def __repr__(self):\r\n        return \"SegmentTree({0})\".format(self.data)\r\nimport random\r\n\r\n\r\nclass TreapMultiSet(object):\r\n    root = 0\r\n    size = 0\r\n\r\n    def __init__(self, data=None):\r\n        if data:\r\n            data = sorted(data)\r\n            self.root = treap_builder(data)\r\n            self.size = len(data)\r\n\r\n    def add(self, key):\r\n        self.root = treap_insert(self.root, key)\r\n        self.size += 1\r\n\r\n    def remove(self, key):\r\n        self.root = treap_erase(self.root, key)\r\n        self.size -= 1\r\n\r\n    def discard(self, key):\r\n        try:\r\n            self.remove(key)\r\n        except KeyError:\r\n            pass\r\n\r\n    def ceiling(self, key):\r\n        x = treap_ceiling(self.root, key)\r\n        return treap_keys[x] if x else None\r\n\r\n    def higher(self, key):\r\n        x = treap_higher(self.root, key)\r\n        return treap_keys[x] if x else None\r\n\r\n\r\n\r\n    def floor(self, key):\r\n        x = treap_floor(self.root, key)\r\n        return treap_keys[x] if x else None\r\n\r\n    def lower(self, key):\r\n        x = treap_lower(self.root, key)\r\n        return treap_keys[x] if x else None\r\n\r\n    def max(self):\r\n        return treap_keys[treap_max(self.root)]\r\n\r\n    def min(self):\r\n        return treap_keys[treap_min(self.root)]\r\n\r\n    def __len__(self):\r\n        return self.size\r\n\r\n    def __nonzero__(self):\r\n        return bool(self.root)\r\n\r\n    __bool__ = __nonzero__\r\n\r\n    def __contains__(self, key):\r\n        return self.floor(key) == key\r\n\r\n    def __repr__(self):\r\n        return \"TreapMultiSet({})\".format(list(self))\r\n\r\n    def __iter__(self):\r\n        if not self.root:\r\n            return iter([])\r\n        out = []\r\n        stack = [self.root]\r\n        while stack:\r\n            node = stack.pop()\r\n            if node > 0:\r\n                if right_child[node]:\r\n                    stack.append(right_child[node])\r\n                stack.append(~node)\r\n                if left_child[node]:\r\n                    stack.append(left_child[node])\r\n            else:\r\n                out.append(treap_keys[~node])\r\n        return iter(out)\r\n\r\n\r\nclass TreapSet(TreapMultiSet):\r\n    def add(self, key):\r\n        self.root, duplicate = treap_insert_unique(self.root, key)\r\n        if not duplicate:\r\n            self.size += 1\r\n\r\n    def __repr__(self):\r\n        return \"TreapSet({})\".format(list(self))\r\n\r\n\r\nclass TreapHashSet(TreapMultiSet):\r\n    def __init__(self, data=None):\r\n        if data:\r\n            self.keys = set(data)\r\n            super(TreapHashSet, self).__init__(self.keys)\r\n        else:\r\n            self.keys = set()\r\n\r\n    def add(self, key):\r\n        if key not in self.keys:\r\n            self.keys.add(key)\r\n            super(TreapHashSet, self).add(key)\r\n\r\n    def remove(self, key):\r\n        self.keys.remove(key)\r\n        super(TreapHashSet, self).remove(key)\r\n\r\n    def discard(self, key):\r\n        if key in self.keys:\r\n            self.remove(key)\r\n\r\n    def __contains__(self, key):\r\n        return key in self.keys\r\n\r\n    def __repr__(self):\r\n        return \"TreapHashSet({})\".format(list(self))\r\nclass TreapHashMap(TreapMultiSet):\r\n    def __init__(self, data=None):\r\n        if data:\r\n            self.map = dict(data)\r\n            super(TreapHashMap, self).__init__(self.map.keys())\r\n        else:\r\n            self.map = {}\r\n\r\n    def __setitem__(self, key, value):\r\n        if key not in self.map:\r\n            super(TreapHashMap, self).add(key)\r\n        self.map[key] = value\r\n\r\n    def __getitem__(self, key):\r\n        return self.map[key]\r\n\r\n    def add(self, key):\r\n        raise TypeError(\"add on TreapHashMap\")\r\n\r\n    def get(self, key, default=None):\r\n        return self.map.get(key, default=default)\r\n\r\n    def remove(self, key):\r\n        self.map.pop(key)\r\n        super(TreapHashMap, self).remove(key)\r\n\r\n    def discard(self, key):\r\n        if key in self.map:\r\n            self.remove(key)\r\n\r\n    def __contains__(self, key):\r\n        return key in self.map\r\n\r\n    def __repr__(self):\r\n        return \"TreapHashMap({})\".format(list(self))\r\n\r\n\r\nleft_child = [0]\r\nright_child = [0]\r\ntreap_keys = [0]\r\ntreap_prior = [0.0]\r\n\r\n\r\ndef treap_builder(sorted_data):\r\n    \"\"\"Build a treap in O(n) time using sorted data\"\"\"\r\n    def build(begin, end):\r\n        if begin == end:\r\n            return 0\r\n        mid = (begin + end) // 2\r\n        root = treap_create_node(sorted_data[mid])\r\n        left_child[root] = build(begin, mid)\r\n        right_child[root] = build(mid + 1, end)\r\n\r\n        # sift down the priorities\r\n        ind = root\r\n        while True:\r\n            lc = left_child[ind]\r\n            rc = right_child[ind]\r\n\r\n            if lc and treap_prior[lc] > treap_prior[ind]:\r\n                if rc and treap_prior[rc] > treap_prior[lc]:\r\n                    treap_prior[ind], treap_prior[rc] = treap_prior[rc], treap_prior[ind]\r\n                    ind = rc\r\n                else:\r\n                    treap_prior[ind], treap_prior[lc] = treap_prior[lc], treap_prior[ind]\r\n                    ind = lc\r\n            elif rc and treap_prior[rc] > treap_prior[ind]:\r\n                treap_prior[ind], treap_prior[rc] = treap_prior[rc], treap_prior[ind]\r\n                ind = rc\r\n            else:\r\n                break\r\n        return root\r\n\r\n    return build(0, len(sorted_data))\r\n\r\n\r\ndef treap_create_node(key):\r\n    treap_keys.append(key)\r\n    treap_prior.append(random.random())\r\n    left_child.append(0)\r\n    right_child.append(0)\r\n    return len(treap_keys) - 1\r\n\r\n\r\ndef treap_split(root, key):\r\n    left_pos = right_pos = 0\r\n    while root:\r\n        if key < treap_keys[root]:\r\n            left_child[right_pos] = right_pos = root\r\n            root = left_child[root]\r\n        else:\r\n            right_child[left_pos] = left_pos = root\r\n            root = right_child[root]\r\n    left, right = right_child[0], left_child[0]\r\n    right_child[left_pos] = left_child[right_pos] = right_child[0] = left_child[0] = 0\r\n    return left, right\r\n\r\n\r\ndef treap_merge(left, right):\r\n    where, pos = left_child, 0\r\n    while left and right:\r\n        if treap_prior[left] > treap_prior[right]:\r\n            where[pos] = pos = left\r\n            where = right_child\r\n            left = right_child[left]\r\n        else:\r\n            where[pos] = pos = right\r\n            where = left_child\r\n            right = left_child[right]\r\n    where[pos] = left or right\r\n    node = left_child[0]\r\n    left_child[0] = 0\r\n    return node\r\n\r\n\r\ndef treap_insert(root, key):\r\n    if not root:\r\n        return treap_create_node(key)\r\n    left, right = treap_split(root, key)\r\n    return treap_merge(treap_merge(left, treap_create_node(key)), right)\r\n\r\n\r\ndef treap_insert_unique(root, key):\r\n    if not root:\r\n        return treap_create_node(key), False\r\n    left, right = treap_split(root, key)\r\n    if left and treap_keys[left] == key:\r\n        return treap_merge(left, right), True\r\n    return treap_merge(treap_merge(left, treap_create_node(key)), right), False\r\n\r\n\r\ndef treap_erase(root, key):\r\n    if not root:\r\n        raise KeyError(key)\r\n    if treap_keys[root] == key:\r\n        return treap_merge(left_child[root], right_child[root])\r\n    node = root\r\n    while root and treap_keys[root] != key:\r\n        parent = root\r\n        root = left_child[root] if key < treap_keys[root] else right_child[root]\r\n    if not root:\r\n        raise KeyError(key)\r\n    if root == left_child[parent]:\r\n        left_child[parent] = treap_merge(left_child[root], right_child[root])\r\n    else:\r\n        right_child[parent] = treap_merge(left_child[root], right_child[root])\r\n\r\n    return node\r\n\r\n\r\ndef treap_ceiling(root, key):\r\n    while root and treap_keys[root] < key:\r\n        root = right_child[root]\r\n    if not root:\r\n        return 0\r\n    min_node = root\r\n    min_key = treap_keys[root]\r\n    while root:\r\n        if treap_keys[root] < key:\r\n            root = right_child[root]\r\n        else:\r\n            if treap_keys[root] < min_key:\r\n                min_key = treap_keys[root]\r\n                min_node = root\r\n            root = left_child[root]\r\n    return min_node\r\n\r\n\r\ndef treap_higher(root, key):\r\n    while root and treap_keys[root] <= key:\r\n        root = right_child[root]\r\n    if not root:\r\n        return 0\r\n    min_node = root\r\n    min_key = treap_keys[root]\r\n    while root:\r\n        if treap_keys[root] <= key:\r\n            root = right_child[root]\r\n        else:\r\n            if treap_keys[root] < min_key:\r\n                min_key = treap_keys[root]\r\n                min_node = root\r\n            root = left_child[root]\r\n    return min_node\r\n\r\n\r\ndef treap_floor(root, key):\r\n    while root and treap_keys[root] > key:\r\n        root = left_child[root]\r\n    if not root:\r\n        return 0\r\n    max_node = root\r\n    max_key = treap_keys[root]\r\n    while root:\r\n        if treap_keys[root] > key:\r\n            root = left_child[root]\r\n        else:\r\n            if treap_keys[root] > max_key:\r\n                max_key = treap_keys[root]\r\n                max_node = root\r\n            root = right_child[root]\r\n    return max_node\r\n\r\n\r\ndef treap_lower(root, key):\r\n    while root and treap_keys[root] >= key:\r\n        root = left_child[root]\r\n    if not root:\r\n        return 0\r\n    max_node = root\r\n    max_key = treap_keys[root]\r\n    while root:\r\n        if treap_keys[root] >= key:\r\n            root = left_child[root]\r\n        else:\r\n            if treap_keys[root] > max_key:\r\n                max_key = treap_keys[root]\r\n                max_node = root\r\n            root = right_child[root]\r\n    return max_node\r\n\r\n\r\ndef treap_min(root):\r\n    if not root:\r\n        raise ValueError(\"min on empty treap\")\r\n    while left_child[root]:\r\n        root = left_child[root]\r\n    return root\r\n\r\n\r\ndef treap_max(root):\r\n    if not root:\r\n        raise ValueError(\"max on empty treap\")\r\n    while right_child[root]:\r\n        root = right_child[root]\r\n    return root\r\nT=int(_input())\r\nfor _ in range(T):\r\n    n=int(input())\r\n    nums=LMIS()\r\n    s=TreapSet()\r\n    s.add(0)\r\n    sm=0\r\n    for i in range(n):\r\n        if i%2:\r\n            nums[i]*=-1\r\n        sm+=nums[i]\r\n        if sm in s:\r\n            print('YES')\r\n            break\r\n        else:\r\n            s.add(sm)\r\n    else:\r\n        print('NO')\r\n        \r\n    \r\n    \r\n                \r\n            \r\n            \r\n        \r\n        \r\n    \r\n            ",
        "rejectedCode": "#include <iostream>\r\n#include <unordered_set>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nint main() {\r\n    int T;\r\n    cin >> T;\r\n\r\n    for (int t = 0; t < T; ++t) {\r\n        int n;\r\n        cin >> n;\r\n        vector<int> nums(n);\r\n        unordered_set<int> s;\r\n        s.insert(0);\r\n        int sm = 0;\r\n\r\n        for (int i = 0; i < n; ++i) {\r\n            cin >> nums[i];\r\n            if (i % 2 == 1) {\r\n                nums[i] *= -1;\r\n            }\r\n            sm += nums[i];\r\n            if (s.find(sm) != s.end()) {\r\n                cout << \"YES\" << endl;\r\n                break;\r\n            } else {\r\n                s.insert(sm);\r\n            }\r\n        }\r\n\r\n        if (s.find(sm) == s.end()) {\r\n            cout << \"NO\" << endl;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240078932",
            "author": "ayushrl2005",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 25300,
            "submissionTime": 1704251520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240078388",
            "author": "ayushrl2005",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 100,
            "submissionTime": 1704251160
        },
        "acceptedCode": "import math\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = [int(x) for x in input().split()]\r\n    total = sum(a)\r\n    output = \"NO\"\r\n    side = math.sqrt(total)\r\n    if int(side) == side:\r\n        output = \"YES\"\r\n    print(output)",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = [int(x) for x in input().split()]\r\n    total = sum(a)\r\n    output = \"NO\"\r\n    for j in range(total+1):\r\n        if j*j == total:\r\n            output = \"YES\"\r\n    print(output)",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240181554",
            "author": "Sai_5456",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704328200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240180576",
            "author": "Sai_5456",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704327720
        },
        "acceptedCode": "n=int(input())\r\nwhile(n>0):\r\n    a=list(map(int,input().split()))\r\n    if a[0]==a[1]:\r\n        print(a[2])\r\n    elif a[0]==a[2]:\r\n        print(a[1])\r\n    else:\r\n        print(a[0])\r\n    n=n-1\r\n        ",
        "rejectedCode": "t=int(input())\r\na,b,c=map(int,input(),split())\r\nif a==b:\r\n    print(c)\r\nelif a==c:\r\n    print(b)\r\nelse:\r\n    print(a)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240188633",
            "author": "abhipandey9315",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 264,
            "memory": 28400,
            "submissionTime": 1704331320
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240188359",
            "author": "abhipandey9315",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 28200,
            "submissionTime": 1704331200
        },
        "acceptedCode": "\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    for i in range(n):\r\n        if i%2==1:\r\n            a[i]=-a[i]\r\n    prefixsum = set()\r\n    c=0\r\n    sum = 0\r\n    for i in range(len(a)):\r\n        sum += a[i]\r\n        if sum in prefixsum or sum==0:\r\n            c+=1\r\n            break\r\n        prefixsum.add(sum)\r\n\r\n\r\n    if c==0:\r\n        print(\"No\")\r\n    else:\r\n        print(\"Yes\")\r\n",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    s=0\r\n    st={0}\r\n    for i,v in enumerate(a):\r\n        s+=(-1)**i*v\r\n        if s in st:\r\n            print('YES')\r\n            break\r\n        st.add(s)\r\n    else:\r\n        print('NO')\r\n\r\n        ",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240188179",
            "author": "Dan4ik2",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 265,
            "memory": 25400,
            "submissionTime": 1704331080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240187762",
            "author": "Dan4ik2",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 0,
            "submissionTime": 1704330960
        },
        "acceptedCode": "for __ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    se = [0]\r\n    f = False\r\n    s = 0\r\n    for i in range(n):\r\n        if i%2 == 0:\r\n            s+= a[i]\r\n        else:\r\n            s -= a[i]\r\n        se.append(s)\r\n    se.sort()\r\n    for i in range(n):\r\n        if se[i] == se[i+1]:\r\n            f = True\r\n    if f == True:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "for __ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    se = [0]\r\n    f = False\r\n    s = 0\r\n    for i in range(n):\r\n        if i%2 == 0:\r\n            s+= a[i]\r\n        else:\r\n            s -= a[i]\r\n        se.append(s)\r\n    se.sort()\r\n    for i in range(n-1):\r\n        if se[i] == se[i+1]:\r\n            f = True\r\n    if f == True:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [39th token]\r\n"
        },
        "errorLine": 14,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240164813",
            "author": "Free__Palestine_",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 25800,
            "submissionTime": 1704310200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240164742",
            "author": "Free__Palestine_",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 74200,
            "submissionTime": 1704310020
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    if n==1 and l[0]==1:print('YES')\r\n    else:\r\n        s=sum(l)\r\n        print('YES' if s**0.5==int(s**0.5) else 'NO')",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    if n==1 and l[0]==1:print('YES')\r\n    else:\r\n        s=sum(l)\r\n        k,i=0,0\r\n        res=[]\r\n        while k<s:\r\n            if i*i==s:\r\n                res.append('YES')\r\n            else:\r\n                res.append('NO')\r\n            i+=1\r\n            k+=1\r\n        if 'YES' in res:print('YES')\r\n        else:print('NO')",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240161269",
            "author": "IACodingMachine",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 92,
            "memory": 18800,
            "submissionTime": 1704301980
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240161042",
            "author": "IACodingMachine",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704301620
        },
        "acceptedCode": "for t in range(int(input())):\r\n    w_l = int(input())\r\n    w = list(input())\r\n    res = []\r\n \r\n    i = w_l-1\r\n    while i > -1:\r\n        s = \"\"\r\n        if w[i] == \"a\" or w[i] == \"e\":\r\n            s = w[i-1] + w[i]\r\n            res.append(s)\r\n            i -= 2\r\n        else:\r\n            s = w[i-2] + w[i-1] + w[i]\r\n            res.append(s)\r\n            i -= 3\r\n    res.reverse()\r\n    print('.'.join(str(e) for e in res))",
        "rejectedCode": "for t in range(int(input())):\r\n    w_l = int(input())\r\n    w = list(input())\r\n    w.reverse()\r\n    res = []\r\n \r\n    i = w_l-1\r\n    while i > -1:\r\n        s = \"\"\r\n        if w[i] == \"a\" or w[i] == \"e\":\r\n            s = w[i] + w[i-1]\r\n            res.append(s)\r\n            i -= 2\r\n        else:\r\n            s = w[i] + w[i-1] + w[i-2]\r\n            res.append(s)\r\n            i -= 3\r\n    print('.'.join(str(e) for e in res))",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "bac.ed.bab\r\nbab.ab\r\ndad.dec.ab.ed.dad\r\ndac\r\ndac.dac\r\ndab.ab.bab.ab.ab.bab.bab.ab.bad\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'bac.ed.bab'\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240153725",
            "author": "elaine18",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1704293340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240151323",
            "author": "elaine18",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2000,
            "submissionTime": 1704291180
        },
        "acceptedCode": "\"\"\"\nCreated on 2024/1/3\n\n@author: elaine\n\"\"\"\n\nif __name__ == '__main__':\n    N = int(input())\n    for n in range(N):\n        list_of_letters = []\n        for i in range(3):\n            M = list(str(input()))\n            list_of_letters += M\n        cnt_A = 0\n        cnt_B = 0\n        cnt_C = 0\n        for m in list_of_letters:\n            if m == \"A\":\n                cnt_A += 1\n            elif m == \"B\":\n                cnt_B += 1\n            elif m == \"C\":\n                cnt_C += 1\n        if cnt_A == 2:\n            print(\"A\")\n        elif cnt_B == 2:\n            print(\"B\")\n        elif cnt_C == 2:\n            print(\"C\")",
        "rejectedCode": "\"\"\"\nCreated on 2024/1/3\n\n@author: elaine\n\"\"\"\n\nif __name__ == '__main__':\n    N = int(input())\n    for n in range(3*N):\n        list_of_letters = []\n        for i in range(3):\n            M = list(str(input()))\n            list_of_letters += M\n        cnt_A = 0\n        cnt_B = 0\n        cnt_C = 0\n        for m in list_of_letters:\n            if m == \"A\":\n                cnt_A += 1\n            elif m == \"B\":\n                cnt_B += 1\n            elif m == \"C\":\n                cnt_C += 1\n        if cnt_A == 2:\n            print(\"A\")\n        elif cnt_B == 2:\n            print(\"B\")\n        elif cnt_C == 2:\n            print(\"C\")\n        n += 3\n\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\nB\r\nC\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240153152",
            "author": "momenelmesady4803",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 31100,
            "submissionTime": 1704292800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240047601",
            "author": "momenelmesady4803",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704218400
        },
        "acceptedCode": "aa = []\r\nimport math\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int,input().split()))\r\n    for i in range(0,n,2):\r\n        l[i]*=(-1)\r\n    sfxA = [l[0]]\r\n    for i in range(1,n):\r\n        sfxA.append(l[i]+sfxA[-1])\r\n    if 0 in sfxA or len(set(sfxA)) < n :\r\n        aa.append(\"YES\")\r\n    else :\r\n        aa.append(\"NO\")\r\n\r\nfor i in aa :\r\n    print(i)",
        "rejectedCode": "aa = []\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    l = list(map(int,input().split()))\r\n    if sum(l)%4 == 0 :\r\n        aa.append(\"YES\")\r\n    else :\r\n        aa.append(\"NO\")\r\n    \r\n        \r\n    \r\n\r\nfor i in aa :\r\n    print(i)",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\nYES\r\nYES\r\nYES\r\nYES\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240149247",
            "author": "chmod_",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1731,
            "memory": 27900,
            "submissionTime": 1704289620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240148848",
            "author": "chmod_",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 561,
            "memory": 10100,
            "submissionTime": 1704289260
        },
        "acceptedCode": "import heapq\r\nfrom math import * \r\nfrom collections import defaultdict\r\n\r\n\r\nfrom bisect import *\r\n \r\nclass RMQMAX(): #for MAX queries\r\n\tdef __init__(self,arr):\r\n\t\tself.arr=arr\r\n\t\tMAXN=len(arr)\r\n\t\t# build log table for fast lookup\r\n\t\tself.log2=[0]*(MAXN+1)\r\n\t\ti=0\r\n\t\twhile 2**i<(MAXN+1):\r\n\t\t\tself.log2[2**i]=i;i+=1\r\n\t\tfor i in range(1,MAXN+1):\r\n\t\t\tif self.log2[i]==0:self.log2[i]=self.log2[i-1]\r\n\t\tK=self.log2[MAXN]+1\r\n\t\t# self.lookup=[[0 for _ in range(K+1)] for __ in range(MAXN)]\r\n\t\tself.lookup=[0] * ((K + 1) * MAXN)\r\n\t\tself.M = K + 1 # number of columns in self.lookup. To do calculations for self.lookup when converted from 2D to 1D\r\n\t\tself.buildSparseTable()\r\n\tdef buildSparseTable(self): \r\n\t\tn=len(self.arr)\r\n\t\tfor i in range(0,n):  \r\n\t\t\tself.lookup[i*self.M] = self.arr[i]  \r\n\t\tj=1\r\n\t\twhile (1<<j)<=n:\r\n\t\t\ti=0\r\n\t\t\twhile (i+(1<<j)-1)<n:\r\n\t\t\t\tself.lookup[i*self.M+j]=max(self.lookup[i*self.M+j-1],self.lookup[(i+(1<<(j-1)))*self.M+j-1])\r\n\t\t\t\ti += 1\r\n\t\t\tj += 1\r\n\tdef query(self,L,R): #returns min on interval [l,r] inclusive\r\n\t\tj = self.log2[R-L+1]\r\n\t\treturn max(self.lookup[L*self.M+j],self.lookup[(R-(1<<j)+1)*self.M+j])\r\n \r\nclass SortedList:\r\n\tdef __init__(self, iterable=[], _load=200):\r\n\t\t\"\"\"Initialize sorted list instance.\"\"\"\r\n\t\tvalues = sorted(iterable)\r\n\t\tself._len = _len = len(values)\r\n\t\tself._load = _load\r\n\t\tself._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]\r\n\t\tself._list_lens = [len(_list) for _list in _lists]\r\n\t\tself._mins = [_list[0] for _list in _lists]\r\n\t\tself._fen_tree = []\r\n\t\tself._rebuild = True\r\n \r\n\tdef _fen_build(self):\r\n\t\t\"\"\"Build a fenwick tree instance.\"\"\"\r\n\t\tself._fen_tree[:] = self._list_lens\r\n\t\t_fen_tree = self._fen_tree\r\n\t\tfor i in range(len(_fen_tree)):\r\n\t\t\tif i | i + 1 < len(_fen_tree):\r\n\t\t\t\t_fen_tree[i | i + 1] += _fen_tree[i]\r\n\t\tself._rebuild = False\r\n \r\n\tdef _fen_update(self, index, value):\r\n\t\t\"\"\"Update `fen_tree[index] += value`.\"\"\"\r\n\t\tif not self._rebuild:\r\n\t\t\t_fen_tree = self._fen_tree\r\n\t\t\twhile index < len(_fen_tree):\r\n\t\t\t\t_fen_tree[index] += value\r\n\t\t\t\tindex |= index + 1\r\n \r\n\tdef _fen_query(self, end):\r\n\t\t\"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\r\n\t\tif self._rebuild:\r\n\t\t\tself._fen_build()\r\n \r\n\t\t_fen_tree = self._fen_tree\r\n\t\tx = 0\r\n\t\twhile end:\r\n\t\t\tx += _fen_tree[end - 1]\r\n\t\t\tend &= end - 1\r\n\t\treturn x\r\n \r\n\tdef _fen_findkth(self, k):\r\n\t\t\"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\r\n\t\t_list_lens = self._list_lens\r\n\t\tif k < _list_lens[0]:\r\n\t\t\treturn 0, k\r\n\t\tif k >= self._len - _list_lens[-1]:\r\n\t\t\treturn len(_list_lens) - 1, k + _list_lens[-1] - self._len\r\n\t\tif self._rebuild:\r\n\t\t\tself._fen_build()\r\n \r\n\t\t_fen_tree = self._fen_tree\r\n\t\tidx = -1\r\n\t\tfor d in reversed(range(len(_fen_tree).bit_length())):\r\n\t\t\tright_idx = idx + (1 << d)\r\n\t\t\tif right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\r\n\t\t\t\tidx = right_idx\r\n\t\t\t\tk -= _fen_tree[idx]\r\n\t\treturn idx + 1, k\r\n \r\n\tdef _delete(self, pos, idx):\r\n\t\t\"\"\"Delete value at the given `(pos, idx)`.\"\"\"\r\n\t\t_lists = self._lists\r\n\t\t_mins = self._mins\r\n\t\t_list_lens = self._list_lens\r\n \r\n\t\tself._len -= 1\r\n\t\tself._fen_update(pos, -1)\r\n\t\tdel _lists[pos][idx]\r\n\t\t_list_lens[pos] -= 1\r\n \r\n\t\tif _list_lens[pos]:\r\n\t\t\t_mins[pos] = _lists[pos][0]\r\n\t\telse:\r\n\t\t\tdel _lists[pos]\r\n\t\t\tdel _list_lens[pos]\r\n\t\t\tdel _mins[pos]\r\n\t\t\tself._rebuild = True\r\n \r\n\tdef _loc_left(self, value):\r\n\t\t\"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\r\n\t\tif not self._len:\r\n\t\t\treturn 0, 0\r\n \r\n\t\t_lists = self._lists\r\n\t\t_mins = self._mins\r\n \r\n\t\tlo, pos = -1, len(_lists) - 1\r\n\t\twhile lo + 1 < pos:\r\n\t\t\tmi = (lo + pos) >> 1\r\n\t\t\tif value <= _mins[mi]:\r\n\t\t\t\tpos = mi\r\n\t\t\telse:\r\n\t\t\t\tlo = mi\r\n \r\n\t\tif pos and value <= _lists[pos - 1][-1]:\r\n\t\t\tpos -= 1\r\n \r\n\t\t_list = _lists[pos]\r\n\t\tlo, idx = -1, len(_list)\r\n\t\twhile lo + 1 < idx:\r\n\t\t\tmi = (lo + idx) >> 1\r\n\t\t\tif value <= _list[mi]:\r\n\t\t\t\tidx = mi\r\n\t\t\telse:\r\n\t\t\t\tlo = mi\r\n \r\n\t\treturn pos, idx\r\n \r\n\tdef _loc_right(self, value):\r\n\t\t\"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\r\n\t\tif not self._len:\r\n\t\t\treturn 0, 0\r\n \r\n\t\t_lists = self._lists\r\n\t\t_mins = self._mins\r\n \r\n\t\tpos, hi = 0, len(_lists)\r\n\t\twhile pos + 1 < hi:\r\n\t\t\tmi = (pos + hi) >> 1\r\n\t\t\tif value < _mins[mi]:\r\n\t\t\t\thi = mi\r\n\t\t\telse:\r\n\t\t\t\tpos = mi\r\n \r\n\t\t_list = _lists[pos]\r\n\t\tlo, idx = -1, len(_list)\r\n\t\twhile lo + 1 < idx:\r\n\t\t\tmi = (lo + idx) >> 1\r\n\t\t\tif value < _list[mi]:\r\n\t\t\t\tidx = mi\r\n\t\t\telse:\r\n\t\t\t\tlo = mi\r\n \r\n\t\treturn pos, idx\r\n \r\n\tdef add(self, value):\r\n\t\t\"\"\"Add `value` to sorted list.\"\"\"\r\n\t\t_load = self._load\r\n\t\t_lists = self._lists\r\n\t\t_mins = self._mins\r\n\t\t_list_lens = self._list_lens\r\n \r\n\t\tself._len += 1\r\n\t\tif _lists:\r\n\t\t\tpos, idx = self._loc_right(value)\r\n\t\t\tself._fen_update(pos, 1)\r\n\t\t\t_list = _lists[pos]\r\n\t\t\t_list.insert(idx, value)\r\n\t\t\t_list_lens[pos] += 1\r\n\t\t\t_mins[pos] = _list[0]\r\n\t\t\tif _load + _load < len(_list):\r\n\t\t\t\t_lists.insert(pos + 1, _list[_load:])\r\n\t\t\t\t_list_lens.insert(pos + 1, len(_list) - _load)\r\n\t\t\t\t_mins.insert(pos + 1, _list[_load])\r\n\t\t\t\t_list_lens[pos] = _load\r\n\t\t\t\tdel _list[_load:]\r\n\t\t\t\tself._rebuild = True\r\n\t\telse:\r\n\t\t\t_lists.append([value])\r\n\t\t\t_mins.append(value)\r\n\t\t\t_list_lens.append(1)\r\n\t\t\tself._rebuild = True\r\n \r\n\tdef discard(self, value):\r\n\t\t\"\"\"Remove `value` from sorted list if it is a member.\"\"\"\r\n\t\t_lists = self._lists\r\n\t\tif _lists:\r\n\t\t\tpos, idx = self._loc_right(value)\r\n\t\t\tif idx and _lists[pos][idx - 1] == value:\r\n\t\t\t\tself._delete(pos, idx - 1)\r\n \r\n\tdef remove(self, value):\r\n\t\t\"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\r\n\t\t_len = self._len\r\n\t\tself.discard(value)\r\n\t\tif _len == self._len:\r\n\t\t\traise ValueError('{0!r} not in list'.format(value))\r\n \r\n\tdef pop(self, index=-1):\r\n\t\t\"\"\"Remove and return value at `index` in sorted list.\"\"\"\r\n\t\tpos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n\t\tvalue = self._lists[pos][idx]\r\n\t\tself._delete(pos, idx)\r\n\t\treturn value\r\n \r\n\tdef bisect_left(self, value):\r\n\t\t\"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\r\n\t\tpos, idx = self._loc_left(value)\r\n\t\treturn self._fen_query(pos) + idx\r\n \r\n\tdef bisect_right(self, value):\r\n\t\t\"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\r\n\t\tpos, idx = self._loc_right(value)\r\n\t\treturn self._fen_query(pos) + idx\r\n \r\n\tdef count(self, value):\r\n\t\t\"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\r\n\t\treturn self.bisect_right(value) - self.bisect_left(value)\r\n \r\n\tdef __len__(self):\r\n\t\t\"\"\"Return the size of the sorted list.\"\"\"\r\n\t\treturn self._len\r\n \r\n\tdef __getitem__(self, index):\r\n\t\t\"\"\"Lookup value at `index` in sorted list.\"\"\"\r\n\t\tpos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n\t\treturn self._lists[pos][idx]\r\n \r\n\tdef __delitem__(self, index):\r\n\t\t\"\"\"Remove value at `index` from sorted list.\"\"\"\r\n\t\tpos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n\t\tself._delete(pos, idx)\r\n \r\n\tdef __contains__(self, value):\r\n\t\t\"\"\"Return true if `value` is an element of the sorted list.\"\"\"\r\n\t\t_lists = self._lists\r\n\t\tif _lists:\r\n\t\t\tpos, idx = self._loc_left(value)\r\n\t\t\treturn idx < len(_lists[pos]) and _lists[pos][idx] == value\r\n\t\treturn False\r\n \r\n\tdef __iter__(self):\r\n\t\t\"\"\"Return an iterator over the sorted list.\"\"\"\r\n\t\treturn (value for _list in self._lists for value in _list)\r\n \r\n\tdef __reversed__(self):\r\n\t\t\"\"\"Return a reverse iterator over the sorted list.\"\"\"\r\n\t\treturn (value for _list in reversed(self._lists) for value in reversed(_list))\r\n \r\n\tdef __repr__(self):\r\n\t\t\"\"\"Return string representation of sorted list.\"\"\"\r\n\t\treturn 'SortedList({0})'.format(list(self))\r\n \r\nclass OrderedList(SortedList): #Codeforces, Ordered Multiset\r\n\tdef __init__(self, arg):\r\n\t\tsuper().__init__(arg)\r\n\tdef rangeCountByValue(self, leftVal, rightVal): #returns number of items in range [leftVal,rightVal] inclusive\r\n\t\tleftCummulative = self.bisect_left(leftVal)\r\n\t\trightCummulative = self.bisect_left(rightVal + 1)\r\n\t\treturn rightCummulative - leftCummulative\r\n\t\t\r\n \r\n\r\n\r\nt = int(input())\r\n \r\nwhile t : \r\n\tn = int(input())\r\n \r\n\tpeeps = []\r\n\tfor _ in range(n):\r\n\t\ts, e = map(int, input().split())\r\n\t\tpeeps.append((s, e))\r\n\r\n\tpeeps.sort(key=lambda x:x[1])\r\n\r\n\t\r\n\tsl = SortedList()\r\n\tans = 0\r\n\tfor i in range(n):\r\n\t\tans += sl.bisect_left(- peeps[i][0])\r\n\t\tsl.add(- peeps[i][0])\r\n\tprint(ans)\r\n\t\t \r\n \r\n\tt -= 1",
        "rejectedCode": "import heapq\r\nfrom bisect import * \r\nfrom math import * \r\nfrom collections import defaultdict\r\n \r\nt = int(input())\r\n \r\nwhile t : \r\n\tn = int(input())\r\n \r\n\tpeeps = []\r\n\tfor _ in range(n):\r\n\t\ts, e = map(int, input().split())\r\n\t\tpeeps.append((s, e))\r\n\r\n\tpeeps.sort(key=lambda x:x[0])\r\n\r\n\t\r\n\thp = []\r\n\tans = 0\r\n\tfor i in range(n):\r\n\t\tans +=  bisect_right(hp, - peeps[i][1])\r\n\t\theapq.heappush(hp, - peeps[i][1])\r\n\tprint(ans)\r\n\t\t \r\n \r\n\tt -= 1",
        "failedTestCase": {
            "input": "10000\r\n6\r\n-6 5\r\n-4 10\r\n-10 -1\r\n-8 2\r\n0 7\r\n-7 -5\r\n1\r\n5 7\r\n3\r\n-8 6\r\n-3 1\r\n-10 -6\r\n4\r\n-8 5\r\n-10 -4\r\n-7 0\r\n3 4\r\n6\r\n-5 4\r\n-10 -2\r\n2 8\r\n1 9\r\n-8 5\r\n-3 -1\r\n2\r\n-7 -6\r\n1 8\r\n5\r\n0 9\r\n-8 3\r\n-9 7\r\n-7 8\r\n-1 2\r\n1\r\n-10 5\r\n3\r\n-9 -8\r\n-7 7\r\n-5 6\r\n4\r\n-10 -2\r\n3 9\r\n4 6\r\n-5 1\r\n3\r\n-6 -4\r\n-8 4\r\n3 10\r\n5\r\n-9 3\r\n0 7\r\n1 9\r\n-4 5\r\n-3 -2\r\n2\r\n-5 9\r\n-2 8\r\n3\r\n-1 6\r\n-2 0\r\n-5 9\r\n7\r\n4 10\r\n-7 3\r\n5 6\r\n-8 7\r\n-6 -5\r\n-4 1\r\n-10 0\r\n4\r\n-1 7\r\n-8 0\r\n-5 10\r\n-10 -6\r\n3\r\n-2 9\r\n3 10\r\n-8 -7\r\n3\r\n-5 3\r\n-10 -4\r\n-1 5\r\n7\r\n-9 1\r\n2 8\r\n-6 -5\r\n-3 3\r\n5 7\r\n-10 9\r\n4 6\r\n4\r...",
            "output": "3\r\n0\r\n1\r\n2\r\n3\r\n0\r\n4\r\n0\r\n1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n8\r\n1\r\n0\r\n0\r\n9\r\n0\r\n0\r\n6\r\n3\r\n1\r\n2\r\n4\r\n4\r\n0\r\n5\r\n3\r\n0\r\n1\r\n5\r\n4\r\n0\r\n0\r\n3\r\n0\r\n0\r\n0\r\n9\r\n1\r\n11\r\n6\r\n0\r\n0\r\n2\r\n3\r\n6\r\n0\r\n2\r\n2\r\n7\r\n2\r\n1\r\n4\r\n3\r\n7\r\n0\r\n4\r\n5\r\n10\r\n0\r\n0\r\n10\r\n0\r\n8\r\n2\r\n8\r\n1\r\n3\r\n1\r\n3\r\n0\r\n5\r\n0\r\n1\r\n2\r\n0\r\n1\r\n5\r\n1\r\n0\r\n4\r\n0\r\n1\r\n3\r\n2\r\n0\r\n1\r\n9\r\n2\r\n0\r\n4\r\n2\r\n0\r\n0\r\n0\r\n2\r\n4\r\n1\r\n1\r\n0\r\n0\r\n6\r\n0\r\n1\r\n0\r\n1\r\n0\r\n11\r\n2\r\n0\r\n0\r\n7\r\n2\r\n3\r\n1\r\n2\r\n1\r\n0\r\n4\r\n5\r\n1\r\n0\r\n4\r\n10\r\n0\r\n1\r\n0\r\n5\r\n9\r\n5\r\n9\r\n0\r\n3\r\n4\r\n1\r\n10\r\n1\r\n0\r\n0\r\n6\r\n2\r\n0\r\n1\r\n6\r\n5\r\n1\r\n2\r\n0\r\n7\r\n0\r\n5\r\n2\r\n1\r\n4\r\n3\r\n0\r\n0\r\n7\r\n0\r\n4\r\n0\r\n1\r\n2\r\n1\r\n0\r\n0...",
            "expectedOutput": "3\r\n0\r\n1\r\n2\r\n4\r\n0\r\n4\r\n0\r\n1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n8\r\n1\r\n0\r\n0\r\n9\r\n0\r\n0\r\n6\r\n3\r\n1\r\n2\r\n4\r\n5\r\n0\r\n5\r\n3\r\n0\r\n1\r\n5\r\n4\r\n0\r\n0\r\n3\r\n0\r\n0\r\n0\r\n9\r\n1\r\n11\r\n6\r\n0\r\n0\r\n2\r\n3\r\n6\r\n0\r\n3\r\n2\r\n7\r\n2\r\n1\r\n4\r\n4\r\n6\r\n0\r\n4\r\n5\r\n10\r\n0\r\n0\r\n13\r\n0\r\n9\r\n2\r\n8\r\n1\r\n3\r\n1\r\n3\r\n0\r\n6\r\n0\r\n1\r\n2\r\n0\r\n1\r\n6\r\n1\r\n0\r\n5\r\n0\r\n1\r\n3\r\n2\r\n0\r\n1\r\n9\r\n2\r\n0\r\n4\r\n2\r\n0\r\n0\r\n0\r\n2\r\n4\r\n1\r\n1\r\n0\r\n0\r\n6\r\n0\r\n1\r\n0\r\n1\r\n0\r\n11\r\n2\r\n0\r\n0\r\n6\r\n2\r\n3\r\n1\r\n2\r\n1\r\n0\r\n5\r\n5\r\n1\r\n0\r\n4\r\n11\r\n0\r\n1\r\n0\r\n5\r\n9\r\n5\r\n10\r\n0\r\n4\r\n4\r\n1\r\n12\r\n1\r\n0\r\n0\r\n6\r\n2\r\n0\r\n1\r\n6\r\n5\r\n1\r\n2\r\n0\r\n7\r\n0\r\n5\r\n2\r\n1\r\n4\r\n3\r\n0\r\n0\r\n6\r\n0\r\n4\r\n0\r\n1\r\n2\r\n1\r\n0\r\n...",
            "CheckerComment": "wrong answer 5th numbers differ - expected: '4', found: '3'\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240146852",
            "author": "daniil.gerchik",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 30900,
            "submissionTime": 1704288000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240146723",
            "author": "daniil.gerchik",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 33200,
            "submissionTime": 1704287940
        },
        "acceptedCode": "from sys import stdin\n# from sys import stdin, stdout\n# print = stdout.write\n# stdin = open(\"input.txt\")\n\n\ndef solution():\n    # stdin = open(\"input.txt\")\n    n = int(stdin.readline().rstrip())\n    a = list(map(int, stdin.readline().rstrip().split()))\n\n    a_prefix = [0] * (n + 1)\n    for i, ai in enumerate(a):\n        a_prefix[i + 1] = a_prefix[i] + ai * (-1 + 2 * (i % 2 == 1))\n\n    if n + 1 > len(set(a_prefix)):\n        print('YES')\n        return\n    print('NO')\n\n\n# solution()\n# t = 1\nt = int(stdin.readline().rstrip())\nfor _ in range(t):\n    solution()\n",
        "rejectedCode": "from sys import stdin\n# from sys import stdin, stdout\n# print = stdout.write\n# stdin = open(\"input.txt\")\n\n\ndef solution():\n    # stdin = open(\"input.txt\")\n    n = int(stdin.readline().rstrip())\n    a = list(map(int, stdin.readline().rstrip().split()))\n\n    a_prefix = [0] * (n + 1)\n    for i, ai in enumerate(a):\n        a_prefix[i + 1] = a_prefix[i] + ai * (-1 + 2 * (i % 2 == 1))\n\n    if n + 1 > len(set(a_prefix)):\n        print('YES')\n        return\n    print('NO')\n\n\n# solution()\n# t = 1\nt = int(stdin.readline().rstrip())\nfor _ in range(t):\n    solution()\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "240146848",
            "author": "nikkireev",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 3353,
            "memory": 83300,
            "submissionTime": 1704288000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "240145957",
            "author": "nikkireev",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 200,
            "submissionTime": 1704287520
        },
        "acceptedCode": "import heapq\r\ndef dijkstra(graph,root,lis):\r\n    dist = dict()\r\n    for i in graph:\r\n        dist[i] = dict()\r\n        for x in lis:\r\n            dist[i][x] = 10**100\r\n    dist[root][lis[0]] = 0\r\n    visited = dict()\r\n    for i in graph:\r\n        visited[i] = dict()\r\n        for x in lis:\r\n            visited[i][x] = False\r\n    pq = [(0,root,lis[0])]\r\n    while len(pq) > 0:\r\n        _,u,k = heapq.heappop(pq)\r\n        if visited[u][k]:\r\n            continue\r\n        visited[u][k] = True\r\n        for v,l in graph[u]:\r\n            speed = min(k,lis[v-1])\r\n            if dist[u][k] + l * k  < dist[v][speed]:\r\n                dist[v][speed] = dist[u][k] + l * k\r\n                heapq.heappush(pq,(dist[v][speed],v,min(speed,lis[v-1])))\r\n    return dist\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n,m = map(int,input().split())\r\n        d = dict()\r\n        for l in range(m):\r\n            a,b,c = map(int,input().split())\r\n            if a not in d:\r\n                d[a] = list()\r\n            if b not in d:\r\n                d[b] = list()\r\n            d[a].append((b,c))\r\n            d[b].append((a,c))\r\n        l = list(map(int,input().split()))\r\n        x = dijkstra(d,1,l)\r\n        mn = 10**100\r\n        for i in x[n]:\r\n            if mn > x[n][i]:\r\n                mn = x[n][i]\r\n        print(mn)\r\nmain()",
        "rejectedCode": "import heapq\r\nfrom numpy import inf\r\ndef dijkstra(graph,root,lis):\r\n    dist = dict()\r\n    for i in graph:\r\n        dist[i] = dict()\r\n        for x in lis:\r\n            dist[i][x] = inf\r\n    dist[root][lis[0]] = 0\r\n    visited = dict()\r\n    for i in graph:\r\n        visited[i] = dict()\r\n        for x in lis:\r\n            visited[i][x] = False\r\n    pq = [(0,root,lis[0])]\r\n    while len(pq) > 0:\r\n        _,u,k = heapq.heappop(pq)\r\n        if visited[u][k]:\r\n            continue\r\n        visited[u][k] = True\r\n        for v,l in graph[u]:\r\n            speed = min(k,lis[v-1])\r\n            if dist[u][k] + l * k  < dist[v][speed]:\r\n                dist[v][speed] = dist[u][k] + l * k\r\n                heapq.heappush(pq,(dist[v][speed],v,min(speed,lis[v-1])))\r\n    return dist\r\nt = int(input())\r\nfor _ in range(t):\r\n    n,m = map(int,input().split())\r\n    d = dict()\r\n    for l in range(m):\r\n        a,b,c = map(int,input().split())\r\n        if a not in d:\r\n            d[a] = list()\r\n        if b not in d:\r\n            d[b] = list()\r\n        d[a].append((b,c))\r\n        d[b].append((a,c))\r\n    l = list(map(int,input().split()))\r\n    x = dijkstra(d,1,l)\r\n    mn = inf\r\n    for i in x[n]:\r\n        if mn > x[n][i]:\r\n            mn = x[n][i]\r\n    print(mn)\r\n\r\n    ",
        "failedTestCase": {
            "input": "3\r\n5 5\r\n1 2 2\r\n3 2 1\r\n2 4 5\r\n2 5 7\r\n4 5 1\r\n5 2 1 3 3\r\n5 10\r\n1 2 5\r\n1 3 5\r\n1 4 4\r\n1 5 8\r\n2 3 6\r\n2 4 3\r\n2 5 2\r\n3 4 1\r\n3 5 8\r\n4 5 2\r\n7 2 8 4 1\r\n7 10\r\n3 2 8\r\n2 1 4\r\n2 5 7\r\n2 6 4\r\n7 1 2\r\n4 3 5\r\n6 4 2\r\n6 7 1\r\n6 7 4\r\n4 5 9\r\n7 6 5 4 3 2 1\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240139341",
            "author": "MassimoG",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 374,
            "memory": 30800,
            "submissionTime": 1704283800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240137954",
            "author": "MassimoG",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 31000,
            "submissionTime": 1704283080
        },
        "acceptedCode": "from random import getrandbits\r\n\r\n\r\nRANDOM = getrandbits(32)\r\n\r\n\r\ndef add(s, e): s.add(e ^ RANDOM)\r\n\r\n\r\ndef contains(s, e): return e ^ RANDOM in s\r\n\r\n\r\ndef good(n, a):\r\n    seen = set()\r\n    add(seen, 0)\r\n    cur = 0\r\n    for i in range(n):\r\n        cur += a[i] * (i % 2 * 2 - 1)\r\n        if contains(seen, cur):\r\n            return True\r\n        add(seen, cur)\r\n    return False\r\n\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    print(\"YES\" if good(n, a) else \"NO\")\r\n",
        "rejectedCode": "import sys\r\ncin = iter(map(int, sys.stdin.read().split()))\r\n\r\n\r\ndef good(n, a):\r\n    seen = {0}\r\n    cur = 0\r\n    for i in range(n):\r\n        cur += a[i] * (i % 2 * 2 - 1)\r\n        if cur in seen:\r\n            return True\r\n        seen.add(cur)\r\n    return False\r\n\r\n\r\nt = next(cin)\r\nres = []\r\nfor _ in range(t):\r\n    n = next(cin)\r\n    a = [next(cin) for _ in range(n)]\r\n    res.append(\"YES\" if good(n, a) else \"NO\")\r\nprint(*res, sep='\\n')",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240135239",
            "author": "saigayathri2004",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 25300,
            "submissionTime": 1704281640
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240134702",
            "author": "saigayathri2004",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704281340
        },
        "acceptedCode": "import math\r\nn=int(input())\r\nfor i in range(n):\r\n    t=int(input())\r\n    l1=list(map(int,input().split()))\r\n    sum1=sum(l1)\r\n    k=math.sqrt(sum1)\r\n    if k.is_integer():\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "n=int(input())\r\nfor i in range(n):\r\n    l1=list(map(int,input().split()))\r\n    sum1=sum(l1)\r\n    k=math.sqrt(sum1)\r\n    if k.is_integer():\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240052037",
            "author": "buffedape",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704227340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240051842",
            "author": "buffedape",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704227040
        },
        "acceptedCode": "dom = int(input(''))\r\n\r\n\r\nfor _ in range(dom):\r\n    number = input('')\r\n    a, b, c = map(int, number.split())\r\n    \r\n    if a == b:\r\n        print(c)\r\n    elif b == c:\r\n        print(a)\r\n    elif a == c:\r\n        print(b)",
        "rejectedCode": "dom = int(input('domain'))    \r\n    \r\n    \r\nfor _ in range(dom):    \r\n    number = input('')    \r\n    a, b, c = map(int, number.split())    \r\n    \r\n    if a == b:    \r\n        print(c)    \r\n    elif b == c:    \r\n        print(a)    \r\n    elif a == c:    \r\n        print(b)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "domain1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong output format Expected integer, but \"domain1\" found\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240166559",
            "author": "aziz1444",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 248,
            "memory": 28300,
            "submissionTime": 1704313620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240166538",
            "author": "aziz1444",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 28200,
            "submissionTime": 1704313560
        },
        "acceptedCode": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    s=0\r\n    st={0}\r\n    for i,v in enumerate(a):\r\n        s+=(-1)**i*v\r\n        if s in st:\r\n            print('YES')\r\n            break\r\n        st.add(s)\r\n    else:\r\n        print('NO')\r\n\r\n        ",
        "rejectedCode": "t=int(input())\r\nfor i in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    s=0\r\n    st={0}\r\n    for i,v in enumerate(a):\r\n        s+=(-1)**i*v\r\n        if s in st:\r\n            print('YES')\r\n            break\r\n        st.add(s)\r\n    else:\r\n        print('NO')\r\n\r\n        ",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240165646",
            "author": "wtcherr",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704312000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240165111",
            "author": "wtcherr",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704310860
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a, b, c = map(int, input().split())\r\n    print(a if b == c else b if a == c else c)",
        "rejectedCode": "for _ in range(int(input())):\r\n    a, b, c = map(int, input())\r\n    print(a if b == c else b if a == c else c)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240160247",
            "author": "LaRagde",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 311,
            "memory": 28000,
            "submissionTime": 1704300360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240160165",
            "author": "LaRagde",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 280,
            "memory": 8700,
            "submissionTime": 1704300240
        },
        "acceptedCode": "\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = sum(list(map(int, input().split())))\r\n    l = 0\r\n    r = a + 1\r\n    while l < r:\r\n        m = (l + r) // 2\r\n        if m*m < a:\r\n            l = m + 1\r\n        elif m*m > a:\r\n            r = m\r\n        else:\r\n            print(\"YES\")\r\n            break\r\n    else:\r\n        print(\"NO\")\r\n    \r\n",
        "rejectedCode": "\r\nt = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = sum(list(map(int, input().split())))\r\n    l = 0\r\n    r = a\r\n    while l < r:\r\n        m = (l + r) // 2\r\n        if m*m < a:\r\n            l = m + 1\r\n        elif m*m > a:\r\n            r = m\r\n        else:\r\n            print(\"YES\")\r\n            break\r\n    else:\r\n        print(\"NO\")\r\n    \r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [24th token]\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240159912",
            "author": "TurboDan",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 248,
            "memory": 31000,
            "submissionTime": 1704299880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240159845",
            "author": "TurboDan",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 32500,
            "submissionTime": 1704299820
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n, arr = int(input()), [-int(i) if x % 2 else int(i) for x,i in enumerate(input().split())]\r\n    pref = [0] * n\r\n    pref[0] = arr[0]\r\n    for i in range(1,n):\r\n        pref[i] = arr[i]+ pref[i-1]\r\n        \r\n    check = set(pref) \r\n    print(\"Yes\" if len(check) != n or 0 in check  else \"No\")",
        "rejectedCode": "for _ in range(int(input())):\r\n    n, arr = int(input()), [-int(i) if x % 2 else int(i) for x,i in enumerate(input().split())]\r\n    pref = [0] * n\r\n    pref[0] = arr[0]\r\n    for i in range(1,n):\r\n        pref[i] = arr[i]+ pref[i-1]\r\n        \r\n    check = set(pref) \r\n    print(\"Yes\" if len(check) != n or 0 in check  else \"No\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239756951",
            "author": "KYersain",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1703983200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239749417",
            "author": "KYersain",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1703975940
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    a,b,c = map(int,input().split())\r\n    if a == b:\r\n        print (c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n    ",
        "rejectedCode": "t = int(input())\r\na,b,c = map(int,input().split())\r\nfor i in range(t):\r\n    if a == b:\r\n        print (c)\r\n    elif a == c:\r\n        print(b)\r\n    else:\r\n        print(a)\r\n    a,b,c = map(int,input().split())\r\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240128629",
            "author": "Melek_Muzafarova",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 25800,
            "submissionTime": 1704278160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240127522",
            "author": "Melek_Muzafarova",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704277500
        },
        "acceptedCode": "h = int(input())\r\nfor i in range(h):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    r = sum(a)\r\n    if int(r ** (1 / 2)) == r ** (1 / 2):\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "h int(input())\r\nfor _ in range(h):\r\n    sq = []\r\n    for i in range(3):\r\n        sq.append(input())\r\n    for i in range(3):\r\n        if '?' in sq[i]:\r\n            if not('A' in sq[i]):\r\n                print('A')\r\n            if not('B' in sq[i]):\r\n                print('B')\r\n            if not('C' in sq[i]):\r\n                print('C')",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240121289",
            "author": "Maks1297",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 30800,
            "submissionTime": 1704274260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240120441",
            "author": "Maks1297",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 34600,
            "submissionTime": 1704273840
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    p = [a[0]]\r\n\r\n    for i in range(1, n):\r\n        if i % 2 == 0:\r\n            x = a[i] + p[-1]\r\n            p.append(x)\r\n        else:\r\n            x = p[-1] - a[i]\r\n            p.append(x)\r\n    \r\n    if 0 in p:\r\n        print('Yes')\r\n    elif len(set(p)) != len(p):\r\n        print('Yes')\r\n    else:\r\n        print('No')",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    p = [a[0]]\r\n    d = {a[0]:1}\r\n    for i in range(1, n):\r\n        if i % 2 == 0:\r\n            x = a[i] + p[-1]\r\n            p.append(x)\r\n            if x not in d:\r\n                d[x] = 1\r\n            else:\r\n                d[x] += 1\r\n                \r\n        else:\r\n            x = p[-1] - a[i]\r\n            p.append(x)\r\n            if x not in d:\r\n                d[x] = 1\r\n            else:\r\n                d[x] += 1\r\n    \r\n    if 0 in p:\r\n        print('Yes')\r\n    else:\r\n        ist = True\r\n        for value in d.values():\r\n            if value >= 2:\r\n                print('Yes')\r\n                ist = False\r\n                break\r\n        if ist:\r\n            print('No')",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240105857",
            "author": "LegendXLegend",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 19000,
            "submissionTime": 1704266700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240105674",
            "author": "LegendXLegend",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 3,
            "runTime": 93,
            "memory": 100,
            "submissionTime": 1704266580
        },
        "acceptedCode": "import math\r\ndef perSquare(s):\r\n    a = int(math.sqrt(s))\r\n    if (a*a) == s:\r\n        return True\r\n    return False\r\n\r\nfor t in range(int(input())):\r\n    n = input()\r\n    s = 0\r\n    for i in input().split():\r\n        s += int(i)\r\n    if perSquare(s):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "def isPerfectSquare(s):\r\n    low, high = 0, 448\r\n    while low <= high:\r\n        mid = (low+high)//2\r\n        if l[mid]<s:\r\n            low = mid + 1\r\n        elif l[mid]>s:\r\n            high = mid-1\r\n        else:\r\n            return True\r\n    return False\r\n        \r\nl = [0]*(448)\r\nfor i in range(1,449):\r\n    l[i-1] = i*i\r\n\r\nfor t in range(int(input())):\r\n    n = input()\r\n    s = 0\r\n    for i in input().split():\r\n        s += int(i)\r\n    if isPerfectSquare(s):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240093363",
            "author": "AzraelPlaya",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1704259680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240093268",
            "author": "AzraelPlaya",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1704259620
        },
        "acceptedCode": "t = int(input())\nfor i in range(t):\n    r = ['A', 'B', 'C']\n    \n    first = list(input())\n    second = list(input())\n    third = list(input())\n    \n    if '?' in first:\n        first.remove(\"?\")\n        diff = list(set(r).difference(set(first)))\n    elif '?' in second:\n        second.remove(\"?\")\n        diff = list(set(r).difference(set(second)))\n    elif '?' in third:\n        third.remove(\"?\")\n        diff = list(set(r).difference(set(third)))\n    print(*diff)",
        "rejectedCode": "r = ['A', 'B', 'C']\n\nfirst = list(input())\nsecond = list(input())\nthird = list(input())\n\nif '?' in first:\n    first.remove(\"?\")\n    diff = list(set(r).difference(set(first)))\nelif '?' in second:\n    second.remove(\"?\")\n    diff = list(set(r).difference(set(second)))\nelif '?' in third:\n    third.remove(\"?\")\n    diff = list(set(r).difference(set(third)))\nprint(*diff)",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "A\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240069985",
            "author": "Noel_Manuel",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 249,
            "memory": 25300,
            "submissionTime": 1704246000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240069861",
            "author": "Noel_Manuel",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 108,
            "memory": 0,
            "submissionTime": 1704245940
        },
        "acceptedCode": "# -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Wed Jan  3 11:21:34 2024\r\n\r\n@author: noelm\r\n\"\"\"\r\n\r\nfor i in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int, input().split()))\r\n    l=[]\r\n    f=0\r\n    for i in a:\r\n        if f==0:\r\n            l.append(i)\r\n            f=1\r\n        else:\r\n            l.append(-i)\r\n            f=0\r\n    s=0\r\n    ans='NO'\r\n    b=[0,]\r\n    for i in l:\r\n        s+=i\r\n        b.append(s)\r\n    b.sort()\r\n    for i in range(n):\r\n        if b[i]==b[i+1]:\r\n            ans='YES'\r\n            break\r\n        \r\n    print(ans)\r\n    \r\n    ",
        "rejectedCode": "# -*- coding: utf-8 -*-\r\n\"\"\"\r\nCreated on Wed Jan  3 11:21:34 2024\r\n\r\n@author: noelm\r\n\"\"\"\r\n\r\nfor i in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int, input().split()))\r\n    l=[]\r\n    f=0\r\n    for i in a:\r\n        if f==0:\r\n            l.append(i)\r\n            f=1\r\n        else:\r\n            l.append(-i)\r\n            f=0\r\n    s=0\r\n    ans='NO'\r\n    b=[0,]\r\n    for i in l:\r\n        s+=i\r\n        b.append(s)\r\n    b.sort()\r\n    for i in range(n-1):\r\n        if b[i]==b[i+1]:\r\n            ans='YES'\r\n            break\r\n        \r\n    print(ans)\r\n    \r\n    ",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [39th token]\r\n"
        },
        "errorLine": 27,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240079486",
            "author": "turtle_shifa",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 19200,
            "submissionTime": 1704251820
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240079343",
            "author": "turtle_shifa",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704251760
        },
        "acceptedCode": "from math import sqrt\r\ntest = int(input())\r\nfor i in range(test):\r\n  bucket = int(input())\r\n  n = input().split()\r\n  sum = 0\r\n  for i in n:\r\n    sum+=int(i)\r\n  cal = sqrt(sum)\r\n  if (cal-int(cal))==0:\r\n    print(\"YES\")\r\n  else:\r\n    print(\"NO\")",
        "rejectedCode": "test = int(input())\r\nfor i in range(test):\r\n  bucket = int(input())\r\n  n = input().split()\r\n  sum = 0\r\n  for i in n:\r\n    sum+=int(i)\r\n  cal = sqrt(sum)\r\n  if (cal-int(cal))==0:\r\n    print(\"YES\")\r\n  else:\r\n    print(\"NO\")",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240061755",
            "author": "rahulm2053",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 31400,
            "submissionTime": 1704239580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240061624",
            "author": "rahulm2053",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 327,
            "memory": 9300,
            "submissionTime": 1704239460
        },
        "acceptedCode": "for _ in range(int(input())):\r\n\tn = int(input())\r\n\ta = list(map(int, input().split()))\r\n\t\r\n\tl = [0]\r\n\tx = 0\r\n\tfor i in range(n):\r\n\t\tx += a[i] * ((-1) ** i)\r\n\t\tl.append(x)\r\n\r\n\tl.sort()\r\n\tfor i in range(n):\r\n\t\tif l[i] == l[i+1]:\r\n\t\t\tprint(\"YES\")\r\n\t\t\tbreak\r\n\telse:\r\n\t\tprint(\"NO\")\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n\tn = int(input())\r\n\ta = list(map(int, input().split()))\r\n\t\r\n\tl = [0]\r\n\tx = 0\r\n\tfor i in range(n):\r\n\t\tx += a[i] * ((-1) ** i)\r\n\t\tl.append(x)\r\n\r\n\tl.sort()\r\n\tfor i in range(n-1):\r\n\t\tif l[i] == l[i+1]:\r\n\t\t\tprint(\"YES\")\r\n\t\t\tbreak\r\n\telse:\r\n\t\tprint(\"NO\")\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [39th token]\r\n"
        },
        "errorLine": 12,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240055663",
            "author": "divyanshu_11",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 327,
            "memory": 40100,
            "submissionTime": 1704232380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240055530",
            "author": "divyanshu_11",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33000,
            "submissionTime": 1704232200
        },
        "acceptedCode": "\r\n# # ===================STUDY CONCEPTS=================================== # #\r\n# depth study of prefix sum and suffix sum\r\n# any function\r\n# all function\r\n# Disjoint Set Union\r\n# itertools - permutations accumulate\r\n# Morris Traversal\r\n# Iterative traversal\r\n# # ===================STUDY CONCEPTS=================================== # #\r\n# Arrays in python can only contain elements of same data types i.e., data type of array should be homogeneous. It is a thin wrapper around C language arrays and consumes far less memory than lists.\r\n# python replace function takes three arguments ::: WOW!!\r\n\r\n\r\n#https://codeforces.com/profile/MAO1112\r\n#https://codeforces.com/profile/keroru\r\n# --TIPS--------------------------------------\r\n# # -----------------TIP1---------------|\r\n# # IF YOU WANT TO GET SOME VALUE INSIDE IN A BUILT IN FUNCTION THEN YOU MUST BREAK IT\r\n# # IF YOU ARE GETTING INTUITION ABOUT IT THEN GO FOR IT\r\n# # -----------------TIP2---------------|\r\n# # SORTING IS DONE BY BOTH VALUE IF WE ARE TALKIN ABOUT LIST OF PAIR\r\n# # SO FOR ACHEIVING SLICELY SORT ELEMENTS WITH FIRST VALUE SAME THEN WE CAN USE CONCEPT OF [-A,B] OR [-B,A]\r\n# #     l.append([-a,b])\r\n# # l.sort()\r\n# #------------------TIP3---------------|\r\n# # THINK FIRST OF ALL BRUTE FORCE APPROACH \r\n# # YOU MUST THINK WHEN THE CONSTRAINTS ARE SMALL\r\n# #------------------TIP4---------------|\r\n# Python3 program to show segment tree operations like\r\n# construction, query and update\r\n# #------------------TIP5---------------|\r\n# For suffix related problem iterate from last if you are not getting any solution to solve.\r\n# vice versa for prefix\r\n# #------------------TIP6---------------|\r\n#===================Sorting pair of integers for second element with same value comparable,==============\r\n# arr=sorted(arr,key=lambda x: (-x[1], -x[0]))\r\nclass TreeNode:\r\n    def __init__(self,left,right,val=0):\r\n        self.left=None\r\n        self.right=None\r\n        self.val=val\r\nclass Solution:\r\n    def build(self,root):\r\n        pass\r\n#===================inorder iterative==============\r\n    def inorder(self, root: TreeNode):\r\n        stack=[]\r\n        ans=[]\r\n        while stack or root:\r\n            while root:\r\n                stack.append(root)\r\n                root=root.left\r\n            root=stack.pop()\r\n            ans.append(root.val)\r\n            root=root.right\r\n        return ans\r\n#===================preorder iterative==============\r\n    def preorder(self,root: TreeNode):\r\n        stack=[root]\r\n        ans=[]\r\n        while stack :\r\n            root=stack.pop()\r\n            ans.append(root.val)\r\n            if root.right:\r\n                stack.append(root.right)\r\n            if root.left:\r\n                stack.append(root.left)\r\n        return ans\r\n#===================postorder iterative==============\r\n    def postorder(self, root: TreeNode):\r\n        stack=[root]\r\n        ans=[]\r\n        while stack:\r\n            root=stack[-1]\r\n            if  (not root.right and not root.left):\r\n                stack.pop()\r\n                ans.append(root.val)\r\n            if root.right:\r\n                stack.append(root.right)\r\n                root.right=None\r\n            if root.left:\r\n                stack.append(root.left)\r\n                root.left=None\r\n        return ans\r\n#===================levelorder iterative==============\r\n    def deepestLeavesSum(self, root: TreeNode) -> list:\r\n        if not root:\r\n            return []\r\n        q = [root];ans=[]\r\n        while True:\r\n            q_new = [ x.left for x in q if x.left] # Taking all left node\r\n            q_new += [ x.right for x in q if x.right ] #Taking all right node\r\n            if not q_new: # Here wen we reach leaf nodes\r\n                break\r\n            # We can increase level here and can take particular level nodes\r\n            ans.append(q_new)\r\n            q = q_new # Here everytime we get all node in q_new and updating into q\r\n        return ans\r\n\r\n\r\n\r\n# import math\r\n# from segment_tree import SegmentTree\r\n# from  math import gcd,sqrt\r\n# from collections import Counter\r\n# import heapq\r\n# import itertools\r\n\r\nclass SegmentTree1:\r\n    def __init__(self, data, default=0, func=lambda a, b: max(a,b)):\r\n        \"\"\"initialize the segment tree with data\"\"\"\r\n        self._default = default\r\n        self._func = func\r\n        self._len = len(data)\r\n        self._size = _size = 1 << (self._len - 1).bit_length()\r\n \r\n        self.data = [default] * (2 * _size)\r\n        self.data[_size:_size + self._len] = data\r\n        for i in reversed(range(_size)):\r\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\r\n \r\n    def __delitem__(self, idx):\r\n        self[idx] = self._default\r\n \r\n    def __getitem__(self, idx):\r\n        return self.data[idx + self._size]\r\n \r\n    def __setitem__(self, idx, value):\r\n        idx += self._size\r\n        self.data[idx] = value\r\n        idx >>= 1\r\n        while idx:\r\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\r\n            idx >>= 1\r\n \r\n    def __len__(self):\r\n        return self._len\r\n \r\n    def query(self, start, stop):\r\n        if start == stop:\r\n            return self.__getitem__(start)\r\n        stop += 1\r\n        start += self._size\r\n        stop += self._size\r\n \r\n        res = self._default\r\n        while start < stop:\r\n            if start & 1:\r\n                res = self._func(res, self.data[start])\r\n                start += 1\r\n            if stop & 1:\r\n                stop -= 1\r\n                res = self._func(res, self.data[stop])\r\n            start >>= 1\r\n            stop >>= 1\r\n        return res\r\n \r\n    def __repr__(self):\r\n        return \"SegmentTree({0})\".format(self.data)\r\n \r\n \r\nclass Segment:\r\n\r\n    def __init__(self, nums):\r\n        self.data = [0 for _ in nums] + nums\r\n        self.n = len(nums)\r\n        \r\n        for idx in reversed(range(1, self.n)):\r\n            self.data[idx] = self.data[2*idx] + self.data[2*idx + 1]\r\n            \r\n    def update(self, i: int, val: int) -> None:\r\n        idx = i + self.n\r\n        self.data[idx] = val\r\n        while idx > 1:\r\n            idx //= 2\r\n            self.data[idx] = self.data[2*idx] + self.data[2*idx + 1]\r\n        \r\n\r\n    def sumRange(self, i: int, j: int) -> int:\r\n        #sum [i,j] = sum [i, j)\r\n        left = i + self.n\r\n        right = j + self.n +1\r\n        sum_range = 0\r\n        while left < right:\r\n            if left&1:\r\n                sum_range += self.data[left]\r\n                left +=1\r\n            if right&1:\r\n                right -= 1\r\n                sum_range += self.data[right]\r\n            left >>=1\r\n            right >>=1\r\n        \r\n        return sum_range\r\n        \r\ndef prefix(arr):\r\n    pref=[arr[0]]\r\n    psum=arr[0]\r\n    for i in range(1,n):\r\n        psum+=arr[i]\r\n        pref.append(psum)\r\n    return pref\r\n\r\ndef mapp(arr):\r\n    mp={}\r\n    for i in arr:\r\n        if i in mp:\r\n            mp[i]+=1\r\n        else:\r\n            mp[i]=1\r\n    return mp\r\n\r\ndef suffix(arr):\r\n    suff=[arr[-1]]\r\n    sum=suff[0]\r\n    for i in range(n-2,-1,-1):\r\n        sum+=arr[i]\r\n        suff.append(sum)\r\n    return suff[::-1]\r\n\r\ndef check_prime(n):\r\n    # optimised \r\n    prime_flag = 0\r\n    if(n > 1):\r\n        for i in range(2, int(n**(0.5)) + 1):\r\n            if (n % i == 0):\r\n                prime_flag = 1\r\n                break\r\n        if (prime_flag == 0):\r\n            return True\r\n        else:\r\n            return False\r\n    else:\r\n        return False\r\n\r\ndef primefactors(n):\r\n    factors = set()\r\n    if (n&1 == 0):\r\n        factors.add(2)\r\n        while (n&1 == 0):n >>= 1\r\n    if (n%3 == 0):\r\n        factors.add(3)\r\n        while (n%3 == 0):n//=3\r\n    for i in range(5, int(n**(0.5)) + 1, 6): \r\n        if n%i==0:\r\n            factors.add(i)\r\n            while n % i == 0:n //= i\r\n    if n > 2: \r\n        factors.add(n)\r\n    return factors\r\n\r\ndef factors(n):\r\n    arr=[1,n]\r\n    for i in range(2,int(n**(0.5))+1):\r\n        if n%i==0:\r\n            div=n//i\r\n            if i!=div:\r\n                arr.extend([i,div])\r\n            else:\r\n                arr.append(i)\r\n    return arr\r\nclass BinarySearch:\r\n    def __init__(self,a,val,n):\r\n        self.a=a\r\n        self.val=val\r\n        self.n=n\r\n    def search(self):\r\n        s=0\r\n        end=self.n-1\r\n        while s<=end:\r\n            mid=s+(end-s)//2\r\n            if self.val==self.a[mid]:\r\n                return mid\r\n            elif self.a[mid]<self.val:\r\n                s=mid+1\r\n            else:\r\n                end=mid-1\r\n        return -1\r\n    def revSearch(self):\r\n        s=0\r\n        end=self.n-1\r\n        while s<=end:\r\n            mid=s+(end-s)//2\r\n            if self.val==self.a[mid]:\r\n                return mid\r\n            elif self.a[mid]<self.val:\r\n                end=mid-1\r\n            else:\r\n                s=mid+1\r\n        return -1\r\n    def nextGreat(self):\r\n        s=0\r\n        e=self.n-1\r\n        ans=-1\r\n        while s<=e:\r\n            mid=s+(e-s)//2\r\n            if self.a[mid]<self.val:\r\n                s=mid+1\r\n            elif self.a[mid]==self.val:\r\n                return mid\r\n            else:\r\n                ans=mid\r\n                e=mid-1\r\n        return ans\r\n    def lastOccurence(self):\r\n        start=0;end=self.n-1;ans=-1\r\n        while start<=end :\r\n            mid=start+(end-start)//2\r\n            if self.a[mid]<=self.val:\r\n                ans=mid\r\n                start=mid+1\r\n            else:end=mid-1\r\n        return ans\r\ndef fixedSliding(arr,k):\r\n    # return minimum sum\r\n    i=0\r\n    j=0\r\n    sum1=0\r\n    mn=10000000000\r\n    while j<n:\r\n        sum1+=arr[j]\r\n        if j-i+1<k:\r\n            j+=1\r\n        elif j-i+1==k:\r\n            if mn>sum1:\r\n                a=i\r\n                mn=sum1\r\n            sum1-=arr[i]\r\n            i+=1\r\n            j+=1\r\n    return mn\r\n\r\ndef binaryToDecimal(n,l):\r\n    dec_value = 0\r\n    base1 = 1\r\n    for i in range(l - 1, -1, -1):\r\n        if (n[i] == '1'):  \r\n            dec_value += base1\r\n        base1 <<= 1\r\n    return dec_value\r\n\r\ndef factor(val):\r\n    cnt=0\r\n    for i in range(1,int(val**(0.5))+1):\r\n        if val%i==0:\r\n            if val//i==i:\r\n                cnt+=1\r\n            else:\r\n                cnt+=2\r\n    return cnt\r\n\r\ndef factor_only(val,n):\r\n    # this func is to detect factors apart from number and 1 \r\n    # currently it is created for counting  exactly N factor\r\n    cnt=0\r\n    for i in range(2,int(val**(0.5))+1):\r\n        if val%i==0:\r\n            if val//i==i:\r\n                cnt+=1\r\n            else:\r\n                cnt+=2\r\n        if cnt>n:\r\n            return False\r\n    if cnt==0:\r\n        return False\r\n    return True\r\ndef primeList(n):\r\n    if n<2:return []\r\n    arr=[True]*(n+1);res=[]\r\n    for i in range(2,int(n**0.5)+1):\r\n        if arr[i]==True:\r\n            # res.append(i)\r\n            for j in range(i*i,n+1,i):\r\n                arr[j]=False\r\n    # print(arr)\r\n    for i in range(2,n+1):\r\n        if arr[i]:res.append(i)\r\n    return res\r\n\r\ndef sievePrime(number):\r\n    # it return list of all primes\r\n\tnumbersList = list(range(2,number+1)) \r\n\tfor i in range(2,int(number**0.5)+1): \r\n\t\tfor j in range (i*i, number+1, i): \r\n\t\t\tif j in numbersList: \r\n\t\t\t\tnumbersList.remove(j)\r\n\treturn numbersList\r\ndef check_perfect(n):\r\n    if int(n**0.5)==n**0.5:return True\r\n    else:return False\r\n\r\ndef find_root(a,b,c):\r\n    return ((-b)+(b**2-4*a*c)**(0.5))/(2*a),((-b)-(b**2-4*a*c)**(0.5))/(2*a)\r\ndef digit_sum(n):\r\n    sum1=0\r\n    while n:\r\n        rem=n%10\r\n        sum1+=rem\r\n        n//=10\r\n    return sum1\r\ndef checkPrime(number):\r\n    # The Lowest even prime is 2 and the lowest odd prime is 3. \r\n    # Apart from these two numbers all the prime numbers greater than 3 \r\n    # can be expressed in the form of 6n + 1 or 6n -1.\r\n\r\n    # # # optimised than check_prime # # #\r\n    \r\n\tif number <= 1:\r\n\t\treturn False\r\n\tif number == 2 or number == 3:\r\n\t\treturn True\r\n\tif number % 2 == 0 or number % 3 == 0:\r\n\t\treturn False\r\n\ti = 5\r\n\twhile(i * i <= number):\r\n\t\tif (number % i == 0 or number % (i + 2) == 0):\r\n\t\t\treturn False\r\n\t\ti = i + 6\r\n\treturn True\r\ndef func(arr):\r\n    return arr[1]\r\n\r\n#Merge Sorted Arrays\r\ndef mergeArrays(arr1, arr2, n1, n2):\r\n    arr3 = [None] * (n1 + n2)\r\n    i = 0\r\n    j = 0\r\n    k = 0\r\n    while i < n1 and j < n2:\r\n        if arr1[i][1] < arr2[j][1]:\r\n            arr3[k] = arr1[i]\r\n            k = k + 1\r\n            i = i + 1\r\n        else:\r\n            arr3[k] = arr2[j]\r\n            k = k + 1\r\n            j = j + 1\r\n     \r\n    while i < n1:\r\n        arr3[k] = arr1[i];\r\n        k = k + 1\r\n        i = i + 1\r\n    while j < n2:\r\n        arr3[k] = arr2[j];\r\n        k = k + 1\r\n        j = j + 1\r\n    for i in range(n1 + n2):\r\n        print(str(arr3[i][0]), end = \"\")\r\ndef ceil(dividend,divider):\r\n    # math.ceil does not work better for values greater than 2*10^18\r\n    div=dividend//divider\r\n    rem=dividend%divider\r\n    if rem>0:\r\n        div+=1\r\n    return div\r\ndef subset(l, k,cnt,lista):\r\n    if k == len(l):\r\n        if not l in lista:\r\n            lista.append(l)\r\n        return\r\n    for i in l:\r\n        aux = l[:]\r\n        aux.remove(i)\r\n        result = subset(aux, k,cnt,lista)\r\n        if len(lista)==cnt:\r\n            break\r\n        if not result in lista and result:\r\n            lista.append(result)\r\ndef mex(a):\r\n    # Finding mex with starting value 0\r\n    if a[0]!=0:return 0\r\n    else:\r\n        c=0\r\n        for i in a:\r\n            if i == c:c+=1\r\n            else:return c\r\ndef slide(arr,k):\r\n    # Getting all the consecutive \r\n    # segments of length k \r\n    ans=[]\r\n    for i in range(len(arr)-k+1):\r\n        ans.append(sorted(arr[i:i+k]))\r\n    return ans\r\n# f=open(\"input.txt\",'r')\r\n# h=open(\"output.txt\",'w')\r\n# b,g=map(int,f.readline().split())\r\n# T=int(f.readline())\r\n# arr = [int(i)for i in f.readline().split()]\r\n# for _ in range(1,n+1):\r\n    # n=int(input())\r\n    # n,m=map(int,input().split()) \r\n    # s=input()\r\n    # arr=list(map(int,input().split()))\r\n    # s=list(map(int,input()))\r\n    # mat=[input() for i in range(4)]\r\n    # query=[list(map(int,input().split())) for i in range(m)]\r\n\r\n\r\nimport sys\r\ninput=sys.stdin.readline\r\n\r\n# from collections import deque\r\n# n=int(input())\r\n# n,k=map(int,input().split())\r\n# s=(input())\r\n# s=list(map(int,input()))\r\n# arr=list(map(int,input().split()))\r\n# s,t=input().split()\r\n\r\n# ==============================================     *** *** ** *** **#\r\n# Tip- Think of testcase    ** *** **      * * * *** *** *** ** *** **#\r\n# Think with clear mind ***********************************************#\r\n# There is a solution that exists in betwwen the thoughts which you ***#\r\n# picked and not picked.From reading problem to Solving it.\r\n# start Over again and again from 0 position until problem get solved ** **#\r\n# ==============================================     *** *** ** *** **#\r\nMOD=1000000007\r\nfrom math import lcm, sqrt\r\nimport copy\r\nimport heapq\r\ndef kLarge(arr,k):\r\n    heapq._heapify_max(arr);res=[]\r\n    return arr[:k]\r\nfrom collections import Counter\r\n# When you consider the last testcase think of one other testcase\r\n# for observate the possible answer\r\n# Understand the mathematical notation that will ease your job\r\nn = int(input().strip())\r\nfor _ in range(n):\r\n    n=int(input().strip())\r\n    # blank=input().strip()\r\n    # a,b=map(int,input().strip().split())\r\n    # s=(input().strip())\r\n    # hm,x=input().split()\r\n    b = list(map(int,input().strip().split()))\r\n    # s=list(input().strip())\r\n    # arr = primeList(b)\r\n    for i in range(n):\r\n        if(i&1):\r\n            b[i]*=-1\r\n    res = {'0'}\r\n    curr = 0;f=1\r\n    for i in b:\r\n        curr += i\r\n        if str(curr) in res:\r\n            print(\"YES\");f=0;break\r\n        res.add(str(curr))\r\n    if f:print(\"NO\")\r\n        \r\n    \r\n    \r\n            \r\n\r\n\r\n        \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# n,a,b,c = map(int,input().split())\r\n# a,b,c = sorted([a,b,c])[::-1]\r\n# ans = 0\r\n# for i in range(n//a+1):\r\n# \tfor j in range(n//b+1):\r\n# \t\tk = (n-i*a-j*b)//c\r\n# \t\tif i*a+b*j+k*c==n and k>=0:\r\n# \t\t\tans = max(ans,i+j+k)\r\n# \t\t\tbreak\r\n\r\n# print(ans)\r\n\r\n# =============== ANISH DE============\r\n# ---------------------------iye ha aam zindegi---------------------------------------------\r\n\r\nimport math\r\nimport random\r\nimport heapq, bisect\r\nimport sys\r\nfrom collections import deque, defaultdict\r\nfrom fractions import Fraction\r\nimport sys\r\nimport threading\r\nfrom collections import defaultdict\r\nmod = 10 ** 9 + 7\r\nmod1 = 998244353\r\n \r\n# ------------------------------warmup----------------------------\r\nimport os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n \r\nBUFSIZE = 8192\r\n \r\n \r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n \r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n \r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n \r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n \r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n \r\n \r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n \r\n \r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n \r\n \r\n# -------------------game starts now----------------------------------------------------import math\r\nclass TreeNode:\r\n    def __init__(self, k, v):\r\n        self.key = k\r\n        self.value = v\r\n        self.left = None\r\n        self.right = None\r\n        self.parent = None\r\n        self.height = 1\r\n        self.num_left = 1\r\n        self.num_total = 1\r\n \r\n \r\nclass AvlTree:\r\n \r\n    def __init__(self):\r\n        self._tree = None\r\n \r\n    def add(self, k, v):\r\n        if not self._tree:\r\n            self._tree = TreeNode(k, v)\r\n            return\r\n        node = self._add(k, v)\r\n        if node:\r\n            self._rebalance(node)\r\n \r\n    def _add(self, k, v):\r\n        node = self._tree\r\n        while node:\r\n            if k < node.key:\r\n                if node.left:\r\n                    node = node.left\r\n                else:\r\n                    node.left = TreeNode(k, v)\r\n                    node.left.parent = node\r\n                    return node.left\r\n            elif node.key < k:\r\n                if node.right:\r\n                    node = node.right\r\n                else:\r\n                    node.right = TreeNode(k, v)\r\n                    node.right.parent = node\r\n                    return node.right\r\n            else:\r\n                node.value = v\r\n                return\r\n \r\n    @staticmethod\r\n    def get_height(x):\r\n        return x.height if x else 0\r\n \r\n    @staticmethod\r\n    def get_num_total(x):\r\n        return x.num_total if x else 0\r\n \r\n    def _rebalance(self, node):\r\n \r\n        n = node\r\n        while n:\r\n            lh = self.get_height(n.left)\r\n            rh = self.get_height(n.right)\r\n            n.height = max(lh, rh) + 1\r\n            balance_factor = lh - rh\r\n            n.num_total = 1 + self.get_num_total(n.left) + self.get_num_total(n.right)\r\n            n.num_left = 1 + self.get_num_total(n.left)\r\n \r\n            if balance_factor > 1:\r\n                if self.get_height(n.left.left) < self.get_height(n.left.right):\r\n                    self._rotate_left(n.left)\r\n                self._rotate_right(n)\r\n            elif balance_factor < -1:\r\n                if self.get_height(n.right.right) < self.get_height(n.right.left):\r\n                    self._rotate_right(n.right)\r\n                self._rotate_left(n)\r\n            else:\r\n                n = n.parent\r\n \r\n    def _remove_one(self, node):\r\n        \"\"\"\r\n        Side effect!!! Changes node. Node should have exactly one child\r\n        \"\"\"\r\n        replacement = node.left or node.right\r\n        if node.parent:\r\n            if AvlTree._is_left(node):\r\n                node.parent.left = replacement\r\n            else:\r\n                node.parent.right = replacement\r\n            replacement.parent = node.parent\r\n            node.parent = None\r\n        else:\r\n            self._tree = replacement\r\n            replacement.parent = None\r\n        node.left = None\r\n        node.right = None\r\n        node.parent = None\r\n        self._rebalance(replacement)\r\n \r\n    def _remove_leaf(self, node):\r\n        if node.parent:\r\n            if AvlTree._is_left(node):\r\n                node.parent.left = None\r\n            else:\r\n                node.parent.right = None\r\n            self._rebalance(node.parent)\r\n        else:\r\n            self._tree = None\r\n        node.parent = None\r\n        node.left = None\r\n        node.right = None\r\n \r\n    def remove(self, k):\r\n        node = self._get_node(k)\r\n        if not node:\r\n            return\r\n        if AvlTree._is_leaf(node):\r\n            self._remove_leaf(node)\r\n            return\r\n        if node.left and node.right:\r\n            nxt = AvlTree._get_next(node)\r\n            node.key = nxt.key\r\n            node.value = nxt.value\r\n            if self._is_leaf(nxt):\r\n                self._remove_leaf(nxt)\r\n            else:\r\n                self._remove_one(nxt)\r\n            self._rebalance(node)\r\n        else:\r\n            self._remove_one(node)\r\n \r\n    def get(self, k):\r\n        node = self._get_node(k)\r\n        return node.value if node else -1\r\n \r\n    def _get_node(self, k):\r\n        if not self._tree:\r\n            return None\r\n        node = self._tree\r\n        while node:\r\n            if k < node.key:\r\n                node = node.left\r\n            elif node.key < k:\r\n                node = node.right\r\n            else:\r\n                return node\r\n        return None\r\n \r\n    def get_at(self, pos):\r\n        x = pos + 1\r\n        node = self._tree\r\n        while node:\r\n            if x < node.num_left:\r\n                node = node.left\r\n            elif node.num_left < x:\r\n                x -= node.num_left\r\n                node = node.right\r\n            else:\r\n                return (node.key, node.value)\r\n        raise IndexError(\"Out of ranges\")\r\n \r\n    @staticmethod\r\n    def _is_left(node):\r\n        return node.parent.left and node.parent.left == node\r\n \r\n    @staticmethod\r\n    def _is_leaf(node):\r\n        return node.left is None and node.right is None\r\n \r\n    def _rotate_right(self, node):\r\n        if not node.parent:\r\n            self._tree = node.left\r\n            node.left.parent = None\r\n        elif AvlTree._is_left(node):\r\n            node.parent.left = node.left\r\n            node.left.parent = node.parent\r\n        else:\r\n            node.parent.right = node.left\r\n            node.left.parent = node.parent\r\n        bk = node.left.right\r\n        node.left.right = node\r\n        node.parent = node.left\r\n        node.left = bk\r\n        if bk:\r\n            bk.parent = node\r\n        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1\r\n        node.num_total = 1 + self.get_num_total(node.left) + self.get_num_total(node.right)\r\n        node.num_left = 1 + self.get_num_total(node.left)\r\n \r\n    def _rotate_left(self, node):\r\n        if not node.parent:\r\n            self._tree = node.right\r\n            node.right.parent = None\r\n        elif AvlTree._is_left(node):\r\n            node.parent.left = node.right\r\n            node.right.parent = node.parent\r\n        else:\r\n            node.parent.right = node.right\r\n            node.right.parent = node.parent\r\n        bk = node.right.left\r\n        node.right.left = node\r\n        node.parent = node.right\r\n        node.right = bk\r\n        if bk:\r\n            bk.parent = node\r\n        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1\r\n        node.num_total = 1 + self.get_num_total(node.left) + self.get_num_total(node.right)\r\n        node.num_left = 1 + self.get_num_total(node.left)\r\n \r\n    @staticmethod\r\n    def _get_next(node):\r\n        if not node.right:\r\n            return node.parent\r\n        n = node.right\r\n        while n.left:\r\n            n = n.left\r\n        return n\r\n \r\n \r\n# -----------------------------------------------binary seacrh tree---------------------------------------\r\nclass SegmentTree1:\r\n    def __init__(self, data, default=0, func=lambda a, b: max(a,b)):\r\n        \"\"\"initialize the segment tree with data\"\"\"\r\n        self._default = default\r\n        self._func = func\r\n        self._len = len(data)\r\n        self._size = _size = 1 << (self._len - 1).bit_length()\r\n \r\n        self.data = [default] * (2 * _size)\r\n        self.data[_size:_size + self._len] = data\r\n        for i in reversed(range(_size)):\r\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\r\n \r\n    def __delitem__(self, idx):\r\n        self[idx] = self._default\r\n \r\n    def __getitem__(self, idx):\r\n        return self.data[idx + self._size]\r\n \r\n    def __setitem__(self, idx, value):\r\n        idx += self._size\r\n        self.data[idx] = value\r\n        idx >>= 1\r\n        while idx:\r\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\r\n            idx >>= 1\r\n \r\n    def __len__(self):\r\n        return self._len\r\n \r\n    def query(self, start, stop):\r\n        if start == stop:\r\n            return self.__getitem__(start)\r\n        stop += 1\r\n        start += self._size\r\n        stop += self._size\r\n \r\n        res = self._default\r\n        while start < stop:\r\n            if start & 1:\r\n                res = self._func(res, self.data[start])\r\n                start += 1\r\n            if stop & 1:\r\n                stop -= 1\r\n                res = self._func(res, self.data[stop])\r\n            start >>= 1\r\n            stop >>= 1\r\n        return res\r\n \r\n    def __repr__(self):\r\n        return \"SegmentTree({0})\".format(self.data)\r\n \r\n \r\n# -------------------game starts now----------------------------------------------------import math\r\nclass SegmentTree:\r\n    def __init__(self, data, default=10**9, func=lambda a, b: min(a,b)):\r\n        \"\"\"initialize the segment tree with data\"\"\"\r\n        self._default = default\r\n        self._func = func\r\n        self._len = len(data)\r\n        self._size = _size = 1 << (self._len - 1).bit_length()\r\n \r\n        self.data = [default] * (2 * _size)\r\n        self.data[_size:_size + self._len] = data\r\n        for i in reversed(range(_size)):\r\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\r\n \r\n    def __delitem__(self, idx):\r\n        self[idx] = self._default\r\n \r\n    def __getitem__(self, idx):\r\n        return self.data[idx + self._size]\r\n \r\n    def __setitem__(self, idx, value):\r\n        idx += self._size\r\n        self.data[idx] = value\r\n        idx >>= 1\r\n        while idx:\r\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\r\n            idx >>= 1\r\n \r\n    def __len__(self):\r\n        return self._len\r\n \r\n    def query(self, start, stop):\r\n        if start == stop:\r\n            return self.__getitem__(start)\r\n        stop += 1\r\n        start += self._size\r\n        stop += self._size\r\n \r\n        res = self._default\r\n        while start < stop:\r\n            if start & 1:\r\n                res = self._func(res, self.data[start])\r\n                start += 1\r\n            if stop & 1:\r\n                stop -= 1\r\n                res = self._func(res, self.data[stop])\r\n            start >>= 1\r\n            stop >>= 1\r\n        return res\r\n \r\n    def __repr__(self):\r\n        return \"SegmentTree({0})\".format(self.data)\r\n \r\n \r\n# -------------------------------iye ha chutiya zindegi-------------------------------------\r\nclass Factorial:\r\n    def __init__(self, MOD):\r\n        self.MOD = MOD\r\n        self.factorials = [1, 1]\r\n        self.invModulos = [0, 1]\r\n        self.invFactorial_ = [1, 1]\r\n \r\n    def calc(self, n):\r\n        if n <= -1:\r\n            print(\"Invalid argument to calculate n!\")\r\n            print(\"n must be non-negative value. But the argument was \" + str(n))\r\n            exit()\r\n        if n < len(self.factorials):\r\n            return self.factorials[n]\r\n        nextArr = [0] * (n + 1 - len(self.factorials))\r\n        initialI = len(self.factorials)\r\n        prev = self.factorials[-1]\r\n        m = self.MOD\r\n        for i in range(initialI, n + 1):\r\n            prev = nextArr[i - initialI] = prev * i % m\r\n        self.factorials += nextArr\r\n        return self.factorials[n]\r\n \r\n    def inv(self, n):\r\n        if n <= -1:\r\n            print(\"Invalid argument to calculate n^(-1)\")\r\n            print(\"n must be non-negative value. But the argument was \" + str(n))\r\n            exit()\r\n        p = self.MOD\r\n        pi = n % p\r\n        if pi < len(self.invModulos):\r\n            return self.invModulos[pi]\r\n        nextArr = [0] * (n + 1 - len(self.invModulos))\r\n        initialI = len(self.invModulos)\r\n        for i in range(initialI, min(p, n + 1)):\r\n            next = -self.invModulos[p % i] * (p // i) % p\r\n            self.invModulos.append(next)\r\n        return self.invModulos[pi]\r\n \r\n    def invFactorial(self, n):\r\n        if n <= -1:\r\n            print(\"Invalid argument to calculate (n^(-1))!\")\r\n            print(\"n must be non-negative value. But the argument was \" + str(n))\r\n            exit()\r\n        if n < len(self.invFactorial_):\r\n            return self.invFactorial_[n]\r\n        self.inv(n)  # To make sure already calculated n^-1\r\n        nextArr = [0] * (n + 1 - len(self.invFactorial_))\r\n        initialI = len(self.invFactorial_)\r\n        prev = self.invFactorial_[-1]\r\n        p = self.MOD\r\n        for i in range(initialI, n + 1):\r\n            prev = nextArr[i - initialI] = (prev * self.invModulos[i % p]) % p\r\n        self.invFactorial_ += nextArr\r\n        return self.invFactorial_[n]\r\n \r\n \r\nclass Combination:\r\n    def __init__(self, MOD):\r\n        self.MOD = MOD\r\n        self.factorial = Factorial(MOD)\r\n \r\n    def ncr(self, n, k):\r\n        if k < 0 or n < k:\r\n            return 0\r\n        k = min(k, n - k)\r\n        f = self.factorial\r\n        return f.calc(n) * f.invFactorial(max(n - k, k)) * f.invFactorial(min(k, n - k)) % self.MOD\r\n \r\n \r\n# --------------------------------------iye ha combinations ka zindegi---------------------------------\r\ndef powm(a, n, m):\r\n    if a == 1 or n == 0:\r\n        return 1\r\n    if n % 2 == 0:\r\n        s = powm(a, n // 2, m)\r\n        return s * s % m\r\n    else:\r\n        return a * powm(a, n - 1, m) % m\r\n \r\n \r\n# --------------------------------------iye ha power ka zindegi---------------------------------\r\ndef sort_list(list1, list2):\r\n    zipped_pairs = zip(list2, list1)\r\n \r\n    z = [x for _, x in sorted(zipped_pairs)]\r\n \r\n    return z\r\n \r\n \r\n# --------------------------------------------------product----------------------------------------\r\ndef product(l):\r\n    por = 1\r\n    for i in range(len(l)):\r\n        por *= l[i]\r\n    return por\r\n \r\n \r\n# --------------------------------------------------binary----------------------------------------\r\ndef binarySearchCount(arr, n, key):\r\n    left = 0\r\n    right = n - 1\r\n \r\n    count = 0\r\n \r\n    while (left <= right):\r\n        mid = int((right + left) / 2)\r\n \r\n        # Check if middle element is\r\n        # less than or equal to key\r\n        if (arr[mid] < key):\r\n            count = mid + 1\r\n            left = mid + 1\r\n \r\n        # If key is smaller, ignore right half\r\n        else:\r\n            right = mid - 1\r\n \r\n    return count\r\n \r\n \r\n# --------------------------------------------------binary----------------------------------------\r\ndef countdig(n):\r\n    c = 0\r\n    while (n > 0):\r\n        n //= 10\r\n        c += 1\r\n    return c\r\ndef binary(x, length):\r\n    y = bin(x)[2:]\r\n    return y if len(y) >= length else \"0\" * (length - len(y)) + y\r\n \r\ndef countGreater(arr, n, k):\r\n    l = 0\r\n    r = n - 1\r\n \r\n    # Stores the index of the left most element\r\n    # from the array which is greater than k\r\n    leftGreater = n\r\n \r\n    # Finds number of elements greater than k\r\n    while (l <= r):\r\n        m = int(l + (r - l) / 2)\r\n        if (arr[m] >= k):\r\n            leftGreater = m\r\n            r = m - 1\r\n \r\n        # If mid element is less than\r\n        # or equal to k update l\r\n        else:\r\n            l = m + 1\r\n \r\n    # Return the count of elements\r\n    # greater than k\r\n    return (n - leftGreater)\r\n \r\n \r\n# --------------------------------------------------binary------------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "rejectedCode": "n = int(input().strip())\r\nfor _ in range(n):\r\n    n=int(input().strip())\r\n    # blank=input().strip()\r\n    # a,b=map(int,input().strip().split())\r\n    # s=(input().strip())\r\n    # hm,x=input().split()\r\n    b = list(map(int,input().strip().split()))\r\n    # s=list(input().strip())\r\n    # arr = primeList(b)\r\n    for i in range(n):\r\n        if(i&1):\r\n            b[i]*=-1\r\n    res = {}\r\n    res[0]=0\r\n    curr = 0;f=1\r\n    for i in b:\r\n        curr += i\r\n        try:\r\n            val = res[curr]\r\n            print(\"YES\");f=0;break\r\n        except:pass\r\n        res[curr]=0\r\n    if f:print(\"NO\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240053185",
            "author": "InHng",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 9800,
            "submissionTime": 1704229080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240052633",
            "author": "InHng",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12500,
            "submissionTime": 1704228300
        },
        "acceptedCode": "'''\r\nAuthor       : InHng\r\nLastEditTime : 2024-01-03 09:58:35\r\n'''\r\nimport sys\r\ninput = sys.stdin.readline\r\nmod = 10 ** 9 + 7 # 998244353\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    s = input().strip()\r\n    ans = []\r\n    for i in range(n):\r\n        if s[i] == 'a' or s[i] == 'e':\r\n            if i > 2 and s[i - 2] in {'b', 'c', 'd'}:\r\n                ans[-1] += s[i - 2]\r\n            ans.append(s[i - 1:i + 1])\r\n    if s[-1] in {'b', 'c', 'd'}:\r\n        ans[-1] += s[-1]\r\n    print(\".\".join(ans))\r\n",
        "rejectedCode": "'''\r\nAuthor       : InHng\r\nLastEditTime : 2024-01-03 09:45:25\r\n'''\r\nimport sys\r\ninput = sys.stdin.readline\r\nmod = 10 ** 9 + 7 # 998244353\r\n\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    s = input().strip()\r\n    ans = \"\"\r\n    i = 0\r\n    while i < n:\r\n        if s[i] == 'b' or s[i] == 'c' or s[i] == 'd':\r\n            if i < n - 2 and (s[i + 2] == 'b' or s[i + 2] == 'c' or s[i + 2] == 'd'):\r\n                if i == n - 3 or i < n - 3 and (s[i + 3] == 'b' or s[i + 3] == 'c' or s[i + 3] == 'd'):\r\n                    ans += s[i:i + 3]\r\n                    i += 3\r\n                else:\r\n                    ans += s[i:i + 2]\r\n                    i += 2\r\n            else:\r\n                ans += s[i:i + 2]\r\n                i += 2\r\n        if i < n:\r\n            ans += \".\"\r\n    print(ans)\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240050075",
            "author": "Cubodix",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 530,
            "memory": 17900,
            "submissionTime": 1704223860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240050037",
            "author": "Cubodix",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704223800
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    input()\r\n    siz = sum(map(int, input().split(' ')))\r\n    if siz == 1:\r\n        print(\"YES\")\r\n        continue\r\n    a = 0\r\n    b = siz\r\n    while 1:\r\n        c = (a + b) // 2\r\n        if c * c == siz:\r\n            print(\"YES\")\r\n            break\r\n        elif c * c > siz:\r\n            b = c\r\n        else:\r\n            if b - a == 1:\r\n                print(\"NO\")\r\n                break\r\n            a = c",
        "rejectedCode": "for _ in range(int(input())):\r\n    input()\r\n    siz = sum(map(int, input().split(' ')))\r\n    if siz == 1:\r\n        print(\"YES\")\r\n        exit\r\n    a = 0\r\n    b = siz\r\n    while 1:\r\n        c = (a + b) // 2\r\n        if c * c == siz:\r\n           print(\"YES\")\r\n            exit\r\n        elif c * c > siz:\r\n            b = c\r\n        else:\r\n            if b - a == 1:\r\n                print(\"NO\")\r\n                exit\r\n            a = c",
        "failedTestCase": null,
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240047552",
            "author": "jeffylish_369",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 25800,
            "submissionTime": 1704218280
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240047470",
            "author": "jeffylish_369",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704218160
        },
        "acceptedCode": "#C. Can I Square?\r\ncases=int(input())\r\nfor k in range(0,cases):\r\n\tbuckets=int(input())\r\n\tlist = [int(item) for item in input().split()]\r\n\tsumma=sum(list)\r\n\troot=summa**(0.5)\r\n\tif root%1==0:\r\n\t\tprint('YES')\r\n\telse:\r\n\t\tprint('NO')\r\n",
        "rejectedCode": "cases=int(input())\r\nfor k in range(0,cases):",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240034610",
            "author": "Anshuman2003",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 1600,
            "submissionTime": 1704204000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240033682",
            "author": "Anshuman2003",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1700,
            "submissionTime": 1704203400
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = input()\r\n    c = []\r\n    k = \"\"\r\n    a = a.replace(\"ba\", \".ba\")\r\n    a = a.replace(\"ca\", \".ca\")\r\n    a = a.replace(\"da\", \".da\")\r\n    a = a.replace(\"be\", \".be\")\r\n    a = a.replace(\"ce\", \".ce\")\r\n    a = a.replace(\"de\", \".de\")\r\n    print(a[1:len(a)])\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = input()\r\n    k = \"\"\r\n    i = 0\r\n    while i < n-3:\r\n        if a[i+3] == \"e\" or a[i+3] == \"a\":\r\n            k += a[i:i+2]+\".\"\r\n            i += 2\r\n        else:\r\n            k += a[i:i+3]+\".\"\r\n            i += 3    \r\n    k += a[i:n]\r\n    print(k)\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "be.de.ba.ca.cad.ca.bab.cab.de.dac.ced.da.da.ceb.ba.ca.ca.ced.ba.ca.ce.ce.ce.da.ca.be.da.bad.ba.da.be.ceb.da.bab.ba.ba.ca.ca.ceb.ba.ba.bec.be.ba.bed.cac.be.ca.de.ded.de.beb.ba.dec.be.ba.dab.da.de.dad.ce.be.be.dab.cad.ce.ca.be.ba.ba.ba.de.da.ba.be.cab.de.de.de.ca.ca.ca.ca.bab.da.ce.ca.be.ca.dac.da.dad.cec.ce.ca.ca.ba.ca.dad.de.de.ce.ba.dec.ced.ba.bac.ce.ded.ce.de.deb.ba.cad.ce.ca.ca.de.be.da.ca.bed.deb.ba.ca.be.ce.be.de.be.ba.ba.ce.dad.bed.bac.ca.ba.be.dac.ca.ca.ca.bed.be.be.ce.da.dad.deb.bac.dac.da.ba.ce.de...",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240034200",
            "author": "gritty_learner",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704203760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240034095",
            "author": "gritty_learner",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704203640
        },
        "acceptedCode": "t = input()\n\nfor i in range(int(t)):\n    \n        delta = list(map(int,input().split()))\n        # print(delta[0])\n        a = int(delta[0])\n\n        b = int(delta[1])\n        c = int(delta[2])\n\n        if a==b:\n            print(c)\n        elif b==c:\n            print(a)\n        else:\n            print(b)\n\n",
        "rejectedCode": "t = input()\n\nfor i in range(int(t)):\n    \n        delta = list(map(int,input().split()))\n        print(delta[0])\n        a = int(delta[0])\n\n        b = int(delta[1])\n        c = int(delta[2])\n\n        if a==b:\n            print(c)\n        elif b==c:\n            print(a)\n        else:\n            print(b)\n\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n1\r\n4\r\n3\r\n5\r\n6\r\n7\r\n7\r\n9\r\n0\r\n3\r\n6\r\n2\r\n8\r\n5\r\n5\r\n7\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 2nd numbers differ - expected: '3', found: '1'\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240038727",
            "author": "MistaFlash",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704207120
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "240038472",
            "author": "MistaFlash",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704206880
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\n \r\nM = int(1e9) + 7     \r\n \r\ndef solve():\r\n    grid = [input().strip('\\n') for _ in range(3)]\r\n    for row in grid:\r\n        for ch in 'ABC':\r\n            if ch not in row:\r\n                return ch\r\n \r\nfor _ in range(int(input())):\r\n    print(solve())",
        "rejectedCode": "import sys\r\ninput = sys.stdin.readline\r\n \r\nM = int(1e9) + 7     \r\n \r\ndef solve():\r\n    for i in range(3):\r\n        row = input().strip('\\n')\r\n        for ch in 'ABC':\r\n            if ch not in row:\r\n                return ch\r\n \r\nfor _ in range(int(input())):\r\n    print(solve())",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nNone\r\nB\r\nC\r\nA\r\nNone\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nNone\r\nC\r\nA\r\nB\r\nNone\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nNone\r\nB\r\nA\r\nC\r\nNone\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nNone\r\nC\r\nB\r\nA\r\nNone\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nNone\r\nA\r\nC\r\nB\r\nNone\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nNone\r\nC\r\nB\r\nA\r\nNone\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nNone\r\nA\r\nB\r\nC\r\nNone\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nNone\r\nC\r\nA\r\nB\r\nNone\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nNone\r\nA\r\nB\r\nC\r\nNone\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nNone\r\nB\r\nC\r\nA\r\nNone\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer 4th words differ - expected: 'B', found: 'None'\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239741161",
            "author": "ladderwarrior",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 28400,
            "submissionTime": 1703964000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239741125",
            "author": "ladderwarrior",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 33300,
            "submissionTime": 1703963940
        },
        "acceptedCode": "from collections import defaultdict\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    m = set()\n    m.add(0)\n    for i in range(n):\n        a[i] *= -1 if i%2 == 0 else 1\n        s += a[i]\n        m.add(s)\n    \n    print('YES' if len(m) <= n else 'NO')\n\nfor _ in range(int(input())):\n    solve()\n",
        "rejectedCode": "from collections import defaultdict\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    m = defaultdict(int)\n    m[0] = 1\n    for i in range(n):\n        a[i] *= -1 if i%2 == 0 else 1\n        s += a[i]\n        m[s] = 1\n    \n    print('YES' if len(m) <= n else 'NO')\n\nfor _ in range(int(input())):\n    solve()\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240026697",
            "author": "SchieberSpieler",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 217,
            "memory": 33500,
            "submissionTime": 1704199680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240026188",
            "author": "SchieberSpieler",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 32200,
            "submissionTime": 1704199380
        },
        "acceptedCode": "def solve(numbers):\r\n    m = {str(0): 1}\r\n    sum = 0\r\n\r\n    for i in range(len(numbers)):\r\n        sum += numbers[i] if i % 2 == 0 else numbers[i] * -1\r\n        string = str(sum)\r\n        if string in m and m[string] > 0:\r\n            return 'YES'\r\n        m[string] = 1\r\n    return 'NO'\r\n\r\n\r\ntest_cases = input()\r\nfor i in range(int(test_cases)):\r\n    length = input()\r\n    numbers = list(map(int, input().split()))\r\n    print(solve(numbers))\r\n",
        "rejectedCode": "def solve(numbers):\r\n    m = {0: 1}\r\n    sum = 0\r\n\r\n    for i in range(len(numbers)):\r\n        sum += numbers[i] if i % 2 == 0 else numbers[i] * -1\r\n        if sum in m and m[sum] > 0:\r\n            return 'YES'\r\n        m[sum] = 1\r\n    return 'NO'\r\n\r\n\r\ntest_cases = input()\r\nfor i in range(int(test_cases)):\r\n    length = input()\r\n    numbers = list(map(int, input().split()))\r\n    print(solve(numbers))\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240028099",
            "author": "_gusev_",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 326,
            "memory": 28500,
            "submissionTime": 1704200340
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240027885",
            "author": "_gusev_",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 31900,
            "submissionTime": 1704200220
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = [int(num) for num in input().split(' ')]\r\n    s = [0]\r\n    sig_sum = 0\r\n    for j in range(n):\r\n        if j % 2 == 0:\r\n            sig_sum += a[j]\r\n        else:\r\n            sig_sum -= a[j]\r\n        s.append(sig_sum)\r\n    s.sort()\r\n    ans = False\r\n    for j in range(1, n + 1):\r\n        if s[j] == s[j - 1]:\r\n            ans = True\r\n            break\r\n    if ans:\r\n        print('Yes')\r\n    else:\r\n        print('No')\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    a = [int(num) for num in input().split(' ')]\r\n    s = [0]\r\n    sig_sum = 0\r\n    for j in range(n):\r\n        if j % 2 == 0:\r\n            sig_sum += a[j]\r\n        else:\r\n            sig_sum -= a[j]\r\n        s.append(sig_sum)\r\n    passed = set()\r\n    ans = False\r\n    for j in range(n + 1):\r\n        if s[j] in passed:\r\n            ans = True\r\n            break\r\n        passed.add(s[j])\r\n    if ans:\r\n        print('Yes')\r\n    else:\r\n        print('No')\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 13,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240020672",
            "author": "Kilo_5723",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 374,
            "memory": 30800,
            "submissionTime": 1704196620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "240020430",
            "author": "Kilo_5723",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 35300,
            "submissionTime": 1704196500
        },
        "acceptedCode": "tt = int(input())\r\nfor ii in range(tt):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = [0]\r\n    for i in range(len(a)):\r\n        if i % 2 == 0:\r\n            s.append(s[-1] + a[i])\r\n        else:\r\n            s.append(s[-1] - a[i])\r\n    s.sort()\r\n    flg = False\r\n    for i in range(1, len(s)):\r\n        flg = flg or s[i] == s[i - 1]\r\n    print(\"YES\" if flg else \"NO\")\r\n",
        "rejectedCode": "tt = int(input())\r\nfor ii in range(tt):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    s = [0]\r\n    for i in range(len(a)):\r\n        if i % 2 == 0:\r\n            s.append(s[-1] + a[i])\r\n        else:\r\n            s.append(s[-1] - a[i])\r\n    # print(s)\r\n    st = set()\r\n    flg = False\r\n    for v in s:\r\n        if v in st:\r\n            flg = True\r\n        st.add(v)\r\n    print(\"YES\" if flg else \"NO\")\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "240020594",
            "author": "maximxls",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 4040,
            "memory": 58300,
            "submissionTime": 1704196560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239996516",
            "author": "maximxls",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 39600,
            "submissionTime": 1704185100
        },
        "acceptedCode": "from sys import setrecursionlimit\r\nfrom dataclasses import dataclass\r\nfrom math import inf, gcd, lcm, ceil\r\nfrom functools import lru_cache\r\nfrom random import random\r\n\r\n\r\n# setrecursionlimit(400010)\r\n\r\n\r\nMOD = 998244353\r\n\r\n\r\n@dataclass\r\nclass Pivo:\r\n    key: int\r\n    pri: float\r\n    cnt: int = 1\r\n    left: \"Pivo\" = None\r\n    right: \"Pivo\" = None\r\n\r\n    def update_cnt(self):\r\n        self.cnt = (\r\n            (0 if self.left is None else self.left.cnt)\r\n            + (0 if self.right is None else self.right.cnt)\r\n            + 1\r\n        )\r\n\r\n    def split(self, key):\r\n        if self.key > key:\r\n            if self.left is None:\r\n                return None, self\r\n            else:\r\n                _l, _r = self.left.split(key)\r\n                self.left = _r\r\n                self.update_cnt()\r\n                return _l, self\r\n        else:\r\n            if self.right is None:\r\n                return self, None\r\n            else:\r\n                _l, _r = self.right.split(key)\r\n                self.right = _l\r\n                self.update_cnt()\r\n                return self, _r\r\n\r\n    def merge(self, other: \"Pivo\"):\r\n        if other is None:\r\n            return self\r\n        elif self.pri > other.pri:\r\n            if self.right is None:\r\n                self.right = other\r\n            else:\r\n                self.right = self.right.merge(other)\r\n            self.update_cnt()\r\n            return self\r\n        else:\r\n            if other.left is None:\r\n                other.left = self\r\n            else:\r\n                other.left = self.merge(other.left)\r\n            other.update_cnt()\r\n            return other\r\n\r\n    def insert(self, key):\r\n        pri = random()\r\n        new_node = Pivo(key, pri)\r\n        if self is None:\r\n            return new_node\r\n        else:\r\n            _l, _r = self.split(key)\r\n            if _l is None:\r\n                _l = new_node\r\n            else:\r\n                _l = _l.merge(new_node)\r\n            if _r is not None:\r\n                _l = _l.merge(_r)\r\n            return _l\r\n\r\n    def count_higher(self, key):\r\n        if self.key > key:\r\n            ans = 1\r\n            if self.right is not None:\r\n                ans += self.right.cnt\r\n            if self.left is not None:\r\n                ans += self.left.count_higher(key)\r\n            return ans\r\n        else:\r\n            ans = 0\r\n            if self.right is not None:\r\n                ans += self.right.count_higher(key)\r\n            return ans\r\n\r\n    def __str__(self) -> str:\r\n        return f\"Pivo({self.key}, {self.left}, {self.right})\"\r\n\r\n    __repr__ = __str__\r\n\r\n\r\ndef solve():\r\n    (n,) = list(map(int, input().split()))\r\n    a = []\r\n    b = []\r\n\r\n    for _ in range(n):\r\n        x, y = list(map(int, input().split()))\r\n        a.append(x)\r\n        b.append(y)\r\n\r\n    srtd_idx = sorted(range(n), key=lambda i: a[i])\r\n\r\n    pivo = Pivo.insert(None, b[srtd_idx[0]])\r\n\r\n    ans = 0\r\n\r\n    for i in srtd_idx[1:]:\r\n        ans += pivo.count_higher(b[i])\r\n        pivo = pivo.insert(b[i])\r\n\r\n    print(ans)\r\n\r\n\r\nmulti = 1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    t = 1 if not multi else int(input())\r\n\r\n    for _ in range(t):\r\n        solve()\r\n",
        "rejectedCode": "from sys import setrecursionlimit\r\nfrom dataclasses import dataclass\r\nfrom math import inf, gcd, lcm, ceil\r\nfrom functools import lru_cache\r\nfrom random import random\r\n\r\n\r\n# setrecursionlimit(400010)\r\n\r\n\r\nMOD = 998244353\r\n\r\n\r\ndef solve():\r\n    (n,) = list(map(int, input().split()))\r\n    a = list(map(int, input().split()))\r\n\r\n    for i in range(n):\r\n        if i % 2 == 1:\r\n            a[i] = -a[i]\r\n\r\n    a_prefix = [0]\r\n\r\n    for x in a:\r\n        a_prefix.append(a_prefix[-1] + x)\r\n\r\n    if len(set(a_prefix)) == len(a_prefix):\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")\r\n\r\n\r\nmulti = 1\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    t = 1 if not multi else int(input())\r\n\r\n    for _ in range(t):\r\n        solve()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 14,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240016042",
            "author": "maha_",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704194460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240015779",
            "author": "maha_",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704194340
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    a,b,c = map(int,input().split())\r\n    print(a^b^c)",
        "rejectedCode": "for _ in range(int(input()):\r\n    a,b,c = map(int,input().split())\r\n    print(a^b^c)",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "240014344",
            "author": "kollabhargavre1",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 6800,
            "submissionTime": 1704193620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239917139",
            "author": "kollabhargavre1",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 3,
            "runTime": 187,
            "memory": 2600,
            "submissionTime": 1704113700
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    s = list(input())\r\n    for i in range(len(s)):\r\n        if s[i] in \"ae\":\r\n            s[i-1] = \".\"+s[i-1]\r\n    s[0] = s[0].lstrip(\".\")\r\n    print(\"\".join(s))\r\n",
        "rejectedCode": "t = int(input())\r\nvowels = \"ae\"\r\nconsonants = \"bcd\"\r\ndef check_valid(order):\r\n    if len(order)==2:\r\n        if order[0] in consonants and order[1] in vowels:\r\n            return True\r\n        return False\r\n    elif len(order)==3:\r\n        if order[0] in consonants and order[1] in vowels and order[2] in consonants:\r\n            return True\r\n        return False\r\n    return False\r\ndef helper(i,result,prev):\r\n    if (i,result,prev) in mapp:\r\n        return mapp[(i,result,prev)]\r\n    answer = None\r\n    if i==len(string):\r\n        if prev and len(prev)>=2 and check_valid(prev):\r\n            result+=\".\"+prev\r\n            result = result.lstrip(\".\")\r\n            answer = answer or result\r\n        elif not prev:\r\n            result = result.lstrip(\".\")\r\n            answer = answer or result\r\n        mapp[(i,result,prev)] = answer\r\n        return answer\r\n    prev+=string[i]\r\n    if len(prev)==1:\r\n        answer = answer or helper(i+1,result, prev)\r\n    elif len(prev)==2 and check_valid(prev):\r\n        answer = answer or helper(i+1,result+\".\"+prev,\"\") or helper(i+1,result, prev)\r\n    elif len(prev)==3 and check_valid(prev):\r\n        answer = answer or helper(i+1,result+\".\"+prev,\"\")\r\n    mapp[(i, result, prev)] = answer\r\n    return answer\r\n        \r\n            \r\n            \r\n            \r\n    \r\n    \r\nfor i in range(t):\r\n    n = int(input())\r\n    string = list(input())\r\n    mapp = {}\r\n    print(helper(0,\"\",\"\"))\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240004171",
            "author": "Advay05",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704188940
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "240002693",
            "author": "Advay05",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1704188160
        },
        "acceptedCode": "from sys import stdin\r\ndef input(): return stdin.readline()\r\ndef solve():\r\n     # takes an integer\r\n    Array = map(int, input().split()) # takes a list of integers\r\n    list1=list(Array)\r\n    if list1[0]==list1[1]:\r\n        print(list1[2])\r\n    elif list1[1]==list1[2]:\r\n        print(list1[0])\r\n    else:\r\n        print(list1[1])\r\nfor _ in range(int(input())):\r\n    solve()",
        "rejectedCode": "from sys import stdin\r\ndef input(): return stdin.readline()\r\n\r\ndef solve():\r\n    # takes an integer\r\n    Array = map(int, input().split()) # takes a list of integers\r\n    list1=list(Array)# write your code here\r\n    a=list1[0],b=list1[1],c=list1[2]\r\n    if a==b:\r\n        print(c)\r\n    elif b==c:\r\n        print(a)\r\n    else:\r\n        print(b)\r\n        \r\n\r\nfor _ in range(int(input())):\r\n    solve()",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "240004032",
            "author": "sky_coder_",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 638,
            "memory": 17900,
            "submissionTime": 1704188880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239806489",
            "author": "sky_coder_",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704017160
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = input()\r\n    s = sum(list(map(int, input().split())))\r\n    if int(s**(1/2)) == s**(1/2):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\n\r\nvoid solve() {\r\n  int X , Y , Z;\r\n  cin >> X >> Y >> Z;\r\n  if(X == Y){\r\n      std::cout << Z << std::endl;\r\n  }else if(Y == Z){\r\n      std::cout << X << std::endl;\r\n  }else{\r\n      std::cout << Y << std::endl;\r\n  }\r\n}\r\n\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(NULL), cout.tie(NULL);\r\n  ll T = 1;\r\n  cin >> T;\r\n  while (T--) {\r\n    solve();\r\n  }\r\n  return 0;\r\n}",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239996438",
            "author": "srikanth404",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 28100,
            "submissionTime": 1704185100
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239996375",
            "author": "srikanth404",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33400,
            "submissionTime": 1704185040
        },
        "acceptedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    sum_val = 0\r\n    visited = {0}\r\n    ans = False\r\n    \r\n    for i in range(n):\r\n        if i % 2 != 0:\r\n            a[i] = -a[i]\r\n        \r\n        sum_val += a[i]\r\n        \r\n        if sum_val in visited:\r\n            ans = True\r\n            break\r\n        \r\n        visited.add(sum_val)\r\n    \r\n    if ans:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "t = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    mpl = {0: 1}\r\n    sum_val = 0\r\n    ans = 0\r\n    \r\n    for i in range(n):\r\n        if i % 2 != 0:\r\n            a[i] = -a[i]\r\n        \r\n        sum_val += a[i]\r\n        mpl[sum_val] = mpl.get(sum_val, 0) + 1\r\n        \r\n        if mpl[sum_val] >= 2:\r\n            ans = 1\r\n            break\r\n    \r\n    if ans == 1:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239997445",
            "author": "akshats063",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 420,
            "memory": 30100,
            "submissionTime": 1704185580
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239997100",
            "author": "akshats063",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704185400
        },
        "acceptedCode": "from math import sqrt\r\nimport sys\r\ndef ans(arr):\r\n    j=len(arr)\r\n    sum=0\r\n    for i in range(j):\r\n        sum=sum+arr[i]\r\n    temp=sum\r\n    an=int(sqrt(temp))\r\n    #print(an)\r\n    if(an*an==temp):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n        \r\nif __name__ == \"__main__\":\r\n    t=int(input())\r\n    while(t!=0):\r\n        t=t-1\r\n        #num=int(input())\r\n        n = int(input())\r\n        arr = list(map(int, input().split()))[:n]\r\n        ans(arr)",
        "rejectedCode": "from math import sqrt\r\nimport sys\r\ndef ans(arr):\r\n    j=len(arr)\r\n    sum=0\r\n    for i in range(j):\r\n        sum=sum+arr[i]\r\n    temp=sum\r\n    an=int(sqrt(temp))\r\n    print(an)\r\n    if(an*an==temp):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n        \r\nif __name__ == \"__main__\":\r\n    t=int(input())\r\n    while(t!=0):\r\n        t=t-1\r\n        #num=int(input())\r\n        n = int(input())\r\n        arr = list(map(int, input().split()))[:n]\r\n        ans(arr)",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "3\r\nYES\r\n4\r\nYES\r\n5\r\nNO\r\n6\r\nYES\r\n2\r\nNO\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong output format YES or NO expected, but 3 found [1st token]\r\n"
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239972578",
            "author": "Beerus789",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 28300,
            "submissionTime": 1704171600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239971808",
            "author": "Beerus789",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 29000,
            "submissionTime": 1704171120
        },
        "acceptedCode": "def solve():\r\n    n = int(input())\r\n    a = list(map(int, input().split()))\r\n    a = [i*(1 if ind&1 else -1) for ind,i in enumerate(a)]\r\n    su = 0\r\n    dupli = {0}\r\n    for i in a:\r\n        su += i\r\n        if su in dupli:return \"yes\"\r\n        dupli.add(su)\r\n    return \"no\"\r\nfor _ in range(int(input())):\r\n    print(solve())",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    list1=[int(x) for x in input().split()]\r\n\r\n    hash_map={0:1}\r\n    sum1=0\r\n    flag=1\r\n    temp=0\r\n\r\n    for val in list1:\r\n        sum1+=val*flag\r\n        if hash_map.get(sum1)!=None:\r\n            temp=1\r\n            break\r\n        else:\r\n            hash_map[sum1]=1\r\n        flag=flag*-1\r\n        \r\n    if temp:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239969888",
            "author": "yaroslavyv",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 28300,
            "submissionTime": 1704169860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239969811",
            "author": "yaroslavyv",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33700,
            "submissionTime": 1704169800
        },
        "acceptedCode": "import sys\r\ninput = sys.stdin.readline\r\n\r\ndef task_e(t_par: int):\r\n    for _ in range(t_par):\r\n        _ = input()\r\n        arr = list(map(int, input().split()))\r\n\r\n        pref_uniq = {0}\r\n        pref_sum = 0\r\n        for i, value in enumerate(arr):\r\n            if i&1:\r\n                value = -value\r\n            pref_sum += value\r\n            if pref_sum in pref_uniq:\r\n                print(\"YES\")\r\n                break\r\n            pref_uniq.add(pref_sum)\r\n        else:\r\n            print(\"NO\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    t = int(input())\r\n    task_e(t)\r\n",
        "rejectedCode": "import sys\r\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\r\nI = lambda: int(input())\r\nR = lambda: list(map(int, input().split()))\r\nP = lambda x, y='\\n': print(x, end=y)\r\n \r\n \r\nfor _ in range(I()):\r\n    n=I()\r\n    a=R()\r\n    # for i in range(1,n,2):\r\n    #     a[i]=-a[i]\r\n    b=[0]\r\n    for i in range(n):\r\n        b+=[b[i]+a[i]*(-1)**i]\r\n    if len(set(b))<=n:\r\n        P(\"YES\")\r\n    else:\r\n        P('NO')",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239970742",
            "author": "xyf-0209",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 452,
            "memory": 161000,
            "submissionTime": 1704170460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239970256",
            "author": "xyf-0209",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 373,
            "memory": 139300,
            "submissionTime": 1704170100
        },
        "acceptedCode": "\r\nfrom bisect import bisect_left\r\nimport sys\r\nfrom collections import defaultdict\r\nfrom math import log, ceil\r\n\r\n\r\nsys.setrecursionlimit(100000)\r\nfrom functools import lru_cache\r\n\r\nfrom math import inf, sqrt\r\nfrom heapq import heapify, heappop, heappush\r\nfrom typing import Union\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        a = list(map(int, input().split()))\r\n\r\n        su = sum(a)\r\n        t = int(sqrt(su))\r\n        print('YES' if t * t == su else 'NO')\r\n\r\nif __name__ == '__main__':\r\n    main()",
        "rejectedCode": "\r\nfrom bisect import bisect_left\r\nimport sys\r\nfrom collections import defaultdict\r\nfrom math import log, ceil\r\n\r\n\r\nsys.setrecursionlimit(100000)\r\nfrom functools import lru_cache\r\n\r\nfrom math import inf, sqrt\r\nfrom heapq import heapify, heappop, heappush\r\nfrom typing import Union\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        a = list(map(int, input().split()))\r\n\r\n        su = sum(a)\r\n        t = sqrt(su)\r\n\r\n        print('YES'if t * t == su else 'NO')\r\n\r\nif __name__ == '__main__':\r\n    main()",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 21,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239987392",
            "author": "Devi_prasanna",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 265,
            "memory": 25800,
            "submissionTime": 1704180360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239958779",
            "author": "Devi_prasanna",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 1500,
            "submissionTime": 1704162540
        },
        "acceptedCode": "n=int(input())\r\nwhile(n):\r\n    p=int(input())\r\n    l=list(map(int,input().split()))\r\n    s=sum(l)\r\n    l=1\r\n    r=s\r\n    flag=0\r\n    while(l<=r):\r\n        m=(l+r)//2\r\n        if(m*m)==s:\r\n            flag=1\r\n        if(m*m)<s:\r\n            l=m+1\r\n        else:\r\n            r=m-1\r\n    if(flag==1):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n        \r\n        \r\n    n=n-1",
        "rejectedCode": "n=int(input())\r\nwhile(n):\r\n    p=int(input())\r\n    l=list(map(int,input().split()))\r\n    s=sum(l)\r\n    flag=0\r\n    for i in range(1,int(s**(1/2))+1):\r\n        if ((i*i)==s):\r\n            flag=1\r\n            break\r\n    if(flag==1):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    n=n-1",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239982799",
            "author": "AAE",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1684,
            "memory": 61600,
            "submissionTime": 1704177840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239981530",
            "author": "AAE",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 61,
            "memory": 2800,
            "submissionTime": 1704177120
        },
        "acceptedCode": "import io, os\r\nfrom bisect import bisect_left as lower_bound\r\nfrom bisect import bisect_right as upper_bound\r\n\r\n\r\nclass FenwickTree:\r\n    def __init__(self, x):\r\n        bit = self.bit = list(x)\r\n        size = self.size = len(bit)\r\n        for i in range(size):\r\n            j = i | (i + 1)\r\n            if j < size:\r\n                bit[j] += bit[i]\r\n\r\n    def update(self, idx, x):\r\n        \"\"\"updates bit[idx] += x\"\"\"\r\n        while idx < self.size:\r\n            self.bit[idx] += x\r\n            idx |= idx + 1\r\n\r\n    def __call__(self, end):\r\n        \"\"\"calc sum(bit[:end])\"\"\"\r\n        x = 0\r\n        while end:\r\n            x += self.bit[end - 1]\r\n            end &= end - 1\r\n        return x\r\n\r\n    def find_kth(self, k):\r\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\r\n        idx = -1\r\n        for d in reversed(range(self.size.bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < self.size and self.bit[right_idx] <= k:\r\n                idx = right_idx\r\n                k -= self.bit[idx]\r\n        return idx + 1, k\r\n\r\n\r\nclass SortedList:\r\n    block_size = 700\r\n\r\n    def __init__(self, iterable=()):\r\n        self.macro = []\r\n        self.micros = [[]]\r\n        self.micro_size = [0]\r\n        self.fenwick = FenwickTree([0])\r\n        self.size = 0\r\n        for item in iterable:\r\n            self.insert(item)\r\n\r\n    def insert(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        j = upper_bound(self.micros[i], x)\r\n        self.micros[i].insert(j, x)\r\n        self.size += 1\r\n        self.micro_size[i] += 1\r\n        self.fenwick.update(i, 1)\r\n        if len(self.micros[i]) >= self.block_size:\r\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\r\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\r\n            self.fenwick = FenwickTree(self.micro_size)\r\n            self.macro.insert(i, self.micros[i + 1][0])\r\n\r\n    def pop(self, k=-1):\r\n        i, j = self._find_kth(k)\r\n        self.size -= 1\r\n        self.micro_size[i] -= 1\r\n        self.fenwick.update(i, -1)\r\n        return self.micros[i].pop(j)\r\n\r\n    def __getitem__(self, k):\r\n        i, j = self._find_kth(k)\r\n        return self.micros[i][j]\r\n\r\n    def count(self, x):\r\n        return self.upper_bound(x) - self.lower_bound(x)\r\n\r\n    def __contains__(self, x):\r\n        return self.count(x) > 0\r\n\r\n    def lower_bound(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\r\n\r\n    def upper_bound(self, x):\r\n        i = upper_bound(self.macro, x)\r\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\r\n\r\n    def _find_kth(self, k):\r\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\r\n\r\n    def __len__(self):\r\n        return self.size\r\n\r\n    def __iter__(self):\r\n        return (x for micro in self.micros for x in micro)\r\n\r\n    def __repr__(self):\r\n        return str(list(self))\r\n\r\n\r\ndef solve(ll):\r\n    n = len(ll)\r\n    if n == 1:\r\n        return 0\r\n    cnt = 0\r\n    l = SortedList([(ll[i][0], ll[i][1]) for i in range(n)])\r\n    r = [(ll[i][1], ll[i][0]) for i in range(n)]\r\n    r.sort()\r\n    n1 = n\r\n    for i in range(n-1, -1, -1):\r\n        i1 = l.lower_bound((r[i][1], r[i][0]))\r\n        l.pop(i1) #remove((r[i][1], r[i][0]))\r\n        cnt += min(i, n1 - i1 - 1)\r\n        n1 -= 1\r\n    return cnt\r\n\r\n\r\ninput = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    l = []\r\n    for i in range(n):\r\n        ab = [int(x) for x in input().split()]\r\n        l.append(ab)\r\n    print(solve(l))",
        "rejectedCode": "import io, os\r\nfrom sortedcontainers import SortedList\r\n\r\n\r\ndef solve(ll):\r\n    n = len(ll)\r\n    if n == 1:\r\n        return 0\r\n    cnt = 0\r\n    l = SortedList([(ll[i][0], ll[i][1]) for i in range(n)])\r\n    r = [(ll[i][1], ll[i][0]) for i in range(n)]\r\n    r.sort()\r\n    n1 = n\r\n    for i in range(n-1, -1, -1):\r\n        i1 = l.bisect_left((r[i][1], r[i][0]))\r\n        l.remove((r[i][1], r[i][0]))\r\n        cnt += min(i, n1 - i1 - 1)\r\n        n1 -= 1\r\n    return cnt\r\n\r\n\r\n#input = io.BytesIO(os.read(0,os.fstat(0).st_size)).readline\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    l = []\r\n    for i in range(n):\r\n        ab = [int(x) for x in input().split()]\r\n        l.append(ab)\r\n    print(solve(l))",
        "failedTestCase": {
            "input": "5\r\n2\r\n2 3\r\n1 4\r\n6\r\n2 6\r\n3 9\r\n4 5\r\n1 8\r\n7 10\r\n-2 100\r\n4\r\n-10 10\r\n-5 5\r\n-12 12\r\n-13 13\r\n5\r\n-4 9\r\n-2 5\r\n3 4\r\n6 7\r\n8 10\r\n4\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239953753",
            "author": "13alE9.11",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 7500,
            "submissionTime": 1704158700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239952348",
            "author": "13alE9.11",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704157560
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    k=int(input())\r\n    s=input()\r\n    a=[]\r\n    l=''\r\n \r\n    for i in range(k-1,-1,-1):\r\n        a.append(s[i])\r\n        if not (s[i]=='a' or s[i]=='e') and (l=='a' or l=='e'):\r\n            a.append('.')\r\n        l=s[i]\r\n \r\n    a.pop()\r\n    a.reverse()\r\n    print(''.join(a))",
        "rejectedCode": "for _ in range(int(input())):\r\n    ls = list(map(str,input().split()))\r\n    ans = sorted([\"A\",\"B\",'C']*3)\r\n    str_=\"\"\r\n    indedx = 0\r\n    for i in ls:\r\n        str_+i\r\n    str_=sorted(list(str_))\r\n    for i in range(len(str_)):\r\n        if str_[i] == \"?\":\r\n            index = i\r\n\r\n    print(ans[index])\r\n\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239988550",
            "author": "ashutoshuniyal21",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 29400,
            "submissionTime": 1704180960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239988454",
            "author": "ashutoshuniyal21",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 31600,
            "submissionTime": 1704180900
        },
        "acceptedCode": "from heapq import heapify, heappush, heappop\nfrom collections import Counter, defaultdict, deque\nfrom queue import PriorityQueue\nfrom itertools import combinations, product, permutations\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache\nfrom sys import stdin, stdout # for input /output\nimport copy\nimport math\nimport array as arr\nimport time\n\n#NitinMani@21\n# import sys\n# sys.setrecursionlimit(1000000)\n\n\n\n####################\n# stdin = open(\"testcase.txt\")\n# def input():\n\t# \treturn stdin.readline().strip()\n\n#####################################################################\n\n\n\nclass FastIO:\n\n\t@classmethod\n\tdef input(cls):\n\t\tfrom sys import stdin\n\t\tx = stdin.buffer.readline().decode().strip()\n\t\treturn x\n\n\t@classmethod\n\tdef integer_list(cls):\n\t\treturn list(map(int, cls.input().split()))\n\n\t@classmethod\n\tdef print(cls, s = \"\", end = \"\\n\"):\n\t\tfrom sys import stdout\n\t\tstdout.write(str(s) + end)\n\n\t@classmethod\n\tdef flush(cls):\n\t\tfrom sys import stdout\n\t\tstdout.flush()\n\n\n####################################################################\n\nclass SegmentTree:\n\tdef __init__(self, data, default=0, func=lambda a, b: a + b):\n\t\t\"\"\"initialize the segment tree with data\"\"\"\n\t\t\"\"\" initial default value for each node \"\"\"\n\t\t\"\"\" func which you want to apply to range \"\"\"\n\t\tself._default = default\n\t\tself._func = func\n\t\tself._len = len(data)\n\t\tself._size = _size = 1 << (self._len - 1).bit_length()\n \n\t\tself.data = [default] * (2 * _size)\n\t\tself.data[_size:_size + self._len] = data\n\t\tfor i in reversed(range(_size)):\n\t\t\tself.data[i] = func(self.data[2*i], self.data[2*i + 1])\n \n\tdef __delitem__(self, idx):\n\t\t\"\"\" delete item set item value to its default \"\"\"\n\t\tself[idx] = self._default\n \n\tdef __getitem__(self, idx):\n\t\t\"\"\" geting item by inx \"\"\"\n\t\treturn self.data[idx + self._size]\n \n\tdef __setitem__(self, idx, value):\n\t\t\"\"\" changing seting value to given index\"\"\"\n\t\t\"\"\" apply function to range \"\"\"\n\t\tidx += self._size\n\t\tself.data[idx] = value\n\t\tidx >>= 1\n\t\twhile idx:\n\t\t\tself.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n\t\t\tidx >>= 1\n\t \n\tdef __len__(self):\n\t\treturn self._len\n \n\tdef query(self, start, stop):\n\t\t\"\"\"func of data[start, stop)\"\"\"\n\t\tstart += self._size\n\t\tstop += self._size\n \n\t\tres_left = res_right = self._default\n\t\twhile start < stop:\n\t\t\tif start & 1:\n\t\t\t\tres_left = self._func(res_left, self.data[start])\n\t\t\t\tstart += 1\n\t\t\tif stop & 1:\n\t\t\t\tstop -= 1\n\t\t\t\tres_right = self._func(self.data[stop], res_right)\n\t\t\tstart >>= 1\n\t\t\tstop >>= 1\n \n\t\treturn self._func(res_left, res_right)\n \n\tdef __repr__(self):\n\t\treturn \"SegmentTree({0})\".format(self.data)\n\n#####################################################################\nclass BinaryIndexTree(object):\n\t\"\"\" use one indexing \"\"\"\n\tdef __init__(self, nums):\n\t\tn = len(nums)\n\t\tself._len = len(nums)\n\t\tself.nums = [0 for _ in range(n+1)]\n\t\tself.N = [0 for _ in range(n+1)]\n\t\tfor i, v in enumerate(nums):\n\t\t\tself.__setitem__(i+1, v)\n\n\tdef _lowbit(self, a):\n\t\treturn a & -a\n\n\tdef  __setitem__(self, i, val):\n\t\tdiff = val - self.nums[i]\n\t\tself.nums[i] = val\n\t\twhile i < len(self.N):\n\t\t\tself.N[i] += diff\n\t\t\ti += self._lowbit(i)\n\n\tdef __getitem__(self, i):\n\t\t# return sum up 0 to i\n\t\tret = 0\n\t\twhile i > 0:\n\t\t\tret += self.N[i]\n\t\t\ti -= self._lowbit(i)\n\n\t\treturn ret\n\n######################################################################\nclass DisJointSetsRank():\n\tdef __init__(self,N):\n\t\t# Initially, all elements are single element subsets\n\t\tself._parents = [node for node in range(N)]\n\t\tself._ranks = [1 for _ in range(N)]\n\t\n\tdef find(self, u):\n\t\twhile u != self._parents[u]: \n\t\t\t# path compression technique\n\t\t\tself._parents[u] = self._parents[self._parents[u]]\n\t\t\tu = self._parents[u]\n\t\treturn u\n\t\n\tdef connected(self, u, v):\n\t\treturn self.find(u) == self.find(v)\n\t\n\tdef union(self, u, v):\n\t\t# Union by rank optimization\n\t\troot_u, root_v = self.find(u), self.find(v)\n\t\tif root_u == root_v:\n\t\t\treturn True\n\t\tif self._ranks[root_u] > self._ranks[root_v]:\n\t\t\tself._parents[root_v] = root_u\n\t\telif self._ranks[root_v] > self._ranks[root_u]:\n\t\t\tself._parents[root_u] = root_v\n\t\telse:\n\t\t\tself._parents[root_u] = root_v\n\t\t\tself._ranks[root_v] += 1\n\t\treturn False\n\n\n#######################################################################\n\ndef integer_list():\n\treturn list(map(int, input().split()))\n\ndef pprint(matrix):\n\tfor i in range(len(matrix)):\n\t\tprint(*matrix[i])\n\n\n#####################################################\n\n\"\"\"\n#918452885533\n  12 12 12 12 12\n \n\n\"\"\"\n\n#############################################################\n#   0 for runing code in your your local system 1 for online submission\n\nmod = 10**9 + 7\n\nONLINE_JUDGE = 1\n\n# neighbor = [(dx, dy) for dx in range(-1, 2) for dy in range(-1, 2) if dx != 0 or dy != 0]\n\n\"\"\"\n\n\n\"\"\"\ndef solve(lst, n):\n\t\n\tvisited = set()\n\tprif_sum = 0\n\n\tfor ele in lst:\n\t\tprif_sum += ele\n\t\tif prif_sum in visited or prif_sum == 0:\n\t\t\tprint(\"YES\")\n\t\t\tbreak\n\t\t\n\t\tvisited.add(prif_sum)\n\telse:\n\t\tprint(\"NO\")\n\n\n\ndef main():\n\tt = int(input())\t\n\n\tfor _ in range(t):\n\t\tn = int(input())\n\t\tlst = integer_list()\n\t\tfor i in range(n):\n\t\t\tif i%2 == 1:\n\t\t\t\tlst[i] = -lst[i]\n\t\tsolve(lst, n)\n\n\n\n\n\n\n\n###############################################\n\nif ONLINE_JUDGE:\n\tinput = lambda : stdin.buffer.readline().decode().strip()\t\nelse:\n\tstdin = open(\"input.txt\")\n\tinput = lambda : stdin.readline().strip()\nmain()\n\t\n\n\n\t\t",
        "rejectedCode": "from heapq import heapify, heappush, heappop\nfrom collections import Counter, defaultdict, deque\nfrom queue import PriorityQueue\nfrom itertools import combinations, product, permutations\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache\nfrom sys import stdin, stdout # for input /output\nimport copy\nimport math\nimport array as arr\nimport time\n\n#NitinMani@21\n# import sys\n# sys.setrecursionlimit(1000000)\n\n\n\n####################\n# stdin = open(\"testcase.txt\")\n# def input():\n\t# \treturn stdin.readline().strip()\n\n#####################################################################\n\n\n\nclass FastIO:\n\n\t@classmethod\n\tdef input(cls):\n\t\tfrom sys import stdin\n\t\tx = stdin.buffer.readline().decode().strip()\n\t\treturn x\n\n\t@classmethod\n\tdef integer_list(cls):\n\t\treturn list(map(int, cls.input().split()))\n\n\t@classmethod\n\tdef print(cls, s = \"\", end = \"\\n\"):\n\t\tfrom sys import stdout\n\t\tstdout.write(str(s) + end)\n\n\t@classmethod\n\tdef flush(cls):\n\t\tfrom sys import stdout\n\t\tstdout.flush()\n\n\n####################################################################\n\nclass SegmentTree:\n\tdef __init__(self, data, default=0, func=lambda a, b: a + b):\n\t\t\"\"\"initialize the segment tree with data\"\"\"\n\t\t\"\"\" initial default value for each node \"\"\"\n\t\t\"\"\" func which you want to apply to range \"\"\"\n\t\tself._default = default\n\t\tself._func = func\n\t\tself._len = len(data)\n\t\tself._size = _size = 1 << (self._len - 1).bit_length()\n \n\t\tself.data = [default] * (2 * _size)\n\t\tself.data[_size:_size + self._len] = data\n\t\tfor i in reversed(range(_size)):\n\t\t\tself.data[i] = func(self.data[2*i], self.data[2*i + 1])\n \n\tdef __delitem__(self, idx):\n\t\t\"\"\" delete item set item value to its default \"\"\"\n\t\tself[idx] = self._default\n \n\tdef __getitem__(self, idx):\n\t\t\"\"\" geting item by inx \"\"\"\n\t\treturn self.data[idx + self._size]\n \n\tdef __setitem__(self, idx, value):\n\t\t\"\"\" changing seting value to given index\"\"\"\n\t\t\"\"\" apply function to range \"\"\"\n\t\tidx += self._size\n\t\tself.data[idx] = value\n\t\tidx >>= 1\n\t\twhile idx:\n\t\t\tself.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n\t\t\tidx >>= 1\n\t \n\tdef __len__(self):\n\t\treturn self._len\n \n\tdef query(self, start, stop):\n\t\t\"\"\"func of data[start, stop)\"\"\"\n\t\tstart += self._size\n\t\tstop += self._size\n \n\t\tres_left = res_right = self._default\n\t\twhile start < stop:\n\t\t\tif start & 1:\n\t\t\t\tres_left = self._func(res_left, self.data[start])\n\t\t\t\tstart += 1\n\t\t\tif stop & 1:\n\t\t\t\tstop -= 1\n\t\t\t\tres_right = self._func(self.data[stop], res_right)\n\t\t\tstart >>= 1\n\t\t\tstop >>= 1\n \n\t\treturn self._func(res_left, res_right)\n \n\tdef __repr__(self):\n\t\treturn \"SegmentTree({0})\".format(self.data)\n\n#####################################################################\nclass BinaryIndexTree(object):\n\t\"\"\" use one indexing \"\"\"\n\tdef __init__(self, nums):\n\t\tn = len(nums)\n\t\tself._len = len(nums)\n\t\tself.nums = [0 for _ in range(n+1)]\n\t\tself.N = [0 for _ in range(n+1)]\n\t\tfor i, v in enumerate(nums):\n\t\t\tself.__setitem__(i+1, v)\n\n\tdef _lowbit(self, a):\n\t\treturn a & -a\n\n\tdef  __setitem__(self, i, val):\n\t\tdiff = val - self.nums[i]\n\t\tself.nums[i] = val\n\t\twhile i < len(self.N):\n\t\t\tself.N[i] += diff\n\t\t\ti += self._lowbit(i)\n\n\tdef __getitem__(self, i):\n\t\t# return sum up 0 to i\n\t\tret = 0\n\t\twhile i > 0:\n\t\t\tret += self.N[i]\n\t\t\ti -= self._lowbit(i)\n\n\t\treturn ret\n\n######################################################################\nclass DisJointSetsRank():\n\tdef __init__(self,N):\n\t\t# Initially, all elements are single element subsets\n\t\tself._parents = [node for node in range(N)]\n\t\tself._ranks = [1 for _ in range(N)]\n\t\n\tdef find(self, u):\n\t\twhile u != self._parents[u]: \n\t\t\t# path compression technique\n\t\t\tself._parents[u] = self._parents[self._parents[u]]\n\t\t\tu = self._parents[u]\n\t\treturn u\n\t\n\tdef connected(self, u, v):\n\t\treturn self.find(u) == self.find(v)\n\t\n\tdef union(self, u, v):\n\t\t# Union by rank optimization\n\t\troot_u, root_v = self.find(u), self.find(v)\n\t\tif root_u == root_v:\n\t\t\treturn True\n\t\tif self._ranks[root_u] > self._ranks[root_v]:\n\t\t\tself._parents[root_v] = root_u\n\t\telif self._ranks[root_v] > self._ranks[root_u]:\n\t\t\tself._parents[root_u] = root_v\n\t\telse:\n\t\t\tself._parents[root_u] = root_v\n\t\t\tself._ranks[root_v] += 1\n\t\treturn False\n\n\n#######################################################################\n\ndef integer_list():\n\treturn list(map(int, input().split()))\n\ndef pprint(matrix):\n\tfor i in range(len(matrix)):\n\t\tprint(*matrix[i])\n\n\n#####################################################\n\n\"\"\"\n#918452885533\n  12 12 12 12 12\n \n\n\"\"\"\n\n#############################################################\n#   0 for runing code in your your local system 1 for online submission\n\nmod = 10**9 + 7\n\nONLINE_JUDGE = 1\n\n# neighbor = [(dx, dy) for dx in range(-1, 2) for dy in range(-1, 2) if dx != 0 or dy != 0]\n\n\"\"\"\n\n\n\"\"\"\ndef solve(lst, n):\n\t\n\tvisited = set()\n\tprif_sum = 0\n\n\tfor ele in lst:\n\t\tprif_sum += ele\n\t\tif prif_sum in visited or prif_sum == 0:\n\t\t\tprint(\"YES\")\n\t\t\tbreak\n\t\t\n\t\tvisited.add(prif_sum)\n\telse:\n\t\tprint(\"NO\")\n\n\n\ndef main():\n\tt = int(input())\t\n\n\tfor _ in range(t):\n\t\tn = int(input())\n\t\tlst = integer_list()\n\t\tfor i in range(n):\n\t\t\tif i%2 == 1:\n\t\t\t\tlst[i] = -lst[i]\n\t\tsolve(lst, n)\n\n\n\n\n\n\n\n###############################################\n\nif ONLINE_JUDGE:\n\tinput = lambda : stdin.buffer.readline().decode().strip()\t\nelse:\n\tstdin = open(\"input.txt\")\n\tinput = lambda : stdin.readline().strip()\nmain()\n\t\n\n\n\t\t",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239951675",
            "author": "Has_bilashhh",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704156960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239950826",
            "author": "Has_bilashhh",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704156120
        },
        "acceptedCode": "for j in range(int(input())):\r\n    val=list(map(int,input().split()))\r\n    odd=val[0]\r\n    if val[1]==val[0]:\r\n      print(val[2])\r\n    elif val[2]==val[0]:\r\n      print(val[1])\r\n    else:\r\n      print(odd)",
        "rejectedCode": "for j in range(int(input())):\r\n  for i in range(3):\r\n    n=input()\r\n    if '?' in n:\r\n      if 'C' not in n:\r\n        print('C')\r\n        break\r\n      elif 'B' not in n:\r\n        print('B')\r\n        break\r\n      else:\r\n        print('A')\r\n        break",
        "failedTestCase": {
            "input": "108\r\n?BC\r\nBCA\r\nCAB\r\nA?C\r\nBCA\r\nCAB\r\nAB?\r\nBCA\r\nCAB\r\nABC\r\n?CA\r\nCAB\r\nABC\r\nB?A\r\nCAB\r\nABC\r\nBC?\r\nCAB\r\nABC\r\nBCA\r\n?AB\r\nABC\r\nBCA\r\nC?B\r\nABC\r\nBCA\r\nCA?\r\n?BC\r\nCAB\r\nBCA\r\nA?C\r\nCAB\r\nBCA\r\nAB?\r\nCAB\r\nBCA\r\nABC\r\n?AB\r\nBCA\r\nABC\r\nC?B\r\nBCA\r\nABC\r\nCA?\r\nBCA\r\nABC\r\nCAB\r\n?CA\r\nABC\r\nCAB\r\nB?A\r\nABC\r\nCAB\r\nBC?\r\n?CB\r\nBAC\r\nCBA\r\nA?B\r\nBAC\r\nCBA\r\nAC?\r\nBAC\r\nCBA\r\nACB\r\n?AC\r\nCBA\r\nACB\r\nB?C\r\nCBA\r\nACB\r\nBA?\r\nCBA\r\nACB\r\nBAC\r\n?BA\r\nACB\r\nBAC\r\nC?A\r\nACB\r\nBAC\r\nCB?\r\n?CB\r\nCBA\r\nBAC\r\nA?B\r\nCBA\r\nBAC\r\nAC?\r\nCBA\r\nBAC\r\nACB\r\n?BA\r\nBAC\r\nACB\r\nC?A\r\nBAC\r\nACB\r\nCB?\r\nBAC\r\nACB\r\nCBA\r\n?...",
            "output": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nC\r\nA\r\nB\r\nA\r\nB\r\nC\r\nB\r\nC\r\nA\r\nC\r\nA\r\nB\r\nB\r\nC\r\nA\r\nA\r\nB\r\nC\r\nC\r\nB\r\nA\r\nA\r\nC\r\nB\r\nB\r\nA\r\nC\r\nC\r\nB\r\nA\r\nB\r\nA\r\nC\r\nA\r\nC\r\nB\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239977099",
            "author": "EVS389",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 8200,
            "submissionTime": 1704174480
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239976774",
            "author": "EVS389",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12300,
            "submissionTime": 1704174240
        },
        "acceptedCode": "numtests=int(input())\r\nfor i in range(numtests):\r\n    l=input()\r\n    string=input()\r\n    outlist=[]\r\n    index=0\r\n\r\n    while index<=len(string)-4:\r\n        if string[index+3] == \"a\" or string[index+3]==\"e\":\r\n            outlist.append(string[index:index+2])\r\n            index+=2\r\n        else:\r\n            outlist.append(string[index:index+3])\r\n            index+=3\r\n    outlist.append(string[index:])\r\n    print(\".\".join(outlist))",
        "rejectedCode": "numtests=int(input())\r\nfor i in range(numtests):\r\n    length=int(input())\r\n    string=input()\r\n    outstring=\"\"\r\n    index=0\r\n    while index<=len(string)-4:\r\n        if string[index+3] == \"a\" or string[index+3]==\"e\":\r\n            outstring+=string[index:index+2]+\".\"\r\n            index+=2\r\n        else:\r\n            outstring+=string[index:index+3]+\".\"\r\n            index+=3\r\n    outstring+=string[index:]\r\n    print(outstring)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239956750",
            "author": "sai_computation",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 170,
            "memory": 25300,
            "submissionTime": 1704161040
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239956672",
            "author": "sai_computation",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704160980
        },
        "acceptedCode": "from math import sqrt\r\n\r\ndef solve(n, squares):\r\n    total_square = sum(squares)\r\n    x = sqrt(total_square)\r\n    if x.is_integer():\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\ndef main():\r\n    t = int(input())\r\n    for i in range(t):\r\n        n = int(input())\r\n        squares = list(map(int, input().split()))\r\n        solve(n, squares)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "from math import sqrt\r\ndef solve(n,squares):\r\n    total_square = sum(squares)\r\n    x=sqrt(total_square)\r\n    if isinstance(x,int):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\ndef main():\r\n    t=int(input())\r\n    for i in range(t):\r\n        squares = list(map(int, input().split()))\r\n        n=int(input())\r\n        solve(n,squares)\r\nif __name__ == \"__main__\":\r\n    main()",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "NO\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239961779",
            "author": "bergus",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 982,
            "memory": 50600,
            "submissionTime": 1704164640
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239904424",
            "author": "bergus",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 31200,
            "submissionTime": 1704106560
        },
        "acceptedCode": "MULTI_TEST = True\r\nPRINT_RETURN_VALUES = True\r\n\r\n\r\ndef solve():\r\n    n = int(input())\r\n    abseq = [read_ints() for _ in range(n)]\r\n\r\n    abseq.sort(key=lambda x: -x[0])\r\n    res = 0\r\n    endpoints = SortedList()\r\n    for i in range(n):\r\n        a, b = abseq[i]\r\n        res += endpoints.bisect_left(b) - endpoints.bisect_left(a)\r\n        endpoints.add(b)\r\n\r\n    return res\r\n\r\n\r\nclass SortedList:\r\n    def __init__(self, iterable=[], _load=200):\r\n        \"\"\"Initialize sorted list instance.\"\"\"\r\n        values = sorted(iterable)\r\n        self._len = _len = len(values)\r\n        self._load = _load\r\n        self._lists = _lists = [values[i:i + _load]\r\n                                for i in range(0, _len, _load)]\r\n        self._list_lens = [len(_list) for _list in _lists]\r\n        self._mins = [_list[0] for _list in _lists]\r\n        self._fen_tree = []\r\n        self._rebuild = True\r\n\r\n    def _fen_build(self):\r\n        \"\"\"Build a fenwick tree instance.\"\"\"\r\n        self._fen_tree[:] = self._list_lens\r\n        _fen_tree = self._fen_tree\r\n        for i in range(len(_fen_tree)):\r\n            if i | i + 1 < len(_fen_tree):\r\n                _fen_tree[i | i + 1] += _fen_tree[i]\r\n        self._rebuild = False\r\n\r\n    def _fen_update(self, index, value):\r\n        \"\"\"Update `fen_tree[index] += value`.\"\"\"\r\n        if not self._rebuild:\r\n            _fen_tree = self._fen_tree\r\n            while index < len(_fen_tree):\r\n                _fen_tree[index] += value\r\n                index |= index + 1\r\n\r\n    def _fen_query(self, end):\r\n        \"\"\"Return `sum(_fen_tree[:end])`.\"\"\"\r\n        if self._rebuild:\r\n            self._fen_build()\r\n\r\n        _fen_tree = self._fen_tree\r\n        x = 0\r\n        while end:\r\n            x += _fen_tree[end - 1]\r\n            end &= end - 1\r\n        return x\r\n\r\n    def _fen_findkth(self, k):\r\n        \"\"\"Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`).\"\"\"\r\n        _list_lens = self._list_lens\r\n        if k < _list_lens[0]:\r\n            return 0, k\r\n        if k >= self._len - _list_lens[-1]:\r\n            return len(_list_lens) - 1, k + _list_lens[-1] - self._len\r\n        if self._rebuild:\r\n            self._fen_build()\r\n\r\n        _fen_tree = self._fen_tree\r\n        idx = -1\r\n        for d in reversed(range(len(_fen_tree).bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\r\n                idx = right_idx\r\n                k -= _fen_tree[idx]\r\n        return idx + 1, k\r\n\r\n    def _delete(self, pos, idx):\r\n        \"\"\"Delete value at the given `(pos, idx)`.\"\"\"\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n\r\n        self._len -= 1\r\n        self._fen_update(pos, -1)\r\n        del _lists[pos][idx]\r\n        _list_lens[pos] -= 1\r\n\r\n        if _list_lens[pos]:\r\n            _mins[pos] = _lists[pos][0]\r\n        else:\r\n            del _lists[pos]\r\n            del _list_lens[pos]\r\n            del _mins[pos]\r\n            self._rebuild = True\r\n\r\n    def _loc_left(self, value):\r\n        \"\"\"Return an index pair that corresponds to the first position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n\r\n        lo, pos = -1, len(_lists) - 1\r\n        while lo + 1 < pos:\r\n            mi = (lo + pos) >> 1\r\n            if value <= _mins[mi]:\r\n                pos = mi\r\n            else:\r\n                lo = mi\r\n\r\n        if pos and value <= _lists[pos - 1][-1]:\r\n            pos -= 1\r\n\r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value <= _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n\r\n        return pos, idx\r\n\r\n    def _loc_right(self, value):\r\n        \"\"\"Return an index pair that corresponds to the last position of `value` in the sorted list.\"\"\"\r\n        if not self._len:\r\n            return 0, 0\r\n\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n\r\n        pos, hi = 0, len(_lists)\r\n        while pos + 1 < hi:\r\n            mi = (pos + hi) >> 1\r\n            if value < _mins[mi]:\r\n                hi = mi\r\n            else:\r\n                pos = mi\r\n\r\n        _list = _lists[pos]\r\n        lo, idx = -1, len(_list)\r\n        while lo + 1 < idx:\r\n            mi = (lo + idx) >> 1\r\n            if value < _list[mi]:\r\n                idx = mi\r\n            else:\r\n                lo = mi\r\n\r\n        return pos, idx\r\n\r\n    def add(self, value):\r\n        \"\"\"Add `value` to sorted list.\"\"\"\r\n        _load = self._load\r\n        _lists = self._lists\r\n        _mins = self._mins\r\n        _list_lens = self._list_lens\r\n\r\n        self._len += 1\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            self._fen_update(pos, 1)\r\n            _list = _lists[pos]\r\n            _list.insert(idx, value)\r\n            _list_lens[pos] += 1\r\n            _mins[pos] = _list[0]\r\n            if _load + _load < len(_list):\r\n                _lists.insert(pos + 1, _list[_load:])\r\n                _list_lens.insert(pos + 1, len(_list) - _load)\r\n                _mins.insert(pos + 1, _list[_load])\r\n                _list_lens[pos] = _load\r\n                del _list[_load:]\r\n                self._rebuild = True\r\n        else:\r\n            _lists.append([value])\r\n            _mins.append(value)\r\n            _list_lens.append(1)\r\n            self._rebuild = True\r\n\r\n    def discard(self, value):\r\n        \"\"\"Remove `value` from sorted list if it is a member.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_right(value)\r\n            if idx and _lists[pos][idx - 1] == value:\r\n                self._delete(pos, idx - 1)\r\n\r\n    def remove(self, value):\r\n        \"\"\"Remove `value` from sorted list; `value` must be a member.\"\"\"\r\n        _len = self._len\r\n        self.discard(value)\r\n        if _len == self._len:\r\n            raise ValueError('{0!r} not in list'.format(value))\r\n\r\n    def pop(self, index=-1):\r\n        \"\"\"Remove and return value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        value = self._lists[pos][idx]\r\n        self._delete(pos, idx)\r\n        return value\r\n\r\n    def bisect_left(self, value):\r\n        \"\"\"Return the first index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_left(value)\r\n        return self._fen_query(pos) + idx\r\n\r\n    def bisect_right(self, value):\r\n        \"\"\"Return the last index to insert `value` in the sorted list.\"\"\"\r\n        pos, idx = self._loc_right(value)\r\n        return self._fen_query(pos) + idx\r\n\r\n    def count(self, value):\r\n        \"\"\"Return number of occurrences of `value` in the sorted list.\"\"\"\r\n        return self.bisect_right(value) - self.bisect_left(value)\r\n\r\n    def __len__(self):\r\n        \"\"\"Return the size of the sorted list.\"\"\"\r\n        return self._len\r\n\r\n    def __getitem__(self, index):\r\n        \"\"\"Lookup value at `index` in sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        return self._lists[pos][idx]\r\n\r\n    def __delitem__(self, index):\r\n        \"\"\"Remove value at `index` from sorted list.\"\"\"\r\n        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)\r\n        self._delete(pos, idx)\r\n\r\n    def __contains__(self, value):\r\n        \"\"\"Return true if `value` is an element of the sorted list.\"\"\"\r\n        _lists = self._lists\r\n        if _lists:\r\n            pos, idx = self._loc_left(value)\r\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\r\n        return False\r\n\r\n    def __iter__(self):\r\n        \"\"\"Return an iterator over the sorted list.\"\"\"\r\n        return (value for _list in self._lists for value in _list)\r\n\r\n    def __reversed__(self):\r\n        \"\"\"Return a reverse iterator over the sorted list.\"\"\"\r\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\r\n\r\n    def __repr__(self):\r\n        \"\"\"Return string representation of sorted list.\"\"\"\r\n        return 'SortedList({0})'.format(list(self))\r\n\r\n\r\ndef main():\r\n    t = int(input()) if MULTI_TEST else 1\r\n    if PRINT_RETURN_VALUES:\r\n        output = []\r\n        for _ in range(t):\r\n            ans = solve()\r\n            output.append(ans)\r\n\r\n        print_lines(output)\r\n    else:\r\n        for _ in range(t):\r\n            solve()\r\n\r\n\r\ndef input(): return next(test).strip()\r\ndef read_ints(): return [int(c) for c in input().split()]\r\ndef print_lines(lst): print('\\n'.join(map(str, lst)))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import sys\r\n    from os import environ as env\r\n    if 'COMPUTERNAME' in env and 'L2A6HRI' in env['COMPUTERNAME']:\r\n        sys.stdout = open('out.txt', 'w')\r\n        sys.stdin = open('in.txt', 'r')\r\n\r\n    test = iter(sys.stdin.readlines())\r\n\r\n    main()\r\n",
        "rejectedCode": "MULTI_TEST = True\r\nPRINT_RETURN_VALUES = True\r\n\r\n\r\ndef solve():\r\n    n = int(input())\r\n    aseq = read_ints()\r\n\r\n    acc = [0]\r\n    for i, ai in enumerate(aseq):\r\n        if i % 2 == 0:\r\n            acc.append(acc[-1] + ai)\r\n        else:\r\n            acc.append(acc[-1] - ai)\r\n\r\n    return 'YES' if len(set(acc)) < len(acc) else 'NO'\r\n\r\n\r\ndef main():\r\n    t = int(input()) if MULTI_TEST else 1\r\n    if PRINT_RETURN_VALUES:\r\n        output = []\r\n        for _ in range(t):\r\n            ans = solve()\r\n            output.append(ans)\r\n\r\n        print_lines(output)\r\n    else:\r\n        for _ in range(t):\r\n            solve()\r\n\r\n\r\ndef input(): return next(test).strip()\r\ndef read_ints(): return [int(c) for c in input().split()]\r\ndef print_lines(lst): print('\\n'.join(map(str, lst)))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import sys\r\n    from os import environ as env\r\n    if 'COMPUTERNAME' in env and 'L2A6HRI' in env['COMPUTERNAME']:\r\n        sys.stdout = open('out.txt', 'w')\r\n        sys.stdin = open('in.txt', 'r')\r\n\r\n    test = iter(sys.stdin.readlines())\r\n\r\n    main()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "239943895",
            "author": "douglasjohnnyhit",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 420,
            "memory": 20700,
            "submissionTime": 1704148080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "239872113",
            "author": "douglasjohnnyhit",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 34,
            "runTime": 4000,
            "memory": 90600,
            "submissionTime": 1704087960
        },
        "acceptedCode": "import heapq\nt = int(input())\nfor _ in range(t):\n    edges = {}\n    \n    n, m = map(int, input().split())\n    for i in range(m):\n        u,v,w = map(int, input().split())\n        if u > v:\n            u,v = v,u\n\n        if (u,v) in edges:\n            edges[(u,v)] = min(edges[(u,v)], w)\n        else:\n            edges[(u,v)] = w\n\n    slowness = list(map(int, input().split()))\n    adj = {}\n    for key in edges:\n        u,v = key\n        w = edges[key]\n        if u in adj:\n            adj[u].append((v,w))\n        else:\n            adj[u] = [(v,w)]\n\n        if v in adj:\n            adj[v].append((u,w))\n        else:\n            adj[v] = [(u,w)]\n    fringe = [(0,1,slowness[0])]\n    seen = set()\n    while fringe:\n        time,city,bike = heapq.heappop(fringe)\n        if city == n:\n            print(time)\n            break\n        if (city,bike) in seen:\n            continue\n        seen.add((city,bike))\n\n        bike = min(bike,slowness[city-1])\n        for neighbor, distance in adj[city]:\n            if (neighbor,bike) not in seen:\n                heapq.heappush(fringe, (time+distance*bike, neighbor, bike))\n\n\n",
        "rejectedCode": "import heapq\r\nt = int(input())\r\nfor _ in range(t):\r\n    edges = {}\r\n    \r\n    n, m = map(int, input().split())\r\n    for i in range(m):\r\n        u,v,w = map(int, input().split())\r\n        if u > v:\r\n            u,v = v,u\r\n\r\n        if (u,v) in edges:\r\n            edges[(u,v)] = min(edges[(u,v)], w)\r\n        else:\r\n            edges[(u,v)] = w\r\n\r\n    slowness = list(map(int, input().split()))\r\n    adj = {}\r\n    for key in edges:\r\n        u,v = key\r\n        w = edges[key]\r\n        if u in adj:\r\n            adj[u].append((v,w))\r\n        else:\r\n            adj[u] = [(v,w)]\r\n\r\n        if v in adj:\r\n            adj[v].append((u,w))\r\n        else:\r\n            adj[v] = [(u,w)]\r\n    fringe = [(0,slowness[0],1)]\r\n    \r\n    fastestSoFar = [float('inf') for x in range(1, n+2)]\r\n    while fringe:\r\n        time,bike,city = heapq.heappop(fringe)\r\n        if city == n:\r\n            print(time)\r\n            break\r\n        \r\n        if fastestSoFar[city] < bike:\r\n            continue\r\n        else:\r\n            fastestSoFar[city] = bike\r\n\r\n        bike = min(bike,slowness[city-1])\r\n        for neighbor, distance in adj[city]:\r\n            if fastestSoFar[neighbor] > bike:\r\n                heapq.heappush(fringe, (time+distance*bike, bike, neighbor))\r\n\r\n",
        "failedTestCase": {
            "input": "1\r\n751 1000\r\n1 2 1\r\n1 3 1\r\n2 4 1\r\n3 4 1\r\n4 5 1\r\n4 6 1\r\n5 7 1\r\n6 7 1\r\n7 8 1\r\n7 9 1\r\n8 10 1\r\n9 10 1\r\n10 11 1\r\n10 12 1\r\n11 13 1\r\n12 13 1\r\n13 14 1\r\n13 15 1\r\n14 16 1\r\n15 16 1\r\n16 17 1\r\n16 18 1\r\n17 19 1\r\n18 19 1\r\n19 20 1\r\n19 21 1\r\n20 22 1\r\n21 22 1\r\n22 23 1\r\n22 24 1\r\n23 25 1\r\n24 25 1\r\n25 26 1\r\n25 27 1\r\n26 28 1\r\n27 28 1\r\n28 29 1\r\n28 30 1\r\n29 31 1\r\n30 31 1\r\n31 32 1\r\n31 33 1\r\n32 34 1\r\n33 34 1\r\n34 35 1\r\n34 36 1\r\n35 37 1\r\n36 37 1\r\n37 38 1\r\n37 39 1\r\n38 40 1\r\n39 40 1\r\n40 41 1\r\n40 42 1\r\n41 43 1\r\n42 43 1\r\n43 44 1\r\n43 45 1...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239933783",
            "author": "clangell125",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704128700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239933643",
            "author": "clangell125",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1704128520
        },
        "acceptedCode": "def solveA():\r\n    numbers = input()\r\n    numbers = numbers.split()\r\n    numbers = [int(i) for i in numbers]\r\n    if numbers[0] == numbers[1]:\r\n        print(numbers[2])\r\n    if numbers[0] == numbers[2]:\r\n        print(numbers[1])\r\n    if numbers[1] == numbers[2]:\r\n        print(numbers[0])\r\nT = int(input())\r\nfor i in range(T):\r\n    solveA()",
        "rejectedCode": "def solveA():\r\n    numbers = input()\r\n    numbers = numbers.split()\r\n    numbers = [int(i) for i in numbers]\r\n    if numbers[0] == numbers[1]:\r\n        print(numbers[2])\r\n    if numbers[0] == numbers[2]:\r\n        print(numbers[1])\r\nT = int(input())\r\nfor i in range(T):\r\n    solveA()",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "3\r\n6\r\n0\r\n6\r\n8\r\n5\r\n7\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '3'\r\n"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239932308",
            "author": "Huntsen",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 25700,
            "submissionTime": 1704126540
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239932156",
            "author": "Huntsen",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704126300
        },
        "acceptedCode": "for i in range(int(input())):\r\n    c = input()\r\n    a = list(map(int, input().split(' ')))\r\n    \r\n    b = sum(a)\r\n    if (b**0.5).is_integer() == True:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "rejectedCode": "import numpy as np\r\n\r\nfor i in range(int(input())):\r\n    c = input()\r\n    a = list(map(int, input().split(' ')))\r\n    \r\n    b = sum(a)\r\n    if np.sqrt(b).is_integer() == True:\r\n        print('YES')\r\n    else:\r\n        print('NO')",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239932665",
            "author": "samalavignesh",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 25300,
            "submissionTime": 1704127080
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239932351",
            "author": "samalavignesh",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704126600
        },
        "acceptedCode": "import math\r\nt=int(input())\r\nfor i in range(t):\r\n        n=int(input())\r\n        l=list(map(int,input().split()))\r\n        k=sum(l)\r\n        s=math.sqrt(k)\r\n        if(s==int(s)):\r\n                print(\"YES\")\r\n        else:\r\n                print(\"NO\")",
        "rejectedCode": "t=int(input()\r\nfor i in range(t):\r\n        n=int(input()\r\n        l=list(map(int,input().split())\r\n        k=sum(l)\r\n        s=sqrt(k)\r\n        if(s==int(s)):\r\n                print(\"YES\")\r\n        else:\r\n                print(\"NO\")\r\n         ",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239932121",
            "author": "GodZhere",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 21200,
            "submissionTime": 1704126240
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239931005",
            "author": "GodZhere",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 139,
            "memory": 8600,
            "submissionTime": 1704124740
        },
        "acceptedCode": "import sys\r\nimport math\r\nimport string\r\nimport collections\r\nimport itertools\r\nimport queue\r\nimport heapq\r\nfrom os import path\r\n\r\n\"\"\"\r\n  .@@@@@@@@      @@@@@     %@@@    @@@@     &@@@@.          @@@@        @@@#  @@@@   @@@@&  @@@@@@@@@@  &@@@@@   @@@@@  \r\n  @@@@.         @@@ @@@    %@@@    @@@@    &@@@@@@.         @@@@        @@@#  @@@@.@@@@     @@@@        &@@/@@  @@@@@@  \r\n    @@@@@@@@   @@@# /@@@   %@@@@@@@@@@@   (@@@  @@@         @@@@        @@@#  @@@@@@@@@(    @@@@@@@@@@  &@@/&@@*@@ @@@  \r\n (@@@   .@@@  @@@@@@@@@@@  %@@@    @@@@  /@@@@@@@@@@        @@@@        @@@#  @@@@   @@@@   @@@@        &@@/ @@@@* @@@  \r\n   @@@@@@@*  @@@@     @@@@ %@@@    @@@@ *@@@     &@@@       @@@@@@@@@@  @@@#  @@@@    @@@@& @@@@@@@@@@* &@@/  @@@  @@@\r\n\"\"\"\r\n\r\ndef input():\r\n    return sys.stdin.readline().strip()\r\ndef intl():\r\n    return list(map(int,input().split()))\r\ndef ints():\r\n    return list(map(int, list(input())))\r\ndef iinput():\r\n    return int(input())\r\ndef yes():\r\n    print(\"YES\")\r\ndef no():\r\n    print(\"NO\")\r\n    \r\ndef v(x):\r\n    return x in {'a', 'e'}\r\ndef c(x):\r\n    return x in {'b', 'c', 'd'}\r\ndef main():\r\n    testcases = 1\r\n    testcases = iinput()\r\n    for _ in range(testcases):\r\n        n = iinput()\r\n        a = input()\r\n        b = collections.deque()\r\n        vs = False\r\n        for i in a[::-1]:\r\n            b.appendleft(i)\r\n            if v(i):\r\n                vs = True\r\n            if c(i) and vs:\r\n                vs = False\r\n                b.appendleft('.')\r\n        b.popleft()\r\n        print(''.join(b))\r\n            \r\n            \r\n            \r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    if(path.exists('input.txt')):\r\n        sys.stdin = open(\"input.txt\",\"r\")\r\n        sys.stdout = open(\"output.txt\",\"w\")\r\n    main()",
        "rejectedCode": "import sys\r\nimport math\r\nimport string\r\nimport collections\r\nimport itertools\r\nimport queue\r\nimport heapq\r\nfrom os import path\r\n\r\n\"\"\"\r\n  .@@@@@@@@      @@@@@     %@@@    @@@@     &@@@@.          @@@@        @@@#  @@@@   @@@@&  @@@@@@@@@@  &@@@@@   @@@@@  \r\n  @@@@.         @@@ @@@    %@@@    @@@@    &@@@@@@.         @@@@        @@@#  @@@@.@@@@     @@@@        &@@/@@  @@@@@@  \r\n    @@@@@@@@   @@@# /@@@   %@@@@@@@@@@@   (@@@  @@@         @@@@        @@@#  @@@@@@@@@(    @@@@@@@@@@  &@@/&@@*@@ @@@  \r\n (@@@   .@@@  @@@@@@@@@@@  %@@@    @@@@  /@@@@@@@@@@        @@@@        @@@#  @@@@   @@@@   @@@@        &@@/ @@@@* @@@  \r\n   @@@@@@@*  @@@@     @@@@ %@@@    @@@@ *@@@     &@@@       @@@@@@@@@@  @@@#  @@@@    @@@@& @@@@@@@@@@* &@@/  @@@  @@@\r\n\"\"\"\r\n\r\ndef input():\r\n    return sys.stdin.readline().strip()\r\ndef intl():\r\n    return list(map(int,input().split()))\r\ndef ints():\r\n    return list(map(int, list(input())))\r\ndef iinput():\r\n    return int(input())\r\ndef yes():\r\n    print(\"YES\")\r\ndef no():\r\n    print(\"NO\")\r\n    \r\ndef main():\r\n    testcases = 1\r\n    testcases = iinput()\r\n    for _ in range(testcases):\r\n        n = iinput()\r\n        a = sum(intl())\r\n        if math.sqrt(a)**2 == a:\r\n            yes()\r\n        else:\r\n            no()\r\n        \r\n\r\nif __name__ == \"__main__\":\r\n    if(path.exists('input.txt')):\r\n        sys.stdin = open(\"input.txt\",\"r\")\r\n        sys.stdout = open(\"output.txt\",\"w\")\r\n    main()",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 31,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239929702",
            "author": "themightypablo",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 28400,
            "submissionTime": 1704123300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239929529",
            "author": "themightypablo",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704123120
        },
        "acceptedCode": "n = int(input())\r\nfor i in range(n):\r\n    d = {0}\r\n    booby = False\r\n    x = int(input())\r\n    summ  = 0\r\n    l = list(map(int, input().split()))\r\n\r\n\r\n    for i in range(len(l)):\r\n        if i%2 == 0:\r\n            summ = summ - l[i]\r\n        else:\r\n            summ = summ +l[i]\r\n        if summ in d:\r\n            booby = True\r\n            break\r\n        else:\r\n            d.add(summ)\r\n\r\n    if booby == True:\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\") ",
        "rejectedCode": "n = int(input())\r\nfor i in range(n):\r\n    d = {0:-1}\r\n    booby = False\r\n    x = int(input())\r\n    summ  = 0\r\n    l = list(map(int, input().split()))\r\n\r\n\r\n    for i in range(len(l)):\r\n        if i%2 == 0:\r\n            summ = summ - l[i]\r\n        else:\r\n            summ = summ +l[i]\r\n        if summ in d:\r\n            booby = True\r\n            break\r\n        else:\r\n            d.add(summ)\r\n\r\n    if booby == True:\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\") ",
        "failedTestCase": {
            "input": "6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239928153",
            "author": "munir1",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 25300,
            "submissionTime": 1704121680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239926045",
            "author": "munir1",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 13000,
            "submissionTime": 1704119760
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    vow = [\"a\", \"e\"]\r\n    s = list(input())\r\n    \r\n    for i in range(2, n):\r\n        if s[i] in vow:\r\n            s[i - 1] = '.' + s[i - 1]\r\n    \r\n    print(*s, sep='')\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    ans = ''\r\n    i = 1\r\n    while i < n:\r\n        if n - i <= 2:\r\n            ans += s[i - 1:] + '.'\r\n            break\r\n\r\n        if n - i > 2 and s[i + 1] in \"bcd\" and s[i + 2] in \"bcd\":\r\n            ans += s[i - 1: i + 2] + \".\"\r\n            i += 1\r\n        else:\r\n            ans += s[i - 1: i + 1] + '.'\r\n        i += 2\r\n    print(ans[:-1])",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239926163",
            "author": "Codertang",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1934,
            "memory": 67300,
            "submissionTime": 1704119880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239926012",
            "author": "Codertang",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 5000,
            "memory": 45500,
            "submissionTime": 1704119760
        },
        "acceptedCode": "def update(fenwick_tree, index, value, n):\r\n    while index <= n:\r\n        fenwick_tree[index] += value\r\n        index += index & -index\r\n\r\ndef query(fenwick_tree, index):\r\n    sum = 0\r\n    while index > 0:\r\n        sum += fenwick_tree[index]\r\n        index -= index & -index\r\n    return sum\r\n\r\ndef solve(n, arr):\r\n    arr = [(b, a) for a, b in arr]\r\n    arr.sort()\r\n\r\n    # Discretize the values since Fenwick Tree indices need to be positive integers\r\n    unique_values = sorted(set(x for _, x in arr))\r\n    value_to_index = {v: i+1 for i, v in enumerate(unique_values)}  # +1 because Fenwick Tree is 1-indexed\r\n\r\n    fenwick_tree = [0] * (len(unique_values) + 1)\r\n    ans = 0\r\n    for _, p_second in arr:\r\n        index = value_to_index[p_second]\r\n        ans += query(fenwick_tree, len(unique_values)) - query(fenwick_tree, index)\r\n        update(fenwick_tree, index, 1, len(unique_values))\r\n    \r\n    return ans\r\n\r\ndef main():\r\n    t = int(input().strip())\r\n    for _ in range(t):\r\n        n = int(input().strip())\r\n        arr = [tuple(map(int, input().split())) for _ in range(n)]\r\n        print(solve(n, arr))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "rejectedCode": "import bisect\r\n\r\ndef solve(n, arr):\r\n    arr = [(b, a) for a, b in arr]  # Swap to match the C++ sort order\r\n    arr.sort()\r\n\r\n    ans = 0\r\n    st = []\r\n    for _, p_second in arr:\r\n        # Calculate how many elements in 'st' are greater than p_second\r\n        ans += len(st) - bisect.bisect_right(st, p_second)\r\n        # Insert p_second into the sorted list 'st'\r\n        bisect.insort_right(st, p_second)\r\n    \r\n    return ans\r\n\r\ndef main():\r\n    t = int(input().strip())\r\n    for _ in range(t):\r\n        n = int(input().strip())\r\n        arr = [tuple(map(int, input().split())) for _ in range(n)]\r\n        print(solve(n, arr))\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n-999999999 999999999\r\n-999999998 999999998\r\n-999999997 999999997\r\n-999999996 999999996\r\n-999999995 999999995\r\n-999999994 999999994\r\n-999999993 999999993\r\n-999999992 999999992\r\n-999999991 999999991\r\n-999999990 999999990\r\n-999999989 999999989\r\n-999999988 999999988\r\n-999999987 999999987\r\n-999999986 999999986\r\n-999999985 999999985\r\n-999999984 999999984\r\n-999999983 999999983\r\n-999999982 999999982\r\n-999999981 999999981\r\n-999999980 999999980\r\n-999999979 999999979\r\n-999999978 999999978\r\n-999999977 99999...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239915260",
            "author": "abdullah_zeine",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704112680
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239912789",
            "author": "abdullah_zeine",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704111300
        },
        "acceptedCode": "test = []\r\nfor _ in range(int(input())):\r\n    test.append([\r\n        input().strip(),\r\n        input().strip(),\r\n        input().strip()\r\n        ])\r\n\r\nfor t in test:\r\n    for x in t:\r\n        if \"?\" in x:\r\n            if 'A' not in x :\r\n                print(\"A\")\r\n            if 'B' not in x :\r\n                print(\"B\")\r\n            if 'C' not in x :\r\n                print(\"C\")",
        "rejectedCode": "test = []\r\nfor _ in range(int(input())):\r\n    test.append(map(int,input().split(\" \")))\r\n\r\nfor t in test:\r\n    a ,b ,c = t\r\n    if a = b :\r\n        print(c)\r\n    elif b = c:\r\n        print(a)\r\n    elif a = c:\r\n        print(b)",
        "failedTestCase": null,
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239913433",
            "author": "dama.dj",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 249,
            "memory": 31100,
            "submissionTime": 1704111660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239912726",
            "author": "dama.dj",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 35100,
            "submissionTime": 1704111240
        },
        "acceptedCode": "for t in range(int(input())):\r\n    n=int(input())\r\n    ls=list(map(int,input().split()))\r\n    for i in range(len(ls)):\r\n        if(i%2==1):\r\n            ls[i]=-1*ls[i]\r\n    \r\n    sm=0\r\n    p=[0]\r\n    for e in ls:\r\n        sm+=e\r\n        p.append(sm)\r\n    \r\n\r\n    if len(list(set(p))) == len(p):\r\n        print(\"NO\")\r\n    else:\r\n        print(\"YES\")\r\n    \r\n\r\n",
        "rejectedCode": "for t in range(int(input())):\r\n    n=int(input())\r\n    ls=list(map(int,input().split()))\r\n    for i in range(len(ls)):\r\n        if(i%2==1):\r\n            ls[i]=-1*ls[i]\r\n    \r\n    sm=0\r\n    presum=[0]\r\n    for e in ls:\r\n        sm+=e\r\n        presum.append(sm)\r\n    \r\n\r\n    mp={}\r\n    flag=False\r\n    for i in range(len(presum)):\r\n        if(presum[i] in mp):\r\n            flag=True\r\n            break\r\n        else:\r\n            mp[presum[i]]=1\r\n    #print(mp)\r\n    #print(presum)\r\n    if flag:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239907700",
            "author": "panchajanya1999",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 390,
            "memory": 32700,
            "submissionTime": 1704108420
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239903987",
            "author": "panchajanya1999",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 3300,
            "submissionTime": 1704106320
        },
        "acceptedCode": "#!/usr/bin/env python3\r\n# from typing import *\r\n\r\nYES = 'YES'\r\nNO = 'NO'\r\n\r\n\r\n# def solve(testcases: int, a: List[int], b: List[List[int]]) -> List[str]:\r\ndef solve(testcases, a, b):\r\n    add = sum(b)\r\n    # chec if add is a perfect sqaure\r\n\r\n    if add ** 0.5 == int(add ** 0.5):\r\n        return [YES]\r\n    else:\r\n        return [NO]\r\n\r\n\r\n# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)\r\ndef main():\r\n    testcases = int(input())\r\n    for i in range(testcases):\r\n        a = int(input())\r\n        b = list(map(int, input().split()))\r\n        ans = solve(testcases, a, b)\r\n        print('\\n'.join(map(str, ans)))\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()",
        "rejectedCode": "# Codeforces Round 916 Div 3\r\n# Problem B - Preparing for the Contest\r\n\r\nclass Solution:\r\n    def solve(n, k):\r\n        add = sum(k)\r\n        # check if add is a perect square\r\n        if add ** 0.5 % 1 == 0:\r\n            return Yes\r\n        else:\r\n            return No\r\n        \r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    testcases = int(input())\r\n    for cases in range(testcases):\r\n        n = int(input())\r\n        k = []\r\n        for i in range(n):\r\n            k.append(int(input()))\r\n        ans = Solution.solve(n, k)\r\n        print(ans)\r\n        ",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239897808",
            "author": "hriday_27b",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 8300,
            "submissionTime": 1704102780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239897570",
            "author": "hriday_27b",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 8700,
            "submissionTime": 1704102600
        },
        "acceptedCode": "t = int(input())\r\n \r\nfor _ in range(t):\r\n    n = int(input())\r\n    word = input()\r\n    syll = []\r\n    \r\n    while n:\r\n        if word[n-1] in 'ae':\r\n            syll.append(word[n-2]+word[n-1])\r\n            n -= 2\r\n        else:\r\n            syll.append(word[n-3]+word[n-2]+word[n-1])\r\n            n -= 3\r\n \r\n    print('.'.join(reversed(syll)))",
        "rejectedCode": "    \r\nt=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    s=input()\r\n    c=[\"b\",\"c\",\"d\"]\r\n    \r\n    li=[]\r\n    for i in range(n):\r\n        if s[i] in c:\r\n            li.append(\"c\")\r\n        else:\r\n            li.append(\"v\")\r\n    dots=0\r\n    j=1\r\n    while j<n+dots:\r\n        if li[j-1]==li[j]:\r\n            li.insert(j,\".\")\r\n            dots+=1\r\n        j+=1\r\n        \r\n    dots=0\r\n    n=len(li)\r\n    j=1\r\n    while j<n+dots:\r\n        if li[j-1]==\"c\" and li[j==\"v\"]:\r\n            li.insert(j+1,\".\")\r\n            dots+=1\r\n        j+=1\r\n        \r\n    n=len(li)\r\n    remdots=0\r\n    j=2\r\n    while j<n-remdots:\r\n        if li[j-2]==\".\" and li[j]==\".\":\r\n            li.pop(j-2)\r\n            remdots+=1\r\n            j-=1\r\n        j+=1\r\n        \r\n    n=len(li)\r\n    remdots=0\r\n    j=1\r\n    while j<n-remdots:\r\n        if li[j-1]==\".\" and li[j]==\".\":\r\n            li.pop(j-1)\r\n            remdots+=1\r\n            j-=1\r\n        j+=1\r\n        \r\n    if li[-1]==\"c\" and li[-2]==\".\":\r\n        li.pop(-2)\r\n    \r\n    if li[-1]==\".\":\r\n        li.pop(-1)\r\n    \r\n    \r\n    n=len(li)\r\n    ii=0\r\n    dots=0\r\n    while ii<n:\r\n        if li[ii]!=\".\":\r\n            li[ii]=s[ii-dots]\r\n        else:\r\n            dots+=1\r\n        ii+=1\r\n    s= \"\".join(li)\r\n    print(s)",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239893569",
            "author": "AadityaSanjeev",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 342,
            "memory": 30400,
            "submissionTime": 1704100440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239892464",
            "author": "AadityaSanjeev",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 15800,
            "submissionTime": 1704099840
        },
        "acceptedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    ai = list((map(int, input().split())))\r\n    l = 0\r\n    lst = {\"0\"}\r\n    t = 0\r\n    Flag = False\r\n    q = 1\r\n    for r in range(0, n):\r\n        t = t + (q * ai[r])\r\n        k = str(t)\r\n        if k in lst:\r\n            Flag = True\r\n            break\r\n        else:\r\n            lst.add(k)\r\n            q *= -1\r\n\r\n    if Flag:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "for i in range(int(input())):\r\n    n = int(input())\r\n    ai = list((map(int, input().split())))\r\n    l = 0\r\n    lst = [0]\r\n    Flag = False\r\n    q = 1\r\n    for r in range(0, n):\r\n        x = lst[-1] + (q * ai[r])\r\n        if x in lst:\r\n            Flag = True\r\n            break\r\n        else:\r\n            lst.append(x)\r\n            q *= -1\r\n\r\n    if Flag:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 5,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239895903",
            "author": "LizzieReed",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 28300,
            "submissionTime": 1704101700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239895770",
            "author": "LizzieReed",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 14400,
            "submissionTime": 1704101640
        },
        "acceptedCode": "t = int(input())\r\n\r\ndef func():\r\n    n = int(input())\r\n    num = list(map(int,input().split()))\r\n    #num = [n1[i]*(-1)  if i%2==1 else n1[i] for i in range(n)]\r\n    #now need to find if there is a subarray of sum 0.\r\n    #find sum after every index and if its seen before, there is a subarray with 0 sum\r\n    s = 0\r\n    sums = {0}\r\n    for i in range(n):\r\n        s+=((-1)**i)*num[i]\r\n        if s in sums:\r\n            print(\"YES\")\r\n            return\r\n        sums.add(s)\r\n    print(\"NO\")\r\n\r\n    \r\n\r\nfor _ in range(t):\r\n    func()",
        "rejectedCode": "t = int(input())\r\n\r\n# result = []\r\n# def findsum(s,nums,c):\r\n#     print(f\"current sum {s}, nums left {nums}, numbers used {c}\")\r\n#     if s==0 and c!=0:\r\n#         print(\"YES\")\r\n#         return\r\n#     if nums == []:\r\n#         print(\"NO\")\r\n#         return\r\n#     findsum(s+nums[0],nums[1:],c+1)\r\n#     findsum(s,nums[1:],c)\r\n\r\n\r\ndef func():\r\n    n = int(input())\r\n    num = list(map(int,input().split()))\r\n    #num = [n1[i]*(-1)  if i%2==1 else n1[i] for i in range(n)]\r\n    #now need to find if there is a subarray of sum 0.\r\n    #findsum(0,num,0)\r\n    #use hashing, find sum after every index and if its seen before, there is a subarray with 0 sum\r\n    s = 0\r\n    sums = [0]\r\n    for i in range(n):\r\n        s+=((-1)**i)*num[i]\r\n        if s in sums:\r\n            print(\"YES\")\r\n            return\r\n        sums.append(s)\r\n    print(\"NO\")\r\n\r\n    \r\n\r\nfor _ in range(t):\r\n    func()",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239846382",
            "author": "N2S_E2s",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 25300,
            "submissionTime": 1704066180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239846351",
            "author": "N2S_E2s",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704066120
        },
        "acceptedCode": "import math\r\ndef checksquare(i):\r\n    \r\n    c=int(math.sqrt(i))\r\n    if c**2==i:\r\n        return 1\r\n    else:\r\n        return 3\r\n\r\n\r\n\r\n\r\nn=int(input(\"\"))\r\nfor i in range (n):\r\n    l=int(input(\"\"))\r\n    k=list(map(int,input().split()))\r\n    if checksquare(sum(k))==1:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\n\r\n\r\n",
        "rejectedCode": "def checksquare(i):\r\n    c=int(math.sqrt(i))\r\n    if c**2==i:\r\n        return 1\r\n    else:\r\n        return 3\r\n\r\n\r\n\r\n\r\nn=int(input(\"\"))\r\nfor i in range (n):\r\n    l=int(input(\"\"))\r\n    k=list(map(int,input().split()))\r\n    if checksquare(sum(k))==1:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239881375",
            "author": "d0ngd1gua",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 374,
            "memory": 23500,
            "submissionTime": 1704094560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239881210",
            "author": "d0ngd1gua",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 295,
            "memory": 9500,
            "submissionTime": 1704094440
        },
        "acceptedCode": "import math\r\n\r\ndef solve():\r\n    input()\r\n    s = sum(map(int, input().split()))\r\n    if int(math.sqrt(s))**2 == s:\r\n        return \"YES\"\r\n    else:\r\n        return \"NO\"\r\n\r\n[print(solve()) for _ in range(int(input()))]\r\n",
        "rejectedCode": "import math\r\n\r\ndef solve():\r\n    input()\r\n    s = sum(map(int, input().split()))\r\n    if math.sqrt(s)**2 == s:\r\n        return \"YES\"\r\n    else:\r\n        return \"NO\"\r\n\r\n[print(solve()) for _ in range(int(input()))]",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239876803",
            "author": "belyak_anya",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 28300,
            "submissionTime": 1704091380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239876711",
            "author": "belyak_anya",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 27100,
            "submissionTime": 1704091320
        },
        "acceptedCode": "ans = list()\r\nfor r in range(int(input())):\r\n    count = int(input())\r\n    nums = list(map(int, input().split()))\r\n    state = {0}\r\n    cur_state = 0\r\n    for i in range(count):\r\n        cur_state += nums[i] * (-1) ** i\r\n        state.add(cur_state)\r\n    if len(state) == count + 1:\r\n        ans.append('NO')\r\n    else:\r\n        ans.append('YES')\r\nprint('\\n'.join(ans))",
        "rejectedCode": "ans = list()\r\nfor r in range(int(input())):\r\n    count = int(input())\r\n    nums = list(map(int, input().split()))\r\n    state = {0}\r\n    cur_state = 0\r\n    for i in range(count):\r\n        cur_state += nums[i] * (-1) ** i\r\n        state.add(cur_state)\r\n    if len(state) == count + 1:\r\n        ans.append('NO')\r\n    else:\r\n        ans.append('YES')\r\nprint('\\n'.join(ans))",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239871269",
            "author": "Rithvik119am",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 28200,
            "submissionTime": 1704087360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239871065",
            "author": "Rithvik119am",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 14700,
            "submissionTime": 1704087180
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int, input().split()))\r\n    prefix_sum=0\r\n    seen_sums=set()\r\n\r\n    for i in range(n):\r\n        prefix_sum+=a[i] if i%2==0 else -a[i]\r\n        if prefix_sum==0 or prefix_sum in seen_sums:\r\n            print(\"YES\")\r\n            break\r\n        seen_sums.add(prefix_sum)\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    ans=[0]*n\r\n    temp=0\r\n    i=0\r\n    while i<n:\r\n        if i&1==0:\r\n            temp+=a[i]\r\n        else:\r\n            temp-=a[i]\r\n        ans[i]=temp\r\n        if ans[i]==0 or ans[i] in ans[:i-n]:\r\n            print(\"YES\")\r\n            break\r\n        i+=1\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239861954",
            "author": "Parmida12",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 7600,
            "submissionTime": 1704080220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239860695",
            "author": "Parmida12",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 3,
            "runTime": 311,
            "memory": 7400,
            "submissionTime": 1704079260
        },
        "acceptedCode": "t=int(input())\r\nwhile t>0:\r\n    n=int(input())\r\n    s=input()\r\n    word=\"\"\r\n    ans=[]\r\n    for i in range(n):\r\n        if s[i]=='a' or s[i]=='e':\r\n            word+=s[i]\r\n        else:\r\n            if word==\"\" or i==n-1 or (s[i+1]!='a' and s[i+1]!='e'):\r\n                word+=s[i]\r\n            else:\r\n                ans+=[word]\r\n                word=s[i]\r\n    ans+=[word]\r\n    print('.'.join(ans))\r\n    t-=1",
        "rejectedCode": "t=int(input())\r\nb=int(2*1e5+1)\r\nsq=[False]*b\r\nnow=0\r\nwhile True:\r\n    tmp=now*now\r\n    if tmp>=b:\r\n        break\r\n    sq[tmp]=True\r\n    now+=1\r\n    \r\nwhile t>0:\r\n    n=int(input())\r\n    a=input().split()\r\n    sum=0\r\n    for i in a:\r\n        sum+=int(i)\r\n    if sq[sum]:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n                \r\n    t-=1",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239860693",
            "author": "bOrax10",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 25600,
            "submissionTime": 1704079260
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239860609",
            "author": "bOrax10",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 93,
            "memory": 0,
            "submissionTime": 1704079200
        },
        "acceptedCode": "import math\r\nt=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    x=sum(l)\r\n    if(math.floor(math.sqrt(x))**2==x):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "import math\r\nt=int(input())\r\nfor _ in range(t):\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n    x=sum(l)\r\n    if(math.sqrt(x)**2==x):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239867324",
            "author": "HustleR_",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 6500,
            "submissionTime": 1704084360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239867131",
            "author": "HustleR_",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 31,
            "memory": 100,
            "submissionTime": 1704084240
        },
        "acceptedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    ans = []\r\n    v = \"ae\"\r\n    c = \"bcd\"\r\n    temp = \"\"\r\n    temp += s[0]\r\n    temp += s[1]\r\n    if len(s) <3:\r\n        print(temp)\r\n        continue\r\n    for i in range(2, n-1):\r\n        #print(ans1)\r\n        if temp == \"\":\r\n            temp += s[i]\r\n        else:    \r\n            if s[i] in c:\r\n                if s[i+1] in c:\r\n                    temp += s[i]\r\n                    ans.append(temp)\r\n                    temp = \"\"\r\n                else:\r\n                    ans.append(temp)  \r\n                    temp = s[i] \r\n            if s[i] in v:\r\n                temp += s[i]\r\n    temp += s[-1]            \r\n    ans.append(temp)            \r\n    #print(ans)        \r\n    print(\".\".join(ans))                \r\n\r\n",
        "rejectedCode": "t = int(input())\r\nfor i in range(t):\r\n    n = int(input())\r\n    s = input()\r\n    ans = []\r\n    v = \"ae\"\r\n    c = \"bcd\"\r\n    temp = \"\"\r\n    temp += s[0]\r\n    temp += s[1]\r\n    for i in range(2, n-1):\r\n        #print(ans1)\r\n        if temp == \"\":\r\n            temp += s[i]\r\n        else:    \r\n            if s[i] in c:\r\n                if s[i+1] in c:\r\n                    temp += s[i]\r\n                    ans.append(temp)\r\n                    temp = \"\"\r\n                else:\r\n                    ans.append(temp)  \r\n                    temp = s[i] \r\n            if s[i] in v:\r\n                temp += s[i]\r\n    temp += s[-1]            \r\n    ans.append(temp)            \r\n    #print(ans)        \r\n    print(\".\".join(ans))                \r\n\r\n",
        "failedTestCase": {
            "input": "100\r\n2\r\nba\r\n2\r\nca\r\n2\r\nda\r\n2\r\nbe\r\n2\r\nce\r\n2\r\nde\r\n3\r\nbab\r\n3\r\nbac\r\n3\r\nbad\r\n3\r\nbeb\r\n3\r\nbec\r\n3\r\nbed\r\n3\r\ncab\r\n3\r\ncac\r\n3\r\ncad\r\n3\r\nceb\r\n3\r\ncec\r\n3\r\nced\r\n3\r\ndab\r\n3\r\ndac\r\n3\r\ndad\r\n3\r\ndeb\r\n3\r\ndec\r\n3\r\nded\r\n4\r\nbaba\r\n4\r\nbaca\r\n4\r\nbada\r\n4\r\nbabe\r\n4\r\nbace\r\n4\r\nbade\r\n4\r\ncaba\r\n4\r\ncaca\r\n4\r\ncada\r\n4\r\ncabe\r\n4\r\ncace\r\n4\r\ncade\r\n4\r\ndaba\r\n4\r\ndaca\r\n4\r\ndada\r\n4\r\ndabe\r\n4\r\ndace\r\n4\r\ndade\r\n4\r\nbeba\r\n5\r\nbabba\r\n5\r\nbabca\r\n5\r\nbabda\r\n5\r\nbabbe\r\n5\r\nbabce\r\n5\r\nbabde\r\n5\r\nbacba\r\n5\r\nbacca\r\n5\r\nbacda\r\n5\r\nbacbe\r\n5\r\nbacce\r\n5\r\nbacde\r\n5\r\nbadba\r\n5\r\nbadca\r\n5\r\nbadda\r...",
            "output": "baa\r\ncaa\r\ndaa\r\nbee\r\ncee\r\ndee\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba...",
            "expectedOutput": "ba\r\nca\r\nda\r\nbe\r\nce\r\nde\r\nbab\r\nbac\r\nbad\r\nbeb\r\nbec\r\nbed\r\ncab\r\ncac\r\ncad\r\nceb\r\ncec\r\nced\r\ndab\r\ndac\r\ndad\r\ndeb\r\ndec\r\nded\r\nba.ba\r\nba.ca\r\nba.da\r\nba.be\r\nba.ce\r\nba.de\r\nca.ba\r\nca.ca\r\nca.da\r\nca.be\r\nca.ce\r\nca.de\r\nda.ba\r\nda.ca\r\nda.da\r\nda.be\r\nda.ce\r\nda.de\r\nbe.ba\r\nbab.ba\r\nbab.ca\r\nbab.da\r\nbab.be\r\nbab.ce\r\nbab.de\r\nbac.ba\r\nbac.ca\r\nbac.da\r\nbac.be\r\nbac.ce\r\nbac.de\r\nbad.ba\r\nbad.ca\r\nbad.da\r\nbad.be\r\nbad.ce\r\nbad.de\r\nbeb.ba\r\nba.bab\r\nba.bac\r\nba.bad\r\nba.beb\r\nba.bec\r\nba.bed\r\nba.cab\r\nba.cac\r\nba.cad\r\nba.ceb\r\nba.cec\r\nba.ced\r\nba.dab\r\nba.dac\r\n...",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba', found: 'baa'\r\n"
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239842133",
            "author": "YERGALI",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 217,
            "memory": 29300,
            "submissionTime": 1704059160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239841608",
            "author": "YERGALI",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 500,
            "submissionTime": 1704058080
        },
        "acceptedCode": "import os,sys\r\nfrom io import BytesIO, IOBase\r\nfrom math import gcd, ceil, log2\r\nfrom collections import Counter as C, deque as deq, defaultdict\r\nfrom bisect import bisect_left as bsl, bisect_right as bsr\r\nfrom itertools import accumulate as A, combinations as Comp, product as Prod\r\n\r\nBUFSIZE = 8192\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ndef inp(): return input()\r\ndef inpI(): return int(input())\r\ndef inpV(): return tuple(map(int, input().split()))\r\ndef inpL(): return [i for i in input().split()]\r\ndef inpLI(): return [int(i) for i in input().split()]\r\n\r\nno = 'NO'\r\nyes = 'YES'\r\n\r\nfor _ in range(int(input())):\r\n    n = inpI()\r\n    a = inpLI()\r\n    d = set([0])\r\n    s = 0\r\n    for i,x in enumerate(a):\r\n        if i%2:\r\n            s+=x\r\n        else:\r\n            s-=x\r\n        if s in d:\r\n            print(yes)\r\n            break\r\n        d.add(s)\r\n    else:\r\n        print(no)",
        "rejectedCode": "import os,sys\r\nfrom io import BytesIO, IOBase\r\nfrom math import gcd, ceil, log2\r\nfrom collections import Counter as C, deque as deq, defaultdict\r\nfrom bisect import bisect_left as bsl, bisect_right as bsr\r\nfrom itertools import accumulate as A, combinations as Comp, product as Prod\r\n\r\nBUFSIZE = 8192\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ndef inp(): return input()\r\ndef inpI(): return int(input())\r\ndef inpV(): return tuple(map(int, input().split()))\r\ndef inpL(): return [i for i in input().split()]\r\ndef inpLI(): return [int(i) for i in input().split()]\r\n\r\nno = 'NO'\r\nyes = 'YES'\r\nt = 'aeuyoi'\r\n\r\nfor _ in range(int(input())):\r\n    n = inpI()\r\n    s = inp()\r\n    a = []\r\n    i = 0\r\n    while i<n-1:\r\n        if s[i] not in t:\r\n            if s[i+1] not in t:\r\n                a.append(s[i]+'.'+s[i+1])\r\n                i+=1\r\n            else:\r\n                a.append('.'+s[i])\r\n        else:\r\n            a.append(s[i])\r\n        i+=1\r\n    if i==n-1:\r\n        a.append(s[i])\r\n    print(''.join(a).strip('.'))\r\n\r\n    ",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "9\n1.4\n1. 2. 3. 4\n1. 3. 5. \n2. 2. \n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong output format YES or NO expected, but 9 found [1st token]\r\n"
        },
        "errorLine": 56,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239843517",
            "author": "Aditya_vignesh",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 19300,
            "submissionTime": 1704061800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239843355",
            "author": "Aditya_vignesh",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1704061500
        },
        "acceptedCode": "import math\r\nn=int(input())\r\nfor i in range(n):\r\n    k=int(input())\r\n    sum=0\r\n    f=(map(int,input().split()))\r\n    for j in f:\r\n        sum+=int(j)\r\n    u=int(math.sqrt(sum))\r\n    if int(u*u)==(sum):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n  ",
        "rejectedCode": "import math\r\nn=int(input(\"in: \"))\r\nfor i in range(n):\r\n    k=int(input(\"in :\"))\r\n    sum=0\r\n    f=(map(int,input().split()))\r\n    for j in f:\r\n        sum+=int(j)\r\n    u=int(math.sqrt(sum))\r\n    if int(u*u)==(sum):\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")\r\n  ",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "in: in :Yes\r\nin :Yes\r\nin :No\r\nin :Yes\r\nin :No\r\n",
            "expectedOutput": "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong output format YES or NO expected, but IN: found [1st token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239840183",
            "author": "EdiedRamos",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 187,
            "memory": 25300,
            "submissionTime": 1704054720
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239839919",
            "author": "EdiedRamos",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 109,
            "memory": 0,
            "submissionTime": 1704054000
        },
        "acceptedCode": "from math import sqrt\r\n\r\ntc = int(input())\r\nwhile tc > 0:\r\n  n = int(input())\r\n  arr = [int(x) for x in input().split()]\r\n  sum = 0\r\n  for v in arr:\r\n    sum += v\r\n  root = int(sqrt(sum))\r\n  if root * root == sum:\r\n    print(\"yes\")\r\n  else:\r\n    print(\"no\")\r\n  tc -= 1",
        "rejectedCode": "from math import sqrt\r\n\r\ntc = int(input())\r\nwhile tc > 0:\r\n  n = int(input())\r\n  arr = [int(x) for x in input().split()]\r\n  sum = 0\r\n  for v in arr:\r\n    sum += v\r\n  root = sqrt(sum)\r\n  if root * root == sum:\r\n    print(\"yes\")\r\n  else:\r\n    print(\"no\")\r\n  tc -= 1",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "yes\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nyes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nn...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239806283",
            "author": "sewa.bulgakov",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 7300,
            "submissionTime": 1704017040
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239806204",
            "author": "sewa.bulgakov",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1704016980
        },
        "acceptedCode": "t = int(input())\r\n\r\nfor _ in range(t) :\r\n    n = int(input())\r\n    s = input()\r\n    ss = s\r\n    ans = []\r\n    s = s.replace('a', 'V').replace('e', 'V').replace('b', 'C').replace('c', 'C').replace('d', 'C')\r\n    \r\n    i = n - 1\r\n    j = n\r\n    while i > 0:\r\n        if (s[i] == \"V\") : \r\n            # \u0415\u0441\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0438 CVC \r\n            if (j == i+2) :\r\n                ans.append(ss[i-1:i+2])\r\n                j = i-1\r\n            else : \r\n                ans.append(ss[i-1:i+1])\r\n                j = i-1\r\n            i -= 2\r\n        else : i -= 1\r\n    \r\n    print(\".\".join(ans[::-1]))\r\n\r\n\r\n\r\n",
        "rejectedCode": "t = int(input())\r\n\r\nfor _ in range(t) :\r\n    n = int(input())\r\n    s = input()\r\n    ss = s\r\n    ans = []\r\n    s = s.replace('a', 'V').replace('e', 'V').replace('b', 'C').replace('c', 'C').replace('d', 'C')\r\n    \r\n    i = n - 1\r\n    j = n - 1\r\n    while i > 0:\r\n        if (s[i] == \"V\") : \r\n            # \u0415\u0441\u043b\u0438 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0438 CVC \r\n            if (j == i+2) :\r\n                ans.append(ss[i-1:i+2])\r\n                j = i-1\r\n            else : \r\n                ans.append(ss[i-1:i+1])\r\n                j = i-1\r\n            i -= 2\r\n        else : i -= 1\r\n    \r\n    print(\".\".join(ans[::-1]))\r\n\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.ba\r\nba.ba\r\ndad.de.ca.bed.da\r\nda\r\ndac.da\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ba.ced.ba'\r\n"
        },
        "errorLine": 11,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239831393",
            "author": "ptripathy013",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 389,
            "memory": 30500,
            "submissionTime": 1704037800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239831312",
            "author": "ptripathy013",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 30900,
            "submissionTime": 1704037680
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int, input().split()))\r\n    l=[0]\r\n    for i in range(n):\r\n        l.append(((-1)**i)*a[i]+l[-1])\r\n    l.sort()\r\n    ans=\"NO\"\r\n    for i in range(n):\r\n        if l[i]==l[i+1]:\r\n            ans=\"YES\"\r\n    print(ans)",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = int(input())\r\n    a = [0]+list(map(int,input().split()))\r\n    # for i in range(2, n+1, 2):\r\n    #     a[i] = -a[i]\r\n    for i in range(1, n+1):\r\n        if i%2==0:\r\n            a[i] = -a[i] + a[i-1]\r\n        else:\r\n            a[i] = a[i] + a[i-1]\r\n    # print(a)\r\n    if len(set(a))!=n+1:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239828584",
            "author": "Mr.NoobNewBie",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 312,
            "memory": 27600,
            "submissionTime": 1704034560
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239827762",
            "author": "Mr.NoobNewBie",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 249,
            "memory": 8900,
            "submissionTime": 1704033600
        },
        "acceptedCode": "l =[]\r\nfor _ in range(int(input())):\r\n    s = int(input())\r\n    n = list(map(int, input().split()))\r\n\r\n    if sum(n)**0.50 == int(sum(n)**0.50):\r\n        l.append(\"YES\")\r\n    else:\r\n        l.append(\"NO\")\r\nfor i in l:\r\n    print(i)",
        "rejectedCode": "for _ in range(int(input())):\r\n    n = list(map(int,input().split()))\r\n    if sum(n)**0.50 == int(sum(n)**0.50):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected YES, found NO [8th token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239827689",
            "author": "Asmblxer",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 654,
            "memory": 13200,
            "submissionTime": 1704033540
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239827641",
            "author": "Asmblxer",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704033480
        },
        "acceptedCode": "import sys\r\ninput=lambda:sys.stdin.readline().rstrip()\r\nfor T in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    i = 0\r\n    while i < n:\r\n        print(s[i],end = '')\r\n        if i >= 1 and (s[i] == 'a' or s[i] =='e') and (s[i - 1] == 'b' or s[i - 1] == 'c' or s[i - 1] == 'd'):\r\n            if i < n - 3 and (s[i+1] == 'b' or s[i+1] == 'c' or s[i+1] == 'd') and (s[i+2] == 'b' or s[i+2] == 'c' or s[i+2] == 'd'):\r\n                print(s[i+1],end = '.')\r\n                i += 2\r\n                continue\r\n            elif i == n - 2:\r\n                print(s[i+1], end = '')\r\n                i += 2\r\n                continue\r\n            elif i != n - 1: print('.', end = '')\r\n        i += 1\r\n    print()",
        "rejectedCode": "import sys\r\ninput=lambda:sys.stdin.readline().rstrip()\r\nfor T in range(int(input())):\r\n    n = int(input())\r\n    s = input()\r\n    i = 0\r\n    while i < n:\r\n        print(s[i],end = '')\r\n        if i >= 1 and (s[i] == 'a' or s[i] =='e') and (s[i - 1] == 'b' or s[i - 1] == 'c' or s[i - 1] == 'd'):\r\n            if i < n - 3 and (s[i+1] == 'b' or s[i+1] == 'c' or s[i+1] == 'd') and (s[i+2] == 'b' or s[i+2] == 'c' or s[i+2] == 'd'):\r\n                print(s[i+1],end = '.')\r\n                i += 2\r\n                continue\r\n            elif i == n - 2:\r\n                print(s[i+1], end = '')\r\n                i += 2\r\n                continue\r\n            elif i != n - 1: print('.', )\r\n        i += 1\r\n    print()",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.\r\nced.bab\r\nba.\r\nba\r\ndad.de.\r\nca.\r\nbed.dad\r\ndac\r\ndac.dac\r\nda.\r\nbab.ba.\r\nba.\r\nbab.bab.ba.\r\nbab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ba.'\r\n"
        },
        "errorLine": 18,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239766222",
            "author": "kibblekibs",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 296,
            "memory": 31000,
            "submissionTime": 1703989380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239761847",
            "author": "kibblekibs",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 100,
            "submissionTime": 1703986380
        },
        "acceptedCode": "t = int(input())\r\n\r\nwhile t > 0:\r\n    t -= 1\r\n    n = int(input())\r\n    a = [int(x) for x in input().split()]\r\n\r\n    for i in range(n):\r\n        if i % 2 == 0:\r\n            a[i] *= -1\r\n\r\n    prefix_sum = [0] * n\r\n    prefix_sum[0] = a[0]\r\n    for i in range(1, n):\r\n        prefix_sum[i] = prefix_sum[i - 1] + a[i]\r\n\r\n    nums = set()\r\n    win = False\r\n    for num in prefix_sum:\r\n        if num in nums or num == 0:\r\n            print(\"YES\")\r\n            win = True\r\n            break\r\n        nums.add(num)\r\n\r\n    if not win: print(\"NO\")",
        "rejectedCode": "t = int(input())\r\n\r\nwhile t > 0:\r\n    n = int(input())\r\n    a = [int(x) for x in input().split()]\r\n\r\n    l = 0\r\n    r = len(a) - 1\r\n\r\n    sums = { 0: sum(a[::2]), 1:sum(a[1::2]) }\r\n\r\n    win = False\r\n    while l < r:\r\n        e_sum = sums[0]\r\n        o_sum = sums[1]\r\n        if e_sum == o_sum:\r\n            print(\"YES\")\r\n            win = True\r\n            break\r\n        l_val = a[l]\r\n        r_val = a[r]\r\n        l_par = l % 2\r\n        r_par = r % 2\r\n        if l_par == r_par:\r\n            if l_val <= r_val:\r\n                sums[l_par] -= l_val\r\n                l += 1\r\n            else:\r\n                sums[r_par] -= r_val\r\n                r -= 1\r\n        elif e_sum < o_sum:\r\n            if l_par == 1:\r\n                sums[l_par] -= l_val\r\n                l += 1\r\n            else:\r\n                sums[r_par] -= r_val\r\n                r -= 1\r\n        else:\r\n            if l_par == 0:\r\n                sums[l_par] -= l_val\r\n                l += 1\r\n            else:\r\n                sums[r_par] -= r_val\r\n                r -= 1\r\n\r\n    if not win: print(\"NO\")\r\n    t -= 1",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [4th token]\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239719905",
            "author": "Mr_Surfer",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 186,
            "memory": 26000,
            "submissionTime": 1703940900
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239719832",
            "author": "Mr_Surfer",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1703940840
        },
        "acceptedCode": "from math import *\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    b = sqrt(sum(a))\r\n    if int(b)==b:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "from math import *\r\nfor _ in range(int(input()):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    b = sqrt(sum(a))\r\n    if int(b)==b:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    ",
        "failedTestCase": null,
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239818762",
            "author": "mo-hit",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 4400,
            "submissionTime": 1704025740
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239818701",
            "author": "mo-hit",
            "lang": "PyPy 2",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704025680
        },
        "acceptedCode": "#!/usr/bin/env python\nimport os\nimport sys\nfrom io import BytesIO, IOBase\nfrom math import ceil,factorial,gcd,log2\nfrom collections import Counter, defaultdict\nimport heapq\nimport bisect\nimport random\nfrom copy import deepcopy\n\ndef get_label(id, n):\n    for i in range(1, n + 1):\n        if id // 5000 == i:\n            return i\n\ndef main():\n    for _ in range(int(input())):\n        a,b,c=map(int,input().split())\n        print(a^b^c)\n        \n\n        \n\n        \n\n\n\n            \n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()",
        "rejectedCode": "#!/usr/bin/env python\nimport os\nimport sys\nfrom io import BytesIO, IOBase\nfrom math import ceil,factorial,gcd,log2\nfrom collections import Counter, defaultdict\nimport heapq\nimport bisect\nimport random\nfrom copy import deepcopy\n\ndef get_label(id, n):\n    for i in range(1, n + 1):\n        if id // 5000 == i:\n            return i\n\ndef main():\n    for _ in range(int(input())):\n        a,b,c=map(int,input().split())\n        print(a^b^c)\n        \n\n        \n\n        \n\n\n\n            \n\n\n\n# region fastio\n\nBUFSIZE = 8192\n\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._file = file\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b\"\\n\") + (not b)\n            ptr = self.buffer.tell()\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            self.buffer.truncate(0), self.buffer.seek(0)\n\n\nclass IOWrapper(IOBase):\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\n\n\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n\n# endregion\n\nif __name__ == \"__main__\":\n    main()",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239817589",
            "author": "Marco_Lau",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 140,
            "memory": 29900,
            "submissionTime": 1704024840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239817343",
            "author": "Marco_Lau",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 36700,
            "submissionTime": 1704024660
        },
        "acceptedCode": "import io, os\r\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    f = list(map(int, input().split()))\r\n    a = 0\r\n    m = [0]\r\n    for i in range(n):\r\n        if i % 2 == 1:\r\n            a -= f[i]\r\n        else:\r\n            a += f[i]\r\n        m.append(a)\r\n    m.sort()\r\n    for i in range(n):\r\n        if m[i+1] == m[i]:\r\n            print('YES')\r\n            break\r\n    else:\r\n        print('NO')",
        "rejectedCode": "import os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n\r\n\r\ndef main():\r\n\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n\r\n    curr_sum = 0\r\n    \r\n    memo = {0}\r\n    for i in range(n):\r\n        curr_sum += (arr[i] if i % 2 == 0 else -arr[i])\r\n        if curr_sum in memo:\r\n            print('YES')\r\n            return\r\n        memo.add(curr_sum)\r\n    \r\n    print('NO')\r\n        \r\n\r\n\r\nBUFSIZE: int = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\ndef print(*args, **kwargs):\r\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\r\n    at_start = True\r\n    for x in args:\r\n        if not at_start:\r\n            file.write(sep)\r\n        file.write(str(x))\r\n        at_start = False\r\n    file.write(kwargs.pop(\"end\", \"\\n\"))\r\n    if kwargs.pop(\"flush\", False):\r\n        file.flush()\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\nif __name__ == \"__main__\":\r\n    for _ in range(int(input())):\r\n        main()",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239815345",
            "author": "ankitesh",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 296,
            "memory": 48200,
            "submissionTime": 1704023220
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239815168",
            "author": "ankitesh",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 35200,
            "submissionTime": 1704023100
        },
        "acceptedCode": "import os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n\r\nBUFSIZE = 8192\r\n\r\n#****************Fast Input/Ouput k class... \r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\")+(not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\n#***************FACTOrial********************\r\nclass Factorial:\r\n    def __init__(self, MOD):\r\n        self.MOD = MOD\r\n        self.factorials = [1, 1]\r\n        \r\n\r\n    def calc(self, n):\r\n        if n <= -1:\r\n            return -1\r\n        if n < len(self.factorials):\r\n            return self.factorials[n]\r\n        next_arr = [0] * (n+1-len(self.factorials))\r\n        initial_I = len(self.factorials)\r\n        pre = self.factorials[-1]\r\n        mod = self.MOD\r\n        for i in range(initial_I, n+1):\r\n            pre = next_arr[i-initial_I] = pre * i % mod\r\n        self.factorials += next_arr\r\n        return self.factorials[n]\r\n\r\n\r\n\r\n# ____________________Some Important Functions_______________________#\r\n\r\n\r\n\r\ndef Lower_Bound(permu, target):\r\n    answer = len(permu)\r\n    start = 0\r\n    end = len(permu)-1\r\n\r\n    while (start <= end):\r\n        middle = (end+start) // 2\r\n        if permu[middle] >= target:\r\n            answer = middle\r\n            end = middle-1\r\n        else:\r\n            start = middle+1\r\n    return answer  \r\n\r\n\r\ndef Upper_Bound(permu, target):\r\n    answer = len(permu)\r\n    start = 0\r\n    end = len(permu)-1\r\n\r\n    while (start <= end):\r\n        middle = (end+start) // 2\r\n        if permu[middle] <= target:\r\n            start = middle+1\r\n\r\n        else:\r\n            answer = middle\r\n            end = middle-1\r\n    return answer  # max index where x is greater than target\r\n\r\n\r\n#**************BINARRRYYYYYYYYY SEEEEEAAAAAARRRRRRRCCCCHHHHHH*********************************\r\n\r\ndef BS(permu, target):\r\n    ans = -1\r\n    l= 0\r\n    r = len(permu)-1\r\n    while (l <= r):\r\n        mid =(l+r)//2\r\n        \r\n        if permu[mid] > target:\r\n            r = mid-1\r\n        elif target > permu[mid]:\r\n            l = mid+1\r\n        else:\r\n            ans = mid  \r\n            break\r\n    return ans\r\n\r\n#********KADANE KA ALGORITHM*******************************\r\n\r\ndef Kadane(x):  # maximum sum contiguous subarray\r\n    sum_abtak = 0\r\n    curr = 0\r\n    for i in x:\r\n        curr += i\r\n        if curr < 0:\r\n            curr = 0\r\n        else:\r\n            sum_abtak = max(sum_abtak, curr)\r\n    return sum_abtak\r\n#**********PREFIX SUM******************\r\n\r\ndef PS(li):\r\n    pref_sum = [li[0]]\r\n    for i in range(1, len(li)):\r\n        pref_sum.append(pref_sum[-1]+li[i])\r\n    return pref_sum\r\n\r\n#**********Suffix Sum**************\r\ndef SS(li):\r\n    suffix=[0]*len(li)\r\n    suffix[-1]=li[-1]\r\n    for i in range(len(li)-2,-1,-1):\r\n        suffix[i]+=(suffix[i+1]+li[i])\r\n        # print(suffix,i)\r\n    return suffix\r\n\r\n#********Print All Factors**********************\r\n\r\ndef All_Factors(n):\r\n    prime = [{1, i} for i in range(n+1)]\r\n    p = 2\r\n    while (p <= n):\r\n        for i in range(p * 2, n+1, p):\r\n            prime[i].add(p)\r\n        p += 1\r\n    return prime[-1]\r\n\r\n# **************Sieve of Eratosthenes********************* \r\ndef Sieve_Prime_Factors(n):\r\n    if n<=1:\r\n        return 0\r\n    elif n==2:\r\n        return 1\r\n    elif n==3:\r\n        return 2\r\n    else:\r\n\r\n        primes=[1]*(n+1)\r\n        primes[0]=0\r\n        primes[1]=0\r\n\r\n        for i in range(2,int(n**0.5)+1):\r\n            if primes[i]!=0:\r\n                for j in range(i*i,n,i):\r\n                    primes[j]=0\r\n        ans=0\r\n        for i in range(2,n):\r\n            ans+=primes[i]            \r\n        return ans\r\n#**********ALL Prime FActors*****************\r\n\r\ndef Prime_Factors(n):\r\n    factors = {}\r\n    while (n % 2 == 0):\r\n        factors[2]=1+factors.get(2,0)\r\n        \r\n        n //= 2\r\n    for i in range(3, int(sqrt(n))+1, 2):  # only odd factors left\r\n        while n % i == 0:\r\n            factors[i]=1+factors.get(i,0)\r\n            n //= i\r\n    if n > 2:\r\n        factors[n]=1+factors.get(n,0)  # incase of prime\r\n    return factors\r\n\r\n#*********ARRAY Product**************** \r\ndef list_product(permu):\r\n    ans = 1\r\n    for i in permu:\r\n        ans *= i\r\n    return ans\r\n\r\n#********Some important functions************\r\nfrom math import ceil,floor,factorial,gcd,inf,sqrt,lcm\r\ninf=float(\"inf\")\r\nimport bisect\r\n\r\nfrom collections import defaultdict,Counter,deque\r\nfrom functools import reduce\r\nfrom itertools import accumulate\r\nfrom heapq import heapify, heappop, heappush ,nlargest   \r\n\r\nmod = 10 ** 9+7\r\nyes = 'YES'\r\nno = 'NO'\r\n\r\n\r\npi=\"3141592653589793238462643383279502884197\"\r\neng=\"abcdefghijklmnopqrstuvwxyz\"\r\n#************SOME IMPORTANT SHORTCUT FUNCTION ('_')********************\r\nnumb= lambda : map(int,input().split())\r\nlst= lambda : list(map(int,input().split()))\r\n\r\ndef swap(a,b,arr=None):\r\n    if arr:\r\n        arr[a],arr[b]=arr[b],arr[a]\r\n        return\r\n    else:\r\n        return (b,a)\r\nY= lambda : print(\"YES\")\r\nN= lambda : print(\"NO\")\r\ndef GCD(x,y):\r\n    while y!=0:\r\n        x,y=y, x%y\r\n    return x\r\n#***********************************************************************\r\n####*************The MAIN Switch********************\r\n# input_path=r\"C:\\Users\\ankit\\Coding\\CP\\A\\input.txt\"\r\n# output_path=r\"C:\\Users\\ankit\\Coding\\CP\\A\\output.txt\"\r\n# input_file=open(input_path,\"r\")\r\n# output_file=open(output_path,\"w\")\r\n# sys.stdin, sys.stdout = IOWrapper(input_file), IOWrapper(output_file)\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n#####################*************************************************##########################\r\n\r\ndef Ankitesh():\r\n    for _ in range(int(input())):\r\n        # s=input()\r\n        n=int(input())\r\n        nums=lst()\r\n        # s=input()\r\n        count=0\r\n        hmap={\"0\":1}\r\n        for i,item in enumerate(nums):\r\n            if i & 1:\r\n                nums[i]*=-1\r\n            count+=nums[i]\r\n            \r\n            hmap[str(count)]=1+hmap.get(str(count),0)\r\n            if hmap[str(count)]>1:\r\n                print(yes)\r\n                break\r\n        else:\r\n            print(no)\r\n        # print(hmap)    \r\n        # for key,val in hmap.items():\r\n            # if val>1:\r\n                # print(yes)\r\n                # break\r\n        # else:\r\n            # print(no)\r\n            \r\n                    \r\n                    \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n            \r\n        \r\nAnkitesh()\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "rejectedCode": "import os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n\r\nBUFSIZE = 8192\r\n\r\n#****************Fast Input/Ouput k class... \r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\")+(not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\n#***************FACTOrial********************\r\nclass Factorial:\r\n    def __init__(self, MOD):\r\n        self.MOD = MOD\r\n        self.factorials = [1, 1]\r\n        \r\n\r\n    def calc(self, n):\r\n        if n <= -1:\r\n            return -1\r\n        if n < len(self.factorials):\r\n            return self.factorials[n]\r\n        next_arr = [0] * (n+1-len(self.factorials))\r\n        initial_I = len(self.factorials)\r\n        pre = self.factorials[-1]\r\n        mod = self.MOD\r\n        for i in range(initial_I, n+1):\r\n            pre = next_arr[i-initial_I] = pre * i % mod\r\n        self.factorials += next_arr\r\n        return self.factorials[n]\r\n\r\n\r\n\r\n# ____________________Some Important Functions_______________________#\r\n\r\n\r\n\r\ndef Lower_Bound(permu, target):\r\n    answer = len(permu)\r\n    start = 0\r\n    end = len(permu)-1\r\n\r\n    while (start <= end):\r\n        middle = (end+start) // 2\r\n        if permu[middle] >= target:\r\n            answer = middle\r\n            end = middle-1\r\n        else:\r\n            start = middle+1\r\n    return answer  \r\n\r\n\r\ndef Upper_Bound(permu, target):\r\n    answer = len(permu)\r\n    start = 0\r\n    end = len(permu)-1\r\n\r\n    while (start <= end):\r\n        middle = (end+start) // 2\r\n        if permu[middle] <= target:\r\n            start = middle+1\r\n\r\n        else:\r\n            answer = middle\r\n            end = middle-1\r\n    return answer  # max index where x is greater than target\r\n\r\n\r\n#**************BINARRRYYYYYYYYY SEEEEEAAAAAARRRRRRRCCCCHHHHHH*********************************\r\n\r\ndef BS(permu, target):\r\n    ans = -1\r\n    l= 0\r\n    r = len(permu)-1\r\n    while (l <= r):\r\n        mid =(l+r)//2\r\n        \r\n        if permu[mid] > target:\r\n            r = mid-1\r\n        elif target > permu[mid]:\r\n            l = mid+1\r\n        else:\r\n            ans = mid  \r\n            break\r\n    return ans\r\n\r\n#********KADANE KA ALGORITHM*******************************\r\n\r\ndef Kadane(x):  # maximum sum contiguous subarray\r\n    sum_abtak = 0\r\n    curr = 0\r\n    for i in x:\r\n        curr += i\r\n        if curr < 0:\r\n            curr = 0\r\n        else:\r\n            sum_abtak = max(sum_abtak, curr)\r\n    return sum_abtak\r\n#**********PREFIX SUM******************\r\n\r\ndef PS(li):\r\n    pref_sum = [li[0]]\r\n    for i in range(1, len(li)):\r\n        pref_sum.append(pref_sum[-1]+li[i])\r\n    return pref_sum\r\n\r\n#**********Suffix Sum**************\r\ndef SS(li):\r\n    suffix=[0]*len(li)\r\n    suffix[-1]=li[-1]\r\n    for i in range(len(li)-2,-1,-1):\r\n        suffix[i]+=(suffix[i+1]+li[i])\r\n        # print(suffix,i)\r\n    return suffix\r\n\r\n#********Print All Factors**********************\r\n\r\ndef All_Factors(n):\r\n    prime = [{1, i} for i in range(n+1)]\r\n    p = 2\r\n    while (p <= n):\r\n        for i in range(p * 2, n+1, p):\r\n            prime[i].add(p)\r\n        p += 1\r\n    return prime[-1]\r\n\r\n# **************Sieve of Eratosthenes********************* \r\ndef Sieve_Prime_Factors(n):\r\n    if n<=1:\r\n        return 0\r\n    elif n==2:\r\n        return 1\r\n    elif n==3:\r\n        return 2\r\n    else:\r\n\r\n        primes=[1]*(n+1)\r\n        primes[0]=0\r\n        primes[1]=0\r\n\r\n        for i in range(2,int(n**0.5)+1):\r\n            if primes[i]!=0:\r\n                for j in range(i*i,n,i):\r\n                    primes[j]=0\r\n        ans=0\r\n        for i in range(2,n):\r\n            ans+=primes[i]            \r\n        return ans\r\n#**********ALL Prime FActors*****************\r\n\r\ndef Prime_Factors(n):\r\n    factors = {}\r\n    while (n % 2 == 0):\r\n        factors[2]=1+factors.get(2,0)\r\n        \r\n        n //= 2\r\n    for i in range(3, int(sqrt(n))+1, 2):  # only odd factors left\r\n        while n % i == 0:\r\n            factors[i]=1+factors.get(i,0)\r\n            n //= i\r\n    if n > 2:\r\n        factors[n]=1+factors.get(n,0)  # incase of prime\r\n    return factors\r\n\r\n#*********ARRAY Product**************** \r\ndef list_product(permu):\r\n    ans = 1\r\n    for i in permu:\r\n        ans *= i\r\n    return ans\r\n\r\n#********Some important functions************\r\nfrom math import ceil,floor,factorial,gcd,inf,sqrt,lcm\r\ninf=float(\"inf\")\r\nimport bisect\r\n\r\nfrom collections import defaultdict,Counter,deque\r\nfrom functools import reduce\r\nfrom itertools import accumulate\r\nfrom heapq import heapify, heappop, heappush ,nlargest   \r\n\r\nmod = 10 ** 9+7\r\nyes = 'YES'\r\nno = 'NO'\r\n\r\n\r\npi=\"3141592653589793238462643383279502884197\"\r\neng=\"abcdefghijklmnopqrstuvwxyz\"\r\n#************SOME IMPORTANT SHORTCUT FUNCTION ('_')********************\r\nnumb= lambda : map(int,input().split())\r\nlst= lambda : list(map(int,input().split()))\r\n\r\ndef swap(a,b,arr=None):\r\n    if arr:\r\n        arr[a],arr[b]=arr[b],arr[a]\r\n        return\r\n    else:\r\n        return (b,a)\r\nY= lambda : print(\"YES\")\r\nN= lambda : print(\"NO\")\r\ndef GCD(x,y):\r\n    while y!=0:\r\n        x,y=y, x%y\r\n    return x\r\n#***********************************************************************\r\n####*************The MAIN Switch********************\r\n# input_path=r\"C:\\Users\\ankit\\Coding\\CP\\A\\input.txt\"\r\n# output_path=r\"C:\\Users\\ankit\\Coding\\CP\\A\\output.txt\"\r\n# input_file=open(input_path,\"r\")\r\n# output_file=open(output_path,\"w\")\r\n# sys.stdin, sys.stdout = IOWrapper(input_file), IOWrapper(output_file)\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n#####################*************************************************##########################\r\n\r\ndef Ankitesh():\r\n    for _ in range(int(input())):\r\n        # s=input()\r\n        n=int(input())\r\n        nums=lst()\r\n        # s=input()\r\n        count=0\r\n        hmap={0:1}\r\n        for i,item in enumerate(nums):\r\n            if i & 1:\r\n                nums[i]*=-1\r\n            count+=nums[i]\r\n            \r\n            hmap[count]=1+hmap.get(count,0)\r\n            if hmap[count]>1:\r\n                print(yes)\r\n                break\r\n        else:\r\n            print(no)\r\n        # print(hmap)    \r\n        # for key,val in hmap.items():\r\n            # if val>1:\r\n                # print(yes)\r\n                # break\r\n        # else:\r\n            # print(no)\r\n            \r\n                    \r\n                    \r\n                    \r\n                \r\n            \r\n        \r\n            \r\n            \r\n        \r\nAnkitesh()\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 265,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239814801",
            "author": "GirirajParik_08",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 28500,
            "submissionTime": 1704022800
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239814578",
            "author": "GirirajParik_08",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 30900,
            "submissionTime": 1704022620
        },
        "acceptedCode": "import sys\r\n\r\n# Input functions\r\nreadint = lambda: int(sys.stdin.readline())\r\nreadar = lambda: list(map(int, sys.stdin.readline().split()))\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    a = list(map(int,input().split()))\r\n    s = set()\r\n    sum = 0\r\n    for i in range(n):\r\n        if(i%2==0):\r\n            sum += -a[i]\r\n            s.add(sum)\r\n        else:\r\n            sum += a[i]\r\n            s.add(sum)\r\n    # print(s)\r\n    if(len(s) != n or 0 in s):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "rejectedCode": "import sys\r\n\r\n# Input functions\r\nreadint = lambda: int(sys.stdin.readline())\r\nreadar = lambda: list(map(int, sys.stdin.readline().split()))\r\n\r\nt = readint()\r\nfor _ in range(t):\r\n    n = readint()\r\n    a = readar()\r\n    s = set()\r\n    sum = 0\r\n    for i in range(n):\r\n        if(i%2==0):\r\n            sum += -a[i]\r\n            s.add(sum)\r\n        else:\r\n            sum += a[i]\r\n            s.add(sum)\r\n    # print(s)\r\n    if(len(s) != n or 0 in s):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239815762",
            "author": "ahmadelhajj",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 405,
            "memory": 29200,
            "submissionTime": 1704023520
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239815493",
            "author": "ahmadelhajj",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 32400,
            "submissionTime": 1704023340
        },
        "acceptedCode": "def zero_sum(a):\r\n    c = [0]*(len(a)+1)\r\n    cumul = 0\r\n    for i,ai in enumerate(a):\r\n        cumul+=ai\r\n        c[i]=cumul\r\n    c.sort()\r\n    for i in range(len(c)):\r\n        if c[i-1]==c[i]:return True\r\n    return False\r\n\r\ndef f(a):\r\n    for i in range(1,len(a),2):\r\n        a[i]*=-1\r\n    print(\"YES\" if zero_sum(a) else \"NO\")\r\n\r\nfor _ in range(int(input())):\r\n    input()\r\n    f(list(map(int,input().split())))\r\n",
        "rejectedCode": "def zero_sum(a):\r\n    c = set([0])\r\n    cumul = 0\r\n    for ai in a:\r\n        cumul+=ai\r\n        if cumul in c:\r\n            return True\r\n        c.add(cumul)\r\n    return False\r\n\r\ndef f(a):\r\n    for i in range(1,len(a),2):\r\n        a[i]*=-1\r\n    print(\"YES\" if zero_sum(a) else \"NO\")\r\n\r\nfor _ in range(int(input())):\r\n    input()\r\n    f(list(map(int,input().split())))\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239807546",
            "author": "Ratery",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 202,
            "memory": 30900,
            "submissionTime": 1704017880
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239807469",
            "author": "Ratery",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 124,
            "memory": 0,
            "submissionTime": 1704017820
        },
        "acceptedCode": "def solve() -> None:\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    a = [0]\r\n    sm = 0\r\n    for i, x in enumerate(arr):\r\n        if i % 2:\r\n            sm += x\r\n        else:\r\n            sm -= x\r\n        a.append(sm)\r\n    print(\"YES\" if len(set(a)) < len(a) else \"NO\")\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "rejectedCode": "def solve() -> None:\r\n    n = int(input())\r\n    arr = list(map(int, input().split()))\r\n    a = []\r\n    sm = 0\r\n    for i, x in enumerate(arr):\r\n        if i % 2:\r\n            sm += x\r\n        else:\r\n            sm -= x\r\n        a.append(sm)\r\n    print(\"YES\" if not sm or len(set(a)) < len(a) else \"NO\")\r\n\r\n\r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [38th token]\r\n"
        },
        "errorLine": 4,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239805989",
            "author": "Lorenzy05",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 155,
            "memory": 20300,
            "submissionTime": 1704016860
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239805777",
            "author": "Lorenzy05",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1704016740
        },
        "acceptedCode": "\"\"\"\r\nAccomplished using the JetBrains Academy plugin by JetBrains https://plugins.jetbrains.com/plugin/10081-jetbrains-academy\r\n\r\nTo modify the template, go to Preferences -> Editor -> File and Code Templates -> Other\r\n\"\"\"\r\n\r\ndef Solution(x):\r\n    s = x**0.5\r\n    if s**2 == round(s, 3) ** 2:\r\n        return \"YES\"\r\n    else:\r\n        return \"NO\"\r\n\r\nif __name__ == \"__main__\":\r\n    # Write your solution here\r\n\r\n    test = int(input())\r\n\r\n    Values = []\r\n\r\n    for x in range(test):\r\n        Each = int(input())\r\n        Contains = input().split()\r\n        v = 0\r\n        for y in range(Each):\r\n            v = v + int(Contains[y])\r\n        Values.append(v)\r\n\r\n    for x in Values:\r\n        print(Solution(x))\r\n\r\n    pass",
        "rejectedCode": "\"\"\"\r\nAccomplished using the JetBrains Academy plugin by JetBrains https://plugins.jetbrains.com/plugin/10081-jetbrains-academy\r\n\r\nTo modify the template, go to Preferences -> Editor -> File and Code Templates -> Other\r\n\"\"\"\r\n\r\ndef Solution(x):\r\n    s = x**0.5\r\n    if s**2 == round(s, 3) ** 2:\r\n        return \"YES\"\r\n    else:\r\n        return \"NO\"\r\n\r\nif __name__ == \"__main__\":\r\n    # Write your solution here\r\n\r\n    test = int(input())\r\n\r\n    Values = []\r\n\r\n    for x in range(5):\r\n        Each = int(input())\r\n        Contains = input().split()\r\n        v = 0\r\n        for y in range(Each):\r\n            v = v + int(Contains[y])\r\n        Values.append(v)\r\n\r\n    for x in Values:\r\n        print(Solution(x))\r\n\r\n    pass\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer Answer contains longer sequence [length = 10000], but output contains 5 elements\r\n"
        },
        "errorLine": 21,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "239805256",
            "author": "WorkingTemplar",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 358,
            "memory": 11000,
            "submissionTime": 1704016440
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "G - Bicycles",
            "submissionID": "239804954",
            "author": "WorkingTemplar",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 77,
            "memory": 3100,
            "submissionTime": 1704016200
        },
        "acceptedCode": "\nimport functools\nimport sys\n# sys.setrecursionlimit(2000000)\nfrom collections import defaultdict\nimport collections\n#from sortedcontainers import SortedList\nimport math\nimport heapq\nfrom collections import deque\n\nimport sys\ninput = sys.stdin.readline\n\n# def solve(N,M,graph,arr):\n#     node = 0\n#     heap_list = []\n#     heap_list.append((0,arr[0],node))\n#     best_dist = [math.inf]*(N)\n#     #parents = [-1]*(N)\n#     best_dist[node] = 0\n#     best_bike_speed = [math.inf]*N\n#     best_bike_speed[0] = arr[0]\n#     best_bike_speed_processed = [math.inf]*N\n#     while heap_list:\n#         dist, bike, node = heapq.heappop(heap_list)\n#         # if dist == best_dist[node] or bike == best_bike_speed[node]:\n#         #     best_dist[node] = dist\n#         if bike < best_bike_speed_processed[node]:\n#             best_bike_speed_processed[node] = bike\n#             for child,new_dist in graph[node]:\n#                 #curr_bike = min(bike,arr[child])\n#                 if dist+new_dist*bike < best_dist[child] or (bike < best_bike_speed[child] and bike < arr[child]):\n#                     best_dist[child] = min(best_dist[child], dist+new_dist*bike) #min(dist+new_dist,best_dist[child])\n#                     best_bike_speed[child] = min(best_bike_speed[child],bike)\n#                     #parents[child] = node\n#                     heapq.heappush(heap_list,(dist+new_dist*bike,min(bike,arr[child]),child))\n#     return best_dist[-1]\n\ndef solve(N,M,graph,arr):\n    node = 0\n    heap_list = []\n    heap_list.append((0,arr[0],node))\n    best_dist = [math.inf]*(N)\n    #parents = [-1]*(N)\n    best_dist[node] = 0\n    best_bike_speed = [math.inf]*N\n    best_bike_speed[0] = arr[0]\n    best_bike_speed_processed = [math.inf]*N\n    while heap_list:\n        dist, bike, node = heapq.heappop(heap_list)\n        # if dist == best_dist[node] or bike == best_bike_speed[node]:\n        #     best_dist[node] = dist\n        if bike < best_bike_speed_processed[node]:\n            best_bike_speed_processed[node] = bike\n            for child,new_dist in graph[node]:\n                #curr_bike = min(bike,arr[child])\n                if dist+new_dist*bike < best_dist[child] or (bike < best_bike_speed_processed[child] and bike < arr[child]):\n                    best_dist[child] = min(best_dist[child], dist+new_dist*bike) #min(dist+new_dist,best_dist[child])\n                    #best_bike_speed[child] = min(best_bike_speed[child],bike)\n                    #parents[child] = node\n                    heapq.heappush(heap_list,(dist+new_dist*bike,min(bike,arr[child]),child))\n    return best_dist[-1]\n\n\nt = int(input())\nfor j in range(1 , t +1):\n    #S = input()\n    #N = int(input())\n    #A = input().strip()\n    #mat = []\n    #A,B = input().split(\" \")\n    N, M = list(map(int,input().split(\" \")))\n    mat = []\n    for _ in range(M):\n        mat.append(list(map(int,input().split(\" \"))))\n        # mat[-1][-1] -= 1\n        # mat[-1][]\n\n    graph = collections.defaultdict(list)\n    for x,y,z in mat:\n        graph[x-1].append([y-1,z])\n        graph[y-1].append([x-1,z])\n    arr = list(map(int,input().split(\" \")))\n\n    result = solve(N,M,graph,arr)\n    print(result)\n    #print(\"Case #{}: {}\".format(j, result))\n    ## print('{:.8f}'.format(result))\n",
        "rejectedCode": "\nimport functools\nimport sys\n# sys.setrecursionlimit(2000000)\nfrom collections import defaultdict\nimport collections\n#from sortedcontainers import SortedList\nimport math\nimport heapq\nfrom collections import deque\n\nimport sys\ninput = sys.stdin.readline\n\ndef solve(N,M,graph,arr):\n    node = 0\n    heap_list = []\n    heap_list.append((0,arr[0],node))\n    best_dist = [math.inf]*(N)\n    #parents = [-1]*(N)\n    best_dist[node] = 0\n    best_bike_speed = [math.inf]*N\n    best_bike_speed[0] = arr[0]\n    best_bike_speed_processed = [math.inf]*N\n    while heap_list:\n        dist, bike, node = heapq.heappop(heap_list)\n        # if dist == best_dist[node] or bike == best_bike_speed[node]:\n        #     best_dist[node] = dist\n        if bike < best_bike_speed_processed[node]:\n            best_bike_speed_processed[node] = bike\n            for child,new_dist in graph[node]:\n                #curr_bike = min(bike,arr[child])\n                if dist+new_dist*bike < best_dist[child] or (bike < best_bike_speed[child] and bike < arr[child]):\n                    best_dist[child] = min(best_dist[child], dist+new_dist*bike) #min(dist+new_dist,best_dist[child])\n                    best_bike_speed[child] = min(best_bike_speed[child],bike)\n                    #parents[child] = node\n                    heapq.heappush(heap_list,(dist+new_dist*bike,min(bike,arr[child]),child))\n    return best_dist[-1]\n\n\nt = int(input())\nfor j in range(1 , t +1):\n    #S = input()\n    #N = int(input())\n    #A = input().strip()\n    #mat = []\n    #A,B = input().split(\" \")\n    N, M = list(map(int,input().split(\" \")))\n    mat = []\n    for _ in range(M):\n        mat.append(list(map(int,input().split(\" \"))))\n        # mat[-1][-1] -= 1\n        # mat[-1][]\n\n    graph = collections.defaultdict(list)\n    for x,y,z in mat:\n        graph[x-1].append([y-1,z])\n        graph[y-1].append([x-1,z])\n    arr = list(map(int,input().split(\" \")))\n\n    result = solve(N,M,graph,arr)\n    print(result)\n    #print(\"Case #{}: {}\".format(j, result))\n    ## print('{:.8f}'.format(result))\n",
        "failedTestCase": {
            "input": "100\r\n3 3\r\n3 2 8\r\n1 2 5\r\n1 3 9\r\n8 2 7\r\n5 4\r\n4 3 10\r\n1 5 8\r\n1 3 8\r\n2 5 6\r\n10 3 3 9 1\r\n5 4\r\n5 4 7\r\n1 5 5\r\n3 2 4\r\n1 2 1\r\n8 9 2 4 8\r\n2 5\r\n1 2 10\r\n2 1 8\r\n2 1 6\r\n1 2 6\r\n2 1 3\r\n4 2\r\n3 10\r\n3 2 4\r\n2 1 2\r\n3 2 1\r\n3 2 7\r\n2 1 7\r\n3 2 4\r\n3 1 6\r\n2 3 9\r\n3 1 4\r\n2 1 5\r\n9 4 7\r\n4 10\r\n3 4 7\r\n3 2 9\r\n2 1 8\r\n1 4 6\r\n1 3 1\r\n2 3 8\r\n4 3 5\r\n2 4 10\r\n3 1 8\r\n4 2 3\r\n4 5 6 4\r\n3 2\r\n3 1 8\r\n3 2 4\r\n6 9 1\r\n6 8\r\n6 4 1\r\n1 4 5\r\n5 2 9\r\n6 5 3\r\n3 2 8\r\n6 4 6\r\n4 6 3\r\n2 6 10\r\n7 3 7 5 2 4\r\n3 2\r\n3 2 7\r\n2 1 3\r\n3 8 7\r\n4 10\r\n1 2 4\r\n3 2 9\r\n3 4 1\r\n2 3 5\r\n1 3 3\r\n...",
            "output": "56\r\n80\r\n40\r\n12\r\n22\r\n24\r\n48\r\n40\r\n30\r\n24\r\n122\r\n20\r\n24\r\n3\r\n9\r\n20\r\n42\r\n21\r\n15\r\n2\r\n28\r\n102\r\n156\r\n90\r\n2\r\n5\r\n13\r\n28\r\n65\r\n95\r\n74\r\n7\r\n37\r\n20\r\n27\r\n18\r\n2\r\n18\r\n72\r\n2\r\n65\r\n6\r\n91\r\n26\r\n12\r\n2\r\n32\r\n32\r\n40\r\n126\r\n3\r\n6\r\n32\r\n4\r\n49\r\n7\r\n23\r\n9\r\n63\r\n20\r\n50\r\n45\r\n49\r\n7\r\n19\r\n33\r\n20\r\n7\r\n42\r\n38\r\n60\r\n20\r\n9\r\n36\r\n16\r\n6\r\n67\r\n6\r\n4\r\n3\r\n32\r\n2\r\n12\r\n1\r\n16\r\n24\r\n60\r\n39\r\n5\r\n10\r\n21\r\n39\r\n4\r\n30\r\n10\r\n9\r\n25\r\n60\r\n41\r\n90\r\n",
            "expectedOutput": "56\r\n80\r\n40\r\n12\r\n22\r\n24\r\n48\r\n40\r\n30\r\n24\r\n122\r\n20\r\n24\r\n3\r\n9\r\n20\r\n42\r\n21\r\n15\r\n2\r\n28\r\n102\r\n156\r\n90\r\n2\r\n5\r\n13\r\n28\r\n65\r\n91\r\n74\r\n7\r\n37\r\n20\r\n27\r\n18\r\n2\r\n13\r\n72\r\n2\r\n65\r\n6\r\n91\r\n26\r\n12\r\n2\r\n32\r\n32\r\n40\r\n126\r\n3\r\n6\r\n32\r\n4\r\n49\r\n7\r\n23\r\n9\r\n63\r\n20\r\n50\r\n45\r\n49\r\n7\r\n19\r\n33\r\n20\r\n7\r\n42\r\n38\r\n60\r\n20\r\n9\r\n36\r\n16\r\n6\r\n67\r\n6\r\n4\r\n3\r\n32\r\n2\r\n12\r\n1\r\n16\r\n24\r\n60\r\n39\r\n5\r\n10\r\n21\r\n39\r\n4\r\n30\r\n10\r\n9\r\n25\r\n60\r\n41\r\n90\r\n",
            "CheckerComment": "wrong answer 30th numbers differ - expected: '91', found: '95'\r\n"
        },
        "errorLine": 14,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239798922",
            "author": "brao72",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1902,
            "memory": 39500,
            "submissionTime": 1704012180
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239797597",
            "author": "brao72",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 5000,
            "memory": 22800,
            "submissionTime": 1704011220
        },
        "acceptedCode": "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, index, value):\n        while index <= self.size:\n            self.tree[index] += value\n            index += index & -index\n\n    def query(self, index):\n        sum = 0\n        while index > 0:\n            sum += self.tree[index]\n            index -= index & -index\n        return sum\n\ndef fun(a, b):\n    # Combine and sort the segments\n    segments = sorted(zip(a, b), reverse=True)\n\n    # Normalize b values to use in Fenwick Tree\n    unique_b = sorted(set(b))\n    b_to_index = {v: i+1 for i, v in enumerate(unique_b)}\n\n    tree = FenwickTree(len(unique_b))\n    contained_count = 0\n\n    for _, right_end in segments:\n        b_index = b_to_index[right_end]\n        contained_count += tree.query(b_index)\n        tree.update(b_index, 1)\n\n    print(contained_count)\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        x,y = map(int,input().split())\n        a.append(x)\n        b.append(y)\n    fun(a,b)\n",
        "rejectedCode": "def fun(a,b):\n    l = []\n    for i in range(len(a)):\n        l.append((a[i],b[i]))\n    l.sort()\n    ends = []\n    c = 0\n    for start , end in l:\n        for i in ends:\n            if(end < i):\n                c += 1\n        ends.append(end)\n    print(c)\n        \nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    for i in range(n):\n        x,y = map(int,input().split())\n        a.append(x)\n        b.append(y)\n    fun(a,b)\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n647453678 930853853\r\n-586814073 570193412\r\n-490363662 281213000\r\n-703158044 591740767\r\n137659014 352608457\r\n-774601557 -390838254\r\n-867423209 -524087527\r\n-28391755 692355005\r\n-729209925 704738138\r\n-217098545 856705188\r\n-716155101 191142422\r\n-901655099 656094991\r\n384746555 694653351\r\n-605420601 -561339913\r\n811192007 826647575\r\n-377150013 354556959\r\n684345222 874905831\r\n-46479142 170684323\r\n-793019907 5395128\r\n-788095085 -445094138\r\n-380816261 893458206\r\n-31460295 62063481\r\n-501097580 -409603254\r\n...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239795308",
            "author": "moizahmedbss303",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 26000,
            "submissionTime": 1704009780
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239794180",
            "author": "moizahmedbss303",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 93,
            "memory": 2000,
            "submissionTime": 1704009000
        },
        "acceptedCode": "def is_perfect_square(num):\r\n    root = int(num ** 0.5)\r\n    return root * root == num\r\n\r\nt = int(input())\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    vect = list(map(int, input().split()))\r\n    _sum = sum(vect)\r\n    result = \"YES\" if is_perfect_square(_sum) else \"NO\"\r\n    print(result)\r\n",
        "rejectedCode": "import math\r\n\r\ndef is_perfect_square(num):\r\n    root = math.isqrt(num)\r\n    return root * root == num\r\n\r\ndef main():\r\n    t = int(input())\r\n    for _ in range(t):\r\n        n = int(input())\r\n        vect = list(map(int, input().split()))\r\n        _sum = sum(vect)\r\n        result = \"YES\" if is_perfect_square(_sum) else \"NO\"\r\n        print(result)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239788402",
            "author": "chamchoum",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 46,
            "memory": 0,
            "submissionTime": 1704004920
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239788343",
            "author": "chamchoum",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1704004860
        },
        "acceptedCode": "t=int(input())\r\n\r\nfor i in range(t):\r\n    l=[]\r\n    for i in range(3):\r\n         l.append(input().strip())\r\n    \r\n    for i in l:\r\n        if( '?' in i):\r\n            if('A' not in i):\r\n                print('A')\r\n            elif('B' not in i):\r\n                print('B')\r\n            else:\r\n                print('C')\r\n\r\n\r\n",
        "rejectedCode": "t=int(input())\r\n\r\nfor i in range(t):\r\n    l=[]\r\n    for i in range(3):\r\n         l.append(input().strip())\r\n    print(l)\r\n    for i in l:\r\n        if( '?' in i):\r\n            if('A' not in i):\r\n                print('A')\r\n            elif('B' not in i):\r\n                print('B')\r\n            else:\r\n                print('C')\r\n\r\n\r\n",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "['ABC', 'C?B', 'BCA']\r\nA\r\n['BCA', 'CA?', 'ABC']\r\nB\r\n['?AB', 'BCA', 'ABC']\r\nC\r\n",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'A', found: '['ABC','\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239615588",
            "author": "spartac",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 218,
            "memory": 24300,
            "submissionTime": 1703925300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239615302",
            "author": "spartac",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 3400,
            "submissionTime": 1703925120
        },
        "acceptedCode": "DEBUG = True\r\nDEBUG = False \r\n#-----------------------------------------------------\r\nfrom cmath import sqrt\r\nimport collections\r\nfrom queue import Queue\r\nfrom collections import deque\r\nimport sys\r\nimport fileinput, re\r\n\r\nif DEBUG:\r\n    file_path = \"input.txt\"\r\n    sys.stdin = open(file_path, 'r')\r\n\r\nT = int(input())\r\n\r\nfor t in range(T):\r\n    n = int(input())\r\n    word = input()\r\n    vowels = {'a', 'e'}\r\n    consonants = {'b', 'c', 'd'}\r\n    i = 0\r\n    res = []\r\n    while True:\r\n        if i + 1 == len(word):\r\n            res[-1] = word[i]\r\n            break\r\n        if i + 2 == len(word):\r\n            for j in range(i, len(word)):\r\n                res += word[j]\r\n            break\r\n        #print(word[i], word[i + 1])\r\n        if word[i] in consonants and word[i + 1] in vowels:\r\n            res += word[i]\r\n            res += word[i + 1]\r\n            res += '.'\r\n            i += 2\r\n        elif word[i] in consonants and word[i + 1] in consonants:\r\n            res[-1] = word[i]\r\n            res += '.'\r\n            i += 1\r\n     \r\n    print(''.join(res))",
        "rejectedCode": "DEBUG = True\r\nDEBUG = False \r\n#-----------------------------------------------------\r\nfrom cmath import sqrt\r\nimport collections\r\nfrom queue import Queue\r\nfrom collections import deque\r\nimport sys\r\nimport fileinput, re\r\n\r\nif DEBUG:\r\n    file_path = \"input.txt\"\r\n    sys.stdin = open(file_path, 'r')\r\n\r\nT = int(input())\r\n\r\nfor t in range(T):\r\n    n = int(input())\r\n    word = input()\r\n    vowels = {'a', 'e'}\r\n    consonants = {'b', 'c', 'd'}\r\n    i = 0\r\n    res = []\r\n    while True:\r\n        if i + 2 == len(word) or i + 1 == len(word):\r\n            for j in range(i, len(word)):\r\n                res += word[j]\r\n            break\r\n        #print(word[i], word[i + 1])\r\n        if word[i] in consonants and word[i + 1] in vowels:\r\n            res += word[i]\r\n            res += word[i + 1]\r\n            res += '.'\r\n            i += 2\r\n        elif word[i] in consonants and word[i + 1] in consonants:\r\n            res[-1] = word[i]\r\n            res += '.'\r\n            i += 1\r\n     \r\n    print(''.join(res))",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "ba.ced.ba.b\r\nba.ba\r\ndad.de.ca.bed.da.d\r\nda.c\r\ndac.da.c\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "expectedOutput": "ba.ced.bab\r\nba.ba\r\ndad.de.ca.bed.dad\r\ndac\r\ndac.dac\r\nda.bab.ba.ba.bab.bab.ba.bab.ba\r\n",
            "CheckerComment": "wrong answer 1st words differ - expected: 'ba.ced.bab', found: 'ba.ced.ba.b'\r\n"
        },
        "errorLine": 25,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239783698",
            "author": "toizan",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 6500,
            "submissionTime": 1704001620
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239782310",
            "author": "toizan",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 46,
            "memory": 100,
            "submissionTime": 1704000600
        },
        "acceptedCode": "import sys\n\nfrom math import sqrt\n\n\nri = lambda: int(sys.stdin.readline())\nrs = lambda: sys.stdin.readline()\nrl = lambda: list(map(int, rs().split()))\n\ncons = {'b', 'c', 'd'}\ndef solve(n, w):\n    syllables = []\n    i = 0\n    s = ''\n    for j in range(n):\n        if i == 2:\n            if j + 2 < n and w[j + 2] not in cons:\n                pass\n            elif j + 1 == n:\n                pass\n            else:\n                syllables.append(s)\n                s = ''\n                i = 0\n        if i == 3:\n            syllables.append(s)\n            s = ''\n            i = 0\n        s += w[j]\n        i += 1\n    if s:\n        syllables.append(s)\n    return '.'.join(syllables)\n\n    \n\n\nt = ri()\nfor _ in range(t):\n    n = ri()\n    w = rs().strip()\n    print(solve(n, w))\n",
        "rejectedCode": "import sys\n\nfrom math import sqrt\n\n\nri = lambda: int(sys.stdin.readline())\nrs = lambda: sys.stdin.readline()\nrl = lambda: list(map(int, rs().split()))\n\ndef solve(n, a):\n    s = sum(a)\n    if sqrt(s)**2 == s:\n        return \"YES\"\n    return \"NO\"\n    \n\n\nt = ri()\nfor _ in range(t):\n    n = ri()\n    a = rl()\n    print(solve(n, a))\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 10,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239777691",
            "author": "USharma",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 2480,
            "memory": 25700,
            "submissionTime": 1703997360
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239775549",
            "author": "USharma",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 77,
            "memory": 2800,
            "submissionTime": 1703995860
        },
        "acceptedCode": "from bisect import bisect_left as lower_bound\r\nfrom bisect import bisect_right as upper_bound\r\n\r\nclass FenwickTree:\r\n    def __init__(self, x):\r\n        bit = self.bit = list(x)\r\n        size = self.size = len(bit)\r\n        for i in range(size):\r\n            j = i | (i + 1)\r\n            if j < size:\r\n                bit[j] += bit[i]\r\n\r\n    def update(self, idx, x):\r\n        \"\"\"updates bit[idx] += x\"\"\"\r\n        while idx < self.size:\r\n            self.bit[idx] += x\r\n            idx |= idx + 1\r\n\r\n    def __call__(self, end):\r\n        \"\"\"calc sum(bit[:end])\"\"\"\r\n        x = 0\r\n        while end:\r\n            x += self.bit[end - 1]\r\n            end &= end - 1\r\n        return x\r\n\r\n    def find_kth(self, k):\r\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\r\n        idx = -1\r\n        for d in reversed(range(self.size.bit_length())):\r\n            right_idx = idx + (1 << d)\r\n            if right_idx < self.size and self.bit[right_idx] <= k:\r\n                idx = right_idx\r\n                k -= self.bit[idx]\r\n        return idx + 1, k\r\n\r\nclass SortedList:\r\n    block_size = 700\r\n\r\n    def __init__(self, iterable=()):\r\n        self.macro = []\r\n        self.micros = [[]]\r\n        self.micro_size = [0]\r\n        self.fenwick = FenwickTree([0])\r\n        self.size = 0\r\n        for item in iterable:\r\n            self.insert(item)\r\n\r\n    def insert(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        j = upper_bound(self.micros[i], x)\r\n        self.micros[i].insert(j, x)\r\n        self.size += 1\r\n        self.micro_size[i] += 1\r\n        self.fenwick.update(i, 1)\r\n        if len(self.micros[i]) >= self.block_size:\r\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\r\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\r\n            self.fenwick = FenwickTree(self.micro_size)\r\n            self.macro.insert(i, self.micros[i + 1][0])\r\n\r\n    def pop(self, k=-1):\r\n        i, j = self._find_kth(k)\r\n        self.size -= 1\r\n        self.micro_size[i] -= 1\r\n        self.fenwick.update(i, -1)\r\n        return self.micros[i].pop(j)\r\n\r\n    def __getitem__(self, k):\r\n        i, j = self._find_kth(k)\r\n        return self.micros[i][j]\r\n\r\n    def count(self, x):\r\n        return self.upper_bound(x) - self.lower_bound(x)\r\n\r\n    def __contains__(self, x):\r\n        return self.count(x) > 0\r\n\r\n    def lower_bound(self, x):\r\n        i = lower_bound(self.macro, x)\r\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\r\n\r\n    def upper_bound(self, x):\r\n        i = upper_bound(self.macro, x)\r\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\r\n\r\n    def _find_kth(self, k):\r\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\r\n\r\n    def __len__(self):\r\n        return self.size\r\n\r\n    def __iter__(self):\r\n        return (x for micro in self.micros for x in micro)\r\n\r\n    def __repr__(self):\r\n        return str(list(self))\r\nimport bisect\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    intervals = []\r\n    for i in range(n):\r\n        a, b = map(int, input().split())\r\n        intervals.append((a, b))\r\n\r\n    intervals.sort(key=lambda x: x[1], reverse=True)\r\n    st = SortedList([])\r\n    count = 0\r\n    for start, end in intervals:\r\n        count += bisect.bisect_right(st, start, 0, len(st))\r\n        st.insert(start)\r\n    print(count)",
        "rejectedCode": "from sortedcontainers import SortedList\r\nimport bisect\r\nfor _ in range(int(input())):\r\n    n = int(input())\r\n    intervals = []\r\n    for i in range(n):\r\n        a, b = map(int, input().split())\r\n        intervals.append((a, b))\r\n\r\n    intervals.sort(key=lambda x: x[1])\r\n    st = SortedList([])\r\n    count = 0\r\n    for start, end in intervals:\r\n        count += len(st)\r\n        count -= bisect.bisect_right(st, start, 0, len(st))\r\n        st.add(start)\r\n    print(count)",
        "failedTestCase": {
            "input": "5\r\n2\r\n2 3\r\n1 4\r\n6\r\n2 6\r\n3 9\r\n4 5\r\n1 8\r\n7 10\r\n-2 100\r\n4\r\n-10 10\r\n-5 5\r\n-12 12\r\n-13 13\r\n5\r\n-4 9\r\n-2 5\r\n3 4\r\n6 7\r\n8 10\r\n4\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239774599",
            "author": "Charulota",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 27500,
            "submissionTime": 1703995140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239774310",
            "author": "Charulota",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 14,
            "runTime": 1000,
            "memory": 31100,
            "submissionTime": 1703994960
        },
        "acceptedCode": "import sys\r\ndef func():\r\n    n=int(input())\r\n    ar=list(map(int,sys.stdin.readline().split()))\r\n    e,o=0,0\r\n    mp=set([0])\r\n    for i in range (n):\r\n        if(i%2):\r\n            o+=ar[i]\r\n        else:\r\n            e+=ar[i]\r\n        \r\n        x=(o-e)\r\n        if(x==0 or x in mp):\r\n            print(\"YES\")\r\n            return\r\n        \r\n        mp.add(x)\r\n    print(\"NO\")\r\n\r\n\r\n\r\nt=int(input())\r\nfor i in range(t):\r\n    func()\r\n            \r\n",
        "rejectedCode": "import sys\r\ndef func():\r\n    n=int(input())\r\n    ar=list(map(int,sys.stdin.readline().split()))\r\n    e,o=0,0\r\n    mp={}\r\n    for i in range (n):\r\n        if(i%2):\r\n            o+=ar[i]\r\n        else:\r\n            e+=ar[i]\r\n        \r\n        x=(o-e)\r\n        if(x==0 or mp.get(x)):\r\n            print(\"YES\")\r\n            return\r\n        \r\n        mp[x]=1\r\n    print(\"NO\")\r\n\r\n\r\n\r\nt=int(input())\r\nfor i in range(t):\r\n    func()\r\n            \r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n1 4 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 6,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239765099",
            "author": "nijuusei_A",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 171,
            "memory": 20300,
            "submissionTime": 1703988600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239764991",
            "author": "nijuusei_A",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Compilation",
            "errorCaseNo": 0,
            "runTime": 0,
            "memory": 0,
            "submissionTime": 1703988540
        },
        "acceptedCode": "# LUOGU_RID: 141561040\nimport math\n     \ndef solve():\n    n = int(input())\n    arr_sum = sum(map(int,input().split()))\n    if math.sqrt(arr_sum) == int(math.sqrt(arr_sum)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n     \n     \nfor i in range(int(input())):\n    solve()",
        "rejectedCode": "# LUOGU_RID: 141560698\n    import math\n     \n    def solve():\n        n = int(input())\n        arr_sum = sum(map(int,input().split()))\n        if math.sqrt(arr_sum) == int(math.sqrt(arr_sum)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        \n     \n     \n    for i in range(int(input())):\n        solve()",
        "failedTestCase": null,
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239757220",
            "author": "grippa",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 280,
            "memory": 42100,
            "submissionTime": 1703983380
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239757025",
            "author": "grippa",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 14200,
            "submissionTime": 1703983260
        },
        "acceptedCode": "\"\"\"\r\ncases = int(input())\r\nfor i in range(cases):\r\n    n = int(input())\r\n    line = input().split()\r\n    #for num in line:\r\n    #    num = int(num)\r\n\r\n    solved = False\r\n    for l in range(n):\r\n        for r in range(l, n):\r\n            o_sum = e_sum = 0\r\n            for idx in range(l, r + 1):\r\n                num = int(line[idx])\r\n                if idx%2 == 1:\r\n                    o_sum += num\r\n                else:\r\n                    e_sum += num\r\n            if o_sum == e_sum and o_sum != 0:\r\n                solved = True\r\n    if solved:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\"\"\"\r\ncases = int(input())\r\nfor i in range(cases):\r\n    n = int(input())\r\n    line = input().split()\r\n    arr = []\r\n    for i in range(n):\r\n        if i%2 == 0:\r\n            arr.append(-int(line[i]))\r\n        else:\r\n            arr.append(int(line[i]))\r\n    solved = False\r\n    sum = 0\r\n    s = set()\r\n\r\n    for i in range(n):\r\n        sum += arr[i]\r\n        if sum == 0 or sum in s:\r\n            solved = True\r\n        s.add(sum)\r\n        \r\n    if solved:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    ",
        "rejectedCode": "\"\"\"\r\ncases = int(input())\r\nfor i in range(cases):\r\n    n = int(input())\r\n    line = input().split()\r\n    #for num in line:\r\n    #    num = int(num)\r\n\r\n    solved = False\r\n    for l in range(n):\r\n        for r in range(l, n):\r\n            o_sum = e_sum = 0\r\n            for idx in range(l, r + 1):\r\n                num = int(line[idx])\r\n                if idx%2 == 1:\r\n                    o_sum += num\r\n                else:\r\n                    e_sum += num\r\n            if o_sum == e_sum and o_sum != 0:\r\n                solved = True\r\n    if solved:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n\"\"\"\r\ncases = int(input())\r\nfor i in range(cases):\r\n    n = int(input())\r\n    line = input().split()\r\n    arr = []\r\n    for i in range(n):\r\n        if i%2 == 0:\r\n            arr.append(-int(line[i]))\r\n        else:\r\n            arr.append(int(line[i]))\r\n    solved = False\r\n    for i in range(n):\r\n        sum = arr[i]\r\n        if sum == 0:\r\n            solved = True\r\n        for j in range(i + 1, n):\r\n            sum += arr[j]\r\n            if sum == 0:\r\n                solved = True\r\n    if solved:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    ",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 37,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239756572",
            "author": "rpnishok_11",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 655,
            "memory": 18300,
            "submissionTime": 1703982840
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239756326",
            "author": "rpnishok_11",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 343,
            "memory": 6800,
            "submissionTime": 1703982660
        },
        "acceptedCode": "import math\r\n\r\nfor _ in range(int(input())):\r\n  n=int(input())\r\n  a=list(map(int,input().split()))\r\n  x=sum(a)\r\n  if int(math.sqrt(x))**2==x:\r\n    print(\"YES\")\r\n  else:\r\n    print(\"NO\")",
        "rejectedCode": "import math\r\n\r\nfor _ in range(int(input())):\r\n  n=int(input())\r\n  a=list(map(int,input().split()))\r\n  x=sum(a)\r\n  if (math.sqrt(x))**2==x:\r\n    print(\"YES\")\r\n  else:\r\n    print(\"NO\")",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239755088",
            "author": "Vijay_179",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1703981700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239755036",
            "author": "Vijay_179",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1703981640
        },
        "acceptedCode": "T=int(input())\r\nfor i in range(T):\r\n    for j in range(3):\r\n        a=input()\r\n        if \"C\" not in a:\r\n            print (\"C\")\r\n        elif \"A\" not in a:\r\n            print(\"A\")\r\n        elif \"B\" not in a:\r\n            print(\"B\")",
        "rejectedCode": "T=int(input())\r\nfor i in range(T):\r\n    N=int(input())\r\n    for j in range(N):\r\n        a=input()\r\n        if \"C\" not in a:\r\n            print (\"C\")\r\n        elif \"A\" not in a:\r\n            print(\"A\")\r\n        elif \"B\" not in a:\r\n            print(\"B\")",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "F - Greetings",
            "submissionID": "239618966",
            "author": "NothingAtall",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 1512,
            "memory": 65000,
            "submissionTime": 1703927400
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239614772",
            "author": "NothingAtall",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 155,
            "memory": 9600,
            "submissionTime": 1703924820
        },
        "acceptedCode": "# -*- coding: UTF-8 -*-\r\nimport sys\r\nimport copy # list.deepcopy, copy\r\nimport heapq # priority_queue\r\nimport bisect #  bisect_left(lb), bisect_right(ub)\r\nimport functools # functools.cmp_to_key\r\nfrom math import * # log2, log10, round, gcd\r\nfrom collections import defaultdict, Counter, deque\r\nfrom operator import itemgetter # unique: consecutive elems remove\r\nfrom itertools import groupby # permutation\r\nimport itertools # list(chain.from_iterable)\r\nfrom itertools import accumulate # prefix_sum(p0, p0 + p1,...)\r\nfrom decimal import Decimal, ROUND_HALF_UP # Decimal('target').quantize(Decimal('precision'), rounding=ROUND_HALF_UP)\r\nfrom functools import partial\r\n\r\nreadline = lambda: sys.stdin.readline().rstrip('\\r\\n')\r\neprint = partial(print, file=sys.stderr)\r\nclass BIT:\r\n    def __init__(self, _n):\r\n        self.n = _n + 1\r\n        self.tr = [0 for _ in range(self.n)]\r\n    def add(self, x, v):\r\n        while x < self.n:\r\n            self.tr[x] += v\r\n            x += x & -x\r\n    def query(self, x):\r\n        res = 0\r\n        while x:\r\n            res += self.tr[x]\r\n            x -= x & -x\r\n        return res\r\ndef solve():\r\n    n = int(readline())\r\n    a = sorted([list(map(int, readline().split())) for _ in range(n)])\r\n\r\n    xs = sorted(list(set([r for l, r in a])))\r\n    for i, (l, r) in enumerate(a):\r\n        p = bisect.bisect_left(xs, r) + 1\r\n        a[i][1] = p\r\n\r\n    cnt = defaultdict(int)\r\n    bit = BIT(n)\r\n    res = 0\r\n    for i, (l, r) in enumerate(a):\r\n        res += bit.query(n) - bit.query(r - 1)\r\n        res += cnt[l]\r\n        cnt[l] += 1\r\n        bit.add(r, 1)\r\n    print(res)\r\ndef main():\r\n    t = 1\r\n    t = int(readline())\r\n    for _ in range(t):\r\n        solve()\r\nif __name__ == \"__main__\":\r\n    main()",
        "rejectedCode": "# -*- coding: UTF-8 -*-\r\nimport sys\r\nimport copy # list.deepcopy, copy\r\nimport heapq # priority_queue\r\nimport bisect #  bisect_left(lb), bisect_right(ub)\r\nimport functools # functools.cmp_to_key\r\nfrom math import * # log2, log10, round, gcd\r\nfrom collections import defaultdict, Counter, deque\r\nfrom operator import itemgetter # unique: consecutive elems remove\r\nfrom itertools import groupby # permutation\r\nimport itertools # list(chain.from_iterable)\r\nfrom itertools import accumulate # prefix_sum(p0, p0 + p1,...)\r\nfrom decimal import Decimal, ROUND_HALF_UP # Decimal('target').quantize(Decimal('precision'), rounding=ROUND_HALF_UP)\r\nfrom functools import partial\r\n\r\nreadline = lambda: sys.stdin.readline().rstrip('\\r\\n')\r\neprint = partial(print, file=sys.stderr)\r\ndef solve():\r\n    n = int(readline())\r\n    s = sum(list(map(int, readline().split())))\r\n\r\n    d = sqrt(s)\r\n    print(\"YES\" if d * d == s else \"NO\")\r\ndef main():\r\n    t = 1\r\n    t = int(readline())\r\n    for _ in range(t):\r\n        solve()\r\nif __name__ == \"__main__\":\r\n    main()",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n2\r\n4 7\r\n1\r\n2\r\n2\r\n8 7\r\n2\r\n9 8\r\n1\r\n9\r\n1\r\n10\r\n3\r\n8 6 10\r\n3\r\n3 9 1\r\n5\r\n5 8 1 10 7\r\n3\r\n4 8 6\r\n5\r\n1 10 2 5 1\r\n2\r\n7 4\r\n1\r\n4\r\n5\r\n4 5 10 1 5\r\n1\r\n2\r\n5\r\n1 2 3 6 2\r\n4\r\n9 7 6 2\r\n2\r\n8 3\r\n5\r\n2 4 10 4 8\r\n4\r\n2 9 10 3\r\n1\r\n1\r\n2\r\n10 7\r\n2\r\n5 7\r\n2\r\n8 10\r\n1\r\n4\r\n3\r\n10 6 1\r\n3\r\n9 3 2\r\n4\r\n2 5 5 9\r\n4\r\n7 9 2 5\r\n5\r\n10 8 9 2 10\r\n2\r\n9 8\r\n1\r\n10\r\n1\r\n3\r\n4\r\n5 1 10 5\r\n3\r\n8 7 5\r\n3\r\n2 10 1\r\n4\r\n8 4 4 3\r\n4\r\n5 6 4 2\r\n2\r\n6 8\r\n3\r\n2 7 10\r\n1\r\n1\r\n5\r\n8 5 10 4 10\r\n2\r\n7 3\r\n5\r\n3 9 10 6 3\r\n2\r\n5 9\r\n2\r\n3 9\r\n1\r\n6\r\n5\r\n7 10 3...",
            "output": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nN...",
            "expectedOutput": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO...",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 18,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239741152",
            "author": "Macliker",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 0,
            "submissionTime": 1703964000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239740924",
            "author": "Macliker",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 78,
            "memory": 2700,
            "submissionTime": 1703963520
        },
        "acceptedCode": "t = int(input())\r\nfor _ in range(t) : \r\n    l1 = str(input())\r\n    l2 = str(input())\r\n    l3 = str(input())\r\n    L = [l1,l2,l3]\r\n    for l in L : \r\n        if '?' in l : \r\n            for z in \"ABC\" : \r\n                if z not in l : \r\n                    print(z)\r\n                    break",
        "rejectedCode": "t = int(input())\r\nfor _ in t : \r\n    i = list(str(input()))\r\n    ans = 0 \r\n    for l in i : \r\n        if i.count(l) == 1 : \r\n            ans = i\r\n            break\r\n    print(int(l))\r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239741057",
            "author": "um_farouk",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 108,
            "memory": 5400,
            "submissionTime": 1703963760
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239740990",
            "author": "um_farouk",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12800,
            "submissionTime": 1703963640
        },
        "acceptedCode": "def solve():\r\n    t = int(input())\r\n    s = input()\r\n    v = [i for i in range(len(s)) if s[i]=='a' or s[i]=='e']\r\n    ans = \"\"\r\n\r\n    for i in range(1, len(v)):\r\n        d = v[i]-v[i-1]\r\n        \r\n        if d==2:\r\n            ans += s[v[i-1]-1:v[i-1]+1]\r\n            \r\n        else:\r\n            ans += s[v[i-1]-1:v[i-1]+2]\r\n        ans += '.'\r\n        \r\n    ans += s[v[-1]-1:]\r\n    return ans\r\n    \r\nfor _ in range(int(input())):\r\n    print(solve())",
        "rejectedCode": "def solve():\r\n    t = int(input())\r\n    s = input()\r\n    v = [i for i in range(len(s)) if s[i]=='a' or s[i]=='e']\r\n    ans = \"\"\r\n\r\n    for i in range(1, len(v)):\r\n        d = v[i]-v[i-1]\r\n        \r\n        if d==2:\r\n            ans += s[v[i-1]-1:v[i-1]+1]\r\n            \r\n        else:\r\n            ans += s[v[i-1]-1:v[i-1]+2]\r\n        ans += '.'\r\n        \r\n    ans += s[v[-1]-1:]\r\n    return ans\r\n    \r\nfor _ in range(int(input())):\r\n    print(solve())",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 0,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239726161",
            "author": "frostyyallens",
            "lang": "PyPy 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 77,
            "memory": 0,
            "submissionTime": 1703946960
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "B - Not Quite Latin Square",
            "submissionID": "239725871",
            "author": "frostyyallens",
            "lang": "PyPy 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 61,
            "memory": 0,
            "submissionTime": 1703946840
        },
        "acceptedCode": "def notQuiteLatinSquare():\r\n    for num in range(int(input())):\r\n        lineOne = input()\r\n        lineTwo = input()\r\n        lineThree = input()\r\n\r\n        if '?' in lineOne:\r\n            if 'A' not in lineOne:\r\n                print('A')\r\n            if 'B' not in lineOne:\r\n                print('B')\r\n            if 'C' not in lineOne:\r\n                print('C')\r\n\r\n        if '?' in lineTwo:\r\n            if 'A' not in lineTwo:\r\n                print('A')\r\n            if 'B' not in lineTwo:\r\n                print('B')\r\n            if 'C' not in lineTwo:\r\n                print('C')\r\n\r\n        if '?' in lineThree:\r\n            if 'A' not in lineThree:\r\n                print('A')\r\n            if 'B' not in lineThree:\r\n                print('B')\r\n            if 'C' not in lineThree:\r\n                print('C')\r\n\r\n\r\nnotQuiteLatinSquare()",
        "rejectedCode": "def notQuiteLatinSquare():\r\n    for num in range(int(input())):\r\n        lineOne = list(map(str, input().split()))\r\n        lineTwo = list(map(str, input().split()))\r\n        lineThree = list(map(str, input().split()))\r\n\r\n        if '?' in lineOne:\r\n            if 'A' not in lineOne:\r\n                print('A')\r\n            if 'B' not in lineOne:\r\n                print('B')\r\n            if 'C' not in lineOne:\r\n                print('C')\r\n\r\n        if '?' in lineTwo:\r\n            if 'A' not in lineTwo:\r\n                print('A')\r\n            if 'B' not in lineTwo:\r\n                print('B')\r\n            if 'C' not in lineTwo:\r\n                print('C')\r\n\r\n        if '?' in lineThree:\r\n            if 'A' not in lineThree:\r\n                print('A')\r\n            if 'B' not in lineThree:\r\n                print('B')\r\n            if 'C' not in lineThree:\r\n                print('C')\r\n\r\nnotQuiteLatinSquare()",
        "failedTestCase": {
            "input": "3\r\nABC\r\nC?B\r\nBCA\r\nBCA\r\nCA?\r\nABC\r\n?AB\r\nBCA\r\nABC\r\n",
            "output": "",
            "expectedOutput": "A\r\nB\r\nC\r\n",
            "CheckerComment": "wrong answer Unexpected EOF in the participants output\r\n"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239725502",
            "author": "HedgeTea",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 93,
            "memory": 8200,
            "submissionTime": 1703946660
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239723797",
            "author": "HedgeTea",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 12700,
            "submissionTime": 1703946060
        },
        "acceptedCode": "import io, os , sys,math\r\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline \r\n\r\ndef pint():\r\n    return int(input().decode().rstrip(\"\\r\\n\"))\r\n\r\ndef ilist():\r\n    return list(map(int,input().decode().rstrip(\"\\r\\n\").split()))\r\n\r\ndef strin():\r\n    return input().decode().rstrip(\"\\r\\n\")\r\n\r\n\r\ncases = pint()\r\n\r\nfor i in range(cases):\r\n    conso = ['b','c','d']\r\n\r\n    word = []\r\n    length = pint()\r\n    n = strin()\r\n    passed = False\r\n    i = len(n) -1\r\n    while not passed:\r\n        if n[i] == \"a\" or n[i] == \"e\":\r\n            word.append(n[i-1:i+1])\r\n            i= i-2\r\n        else:\r\n            word.append(n[i-2:i+1])\r\n            i= i-3\r\n\r\n        if i == -1:\r\n            passed = True\r\n    \r\n    word.reverse()\r\n\r\n    print(\".\".join(word))\r\n\r\n        ",
        "rejectedCode": "import io, os , sys,math\r\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline \r\n\r\ndef pint():\r\n    return int(input().decode().rstrip(\"\\r\\n\"))\r\n\r\ndef ilist():\r\n    return list(map(int,input().decode().rstrip(\"\\r\\n\").split()))\r\n\r\ndef strin():\r\n    return input().decode().rstrip(\"\\r\\n\")\r\n\r\n\r\ncases = pint()\r\n\r\nfor i in range(cases):\r\n    conso = ['b','c','d']\r\n\r\n    word = \"\"\r\n    length = pint()\r\n    n = strin()\r\n    passed = False\r\n    i = len(n) -1\r\n    while not passed:\r\n        if n[i] == \"a\" or n[i] == \"e\":\r\n            word = \".\" + n[i-1:i+1] + word\r\n            i= i-2\r\n        else:\r\n            word = \".\" + n[i-2:i+1] + word\r\n            i= i-3\r\n\r\n        if i == -1:\r\n            passed = True\r\n    print(word[1:])\r\n\r\n        ",
        "failedTestCase": {
            "input": "1\r\n200000\r\nbedebacacadcababcabdedacceddadacebbacacacedbacacececedacabedabadbadabecebdababbabacacacebbababecbebabedcacbecadededdebebbadecbebadabdadedadcebebedabcadcecabebababadedababecabdededecacacacababdacecabecadacdadadceccecacabacadaddedecebadeccedbabaccededcededebbacadcecacadebedacabeddebbacabecebedebebabacedadbedbaccababedaccacacabedbebecedadaddebbacdacdabacedededabedcadbadabececacebedecbabcedecbabacbecacabebdedadecececadabacabcedcacbadacdabebeddabecedceddacacacabedbecbacadedcadedababecadcabeccebdacada...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 19,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239716733",
            "author": "wafaashaker26",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1703938200
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239604147",
            "author": "wafaashaker26",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 93,
            "memory": 2700,
            "submissionTime": 1703918520
        },
        "acceptedCode": "\r\nt =int (input())\r\nwhile t:\r\n    n,m,c=map(int,input().split())\r\n    if n==m:\r\n        print (c)\r\n    elif m==c:\r\n        print(n)\r\n    elif n==c:\r\n        print (m)\r\n    t-=1\r\n        \r\n    ",
        "rejectedCode": "\r\nt =int (input())\r\nwhile t:\r\n    n,m,c=map(int,input().split())\r\n    if n==m:\r\n        print (c)\r\n    elif m==c:\r\n        print(n)\r\n    elif n==c:\r\n        print (m)\r\n        \r\n    ",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 9,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239716607",
            "author": "katonyonko",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 233,
            "memory": 34700,
            "submissionTime": 1703938140
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239716289",
            "author": "katonyonko",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 3,
            "runTime": 155,
            "memory": 24100,
            "submissionTime": 1703937900
        },
        "acceptedCode": "import io\r\nimport sys\r\nfrom collections import defaultdict, deque, Counter\r\nfrom itertools import permutations, combinations, accumulate\r\nfrom heapq import heappush, heappop\r\nfrom bisect import bisect_right, bisect_left\r\nfrom math import gcd\r\nimport math\r\n\r\n_INPUT = \"\"\"\\\r\n6\r\n6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n\"\"\"\r\n\r\ndef input():\r\n  return sys.stdin.readline()[:-1]\r\n\r\ndef solve(test):\r\n  t=int(input())\r\n  for _ in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    s=set()\r\n    now=0\r\n    ans='NO'\r\n    for i in range(n):\r\n      if i%2==0:\r\n        now+=a[i]\r\n      else:\r\n        now-=a[i]\r\n      if str(now) in s: ans='YES'; break\r\n      s.add(str(now))\r\n    if '0' in s: ans='YES'\r\n    print(ans)\r\n\r\ndef random_input():\r\n  from random import randint,shuffle\r\n  N=randint(1,10)\r\n  M=randint(1,N)\r\n  A=list(range(1,M+1))+[randint(1,M) for _ in range(N-M)]\r\n  shuffle(A)\r\n  return (\" \".join(map(str, [N,M]))+\"\\n\"+\" \".join(map(str, A))+\"\\n\")*3\r\n\r\ndef simple_solve():\r\n  return []\r\n\r\ndef main(test):\r\n  if test==0:\r\n    solve(0)\r\n  elif test==1:\r\n    sys.stdin = io.StringIO(_INPUT)\r\n    case_no=int(input())\r\n    for _ in range(case_no):\r\n      solve(0)\r\n  else:\r\n    for i in range(1000):\r\n      sys.stdin = io.StringIO(random_input())\r\n      x=solve(1)\r\n      y=simple_solve()\r\n      if x!=y:\r\n        print(i,x,y)\r\n        print(*[line for line in sys.stdin],sep='')\r\n        break\r\n\r\n#0:\u63d0\u51fa\u7528\u30011:\u4e0e\u3048\u3089\u308c\u305f\u30c6\u30b9\u30c8\u7528\u30012:\u30b9\u30c8\u30ec\u30b9\u30c6\u30b9\u30c8\u7528\r\nmain(0)",
        "rejectedCode": "import io\r\nimport sys\r\nfrom collections import defaultdict, deque, Counter\r\nfrom itertools import permutations, combinations, accumulate\r\nfrom heapq import heappush, heappop\r\nfrom bisect import bisect_right, bisect_left\r\nfrom math import gcd\r\nimport math\r\n\r\n_INPUT = \"\"\"\\\r\n6\r\n6\r\n3\r\n1 3 2\r\n6\r\n1 1 1 1 1 1\r\n10\r\n1 6 9 8 55 3 14 2 7 2\r\n8\r\n1 2 11 4 1 5 1 2\r\n6\r\n2 6 1 5 7 8\r\n9\r\n2 5 10 4 4 9 6 7 8\r\n\"\"\"\r\n\r\nmod=10**9+7\r\ndef input():\r\n  return sys.stdin.readline()[:-1]\r\n\r\ndef solve(test):\r\n  t=int(input())\r\n  for _ in range(t):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    s=set()\r\n    now=0\r\n    ans='NO'\r\n    for i in range(n):\r\n      if i%2==0:\r\n        now+=a[i]\r\n        now%=mod\r\n      else:\r\n        now-=a[i]\r\n        now%=mod\r\n      if now in s: ans='YES'; break\r\n      s.add(now)\r\n    if 0 in s: ans='YES'\r\n    print(ans)\r\n\r\ndef random_input():\r\n  from random import randint,shuffle\r\n  N=randint(1,10)\r\n  M=randint(1,N)\r\n  A=list(range(1,M+1))+[randint(1,M) for _ in range(N-M)]\r\n  shuffle(A)\r\n  return (\" \".join(map(str, [N,M]))+\"\\n\"+\" \".join(map(str, A))+\"\\n\")*3\r\n\r\ndef simple_solve():\r\n  return []\r\n\r\ndef main(test):\r\n  if test==0:\r\n    solve(0)\r\n  elif test==1:\r\n    sys.stdin = io.StringIO(_INPUT)\r\n    case_no=int(input())\r\n    for _ in range(case_no):\r\n      solve(0)\r\n  else:\r\n    for i in range(1000):\r\n      sys.stdin = io.StringIO(random_input())\r\n      x=solve(1)\r\n      y=simple_solve()\r\n      if x!=y:\r\n        print(i,x,y)\r\n        print(*[line for line in sys.stdin],sep='')\r\n        break\r\n\r\n#0:\u63d0\u51fa\u7528\u30011:\u4e0e\u3048\u3089\u308c\u305f\u30c6\u30b9\u30c8\u7528\u30012:\u30b9\u30c8\u30ec\u30b9\u30c6\u30b9\u30c8\u7528\r\nmain(0)",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "YES\r\nNO\r\nYES\r\nNO\r\n",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nNO\r\n",
            "CheckerComment": "wrong answer expected NO, found YES [1st token]\r\n"
        },
        "errorLine": 27,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239708122",
            "author": "Rahulab107",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1703936160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239704787",
            "author": "Rahulab107",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 1,
            "runTime": 30,
            "memory": 0,
            "submissionTime": 1703935740
        },
        "acceptedCode": "t = int(input()) # Accept the number of test cases\r\n\r\nfor _ in range(t): # Loop through each test case\r\n    a = [int(i) for i in input().split()] # Input the elements for each test case\r\n    d = dict()\r\n\r\n    # Count occurrences of each element\r\n    for i in a:\r\n        if i in d:\r\n            d[i] += 1\r\n        else:\r\n            d[i] = 1\r\n\r\n    # Print elements occurring only once\r\n    for i in d:\r\n        if d[i] == 1:\r\n            print(i)\r\n",
        "rejectedCode": "a = [int(i) for i in input().split()]\r\nd=dict()\r\nfor i in a:\r\n    if i in d:\r\n        d[i]+=1\r\n    else:\r\n        d[i]=1\r\nfor i in d:\r\n    if d[i]==1:\r\n        print(i)",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "10\r\n",
            "expectedOutput": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "CheckerComment": "wrong answer 1st numbers differ - expected: '1', found: '10'\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239658871",
            "author": "s_kalyb",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 109,
            "memory": 21400,
            "submissionTime": 1703931600
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239629782",
            "author": "s_kalyb",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 2,
            "runTime": 358,
            "memory": 9100,
            "submissionTime": 1703930160
        },
        "acceptedCode": "t = int(input())\r\n \r\nfor i in range(t):\r\n    n = int(input())\r\n    arr = list(str(input()))\r\n    v = 'ae'\r\n    c = 'bcd'\r\n    arr.reverse()\r\n \r\n    index = 0\r\n    ans = []\r\n    while True:\r\n        try:\r\n            if arr[index] in c:\r\n                ans.append(arr[index])\r\n                ans.append(arr[index+1])\r\n                ans.append(arr[index+2])\r\n                ans.append(\".\")\r\n                index += 3\r\n            else:\r\n                ans.append(arr[index])\r\n                ans.append(arr[index+1])\r\n                ans.append(\".\")\r\n                index += 2\r\n        except:\r\n            break;  \r\n    ans.pop()\r\n    ans.reverse()\r\n    print(\"\".join(ans))",
        "rejectedCode": "t = int(input())\r\nfor _ in range(t):\r\n    n = int(input())\r\n    s = list(map(int, input().split()))\r\n    ch = []\r\n    nech = []\r\n    for i in range(n):\r\n        if i%2 == 0:\r\n            ch.append(s[i])\r\n        else:\r\n            nech.append(s[i])\r\n    sumc = 0\r\n    sumn = 0\r\n    if n%2 == 0:\r\n        for j in range((n//2)-1):\r\n            sumc+=ch[j]\r\n            sumn+=nech[j]+nech[j+1]\r\n            if sumc-sumn == 0:\r\n                print('YES')\r\n                break\r\n            elif sumc-(sumn-nech[j+1]) == 0:\r\n                print('YES')\r\n                break\r\n            else:\r\n                sumn-=nech[j+1]\r\n        else:\r\n            print('NO')\r\n    elif n%2 == 1:\r\n        for j in range(min(len(ch),len(nech))):\r\n            sumc+=ch[j]+ch[j-1]\r\n            sumn+=nech[j]\r\n            if sumc-sumn == 0:\r\n                print('YES')\r\n                break\r\n            if (sumc-ch[j])-(sumn+nech[j-1]) == 0:\r\n                print('YES')\r\n                break\r\n            else:\r\n                sumc-=ch[j-1]\r\n\r\n        else:\r\n            print('NO')\r\n\r\n",
        "failedTestCase": {
            "input": "10000\r\n2\r\n5 6\r\n5\r\n2 1 7 9 7\r\n2\r\n5 5\r\n6\r\n4 7 6 2 2 8\r\n1\r\n7\r\n3\r\n8 1 9\r\n2\r\n10 8\r\n4\r\n6 10 3 3\r\n1\r\n1\r\n6\r\n5 8 1 10 7 8\r\n6\r\n8 6 5 1 10 2\r\n1\r\n1\r\n3\r\n7 4 1\r\n8\r\n5 4 5 10 1 5 1 2\r\n5\r\n1 2 3 6 2\r\n1\r\n9\r\n7\r\n6 2 2 8 3 5 2\r\n4\r\n10 4 8 4\r\n8\r\n9 10 3 1 1 2 10 7\r\n7\r\n5 7 7 8 10 6 4\r\n3\r\n10 6 1\r\n2\r\n9 3\r\n6\r\n4 2 5 5 9 4\r\n7\r\n9 2 5 10 10 8 9\r\n8\r\n10 7 9 8 1 10 6 3\r\n1\r\n5\r\n5\r\n10 5 8 8 7\r\n7\r\n8 2 10 1 9 8 4\r\n2\r\n3 4\r\n3\r\n6 4 2\r\n8\r\n6 8 3 2 7 10 1 1\r\n1\r\n8\r\n1\r\n10\r\n4\r\n10 2 7 3\r\n4\r\n3 9 10 6\r\n3\r\n7 5 9\r\n4\r\n3 9 1 6\r\n7\r\n7 10 3 7 10 2 4\r\n7\r\n6 5 1 8 9 7...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYE...",
            "expectedOutput": "NO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r...",
            "CheckerComment": "wrong answer expected YES, found NO [3rd token]\r\n"
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239649904",
            "author": "The.Codist",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 140,
            "memory": 17700,
            "submissionTime": 1703931060
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239605258",
            "author": "The.Codist",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 46,
            "memory": 2800,
            "submissionTime": 1703919240
        },
        "acceptedCode": "# Dec30.py\n\nimport itertools\n\ndef _pairwise(iterable):\n        a, b = itertools.tee(iterable)\n        next(b, None)\n        return zip(a, b)\n\nif not hasattr(itertools, \"pairwise\"):\n    setattr(itertools, \"pairwise\", _pairwise)\n\n\ndef syllables(s):\n    output = [s[0]]\n    for a, b in itertools.pairwise(s[1:]):\n        if a in {'b', 'c', 'd'} and b in {'a', 'e'}:\n            output.append(a)\n        else:\n            output[-1] += a\n    return \".\".join(output) + s[-1]\n\ntests = int(input())\n\nfor _ in range(tests):\n    input() # don't need this value\n    sentence = input()\n    result = syllables(sentence)\n    print(result)",
        "rejectedCode": "# Dec30.py\n\nfrom itertools import pairwise\n\ndef syllables(s):\n    output = [s[0]]\n    for a, b in pairwise(s[1:]):\n        if a in {'b', 'c', 'd'} and b in {'a', 'e'}:\n            output.append(a)\n        else:\n            output[-1] += a\n    return \".\".join(output) + s[-1]\n\ntests = int(input())\n\nfor _ in range(tests):\n    input() # don't need this value\n    sentence = input()\n    result = syllables(sentence)\n    print(result)",
        "failedTestCase": {
            "input": "6\r\n8\r\nbacedbab\r\n4\r\nbaba\r\n13\r\ndaddecabeddad\r\n3\r\ndac\r\n6\r\ndacdac\r\n22\r\ndababbabababbabbababba\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 3,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239629311",
            "author": "Himanshu_Kaithal",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 327,
            "memory": 40900,
            "submissionTime": 1703930160
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239623925",
            "author": "Himanshu_Kaithal",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 11,
            "runTime": 1000,
            "memory": 33600,
            "submissionTime": 1703929980
        },
        "acceptedCode": "from math import ceil,gcd,factorial,sqrt,log,log2,pi\r\nimport queue\r\nimport heapq as hq\r\n# from functools import *\r\n# product is used to generater truth tables or multiply list produc([0,1],repeat=n)\r\nfrom itertools import permutations,combinations,accumulate,product\r\nfrom collections import Counter,deque,defaultdict\r\nfrom bisect import bisect, bisect_right,insort,bisect_left,insort_left\r\n# from re import L\r\nfrom sys import stdin,stdout,setrecursionlimit\r\ninput=stdin.readline\r\n# setrecursionlimit(10**7)\r\n# bisect=upper_bound,bisect_left=lower_bound\r\n\r\n# def sieve(n):\r\n#     prime = [True]*(n+1)\r\n#     p = 2\r\n#     prime[0]=False\r\n#     prime[1]=False\r\n#     a=[]\r\n#     for p in range(2,int(n**0.5)+1):\r\n#         if (prime[p] == True):\r\n#             a.extend(p)\r\n#             for l1 in range(p * p, n+1, p):\r\n#                 prime[l1] = False\r\n#     return a\r\n# def segementedsieve(low,high):\r\n#     primes=sieve(int(high**.5))\r\n#     prime = [True] * (high-low + 1)\r\n#     for i in primes:\r\n#         lower = (low//i)*i\r\n#         if lower<low:\r\n#             lower+=i\r\n#         for j in range(lower,high+1,i):\r\n#             if(j!=i):\r\n#                 prime[j-low]=False\r\n#     ans=[]\r\n#     for i in range(low,high+1):\r\n#         if prime[i-low]:\r\n#             ans.extend(i)\r\n#     return ans\r\n# def isprime(n):\r\n#     if(n==2):\r\n#         return True\r\n#     if(n%2==0 or n==1):\r\n#         return False\r\n#     for l1 in range(3,int(n**0.5)+1,2):\r\n#         if(n%l1==0):\r\n#             return False\r\n#     return True\r\n# def binpow(a,b,m):\r\n#     r2=1\r\n#     a=a%m\r\n#     while(b>0):\r\n#         if(b&1):\r\n#             r2=(r2*a)%m\r\n#         a=(a*a)%m\r\n#         b>>=1\r\n#     return r2\r\n# def lcm(a,b):\r\n#     return (a//gcd(a,b))*b\r\n# #gcd(a,b)=ax+by and \r\n# def gcdExtended(a,b): \r\n#     if(b==0):  \r\n#         return a,1,0\r\n#     g,x1,y1=gcdExtended(b,a%b)  \r\n#     x1,y1 = y1,x1-(a//b)*y1 \r\n#     return g,x1,y1\r\n# def binseach(a,l,r,key):\r\n#     while(r-l>1):\r\n#         m=l+(r-l)//2\r\n#         if(a[m]<=key):\r\n#             l=m\r\n#         else:\r\n#             r=m\r\n#     if(a[l]==key):\r\n#         return l\r\n#     if(a[r]==key):\r\n#         return r\r\n#     return -1\r\n# def find(n):\r\n#     if(par[n]==n):\r\n#         return n\r\n#     par[n]=find(par[n])\r\n#     return par[n]\r\n# def union(a,b):\r\n#     a1=find(a)\r\n#     b1=find(b)\r\n#     if(a1!=b1):\r\n#         if(size[a1]>=size[b1]):\r\n#             par[b1]=a1\r\n#             size[a1]+=size[b1]\r\n#         else:\r\n#             size[b1]+=size[a1]\r\n#             par[a1]=b1\r\n        \r\n# def dfs(s,p):\r\n#     v[s]=1\r\n#     path.extend(s)\r\n#     for i in a[s]:\r\n#         if(v[i]==0):\r\n#             if(dfs(i)):\r\n#                 return True\r\n#         elif(i!=p):\r\n#             path.extend(i)\r\n#             return True\r\n#     path.pop()\r\n#     return False\r\n# def bfs(n,x,dest):\r\n#     v=[0]*(1+n)\r\n#     # d=[0]*(1+n)\r\n#     # d[x]=0\r\n#     v[x]=1\r\n#     q=deque([x])\r\n#     p=[0]*(1+n)\r\n#     p[x]=-1\r\n#     while(len(q)):\r\n#         z=q.popleft()\r\n#         for s in gr[z]:\r\n#             if(v[s]==0):\r\n#                 v[s]=1\r\n#                 # d[s]=d[z]+1\r\n#                 q.extend(s)\r\n#                 p[s]=z\r\n#     path=[]\r\n#     if(v[n]==0):\r\n#         return -1\r\n#     l1=dest#given\r\n#     while(l1!=-1):\r\n#        path.extend(l1)\r\n#        l1=p[l1]\r\n#     path.reverse()\r\n#     #?print(d)\r\n#     print(v)\r\n#     return path\r\n\r\n\r\n# def dijkstra(n, s):\r\n#     r=[[0,s]]\r\n#     hq.heapify()\r\n#     d=[10**10]*(n+1)\r\n#     d[s]=0\r\n#     while(len(r)):\r\n#         k=hq.heappop(r)\r\n#         for i in ar[k[1]]:\r\n#             if(k[0]+i[0]<d[i[1]]):\r\n#                 d[i[1]]=k[0]+i[0]\r\n#                 hq.heappush(r,[k[0]+i[0],i[1]])\r\n#     return d\r\n# # #LCA\r\n# # class Solution:\r\n# #     def lca(self,n,a, b):\r\n# #         if(ar[b]==0 or ar[a]==0):\r\n# #             return -1\r\n# #         m=int(log2(n))\r\n# #         lc=[[-1 for j in range(m+1)]for i in range(1+n)]\r\n# #         lvl=Counter()\r\n# #         v=Counter()\r\n# #         def dfs(node,par,l):\r\n# #             lc[node][0]=par\r\n# #             lvl[node]=l\r\n# #             v[node]=1\r\n# #             for i in ar[node]:\r\n# #                 if(v[i]==0):\r\n# #                     dfs(i,node,1+l)\r\n# #         dfs(0,-1,0)\r\n# #         for i in range(1,m+1):\r\n# #             for j in range(1,n+1):\r\n# #                 if(lc[j][i-1]!=-1):\r\n# #                     lc[j][i]=lc[lc[j][i-1]][i-1]\r\n# #         if(lvl[a]>lvl[b]):\r\n# #             a,b=b,a\r\n# #         d=lvl[b]-lvl[a]\r\n# #         while(d>0):\r\n# #             i=int(log2(d))\r\n# #             b=lc[b][i]\r\n# #             d-=(1<<i)\r\n# #         if(a==b):\r\n# #             return a\r\n# #         for i in range(m,-1,-1):\r\n# #             if(lc[a][i]!=-1 and lc[a][i]!=lc[b][i]):\r\n# #                 a=lc[a][i]\r\n# #                 b=lc[b][i]\r\n# #         return lc[a][0]\r\n# # #LCA\r\n# # class Solution:\r\n# #     def lca(self,n,a, b):\r\n# #         if(ar[b]==0 or ar[a]==0):\r\n# #             return -1\r\n# #         m=int(log2(n))\r\n# #         lc=[[-1 for j in range(m+1)]for i in range(1+n)]\r\n# #         lvl=Counter()\r\n# #         v=Counter()\r\n# #         def dfs(node,par,l):\r\n# #             lc[node][0]=par\r\n# #             lvl[node]=l\r\n# #             v[node]=1\r\n# #             for i in ar[node]:\r\n# #                 if(v[i]==0):\r\n# #                     dfs(i,node,1+l)\r\n# #         dfs(0,-1,0)\r\n# #         for i in range(1,m+1):\r\n# #             for j in range(1,n+1):\r\n# #                 if(lc[j][i-1]!=-1):\r\n# #                     lc[j][i]=lc[lc[j][i-1]][i-1]\r\n# #         if(lvl[a]>lvl[b]):\r\n# #             a,b=b,a\r\n# #         d=lvl[b]-lvl[a]\r\n# #         while(d>0):\r\n# #             i=int(log2(d))\r\n# #             b=lc[b][i]\r\n# #             d-=(1<<i)\r\n# #         if(a==b):\r\n# #             return a\r\n# #         for i in range(m,-1,-1):\r\n# #             if(lc[a][i]!=-1 and lc[a][i]!=lc[b][i]):\r\n# #                 a=lc[a][i]\r\n# #                 b=lc[b][i]\r\n# #         return lc[a][0]\r\n\r\n# #SEGMENT TREE\r\n# class Node(object):\r\n#     def __init__(self, start, end):\r\n#         self.start = start\r\n#         self.end = end\r\n#         self.total = 0\r\n#         self.left = None\r\n#         self.right = None\r\n# class NumArray(object):\r\n#     def __init__(self, nums):\r\n#         def createTree(nums, l, r):\r\n#             if l > r:\r\n#                 return None\r\n#             if l == r:\r\n#                 n = Node(l, r)\r\n#                 n.total = nums[l]\r\n#                 return n\r\n#             mid = (l + r) // 2\r\n#             root = Node(l, r)\r\n#             root.left = createTree(nums, l, mid)\r\n#             root.right = createTree(nums, mid + 1, r)\r\n#             root.total = root.left.total + root.right.total\r\n#             return root\r\n#         self.root = createTree(nums, 0, len(nums) - 1)\r\n#     def update(self, i, val):\r\n#         def updateVal(root, i, val):\r\n#             if root.start == root.end:\r\n#                 root.total = val\r\n#                 return val\r\n#             mid = (root.start + root.end) // 2\r\n#             if i <= mid:\r\n#                 updateVal(root.left, i, val)\r\n#             else:\r\n#                 updateVal(root.right, i, val)\r\n#             root.total = root.left.total + root.right.total\r\n#             return root.total\r\n#         return updateVal(self.root, i, val)\r\n#     def sumRange(self, i, j):\r\n#         def rangeSum(root, i, j):\r\n#             if root.start == i and root.end == j:\r\n#                 return root.total\r\n#             mid = (root.start + root.end) // 2\r\n#             if j <= mid:\r\n#                 return rangeSum(root.left, i, j)\r\n#             elif i >= mid + 1:\r\n#                 return rangeSum(root.right, i, j)\r\n#             else:\r\n#                 return rangeSum(root.left, i, mid) + rangeSum(\r\n#                     root.right, mid + 1, j\r\n#                 )\r\n#         return rangeSum(self.root, i, j)\r\n#Sort 0th elmnt in decreasing and 1st elment in ascending\r\n# a=[[1,2],[1,3],[2,4],[2,1]]\r\n# a.sort(key=lambda k: (k[0], -k[1]), reverse=True)\r\n# CVC\r\n# CV\r\nimport random\r\n# cvccv\r\n# cvcvc\r\n# cvcvcv\r\nclass HashMap():\r\n    def __init__(self, arg, strings=False):\r\n        self.strings = strings\r\n        self.magic = random.randrange(10**10)\r\n        if callable(arg):\r\n            # default factory\r\n            self.dict = defaultdict(arg)\r\n        else:\r\n            # construct from list, Counter\r\n            self.dict = defaultdict(int)\r\n            for key in arg:\r\n                self[key] += 1\r\n \r\n    def __getitem__(self, key):\r\n        return self.dict[key ^ self.magic]\r\n \r\n    def __setitem__(self, key, val):\r\n        self.dict[key ^ self.magic] = val\r\n \r\n    def __contains__(self, key):\r\n        return (key ^ self.magic) in self.dict\r\n \r\n    def remove(self, key):\r\n        del self.dict[key ^ self.magic]\r\n \r\n    def items(self):\r\n        for key, val in self.dict.items():\r\n            yield (key ^ self.magic, val)\r\n \r\n    def keys(self):\r\n        for key in self.dict.keys():\r\n            yield key ^ self.magic\r\n \r\n    def values(self):\r\n        return self.dict.values()\r\n \r\n    def __iter__(self):\r\n        for key in self.dict:\r\n            yield key ^ self.magic\r\n \r\n    def __len__(self):\r\n        return len(self.dict)\r\n \r\n    def __str__(self):\r\n        s = '{'\r\n        for key, val in self.items():\r\n            s += f'{key}:{val}, '\r\n        s += '}'\r\n        return s\r\n# from sys import stdin,stdout\r\n# from collections import Counter\r\nfrom sys import stdin,stdout\r\nfrom collections import Counter\r\ninput=stdin.readline\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    if(n==1):\r\n        print(\"NO\")\r\n        continue\r\n    for i in range(n):\r\n        if(i&1):\r\n            a[i]=-a[i]\r\n            \r\n    c=HashMap(int)\r\n    s=0\r\n    z=0\r\n    for i in range(len(a)):\r\n        s+=a[i]\r\n        c[s]+=1\r\n        if(c[s]>1 or s==0):\r\n            z=1\r\n            break\r\n    if(z):\r\n        print(\"YES\")\r\n        continue\r\n    for i in range(n):\r\n        a[i]=-a[i]\r\n    c=HashMap(int)\r\n    s=0\r\n    z=0\r\n    for i in range(n):\r\n        s+=a[i]\r\n        c[s]+=1\r\n        if(c[s]>1 or s==0):\r\n            z=1\r\n            break\r\n    if(z):\r\n        print(\"YES\")\r\n        continue\r\n    print(\"NO\")\r\n",
        "rejectedCode": "from math import ceil,gcd,factorial,sqrt,log,log2,pi\r\nimport queue\r\nimport heapq as hq\r\n# from functools import *\r\n# product is used to generater truth tables or multiply list produc([0,1],repeat=n)\r\nfrom itertools import permutations,combinations,accumulate,product\r\nfrom collections import Counter,deque\r\nfrom bisect import bisect, bisect_right,insort,bisect_left,insort_left\r\n# from re import L\r\nfrom sys import stdin,stdout,setrecursionlimit\r\ninput=stdin.readline\r\n# setrecursionlimit(10**7)\r\n# bisect=upper_bound,bisect_left=lower_bound\r\n\r\n# def sieve(n):\r\n#     prime = [True]*(n+1)\r\n#     p = 2\r\n#     prime[0]=False\r\n#     prime[1]=False\r\n#     a=[]\r\n#     for p in range(2,int(n**0.5)+1):\r\n#         if (prime[p] == True):\r\n#             a.extend(p)\r\n#             for l1 in range(p * p, n+1, p):\r\n#                 prime[l1] = False\r\n#     return a\r\n# def segementedsieve(low,high):\r\n#     primes=sieve(int(high**.5))\r\n#     prime = [True] * (high-low + 1)\r\n#     for i in primes:\r\n#         lower = (low//i)*i\r\n#         if lower<low:\r\n#             lower+=i\r\n#         for j in range(lower,high+1,i):\r\n#             if(j!=i):\r\n#                 prime[j-low]=False\r\n#     ans=[]\r\n#     for i in range(low,high+1):\r\n#         if prime[i-low]:\r\n#             ans.extend(i)\r\n#     return ans\r\n# def isprime(n):\r\n#     if(n==2):\r\n#         return True\r\n#     if(n%2==0 or n==1):\r\n#         return False\r\n#     for l1 in range(3,int(n**0.5)+1,2):\r\n#         if(n%l1==0):\r\n#             return False\r\n#     return True\r\n# def binpow(a,b,m):\r\n#     r2=1\r\n#     a=a%m\r\n#     while(b>0):\r\n#         if(b&1):\r\n#             r2=(r2*a)%m\r\n#         a=(a*a)%m\r\n#         b>>=1\r\n#     return r2\r\n# def lcm(a,b):\r\n#     return (a//gcd(a,b))*b\r\n# #gcd(a,b)=ax+by and \r\n# def gcdExtended(a,b): \r\n#     if(b==0):  \r\n#         return a,1,0\r\n#     g,x1,y1=gcdExtended(b,a%b)  \r\n#     x1,y1 = y1,x1-(a//b)*y1 \r\n#     return g,x1,y1\r\n# def binseach(a,l,r,key):\r\n#     while(r-l>1):\r\n#         m=l+(r-l)//2\r\n#         if(a[m]<=key):\r\n#             l=m\r\n#         else:\r\n#             r=m\r\n#     if(a[l]==key):\r\n#         return l\r\n#     if(a[r]==key):\r\n#         return r\r\n#     return -1\r\n# def find(n):\r\n#     if(par[n]==n):\r\n#         return n\r\n#     par[n]=find(par[n])\r\n#     return par[n]\r\n# def union(a,b):\r\n#     a1=find(a)\r\n#     b1=find(b)\r\n#     if(a1!=b1):\r\n#         if(size[a1]>=size[b1]):\r\n#             par[b1]=a1\r\n#             size[a1]+=size[b1]\r\n#         else:\r\n#             size[b1]+=size[a1]\r\n#             par[a1]=b1\r\n        \r\n# def dfs(s,p):\r\n#     v[s]=1\r\n#     path.extend(s)\r\n#     for i in a[s]:\r\n#         if(v[i]==0):\r\n#             if(dfs(i)):\r\n#                 return True\r\n#         elif(i!=p):\r\n#             path.extend(i)\r\n#             return True\r\n#     path.pop()\r\n#     return False\r\n# def bfs(n,x,dest):\r\n#     v=[0]*(1+n)\r\n#     # d=[0]*(1+n)\r\n#     # d[x]=0\r\n#     v[x]=1\r\n#     q=deque([x])\r\n#     p=[0]*(1+n)\r\n#     p[x]=-1\r\n#     while(len(q)):\r\n#         z=q.popleft()\r\n#         for s in gr[z]:\r\n#             if(v[s]==0):\r\n#                 v[s]=1\r\n#                 # d[s]=d[z]+1\r\n#                 q.extend(s)\r\n#                 p[s]=z\r\n#     path=[]\r\n#     if(v[n]==0):\r\n#         return -1\r\n#     l1=dest#given\r\n#     while(l1!=-1):\r\n#        path.extend(l1)\r\n#        l1=p[l1]\r\n#     path.reverse()\r\n#     #?print(d)\r\n#     print(v)\r\n#     return path\r\n\r\n\r\n# def dijkstra(n, s):\r\n#     r=[[0,s]]\r\n#     hq.heapify()\r\n#     d=[10**10]*(n+1)\r\n#     d[s]=0\r\n#     while(len(r)):\r\n#         k=hq.heappop(r)\r\n#         for i in ar[k[1]]:\r\n#             if(k[0]+i[0]<d[i[1]]):\r\n#                 d[i[1]]=k[0]+i[0]\r\n#                 hq.heappush(r,[k[0]+i[0],i[1]])\r\n#     return d\r\n# # #LCA\r\n# # class Solution:\r\n# #     def lca(self,n,a, b):\r\n# #         if(ar[b]==0 or ar[a]==0):\r\n# #             return -1\r\n# #         m=int(log2(n))\r\n# #         lc=[[-1 for j in range(m+1)]for i in range(1+n)]\r\n# #         lvl=Counter()\r\n# #         v=Counter()\r\n# #         def dfs(node,par,l):\r\n# #             lc[node][0]=par\r\n# #             lvl[node]=l\r\n# #             v[node]=1\r\n# #             for i in ar[node]:\r\n# #                 if(v[i]==0):\r\n# #                     dfs(i,node,1+l)\r\n# #         dfs(0,-1,0)\r\n# #         for i in range(1,m+1):\r\n# #             for j in range(1,n+1):\r\n# #                 if(lc[j][i-1]!=-1):\r\n# #                     lc[j][i]=lc[lc[j][i-1]][i-1]\r\n# #         if(lvl[a]>lvl[b]):\r\n# #             a,b=b,a\r\n# #         d=lvl[b]-lvl[a]\r\n# #         while(d>0):\r\n# #             i=int(log2(d))\r\n# #             b=lc[b][i]\r\n# #             d-=(1<<i)\r\n# #         if(a==b):\r\n# #             return a\r\n# #         for i in range(m,-1,-1):\r\n# #             if(lc[a][i]!=-1 and lc[a][i]!=lc[b][i]):\r\n# #                 a=lc[a][i]\r\n# #                 b=lc[b][i]\r\n# #         return lc[a][0]\r\n# # #LCA\r\n# # class Solution:\r\n# #     def lca(self,n,a, b):\r\n# #         if(ar[b]==0 or ar[a]==0):\r\n# #             return -1\r\n# #         m=int(log2(n))\r\n# #         lc=[[-1 for j in range(m+1)]for i in range(1+n)]\r\n# #         lvl=Counter()\r\n# #         v=Counter()\r\n# #         def dfs(node,par,l):\r\n# #             lc[node][0]=par\r\n# #             lvl[node]=l\r\n# #             v[node]=1\r\n# #             for i in ar[node]:\r\n# #                 if(v[i]==0):\r\n# #                     dfs(i,node,1+l)\r\n# #         dfs(0,-1,0)\r\n# #         for i in range(1,m+1):\r\n# #             for j in range(1,n+1):\r\n# #                 if(lc[j][i-1]!=-1):\r\n# #                     lc[j][i]=lc[lc[j][i-1]][i-1]\r\n# #         if(lvl[a]>lvl[b]):\r\n# #             a,b=b,a\r\n# #         d=lvl[b]-lvl[a]\r\n# #         while(d>0):\r\n# #             i=int(log2(d))\r\n# #             b=lc[b][i]\r\n# #             d-=(1<<i)\r\n# #         if(a==b):\r\n# #             return a\r\n# #         for i in range(m,-1,-1):\r\n# #             if(lc[a][i]!=-1 and lc[a][i]!=lc[b][i]):\r\n# #                 a=lc[a][i]\r\n# #                 b=lc[b][i]\r\n# #         return lc[a][0]\r\n\r\n# #SEGMENT TREE\r\n# class Node(object):\r\n#     def __init__(self, start, end):\r\n#         self.start = start\r\n#         self.end = end\r\n#         self.total = 0\r\n#         self.left = None\r\n#         self.right = None\r\n# class NumArray(object):\r\n#     def __init__(self, nums):\r\n#         def createTree(nums, l, r):\r\n#             if l > r:\r\n#                 return None\r\n#             if l == r:\r\n#                 n = Node(l, r)\r\n#                 n.total = nums[l]\r\n#                 return n\r\n#             mid = (l + r) // 2\r\n#             root = Node(l, r)\r\n#             root.left = createTree(nums, l, mid)\r\n#             root.right = createTree(nums, mid + 1, r)\r\n#             root.total = root.left.total + root.right.total\r\n#             return root\r\n#         self.root = createTree(nums, 0, len(nums) - 1)\r\n#     def update(self, i, val):\r\n#         def updateVal(root, i, val):\r\n#             if root.start == root.end:\r\n#                 root.total = val\r\n#                 return val\r\n#             mid = (root.start + root.end) // 2\r\n#             if i <= mid:\r\n#                 updateVal(root.left, i, val)\r\n#             else:\r\n#                 updateVal(root.right, i, val)\r\n#             root.total = root.left.total + root.right.total\r\n#             return root.total\r\n#         return updateVal(self.root, i, val)\r\n#     def sumRange(self, i, j):\r\n#         def rangeSum(root, i, j):\r\n#             if root.start == i and root.end == j:\r\n#                 return root.total\r\n#             mid = (root.start + root.end) // 2\r\n#             if j <= mid:\r\n#                 return rangeSum(root.left, i, j)\r\n#             elif i >= mid + 1:\r\n#                 return rangeSum(root.right, i, j)\r\n#             else:\r\n#                 return rangeSum(root.left, i, mid) + rangeSum(\r\n#                     root.right, mid + 1, j\r\n#                 )\r\n#         return rangeSum(self.root, i, j)\r\n#Sort 0th elmnt in decreasing and 1st elment in ascending\r\n# a=[[1,2],[1,3],[2,4],[2,1]]\r\n# a.sort(key=lambda k: (k[0], -k[1]), reverse=True)\r\n# CVC\r\n# CV\r\n\r\n# cvccv\r\n# cvcvc\r\n# cvcvcv\r\nfrom sys import stdin,stdout\r\nfrom collections import Counter\r\ninput=stdin.readline\r\nfor _ in range(int(input())):\r\n    n=int(input())\r\n    a=list(map(int,input().split()))\r\n    if(n==1):\r\n        print(\"NO\")\r\n        continue\r\n    for i in range(n):\r\n        if(i&1):\r\n            a[i]=-a[i]\r\n    c=set()\r\n    s=0\r\n    z=0\r\n    for i in range(len(a)):\r\n        s+=a[i]\r\n        if(s in c or s==0):\r\n            z=1\r\n            break\r\n        c.add(s)\r\n        \r\n    if(z):\r\n        print(\"YES\")\r\n        continue\r\n    for i in range(n):\r\n        a[i]=-a[i]\r\n    c=set()\r\n    s=0\r\n    z=0\r\n    for i in range(len(a)):\r\n        s+=a[i]\r\n        if(s in c or s==0):\r\n            z=1\r\n            break\r\n        c.add(s)\r\n    if(z):\r\n        print(\"YES\")\r\n        continue\r\n    print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "1\r\n200000\r\n3 2 6 2 8 3 15 9 18 8 19 5 9 2 6 2 15 8 20 6 10 1 11 8 18 3 24 19 22 1 10 4 11 4 21 10 24 2 18 4 16 6 14 2 5 2 20 4 11 1 10 6 14 5 9 2 8 5 21 14 19 1 14 7 39 31 36 4 7 1 5 2 19 15 18 1 21 14 23 4 19 1 6 3 13 2 4 1 5 3 11 1 25 12 15 1 7 5 27 7 16 3 15 2 12 9 35 3 23 8 25 14 20 3 12 2 21 2 12 2 4 1 3 1 4 1 15 7 13 2 5 2 18 15 20 3 19 4 13 7 11 1 11 7 11 2 26 3 21 10 42 6 9 1 17 2 11 1 19 10 15 3 12 4 26 12 18 4 38 3 17 6 19 11 25 13 21 7 16 7 19 11 28 11 21 9 30 6 9 1 8 4 15 6 31 21 24 2 19 5 27 9...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 7,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239614575",
            "author": "ArafHasan",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 234,
            "memory": 28100,
            "submissionTime": 1703924700
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "E - Romantic Glasses",
            "submissionID": "239611528",
            "author": "ArafHasan",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Time",
            "errorCaseNo": 3,
            "runTime": 1000,
            "memory": 15600,
            "submissionTime": 1703923020
        },
        "acceptedCode": "\r\n\r\nfor i in range(int(input())):\r\n    p_sum = set([0]) # use a set instead of a list\r\n    result = False\r\n    n = int(input())\r\n    lst = list(map(int , input().split()))\r\n    cur_sum = 0 # keep track of the current sum\r\n    for i in range(len(lst)):\r\n        if not i % 2 == 0:\r\n           lst[i] *= -1\r\n        cur_sum += lst[i] # update the current sum\r\n        if cur_sum not in p_sum: # check if the current sum is in the set\r\n              p_sum.add(cur_sum) # add the current sum to the set\r\n        else:\r\n           result = True\r\n           break\r\n    if result:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "rejectedCode": "for i in range(int(input())):\r\n    p_sum = [0]\r\n    result = False\r\n    n = int(input())\r\n    lst = list(map(int , input().split()))\r\n    for i in range(len(lst)):\r\n        if not i % 2 == 0:\r\n           lst[i] *= -1\r\n\r\n        if lst[i] + p_sum[-1] not in p_sum:\r\n              p_sum.append(lst[i] + p_sum[-1]) \r\n        else:\r\n           result = True\r\n           break\r\n\r\n    if result:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "4\r\n113228\r\n460975054 936868871 320028080 313712583 636871973 606086857 79260437 33141641 546232769 467619784 374345460 171317224 853438840 82541946 751434699 162312981 291273235 639097193 166814030 831502739 49933261 146501297 621641442 396727993 358350808 946878598 732055587 160396083 429761752 266192044 510876510 732916609 318607206 223881213 40665624 233720951 970752142 578499815 580656005 57677756 672860753 623632875 569802513 719607371 836950564 61658143 691963099 911826676 881271151 984778157 7301770...",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": ""
        },
        "errorLine": 2,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239620048",
            "author": "papdichaat",
            "lang": "PyPy 3-64",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 124,
            "memory": 22600,
            "submissionTime": 1703928000
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239617476",
            "author": "papdichaat",
            "lang": "PyPy 3-64",
            "isAccepted": false,
            "errorType": "Answer",
            "errorCaseNo": 3,
            "runTime": 358,
            "memory": 9400,
            "submissionTime": 1703926620
        },
        "acceptedCode": "for _ in range(int(input())):\r\n    x = int(input())\r\n    l = list(input())\r\n    V = ['a','e']\r\n    C = ['b','c','d']\r\n    answer = []\r\n    i = x - 1\r\n    while i >= 0:\r\n        if l[i] in C:\r\n            answer.append(l[i])\r\n            answer.append(l[i-1])\r\n            answer.append(l[i-2])\r\n            answer.append('.')\r\n            i-=3\r\n        else:\r\n            answer.append(l[i])\r\n            answer.append(l[i - 1])\r\n            answer.append('.')\r\n            i-=2\r\n    answer.reverse()\r\n    new = ''.join(answer)\r\n    print(new[1:])",
        "rejectedCode": "def perfect_square(x):\r\n    l = 1\r\n    u = 100000\r\n    while l<=u:\r\n        mid = l + (u-l)//2\r\n        if mid**2 > x:\r\n            u = mid-1\r\n        elif mid**2 < x:\r\n            l = mid + 1\r\n        elif mid**2 == x:\r\n            return 1\r\n    return 0\r\n\r\nfor _ in range(int(input())):\r\n    x = int(input())\r\n    l = list(map(int,input().split()))\r\n    a = sum(l)\r\n    if perfect_square(a):\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")",
        "failedTestCase": {
            "input": "50\r\n4357\r\n17784254 299683852 139062553 11272599 367943339 29588402 1711198 106764331 2951854 16055780 173763010 4769982 128568802 41683021 36457034 215748324 156861382 112669086 45143474 133051082 199445135 85521140 39695514 333223198 120574438 120349332 10915381 60910474 137612992 1573273 134051089 22057162 257834395 57348483 162678780 87422565 76648229 60756360 10422864 121092505 34225369 95541161 85403066 18911618 36807331 177522386 68037839 68031985 238605184 69019078 73336969 415511377 31215468 549745...",
            "output": "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n",
            "expectedOutput": "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\n",
            "CheckerComment": "wrong answer expected YES, found NO [1st token]\r\n"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "D - Unnatural Language Processing",
            "submissionID": "239619069",
            "author": "OmarHashy",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 62,
            "memory": 6600,
            "submissionTime": 1703927460
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "C - Can I Square?",
            "submissionID": "239617431",
            "author": "OmarHashy",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 15,
            "memory": 0,
            "submissionTime": 1703926560
        },
        "acceptedCode": "def solve():\r\n    input()\r\n    s = list(input())\r\n    V = [\"a\", \"e\"]\r\n\r\n    re = []\r\n\r\n    tem = \"\"\r\n\r\n    while s:\r\n        tem = s.pop()\r\n\r\n        if tem in V:\r\n            tem = s.pop() + tem\r\n        else:\r\n            tem = s.pop() + tem\r\n            tem = s.pop() + tem\r\n\r\n        re.append(tem)\r\n\r\n    print(\".\".join(list(reversed(re))))\r\n\r\n\r\n# t = input()\r\nfor _ in range(int(input())):\r\n    solve()\r\n",
        "rejectedCode": "for _ in range(int(input())):\r\n    input()\r\n    re = math.sqrt(sum(map(int, input().split())))\r\n    if re - int(re) == 0:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n",
        "failedTestCase": {
            "input": "5\r\n1\r\n9\r\n2\r\n14 2\r\n7\r\n1 2 3 4 5 6 7\r\n6\r\n1 3 5 7 9 11\r\n4\r\n2 2 2 2\r\n",
            "output": "",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    },
    {
        "acceptedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239615603",
            "author": "Sambath_S",
            "lang": "Python 3",
            "isAccepted": true,
            "errorType": "",
            "errorCaseNo": 0,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1703925300
        },
        "rejectedSubmission": {
            "contestID": "1915",
            "problem": "A - Odd One Out",
            "submissionID": "239614448",
            "author": "Sambath_S",
            "lang": "Python 3",
            "isAccepted": false,
            "errorType": "Runtime",
            "errorCaseNo": 1,
            "runTime": 31,
            "memory": 0,
            "submissionTime": 1703924580
        },
        "acceptedCode": "import sys\r\nt=int(sys.stdin.readline())\r\nwhile t!=0:\r\n  str=sys.stdin.readline()\r\n  str=str.split(\" \")\r\n  a,b,c=int(str[0]),int(str[1]),int(str[2])\r\n  if b==c:\r\n    print(a)\r\n  elif a==b:\r\n    print(c)\r\n  else:\r\n    print(b)\r\n  t-=1\r\n",
        "rejectedCode": "t=int(input())\nwhile t!=0:\n  str=input()\n  str=str.split(\" \")\n  a,b,c=int(str[0]),int(str[1]),int(str[2])\n  if b==c:\n    print(a)\n  elif a==b:\n    print(c)\n  elif a==c:\n    print(b)\n",
        "failedTestCase": {
            "input": "10\r\n1 2 2\r\n4 3 4\r\n5 5 6\r\n7 8 8\r\n9 0 9\r\n3 6 3\r\n2 8 2\r\n5 7 7\r\n7 7 5\r\n5 7 5\r\n",
            "output": "1\r\n3\r\n6\r\n7\r\n0\r\n6\r\n8\r\n5\r\n5\r\n7\r\n",
            "expectedOutput": "",
            "CheckerComment": "Exit code is 1"
        },
        "errorLine": 1,
        "bugType": ""
    }
]